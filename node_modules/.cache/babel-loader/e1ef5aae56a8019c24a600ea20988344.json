{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertKeyTypes = exports.requireKeys = void 0;\n\nconst error_1 = require(\"../../../../error\");\n\nfunction requireKeys(prefix, yaml, ...keys) {\n  if (prefix) {\n    prefix = prefix + \".\";\n  }\n\n  for (const key of keys) {\n    if (!yaml[key]) {\n      throw new error_1.FirebaseError(`Expected key ${prefix + key}`);\n    }\n  }\n}\n\nexports.requireKeys = requireKeys;\n\nfunction assertKeyTypes(prefix, yaml, schema) {\n  if (!yaml) {\n    return;\n  }\n\n  for (const [keyAsString, value] of Object.entries(yaml)) {\n    const key = keyAsString;\n    const fullKey = prefix ? prefix + \".\" + key : key;\n\n    if (!schema[key] || schema[key] === \"omit\") {\n      throw new error_1.FirebaseError(`Unexpected key ${fullKey}. You may need to install a newer version of the Firebase CLI`);\n    }\n\n    if (schema[key] === \"string\") {\n      if (typeof value !== \"string\") {\n        throw new error_1.FirebaseError(`Expected ${fullKey} to be string; was ${typeof value}`);\n      }\n    } else if (schema[key] === \"number\") {\n      if (typeof value !== \"number\") {\n        throw new error_1.FirebaseError(`Expected ${fullKey} to be a number; was ${typeof value}`);\n      }\n    } else if (schema[key] === \"boolean\") {\n      if (typeof value !== \"boolean\") {\n        throw new error_1.FirebaseError(`Expected ${fullKey} to be a boolean; was ${typeof value}`);\n      }\n    } else if (schema[key] === \"array\") {\n      if (!Array.isArray(value)) {\n        throw new error_1.FirebaseError(`Expected ${fullKey} to be an array; was ${typeof value}`);\n      }\n    } else if (schema[key] === \"object\") {\n      if (value === null || typeof value !== \"object\" || Array.isArray(value)) {\n        throw new error_1.FirebaseError(`Expected ${fullKey} to be an object; was ${typeof value}`);\n      }\n    } else {\n      throw new error_1.FirebaseError(\"YAML validation is missing a handled type \" + schema[key]);\n    }\n  }\n}\n\nexports.assertKeyTypes = assertKeyTypes;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/runtimes/discovery/parsing.js"],"names":["Object","defineProperty","exports","value","assertKeyTypes","requireKeys","error_1","require","prefix","yaml","keys","key","FirebaseError","schema","keyAsString","entries","fullKey","Array","isArray"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertKeyTypes = exports.requireKeys = void 0;\nconst error_1 = require(\"../../../../error\");\nfunction requireKeys(prefix, yaml, ...keys) {\n    if (prefix) {\n        prefix = prefix + \".\";\n    }\n    for (const key of keys) {\n        if (!yaml[key]) {\n            throw new error_1.FirebaseError(`Expected key ${prefix + key}`);\n        }\n    }\n}\nexports.requireKeys = requireKeys;\nfunction assertKeyTypes(prefix, yaml, schema) {\n    if (!yaml) {\n        return;\n    }\n    for (const [keyAsString, value] of Object.entries(yaml)) {\n        const key = keyAsString;\n        const fullKey = prefix ? prefix + \".\" + key : key;\n        if (!schema[key] || schema[key] === \"omit\") {\n            throw new error_1.FirebaseError(`Unexpected key ${fullKey}. You may need to install a newer version of the Firebase CLI`);\n        }\n        if (schema[key] === \"string\") {\n            if (typeof value !== \"string\") {\n                throw new error_1.FirebaseError(`Expected ${fullKey} to be string; was ${typeof value}`);\n            }\n        }\n        else if (schema[key] === \"number\") {\n            if (typeof value !== \"number\") {\n                throw new error_1.FirebaseError(`Expected ${fullKey} to be a number; was ${typeof value}`);\n            }\n        }\n        else if (schema[key] === \"boolean\") {\n            if (typeof value !== \"boolean\") {\n                throw new error_1.FirebaseError(`Expected ${fullKey} to be a boolean; was ${typeof value}`);\n            }\n        }\n        else if (schema[key] === \"array\") {\n            if (!Array.isArray(value)) {\n                throw new error_1.FirebaseError(`Expected ${fullKey} to be an array; was ${typeof value}`);\n            }\n        }\n        else if (schema[key] === \"object\") {\n            if (value === null || typeof value !== \"object\" || Array.isArray(value)) {\n                throw new error_1.FirebaseError(`Expected ${fullKey} to be an object; was ${typeof value}`);\n            }\n        }\n        else {\n            throw new error_1.FirebaseError(\"YAML validation is missing a handled type \" + schema[key]);\n        }\n    }\n}\nexports.assertKeyTypes = assertKeyTypes;\n"]},"metadata":{},"sourceType":"script"}