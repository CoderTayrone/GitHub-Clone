{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.INVALID_PATH_ERROR = exports.HELP_TEXT = exports.DATABASE_SETTINGS = void 0;\nconst defaultWriteSizeLimit = {\n  path: \"defaultWriteSizeLimit\",\n  description: `\n      Set a limit for the size of each write request: small, medium, large or unlimited.\n      If you choose 'unlimited', any and all write requests will be allowed, potentially\n      blocking subsequent write requests while the database processes any large write\n      requests. For example, deleting data at the database's root\n      can't be reverted and the database will be unavailable until the delete is finished.\n      To avoid blocking large write requests without running the risk of hanging your\n      database, you can set this limit to small (target=10s), medium (target=30s), large (target=60s).\n      Realtime Database estimates the size of each write request and aborts\n      requests that will take longer than the target time.\n  `,\n  parseInput: input => {\n    switch (input) {\n      case \"small\":\n      case \"medium\":\n      case \"large\":\n      case \"unlimited\":\n        return input;\n\n      default:\n        return undefined;\n    }\n  },\n  parseInputErrorMessge: \"defaultWriteSizeLimit must be either small, medium, large or unlimited. (tiny is not allowed)\"\n};\nconst strictTriggerValidation = {\n  path: \"strictTriggerValidation\",\n  description: `\n      Strict validation is enabled by default for write operations that trigger\n      events. Any write operations that trigger more than 1000 Cloud Functions or a\n      single event greater than 1 MB in size will fail and return an error reporting\n      the limit that was hit. This might mean that some Cloud Functions aren't\n      triggered at all if they fail the pre-validation.\n\n      If you're performing a larger write operation (for example, deleting your\n      entire database), you might want to disable this validation, as the errors\n      themselves might block the operation.\n  `,\n  parseInput: input => {\n    switch (input) {\n      case \"true\":\n        return true;\n\n      case \"false\":\n        return false;\n\n      default:\n        return undefined;\n    }\n  },\n  parseInputErrorMessge: \"strictTriggerValidation must be 'true' or 'false'\"\n};\nexports.DATABASE_SETTINGS = new Map();\nexports.DATABASE_SETTINGS.set(defaultWriteSizeLimit.path, defaultWriteSizeLimit);\nexports.DATABASE_SETTINGS.set(strictTriggerValidation.path, strictTriggerValidation);\nexports.HELP_TEXT = \"\\nAvailable Settings:\\n\" + Array.from(exports.DATABASE_SETTINGS.values()).map(setting => `  ${setting.path}:${setting.description}`).join(\"\");\nexports.INVALID_PATH_ERROR = `Path must be one of ${Array.from(exports.DATABASE_SETTINGS.keys()).join(\", \")}.`;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/database/settings.js"],"names":["Object","defineProperty","exports","value","INVALID_PATH_ERROR","HELP_TEXT","DATABASE_SETTINGS","defaultWriteSizeLimit","path","description","parseInput","input","undefined","parseInputErrorMessge","strictTriggerValidation","Map","set","Array","from","values","map","setting","join","keys"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,iBAAR,GAA4B,KAAK,CAAlF;AACA,MAAMC,qBAAqB,GAAG;AAC1BC,EAAAA,IAAI,EAAE,uBADoB;AAE1BC,EAAAA,WAAW,EAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZ8B;AAa1BC,EAAAA,UAAU,EAAGC,KAAD,IAAW;AACnB,YAAQA,KAAR;AACI,WAAK,OAAL;AACA,WAAK,QAAL;AACA,WAAK,OAAL;AACA,WAAK,WAAL;AACI,eAAOA,KAAP;;AACJ;AACI,eAAOC,SAAP;AAPR;AASH,GAvByB;AAwB1BC,EAAAA,qBAAqB,EAAE;AAxBG,CAA9B;AA0BA,MAAMC,uBAAuB,GAAG;AAC5BN,EAAAA,IAAI,EAAE,yBADsB;AAE5BC,EAAAA,WAAW,EAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZgC;AAa5BC,EAAAA,UAAU,EAAGC,KAAD,IAAW;AACnB,YAAQA,KAAR;AACI,WAAK,MAAL;AACI,eAAO,IAAP;;AACJ,WAAK,OAAL;AACI,eAAO,KAAP;;AACJ;AACI,eAAOC,SAAP;AANR;AAQH,GAtB2B;AAuB5BC,EAAAA,qBAAqB,EAAE;AAvBK,CAAhC;AAyBAX,OAAO,CAACI,iBAAR,GAA4B,IAAIS,GAAJ,EAA5B;AACAb,OAAO,CAACI,iBAAR,CAA0BU,GAA1B,CAA8BT,qBAAqB,CAACC,IAApD,EAA0DD,qBAA1D;AACAL,OAAO,CAACI,iBAAR,CAA0BU,GAA1B,CAA8BF,uBAAuB,CAACN,IAAtD,EAA4DM,uBAA5D;AACAZ,OAAO,CAACG,SAAR,GAAoB,4BAChBY,KAAK,CAACC,IAAN,CAAWhB,OAAO,CAACI,iBAAR,CAA0Ba,MAA1B,EAAX,EACKC,GADL,CACUC,OAAD,IAAc,KAAIA,OAAO,CAACb,IAAK,IAAGa,OAAO,CAACZ,WAAY,EAD/D,EAEKa,IAFL,CAEU,EAFV,CADJ;AAIApB,OAAO,CAACE,kBAAR,GAA8B,uBAAsBa,KAAK,CAACC,IAAN,CAAWhB,OAAO,CAACI,iBAAR,CAA0BiB,IAA1B,EAAX,EAA6CD,IAA7C,CAAkD,IAAlD,CAAwD,GAA5G","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.INVALID_PATH_ERROR = exports.HELP_TEXT = exports.DATABASE_SETTINGS = void 0;\nconst defaultWriteSizeLimit = {\n    path: \"defaultWriteSizeLimit\",\n    description: `\n      Set a limit for the size of each write request: small, medium, large or unlimited.\n      If you choose 'unlimited', any and all write requests will be allowed, potentially\n      blocking subsequent write requests while the database processes any large write\n      requests. For example, deleting data at the database's root\n      can't be reverted and the database will be unavailable until the delete is finished.\n      To avoid blocking large write requests without running the risk of hanging your\n      database, you can set this limit to small (target=10s), medium (target=30s), large (target=60s).\n      Realtime Database estimates the size of each write request and aborts\n      requests that will take longer than the target time.\n  `,\n    parseInput: (input) => {\n        switch (input) {\n            case \"small\":\n            case \"medium\":\n            case \"large\":\n            case \"unlimited\":\n                return input;\n            default:\n                return undefined;\n        }\n    },\n    parseInputErrorMessge: \"defaultWriteSizeLimit must be either small, medium, large or unlimited. (tiny is not allowed)\",\n};\nconst strictTriggerValidation = {\n    path: \"strictTriggerValidation\",\n    description: `\n      Strict validation is enabled by default for write operations that trigger\n      events. Any write operations that trigger more than 1000 Cloud Functions or a\n      single event greater than 1 MB in size will fail and return an error reporting\n      the limit that was hit. This might mean that some Cloud Functions aren't\n      triggered at all if they fail the pre-validation.\n\n      If you're performing a larger write operation (for example, deleting your\n      entire database), you might want to disable this validation, as the errors\n      themselves might block the operation.\n  `,\n    parseInput: (input) => {\n        switch (input) {\n            case \"true\":\n                return true;\n            case \"false\":\n                return false;\n            default:\n                return undefined;\n        }\n    },\n    parseInputErrorMessge: \"strictTriggerValidation must be 'true' or 'false'\",\n};\nexports.DATABASE_SETTINGS = new Map();\nexports.DATABASE_SETTINGS.set(defaultWriteSizeLimit.path, defaultWriteSizeLimit);\nexports.DATABASE_SETTINGS.set(strictTriggerValidation.path, strictTriggerValidation);\nexports.HELP_TEXT = \"\\nAvailable Settings:\\n\" +\n    Array.from(exports.DATABASE_SETTINGS.values())\n        .map((setting) => `  ${setting.path}:${setting.description}`)\n        .join(\"\");\nexports.INVALID_PATH_ERROR = `Path must be one of ${Array.from(exports.DATABASE_SETTINGS.keys()).join(\", \")}.`;\n"]},"metadata":{},"sourceType":"script"}