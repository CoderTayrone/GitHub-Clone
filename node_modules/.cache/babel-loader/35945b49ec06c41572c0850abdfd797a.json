{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst ora = require(\"ora\");\n\nconst Table = require(\"cli-table\");\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst apps_1 = require(\"../management/apps\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst logger_1 = require(\"../logger\");\n\nconst NOT_SPECIFIED = clc.yellow(\"[Not specified]\");\n\nfunction logAppsList(apps) {\n  if (apps.length === 0) {\n    logger_1.logger.info(clc.bold(\"No apps found.\"));\n    return;\n  }\n\n  const tableHead = [\"App Display Name\", \"App ID\", \"Platform\"];\n  const table = new Table({\n    head: tableHead,\n    style: {\n      head: [\"green\"]\n    }\n  });\n  apps.forEach(({\n    appId,\n    displayName,\n    platform\n  }) => {\n    table.push([displayName || NOT_SPECIFIED, appId, platform]);\n  });\n  logger_1.logger.info(table.toString());\n}\n\nfunction logAppCount(count = 0) {\n  if (count === 0) {\n    return;\n  }\n\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(`${count} app(s) total.`);\n}\n\nmodule.exports = new command_1.Command(\"apps:list [platform]\").description(\"list the registered apps of a Firebase project. \" + \"Optionally filter apps by [platform]: IOS, ANDROID or WEB (case insensitive)\").before(requireAuth_1.requireAuth).action(async (platform, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const appPlatform = apps_1.getAppPlatform(platform || \"\");\n  let apps;\n  const spinner = ora(\"Preparing the list of your Firebase \" + `${appPlatform === apps_1.AppPlatform.ANY ? \"\" : appPlatform + \" \"}apps`).start();\n\n  try {\n    apps = await apps_1.listFirebaseApps(projectId, appPlatform);\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n\n  spinner.succeed();\n  logAppsList(apps);\n  logAppCount(apps.length);\n  return apps;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/apps-list.js"],"names":["Object","defineProperty","exports","value","clc","require","ora","Table","command_1","projectUtils_1","apps_1","requireAuth_1","logger_1","NOT_SPECIFIED","yellow","logAppsList","apps","length","logger","info","bold","tableHead","table","head","style","forEach","appId","displayName","platform","push","toString","logAppCount","count","module","Command","description","before","requireAuth","action","options","projectId","needProjectId","appPlatform","getAppPlatform","spinner","AppPlatform","ANY","start","listFirebaseApps","err","fail","succeed"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst ora = require(\"ora\");\nconst Table = require(\"cli-table\");\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst apps_1 = require(\"../management/apps\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst logger_1 = require(\"../logger\");\nconst NOT_SPECIFIED = clc.yellow(\"[Not specified]\");\nfunction logAppsList(apps) {\n    if (apps.length === 0) {\n        logger_1.logger.info(clc.bold(\"No apps found.\"));\n        return;\n    }\n    const tableHead = [\"App Display Name\", \"App ID\", \"Platform\"];\n    const table = new Table({ head: tableHead, style: { head: [\"green\"] } });\n    apps.forEach(({ appId, displayName, platform }) => {\n        table.push([displayName || NOT_SPECIFIED, appId, platform]);\n    });\n    logger_1.logger.info(table.toString());\n}\nfunction logAppCount(count = 0) {\n    if (count === 0) {\n        return;\n    }\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(`${count} app(s) total.`);\n}\nmodule.exports = new command_1.Command(\"apps:list [platform]\")\n    .description(\"list the registered apps of a Firebase project. \" +\n    \"Optionally filter apps by [platform]: IOS, ANDROID or WEB (case insensitive)\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (platform, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const appPlatform = apps_1.getAppPlatform(platform || \"\");\n    let apps;\n    const spinner = ora(\"Preparing the list of your Firebase \" +\n        `${appPlatform === apps_1.AppPlatform.ANY ? \"\" : appPlatform + \" \"}apps`).start();\n    try {\n        apps = await apps_1.listFirebaseApps(projectId, appPlatform);\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n    spinner.succeed();\n    logAppsList(apps);\n    logAppCount(apps.length);\n    return apps;\n});\n"]},"metadata":{},"sourceType":"script"}