{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nvar functionsConfig = require(\"../functionsConfig\");\n\nvar functionsConfigClone = require(\"../functionsConfigClone\");\n\nvar needProjectId = require(\"../projectUtils\").needProjectId;\n\nvar {\n  requirePermissions\n} = require(\"../requirePermissions\");\n\nvar utils = require(\"../utils\");\n\nconst {\n  logger\n} = require(\"../logger\");\n\nmodule.exports = new Command(\"functions:config:clone\").description(\"clone environment config from another project\").option(\"--from <projectId>\", \"the project from which to clone configuration\").option(\"--only <keys>\", \"a comma-separated list of keys to clone\").option(\"--except <keys>\", \"a comma-separated list of keys to not clone\").before(requirePermissions, [\"runtimeconfig.configs.list\", \"runtimeconfig.configs.create\", \"runtimeconfig.configs.get\", \"runtimeconfig.configs.update\", \"runtimeconfig.configs.delete\", \"runtimeconfig.variables.list\", \"runtimeconfig.variables.create\", \"runtimeconfig.variables.get\", \"runtimeconfig.variables.update\", \"runtimeconfig.variables.delete\"]).before(functionsConfig.ensureApi).action(function (options) {\n  var projectId = needProjectId(options);\n\n  if (!options.from) {\n    return utils.reject(\"Must specify a source project in \" + clc.bold(\"--from <projectId>\") + \" option.\");\n  } else if (options.from === projectId) {\n    return utils.reject(\"From project and destination can't be the same project.\");\n  } else if (options.only && options.except) {\n    return utils.reject(\"Cannot use both --only and --except at the same time.\");\n  }\n\n  var only;\n  var except;\n\n  if (options.only) {\n    only = options.only.split(\",\");\n  } else if (options.except) {\n    except = options.except.split(\",\");\n  }\n\n  return functionsConfigClone(options.from, projectId, only, except).then(function () {\n    utils.logSuccess(\"Cloned functions config from \" + clc.bold(options.from) + \" into \" + clc.bold(projectId));\n    logger.info(\"\\nPlease deploy your functions for the change to take effect by running \" + clc.bold(\"firebase deploy --only functions\") + \"\\n\");\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/functions-config-clone.js"],"names":["clc","require","Command","functionsConfig","functionsConfigClone","needProjectId","requirePermissions","utils","logger","module","exports","description","option","before","ensureApi","action","options","projectId","from","reject","bold","only","except","split","then","logSuccess","info"],"mappings":"AAAA;;AACA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,yBAAD,CAAlC;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAAP,CAA2BI,aAA/C;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAyBL,OAAO,CAAC,uBAAD,CAApC;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAaP,OAAO,CAAC,WAAD,CAA1B;;AACAQ,MAAM,CAACC,OAAP,GAAiB,IAAIR,OAAJ,CAAY,wBAAZ,EACZS,WADY,CACA,+CADA,EAEZC,MAFY,CAEL,oBAFK,EAEiB,+CAFjB,EAGZA,MAHY,CAGL,eAHK,EAGY,yCAHZ,EAIZA,MAJY,CAIL,iBAJK,EAIc,6CAJd,EAKZC,MALY,CAKLP,kBALK,EAKe,CAC5B,4BAD4B,EAE5B,8BAF4B,EAG5B,2BAH4B,EAI5B,8BAJ4B,EAK5B,8BAL4B,EAM5B,8BAN4B,EAO5B,gCAP4B,EAQ5B,6BAR4B,EAS5B,gCAT4B,EAU5B,gCAV4B,CALf,EAiBZO,MAjBY,CAiBLV,eAAe,CAACW,SAjBX,EAkBZC,MAlBY,CAkBL,UAAUC,OAAV,EAAmB;AAC3B,MAAIC,SAAS,GAAGZ,aAAa,CAACW,OAAD,CAA7B;;AACA,MAAI,CAACA,OAAO,CAACE,IAAb,EAAmB;AACf,WAAOX,KAAK,CAACY,MAAN,CAAa,sCAAsCnB,GAAG,CAACoB,IAAJ,CAAS,oBAAT,CAAtC,GAAuE,UAApF,CAAP;AACH,GAFD,MAGK,IAAIJ,OAAO,CAACE,IAAR,KAAiBD,SAArB,EAAgC;AACjC,WAAOV,KAAK,CAACY,MAAN,CAAa,yDAAb,CAAP;AACH,GAFI,MAGA,IAAIH,OAAO,CAACK,IAAR,IAAgBL,OAAO,CAACM,MAA5B,EAAoC;AACrC,WAAOf,KAAK,CAACY,MAAN,CAAa,uDAAb,CAAP;AACH;;AACD,MAAIE,IAAJ;AACA,MAAIC,MAAJ;;AACA,MAAIN,OAAO,CAACK,IAAZ,EAAkB;AACdA,IAAAA,IAAI,GAAGL,OAAO,CAACK,IAAR,CAAaE,KAAb,CAAmB,GAAnB,CAAP;AACH,GAFD,MAGK,IAAIP,OAAO,CAACM,MAAZ,EAAoB;AACrBA,IAAAA,MAAM,GAAGN,OAAO,CAACM,MAAR,CAAeC,KAAf,CAAqB,GAArB,CAAT;AACH;;AACD,SAAOnB,oBAAoB,CAACY,OAAO,CAACE,IAAT,EAAeD,SAAf,EAA0BI,IAA1B,EAAgCC,MAAhC,CAApB,CAA4DE,IAA5D,CAAiE,YAAY;AAChFjB,IAAAA,KAAK,CAACkB,UAAN,CAAiB,kCAAkCzB,GAAG,CAACoB,IAAJ,CAASJ,OAAO,CAACE,IAAjB,CAAlC,GAA2D,QAA3D,GAAsElB,GAAG,CAACoB,IAAJ,CAASH,SAAT,CAAvF;AACAT,IAAAA,MAAM,CAACkB,IAAP,CAAY,6EACR1B,GAAG,CAACoB,IAAJ,CAAS,kCAAT,CADQ,GAER,IAFJ;AAGH,GALM,CAAP;AAMH,CA3CgB,CAAjB","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar { Command } = require(\"../command\");\nvar functionsConfig = require(\"../functionsConfig\");\nvar functionsConfigClone = require(\"../functionsConfigClone\");\nvar needProjectId = require(\"../projectUtils\").needProjectId;\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar utils = require(\"../utils\");\nconst { logger } = require(\"../logger\");\nmodule.exports = new Command(\"functions:config:clone\")\n    .description(\"clone environment config from another project\")\n    .option(\"--from <projectId>\", \"the project from which to clone configuration\")\n    .option(\"--only <keys>\", \"a comma-separated list of keys to clone\")\n    .option(\"--except <keys>\", \"a comma-separated list of keys to not clone\")\n    .before(requirePermissions, [\n    \"runtimeconfig.configs.list\",\n    \"runtimeconfig.configs.create\",\n    \"runtimeconfig.configs.get\",\n    \"runtimeconfig.configs.update\",\n    \"runtimeconfig.configs.delete\",\n    \"runtimeconfig.variables.list\",\n    \"runtimeconfig.variables.create\",\n    \"runtimeconfig.variables.get\",\n    \"runtimeconfig.variables.update\",\n    \"runtimeconfig.variables.delete\",\n])\n    .before(functionsConfig.ensureApi)\n    .action(function (options) {\n    var projectId = needProjectId(options);\n    if (!options.from) {\n        return utils.reject(\"Must specify a source project in \" + clc.bold(\"--from <projectId>\") + \" option.\");\n    }\n    else if (options.from === projectId) {\n        return utils.reject(\"From project and destination can't be the same project.\");\n    }\n    else if (options.only && options.except) {\n        return utils.reject(\"Cannot use both --only and --except at the same time.\");\n    }\n    var only;\n    var except;\n    if (options.only) {\n        only = options.only.split(\",\");\n    }\n    else if (options.except) {\n        except = options.except.split(\",\");\n    }\n    return functionsConfigClone(options.from, projectId, only, except).then(function () {\n        utils.logSuccess(\"Cloned functions config from \" + clc.bold(options.from) + \" into \" + clc.bold(projectId));\n        logger.info(\"\\nPlease deploy your functions for the change to take effect by running \" +\n            clc.bold(\"firebase deploy --only functions\") +\n            \"\\n\");\n    });\n});\n"]},"metadata":{},"sourceType":"script"}