{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StorageEmulator = void 0;\n\nconst utils = require(\"../../utils\");\n\nconst constants_1 = require(\"../constants\");\n\nconst types_1 = require(\"../types\");\n\nconst server_1 = require(\"./server\");\n\nconst files_1 = require(\"./files\");\n\nconst chokidar = require(\"chokidar\");\n\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\n\nconst fs = require(\"fs\");\n\nconst runtime_1 = require(\"./rules/runtime\");\n\nconst error_1 = require(\"../../error\");\n\nconst downloadableEmulators_1 = require(\"../downloadableEmulators\");\n\nclass StorageEmulator {\n  constructor(args) {\n    this.args = args;\n    this._logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE);\n    const downloadDetails = downloadableEmulators_1.getDownloadDetails(types_1.Emulators.STORAGE);\n    this._rulesRuntime = new runtime_1.StorageRulesRuntime();\n    this._storageLayer = new files_1.StorageLayer(args.projectId);\n  }\n\n  get storageLayer() {\n    return this._storageLayer;\n  }\n\n  get rules() {\n    return this._rules;\n  }\n\n  get logger() {\n    return this._logger;\n  }\n\n  async start() {\n    const {\n      host,\n      port\n    } = this.getInfo();\n    await this._rulesRuntime.start(this.args.auto_download);\n    this._app = await server_1.createApp(this.args.projectId, this);\n\n    if (typeof this.args.rules == \"string\") {\n      const rulesFile = this.args.rules;\n      this.updateRulesSource(rulesFile);\n    } else {\n      this._rulesetSource = this.args.rules;\n    }\n\n    if (!this._rulesetSource || this._rulesetSource.files.length == 0) {\n      throw new error_1.FirebaseError(\"Can not initialize Storage emulator without a rules source / file.\");\n    } else if (this._rulesetSource.files.length > 1) {\n      throw new error_1.FirebaseError(\"Can not initialize Storage emulator with more than one rules source / file.\");\n    }\n\n    await this.loadRuleset();\n    const rulesPath = this._rulesetSource.files[0].name;\n    this._rulesWatcher = chokidar.watch(rulesPath, {\n      persistent: true,\n      ignoreInitial: true\n    });\n\n    this._rulesWatcher.on(\"change\", async () => {\n      await new Promise(res => setTimeout(res, 5));\n\n      this._logger.logLabeled(\"BULLET\", \"storage\", `Change detected, updating rules for Cloud Storage...`);\n\n      this.updateRulesSource(rulesPath);\n      await this.loadRuleset();\n    });\n\n    const server = this._app.listen(port, host);\n\n    this.destroyServer = utils.createDestroyer(server);\n  }\n\n  updateRulesSource(rulesFile) {\n    this._rulesetSource = {\n      files: [{\n        name: rulesFile,\n        content: fs.readFileSync(rulesFile).toString()\n      }]\n    };\n  }\n\n  async loadRuleset(source) {\n    if (source) {\n      this._rulesetSource = source;\n    }\n\n    if (!this._rulesetSource) {\n      const msg = \"Attempting to update ruleset without a source.\";\n\n      this._logger.log(\"WARN\", msg);\n\n      const error = JSON.stringify({\n        error: msg\n      });\n      return new runtime_1.StorageRulesIssues([error], []);\n    }\n\n    const {\n      ruleset,\n      issues\n    } = await this._rulesRuntime.loadRuleset(this._rulesetSource);\n\n    if (!ruleset) {\n      issues.all.forEach(issue => {\n        let parsedIssue;\n\n        try {\n          parsedIssue = JSON.parse(issue);\n        } catch (_a) {}\n\n        if (parsedIssue) {\n          this._logger.log(\"WARN\", `${parsedIssue.description_.replace(/\\.$/, \"\")} in ${parsedIssue.sourcePosition_.fileName_}:${parsedIssue.sourcePosition_.line_}`);\n        } else {\n          this._logger.log(\"WARN\", issue);\n        }\n      });\n      delete this._rules;\n    } else {\n      this._rules = ruleset;\n    }\n\n    return issues;\n  }\n\n  async connect() {}\n\n  async stop() {\n    await this.storageLayer.deleteAll();\n    return this.destroyServer ? this.destroyServer() : Promise.resolve();\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.STORAGE);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.STORAGE);\n    return {\n      name: this.getName(),\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.STORAGE;\n  }\n\n  getApp() {\n    return this._app;\n  }\n\n}\n\nexports.StorageEmulator = StorageEmulator;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/storage/index.js"],"names":["Object","defineProperty","exports","value","StorageEmulator","utils","require","constants_1","types_1","server_1","files_1","chokidar","emulatorLogger_1","fs","runtime_1","error_1","downloadableEmulators_1","constructor","args","_logger","EmulatorLogger","forEmulator","Emulators","STORAGE","downloadDetails","getDownloadDetails","_rulesRuntime","StorageRulesRuntime","_storageLayer","StorageLayer","projectId","storageLayer","rules","_rules","logger","start","host","port","getInfo","auto_download","_app","createApp","rulesFile","updateRulesSource","_rulesetSource","files","length","FirebaseError","loadRuleset","rulesPath","name","_rulesWatcher","watch","persistent","ignoreInitial","on","Promise","res","setTimeout","logLabeled","server","listen","destroyServer","createDestroyer","content","readFileSync","toString","source","msg","log","error","JSON","stringify","StorageRulesIssues","ruleset","issues","all","forEach","issue","parsedIssue","parse","_a","description_","replace","sourcePosition_","fileName_","line_","connect","stop","deleteAll","resolve","Constants","getDefaultHost","getDefaultPort","getName","getApp"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,mBAAD,CAAhC;;AACA,MAAMO,EAAE,GAAGP,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMQ,SAAS,GAAGR,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMS,OAAO,GAAGT,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMU,uBAAuB,GAAGV,OAAO,CAAC,0BAAD,CAAvC;;AACA,MAAMF,eAAN,CAAsB;AAClBa,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeP,gBAAgB,CAACQ,cAAjB,CAAgCC,WAAhC,CAA4Cb,OAAO,CAACc,SAAR,CAAkBC,OAA9D,CAAf;AACA,UAAMC,eAAe,GAAGR,uBAAuB,CAACS,kBAAxB,CAA2CjB,OAAO,CAACc,SAAR,CAAkBC,OAA7D,CAAxB;AACA,SAAKG,aAAL,GAAqB,IAAIZ,SAAS,CAACa,mBAAd,EAArB;AACA,SAAKC,aAAL,GAAqB,IAAIlB,OAAO,CAACmB,YAAZ,CAAyBX,IAAI,CAACY,SAA9B,CAArB;AACH;;AACe,MAAZC,YAAY,GAAG;AACf,WAAO,KAAKH,aAAZ;AACH;;AACQ,MAALI,KAAK,GAAG;AACR,WAAO,KAAKC,MAAZ;AACH;;AACS,MAANC,MAAM,GAAG;AACT,WAAO,KAAKf,OAAZ;AACH;;AACU,QAALgB,KAAK,GAAG;AACV,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiB,KAAKC,OAAL,EAAvB;AACA,UAAM,KAAKZ,aAAL,CAAmBS,KAAnB,CAAyB,KAAKjB,IAAL,CAAUqB,aAAnC,CAAN;AACA,SAAKC,IAAL,GAAY,MAAM/B,QAAQ,CAACgC,SAAT,CAAmB,KAAKvB,IAAL,CAAUY,SAA7B,EAAwC,IAAxC,CAAlB;;AACA,QAAI,OAAO,KAAKZ,IAAL,CAAUc,KAAjB,IAA0B,QAA9B,EAAwC;AACpC,YAAMU,SAAS,GAAG,KAAKxB,IAAL,CAAUc,KAA5B;AACA,WAAKW,iBAAL,CAAuBD,SAAvB;AACH,KAHD,MAIK;AACD,WAAKE,cAAL,GAAsB,KAAK1B,IAAL,CAAUc,KAAhC;AACH;;AACD,QAAI,CAAC,KAAKY,cAAN,IAAwB,KAAKA,cAAL,CAAoBC,KAApB,CAA0BC,MAA1B,IAAoC,CAAhE,EAAmE;AAC/D,YAAM,IAAI/B,OAAO,CAACgC,aAAZ,CAA0B,oEAA1B,CAAN;AACH,KAFD,MAGK,IAAI,KAAKH,cAAL,CAAoBC,KAApB,CAA0BC,MAA1B,GAAmC,CAAvC,EAA0C;AAC3C,YAAM,IAAI/B,OAAO,CAACgC,aAAZ,CAA0B,6EAA1B,CAAN;AACH;;AACD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMC,SAAS,GAAG,KAAKL,cAAL,CAAoBC,KAApB,CAA0B,CAA1B,EAA6BK,IAA/C;AACA,SAAKC,aAAL,GAAqBxC,QAAQ,CAACyC,KAAT,CAAeH,SAAf,EAA0B;AAAEI,MAAAA,UAAU,EAAE,IAAd;AAAoBC,MAAAA,aAAa,EAAE;AAAnC,KAA1B,CAArB;;AACA,SAAKH,aAAL,CAAmBI,EAAnB,CAAsB,QAAtB,EAAgC,YAAY;AACxC,YAAM,IAAIC,OAAJ,CAAaC,GAAD,IAASC,UAAU,CAACD,GAAD,EAAM,CAAN,CAA/B,CAAN;;AACA,WAAKtC,OAAL,CAAawC,UAAb,CAAwB,QAAxB,EAAkC,SAAlC,EAA8C,sDAA9C;;AACA,WAAKhB,iBAAL,CAAuBM,SAAvB;AACA,YAAM,KAAKD,WAAL,EAAN;AACH,KALD;;AAMA,UAAMY,MAAM,GAAG,KAAKpB,IAAL,CAAUqB,MAAV,CAAiBxB,IAAjB,EAAuBD,IAAvB,CAAf;;AACA,SAAK0B,aAAL,GAAqBzD,KAAK,CAAC0D,eAAN,CAAsBH,MAAtB,CAArB;AACH;;AACDjB,EAAAA,iBAAiB,CAACD,SAAD,EAAY;AACzB,SAAKE,cAAL,GAAsB;AAClBC,MAAAA,KAAK,EAAE,CACH;AACIK,QAAAA,IAAI,EAAER,SADV;AAEIsB,QAAAA,OAAO,EAAEnD,EAAE,CAACoD,YAAH,CAAgBvB,SAAhB,EAA2BwB,QAA3B;AAFb,OADG;AADW,KAAtB;AAQH;;AACgB,QAAXlB,WAAW,CAACmB,MAAD,EAAS;AACtB,QAAIA,MAAJ,EAAY;AACR,WAAKvB,cAAL,GAAsBuB,MAAtB;AACH;;AACD,QAAI,CAAC,KAAKvB,cAAV,EAA0B;AACtB,YAAMwB,GAAG,GAAG,gDAAZ;;AACA,WAAKjD,OAAL,CAAakD,GAAb,CAAiB,MAAjB,EAAyBD,GAAzB;;AACA,YAAME,KAAK,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEF,QAAAA,KAAK,EAAEF;AAAT,OAAf,CAAd;AACA,aAAO,IAAItD,SAAS,CAAC2D,kBAAd,CAAiC,CAACH,KAAD,CAAjC,EAA0C,EAA1C,CAAP;AACH;;AACD,UAAM;AAAEI,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAsB,MAAM,KAAKjD,aAAL,CAAmBsB,WAAnB,CAA+B,KAAKJ,cAApC,CAAlC;;AACA,QAAI,CAAC8B,OAAL,EAAc;AACVC,MAAAA,MAAM,CAACC,GAAP,CAAWC,OAAX,CAAoBC,KAAD,IAAW;AAC1B,YAAIC,WAAJ;;AACA,YAAI;AACAA,UAAAA,WAAW,GAAGR,IAAI,CAACS,KAAL,CAAWF,KAAX,CAAd;AACH,SAFD,CAGA,OAAOG,EAAP,EAAW,CACV;;AACD,YAAIF,WAAJ,EAAiB;AACb,eAAK5D,OAAL,CAAakD,GAAb,CAAiB,MAAjB,EAA0B,GAAEU,WAAW,CAACG,YAAZ,CAAyBC,OAAzB,CAAiC,KAAjC,EAAwC,EAAxC,CAA4C,OAAMJ,WAAW,CAACK,eAAZ,CAA4BC,SAAU,IAAGN,WAAW,CAACK,eAAZ,CAA4BE,KAAM,EAAzJ;AACH,SAFD,MAGK;AACD,eAAKnE,OAAL,CAAakD,GAAb,CAAiB,MAAjB,EAAyBS,KAAzB;AACH;AACJ,OAbD;AAcA,aAAO,KAAK7C,MAAZ;AACH,KAhBD,MAiBK;AACD,WAAKA,MAAL,GAAcyC,OAAd;AACH;;AACD,WAAOC,MAAP;AACH;;AACY,QAAPY,OAAO,GAAG,CACf;;AACS,QAAJC,IAAI,GAAG;AACT,UAAM,KAAKzD,YAAL,CAAkB0D,SAAlB,EAAN;AACA,WAAO,KAAK3B,aAAL,GAAqB,KAAKA,aAAL,EAArB,GAA4CN,OAAO,CAACkC,OAAR,EAAnD;AACH;;AACDpD,EAAAA,OAAO,GAAG;AACN,UAAMF,IAAI,GAAG,KAAKlB,IAAL,CAAUkB,IAAV,IAAkB7B,WAAW,CAACoF,SAAZ,CAAsBC,cAAtB,CAAqCpF,OAAO,CAACc,SAAR,CAAkBC,OAAvD,CAA/B;AACA,UAAMc,IAAI,GAAG,KAAKnB,IAAL,CAAUmB,IAAV,IAAkB9B,WAAW,CAACoF,SAAZ,CAAsBE,cAAtB,CAAqCrF,OAAO,CAACc,SAAR,CAAkBC,OAAvD,CAA/B;AACA,WAAO;AACH2B,MAAAA,IAAI,EAAE,KAAK4C,OAAL,EADH;AAEH1D,MAAAA,IAFG;AAGHC,MAAAA;AAHG,KAAP;AAKH;;AACDyD,EAAAA,OAAO,GAAG;AACN,WAAOtF,OAAO,CAACc,SAAR,CAAkBC,OAAzB;AACH;;AACDwE,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKvD,IAAZ;AACH;;AA7GiB;;AA+GtBtC,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StorageEmulator = void 0;\nconst utils = require(\"../../utils\");\nconst constants_1 = require(\"../constants\");\nconst types_1 = require(\"../types\");\nconst server_1 = require(\"./server\");\nconst files_1 = require(\"./files\");\nconst chokidar = require(\"chokidar\");\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\nconst fs = require(\"fs\");\nconst runtime_1 = require(\"./rules/runtime\");\nconst error_1 = require(\"../../error\");\nconst downloadableEmulators_1 = require(\"../downloadableEmulators\");\nclass StorageEmulator {\n    constructor(args) {\n        this.args = args;\n        this._logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE);\n        const downloadDetails = downloadableEmulators_1.getDownloadDetails(types_1.Emulators.STORAGE);\n        this._rulesRuntime = new runtime_1.StorageRulesRuntime();\n        this._storageLayer = new files_1.StorageLayer(args.projectId);\n    }\n    get storageLayer() {\n        return this._storageLayer;\n    }\n    get rules() {\n        return this._rules;\n    }\n    get logger() {\n        return this._logger;\n    }\n    async start() {\n        const { host, port } = this.getInfo();\n        await this._rulesRuntime.start(this.args.auto_download);\n        this._app = await server_1.createApp(this.args.projectId, this);\n        if (typeof this.args.rules == \"string\") {\n            const rulesFile = this.args.rules;\n            this.updateRulesSource(rulesFile);\n        }\n        else {\n            this._rulesetSource = this.args.rules;\n        }\n        if (!this._rulesetSource || this._rulesetSource.files.length == 0) {\n            throw new error_1.FirebaseError(\"Can not initialize Storage emulator without a rules source / file.\");\n        }\n        else if (this._rulesetSource.files.length > 1) {\n            throw new error_1.FirebaseError(\"Can not initialize Storage emulator with more than one rules source / file.\");\n        }\n        await this.loadRuleset();\n        const rulesPath = this._rulesetSource.files[0].name;\n        this._rulesWatcher = chokidar.watch(rulesPath, { persistent: true, ignoreInitial: true });\n        this._rulesWatcher.on(\"change\", async () => {\n            await new Promise((res) => setTimeout(res, 5));\n            this._logger.logLabeled(\"BULLET\", \"storage\", `Change detected, updating rules for Cloud Storage...`);\n            this.updateRulesSource(rulesPath);\n            await this.loadRuleset();\n        });\n        const server = this._app.listen(port, host);\n        this.destroyServer = utils.createDestroyer(server);\n    }\n    updateRulesSource(rulesFile) {\n        this._rulesetSource = {\n            files: [\n                {\n                    name: rulesFile,\n                    content: fs.readFileSync(rulesFile).toString(),\n                },\n            ],\n        };\n    }\n    async loadRuleset(source) {\n        if (source) {\n            this._rulesetSource = source;\n        }\n        if (!this._rulesetSource) {\n            const msg = \"Attempting to update ruleset without a source.\";\n            this._logger.log(\"WARN\", msg);\n            const error = JSON.stringify({ error: msg });\n            return new runtime_1.StorageRulesIssues([error], []);\n        }\n        const { ruleset, issues } = await this._rulesRuntime.loadRuleset(this._rulesetSource);\n        if (!ruleset) {\n            issues.all.forEach((issue) => {\n                let parsedIssue;\n                try {\n                    parsedIssue = JSON.parse(issue);\n                }\n                catch (_a) {\n                }\n                if (parsedIssue) {\n                    this._logger.log(\"WARN\", `${parsedIssue.description_.replace(/\\.$/, \"\")} in ${parsedIssue.sourcePosition_.fileName_}:${parsedIssue.sourcePosition_.line_}`);\n                }\n                else {\n                    this._logger.log(\"WARN\", issue);\n                }\n            });\n            delete this._rules;\n        }\n        else {\n            this._rules = ruleset;\n        }\n        return issues;\n    }\n    async connect() {\n    }\n    async stop() {\n        await this.storageLayer.deleteAll();\n        return this.destroyServer ? this.destroyServer() : Promise.resolve();\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.STORAGE);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.STORAGE);\n        return {\n            name: this.getName(),\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.STORAGE;\n    }\n    getApp() {\n        return this._app;\n    }\n}\nexports.StorageEmulator = StorageEmulator;\n"]},"metadata":{},"sourceType":"script"}