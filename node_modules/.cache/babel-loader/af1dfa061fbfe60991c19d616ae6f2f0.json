{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.emulatorExec = exports.shutdownWhenKilled = exports.setExportOnExitOptions = exports.parseInspectionPort = exports.beforeEmulatorCommand = exports.warnEmulatorNotSupported = exports.printNoticeIfEmulated = exports.DESC_TEST_PARAMS = exports.FLAG_TEST_PARAMS = exports.DESC_TEST_CONFIG = exports.FLAG_TEST_CONFIG = exports.DESC_UI = exports.FLAG_UI = exports.EXPORT_ON_EXIT_USAGE_ERROR = exports.DESC_EXPORT_ON_EXIT = exports.FLAG_EXPORT_ON_EXIT = exports.FLAG_EXPORT_ON_EXIT_NAME = exports.DESC_IMPORT = exports.FLAG_IMPORT = exports.DESC_INSPECT_FUNCTIONS = exports.FLAG_INSPECT_FUNCTIONS = exports.DESC_ONLY = exports.FLAG_ONLY = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst childProcess = require(\"child_process\");\n\nconst controller = require(\"../emulator/controller\");\n\nconst config_1 = require(\"../config\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst path = require(\"path\");\n\nconst constants_1 = require(\"./constants\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst requireConfig = require(\"../requireConfig\");\n\nconst types_1 = require(\"./types\");\n\nconst error_1 = require(\"../error\");\n\nconst registry_1 = require(\"./registry\");\n\nconst firestoreEmulator_1 = require(\"./firestoreEmulator\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst controller_1 = require(\"./controller\");\n\nconst fsutils = require(\"../fsutils\");\n\nconst Table = require(\"cli-table\");\n\nexports.FLAG_ONLY = \"--only <emulators>\";\nexports.DESC_ONLY = \"only specific emulators. \" + \"This is a comma separated list of emulator names. \" + \"Valid options are: \" + JSON.stringify(types_1.ALL_SERVICE_EMULATORS);\nexports.FLAG_INSPECT_FUNCTIONS = \"--inspect-functions [port]\";\nexports.DESC_INSPECT_FUNCTIONS = \"emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)\";\nexports.FLAG_IMPORT = \"--import [dir]\";\nexports.DESC_IMPORT = \"import emulator data from a previous export (see emulators:export)\";\nexports.FLAG_EXPORT_ON_EXIT_NAME = \"--export-on-exit\";\nexports.FLAG_EXPORT_ON_EXIT = `${exports.FLAG_EXPORT_ON_EXIT_NAME} [dir]`;\nexports.DESC_EXPORT_ON_EXIT = \"automatically export emulator data (emulators:export) \" + \"when the emulators make a clean exit (SIGINT), \" + `when no dir is provided the location of ${exports.FLAG_IMPORT} is used`;\nexports.EXPORT_ON_EXIT_USAGE_ERROR = `\"${exports.FLAG_EXPORT_ON_EXIT_NAME}\" must be used with \"${exports.FLAG_IMPORT}\"` + ` or provide a dir directly to \"${exports.FLAG_EXPORT_ON_EXIT}\"`;\nexports.FLAG_UI = \"--ui\";\nexports.DESC_UI = \"run the Emulator UI\";\nexports.FLAG_TEST_CONFIG = \"--test-config <firebase.json file>\";\nexports.DESC_TEST_CONFIG = \"A firebase.json style file. Used to configure the Firestore and Realtime Database emulators.\";\nexports.FLAG_TEST_PARAMS = \"--test-params <params.env file>\";\nexports.DESC_TEST_PARAMS = \"A .env file containing test param values for your emulated extension.\";\nconst DEFAULT_CONFIG = new config_1.Config({\n  database: {},\n  firestore: {},\n  functions: {},\n  hosting: {},\n  emulators: {\n    auth: {},\n    pubsub: {}\n  }\n}, {});\n\nfunction printNoticeIfEmulated(options, emulator) {\n  if (emulator !== types_1.Emulators.DATABASE && emulator !== types_1.Emulators.FIRESTORE) {\n    return;\n  }\n\n  const emuName = constants_1.Constants.description(emulator);\n  const envKey = emulator === types_1.Emulators.DATABASE ? constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST : constants_1.Constants.FIRESTORE_EMULATOR_HOST;\n  const envVal = process.env[envKey];\n\n  if (envVal) {\n    utils.logBullet(`You have set ${clc.bold(`${envKey}=${envVal}`)}, this command will execute against the ${emuName} running at that address.`);\n  }\n}\n\nexports.printNoticeIfEmulated = printNoticeIfEmulated;\n\nfunction warnEmulatorNotSupported(options, emulator) {\n  if (emulator !== types_1.Emulators.DATABASE && emulator !== types_1.Emulators.FIRESTORE) {\n    return;\n  }\n\n  const emuName = constants_1.Constants.description(emulator);\n  const envKey = emulator === types_1.Emulators.DATABASE ? constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST : constants_1.Constants.FIRESTORE_EMULATOR_HOST;\n  const envVal = process.env[envKey];\n\n  if (envVal) {\n    utils.logWarning(`You have set ${clc.bold(`${envKey}=${envVal}`)}, however this command does not support running against the ${emuName} so this action will affect production.`);\n    const opts = {\n      confirm: undefined\n    };\n    return prompt_1.promptOnce({\n      type: \"confirm\",\n      default: false,\n      message: \"Do you want to continue?\"\n    }).then(confirm => {\n      if (!opts.confirm) {\n        return utils.reject(\"Command aborted.\", {\n          exit: 1\n        });\n      }\n    });\n  }\n}\n\nexports.warnEmulatorNotSupported = warnEmulatorNotSupported;\n\nasync function beforeEmulatorCommand(options) {\n  const optionsWithDefaultConfig = Object.assign(Object.assign({}, options), {\n    config: DEFAULT_CONFIG\n  });\n  const optionsWithConfig = options.config ? options : optionsWithDefaultConfig;\n  const canStartWithoutConfig = options.only && !controller.shouldStart(optionsWithConfig, types_1.Emulators.FUNCTIONS) && !controller.shouldStart(optionsWithConfig, types_1.Emulators.HOSTING);\n\n  try {\n    await requireAuth_1.requireAuth(options);\n  } catch (e) {\n    logger_1.logger.debug(e);\n    utils.logLabeledWarning(\"emulators\", `You are not currently authenticated so some features may not work correctly. Please run ${clc.bold(\"firebase login\")} to authenticate the CLI.`);\n  }\n\n  if (canStartWithoutConfig && !options.config) {\n    utils.logWarning(\"Could not find config (firebase.json) so using defaults.\");\n    options.config = DEFAULT_CONFIG;\n  } else {\n    await requireConfig(options);\n  }\n}\n\nexports.beforeEmulatorCommand = beforeEmulatorCommand;\n\nfunction parseInspectionPort(options) {\n  let port = options.inspectFunctions;\n\n  if (port === true) {\n    port = \"9229\";\n  }\n\n  const parsed = Number(port);\n\n  if (isNaN(parsed) || parsed < 1024 || parsed > 65535) {\n    throw new error_1.FirebaseError(`\"${port}\" is not a valid port for debugging, please pass an integer between 1024 and 65535.`);\n  }\n\n  return parsed;\n}\n\nexports.parseInspectionPort = parseInspectionPort;\n\nfunction setExportOnExitOptions(options) {\n  if (options.exportOnExit || typeof options.exportOnExit === \"string\") {\n    if (options.import) {\n      options.exportOnExit = typeof options.exportOnExit === \"string\" ? options.exportOnExit : options.import;\n      const importPath = path.resolve(options.import);\n\n      if (!fsutils.dirExistsSync(importPath) && options.import === options.exportOnExit) {\n        options.exportOnExit = options.import;\n        delete options.import;\n      }\n    }\n\n    if (options.exportOnExit === true || !options.exportOnExit) {\n      throw new error_1.FirebaseError(exports.EXPORT_ON_EXIT_USAGE_ERROR);\n    }\n  }\n\n  return;\n}\n\nexports.setExportOnExitOptions = setExportOnExitOptions;\n\nfunction processKillSignal(signal, res, rej, options) {\n  let lastSignal = new Date().getTime();\n  let signalCount = 0;\n  return async () => {\n    try {\n      const now = new Date().getTime();\n      const diff = now - lastSignal;\n\n      if (diff < 100) {\n        logger_1.logger.debug(`Ignoring signal ${signal} due to short delay of ${diff}ms`);\n        return;\n      }\n\n      signalCount = signalCount + 1;\n      lastSignal = now;\n      const signalDisplay = signal === \"SIGINT\" ? `SIGINT (Ctrl-C)` : signal;\n      logger_1.logger.debug(`Received signal ${signalDisplay} ${signalCount}`);\n      logger_1.logger.info(\" \");\n\n      if (signalCount === 1) {\n        utils.logLabeledBullet(\"emulators\", `Received ${signalDisplay} for the first time. Starting a clean shutdown.`);\n        utils.logLabeledBullet(\"emulators\", `Please wait for a clean shutdown or send the ${signalDisplay} signal again to stop right now.`);\n        await controller_1.onExit(options);\n        await controller.cleanShutdown();\n      } else {\n        logger_1.logger.debug(`Skipping clean onExit() and cleanShutdown()`);\n        const runningEmulatorsInfosWithPid = registry_1.EmulatorRegistry.listRunningWithInfo().filter(i => Boolean(i.pid));\n        utils.logLabeledWarning(\"emulators\", `Received ${signalDisplay} ${signalCount} times. You have forced the Emulator Suite to exit without waiting for ${runningEmulatorsInfosWithPid.length} subprocess${runningEmulatorsInfosWithPid.length > 1 ? \"es\" : \"\"} to finish. These processes ${clc.bold(\"may\")} still be running on your machine: `);\n        const pids = [];\n        const emulatorsTable = new Table({\n          head: [\"Emulator\", \"Host:Port\", \"PID\"],\n          style: {\n            head: [\"yellow\"]\n          }\n        });\n\n        for (const emulatorInfo of runningEmulatorsInfosWithPid) {\n          pids.push(emulatorInfo.pid);\n          emulatorsTable.push([constants_1.Constants.description(emulatorInfo.name), registry_1.EmulatorRegistry.getInfoHostString(emulatorInfo), emulatorInfo.pid]);\n        }\n\n        logger_1.logger.info(`\\n${emulatorsTable}\\n\\nTo force them to exit run:\\n`);\n\n        if (process.platform === \"win32\") {\n          logger_1.logger.info(clc.bold(`TASKKILL ${pids.map(pid => \"/PID \" + pid).join(\" \")} /T\\n`));\n        } else {\n          logger_1.logger.info(clc.bold(`kill ${pids.join(\" \")}\\n`));\n        }\n      }\n\n      res();\n    } catch (e) {\n      logger_1.logger.debug(e);\n      rej();\n    }\n  };\n}\n\nfunction shutdownWhenKilled(options) {\n  return new Promise((res, rej) => {\n    [\"SIGINT\", \"SIGTERM\", \"SIGHUP\", \"SIGQUIT\"].forEach(signal => {\n      process.on(signal, processKillSignal(signal, res, rej, options));\n    });\n  }).then(() => {\n    process.exit(0);\n  }).catch(e => {\n    logger_1.logger.debug(e);\n    utils.logLabeledWarning(\"emulators\", \"emulators failed to shut down cleanly, see firebase-debug.log for details.\");\n    process.exit(1);\n  });\n}\n\nexports.shutdownWhenKilled = shutdownWhenKilled;\n\nasync function runScript(script, extraEnv) {\n  utils.logBullet(`Running script: ${clc.bold(script)}`);\n  const env = Object.assign(Object.assign({}, process.env), extraEnv);\n  const databaseInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.DATABASE);\n\n  if (databaseInstance) {\n    const info = databaseInstance.getInfo();\n    const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n    env[constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST] = address;\n  }\n\n  const firestoreInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.FIRESTORE);\n\n  if (firestoreInstance) {\n    const info = firestoreInstance.getInfo();\n    const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n    env[constants_1.Constants.FIRESTORE_EMULATOR_HOST] = address;\n    env[firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT] = address;\n  }\n\n  const storageInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.STORAGE);\n\n  if (storageInstance) {\n    const info = storageInstance.getInfo();\n    const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n    env[constants_1.Constants.FIREBASE_STORAGE_EMULATOR_HOST] = address;\n    env[constants_1.Constants.CLOUD_STORAGE_EMULATOR_HOST] = `http://${address}`;\n  }\n\n  const authInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.AUTH);\n\n  if (authInstance) {\n    const info = authInstance.getInfo();\n    const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n    env[constants_1.Constants.FIREBASE_AUTH_EMULATOR_HOST] = address;\n  }\n\n  const hubInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.HUB);\n\n  if (hubInstance) {\n    const info = hubInstance.getInfo();\n    const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n    env[constants_1.Constants.FIREBASE_EMULATOR_HUB] = address;\n  }\n\n  const proc = childProcess.spawn(script, {\n    stdio: [\"inherit\", \"inherit\", \"inherit\"],\n    shell: true,\n    windowsHide: true,\n    env\n  });\n  logger_1.logger.debug(`Running ${script} with environment ${JSON.stringify(env)}`);\n  return new Promise((resolve, reject) => {\n    proc.on(\"error\", err => {\n      utils.logWarning(`There was an error running the script: ${JSON.stringify(err)}`);\n      reject();\n    });\n    const exitDelayMs = 500;\n    proc.once(\"exit\", (code, signal) => {\n      if (signal) {\n        utils.logWarning(`Script exited with signal: ${signal}`);\n        setTimeout(reject, exitDelayMs);\n        return;\n      }\n\n      const exitCode = code || 0;\n\n      if (code === 0) {\n        utils.logSuccess(`Script exited successfully (code 0)`);\n      } else {\n        utils.logWarning(`Script exited unsuccessfully (code ${code})`);\n      }\n\n      setTimeout(() => {\n        resolve(exitCode);\n      }, exitDelayMs);\n    });\n  });\n}\n\nasync function emulatorExec(script, options) {\n  shutdownWhenKilled(options);\n  const projectId = projectUtils_1.getProjectId(options);\n  const extraEnv = {};\n\n  if (projectId) {\n    extraEnv.GCLOUD_PROJECT = projectId;\n  }\n\n  let exitCode = 0;\n\n  try {\n    const showUI = !!options.ui;\n    await controller.startAll(options, showUI);\n    exitCode = await runScript(script, extraEnv);\n    await controller_1.onExit(options);\n  } finally {\n    await controller.cleanShutdown();\n  }\n\n  if (exitCode !== 0) {\n    throw new error_1.FirebaseError(`Script \"${clc.bold(script)}\" exited with code ${exitCode}`, {\n      exit: exitCode\n    });\n  }\n}\n\nexports.emulatorExec = emulatorExec;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/commandUtils.js"],"names":["Object","defineProperty","exports","value","emulatorExec","shutdownWhenKilled","setExportOnExitOptions","parseInspectionPort","beforeEmulatorCommand","warnEmulatorNotSupported","printNoticeIfEmulated","DESC_TEST_PARAMS","FLAG_TEST_PARAMS","DESC_TEST_CONFIG","FLAG_TEST_CONFIG","DESC_UI","FLAG_UI","EXPORT_ON_EXIT_USAGE_ERROR","DESC_EXPORT_ON_EXIT","FLAG_EXPORT_ON_EXIT","FLAG_EXPORT_ON_EXIT_NAME","DESC_IMPORT","FLAG_IMPORT","DESC_INSPECT_FUNCTIONS","FLAG_INSPECT_FUNCTIONS","DESC_ONLY","FLAG_ONLY","clc","require","childProcess","controller","config_1","utils","logger_1","path","constants_1","requireAuth_1","requireConfig","types_1","error_1","registry_1","firestoreEmulator_1","projectUtils_1","prompt_1","controller_1","fsutils","Table","JSON","stringify","ALL_SERVICE_EMULATORS","DEFAULT_CONFIG","Config","database","firestore","functions","hosting","emulators","auth","pubsub","options","emulator","Emulators","DATABASE","FIRESTORE","emuName","Constants","description","envKey","FIREBASE_DATABASE_EMULATOR_HOST","FIRESTORE_EMULATOR_HOST","envVal","process","env","logBullet","bold","logWarning","opts","confirm","undefined","promptOnce","type","default","message","then","reject","exit","optionsWithDefaultConfig","assign","config","optionsWithConfig","canStartWithoutConfig","only","shouldStart","FUNCTIONS","HOSTING","requireAuth","e","logger","debug","logLabeledWarning","port","inspectFunctions","parsed","Number","isNaN","FirebaseError","exportOnExit","import","importPath","resolve","dirExistsSync","processKillSignal","signal","res","rej","lastSignal","Date","getTime","signalCount","now","diff","signalDisplay","info","logLabeledBullet","onExit","cleanShutdown","runningEmulatorsInfosWithPid","EmulatorRegistry","listRunningWithInfo","filter","i","Boolean","pid","length","pids","emulatorsTable","head","style","emulatorInfo","push","name","getInfoHostString","platform","map","join","Promise","forEach","on","catch","runScript","script","extraEnv","databaseInstance","get","getInfo","address","firestoreInstance","FirestoreEmulator","FIRESTORE_EMULATOR_ENV_ALT","storageInstance","STORAGE","FIREBASE_STORAGE_EMULATOR_HOST","CLOUD_STORAGE_EMULATOR_HOST","authInstance","AUTH","FIREBASE_AUTH_EMULATOR_HOST","hubInstance","HUB","FIREBASE_EMULATOR_HUB","proc","spawn","stdio","shell","windowsHide","err","exitDelayMs","once","code","setTimeout","exitCode","logSuccess","projectId","getProjectId","GCLOUD_PROJECT","showUI","ui","startAll"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.emulatorExec = exports.shutdownWhenKilled = exports.setExportOnExitOptions = exports.parseInspectionPort = exports.beforeEmulatorCommand = exports.warnEmulatorNotSupported = exports.printNoticeIfEmulated = exports.DESC_TEST_PARAMS = exports.FLAG_TEST_PARAMS = exports.DESC_TEST_CONFIG = exports.FLAG_TEST_CONFIG = exports.DESC_UI = exports.FLAG_UI = exports.EXPORT_ON_EXIT_USAGE_ERROR = exports.DESC_EXPORT_ON_EXIT = exports.FLAG_EXPORT_ON_EXIT = exports.FLAG_EXPORT_ON_EXIT_NAME = exports.DESC_IMPORT = exports.FLAG_IMPORT = exports.DESC_INSPECT_FUNCTIONS = exports.FLAG_INSPECT_FUNCTIONS = exports.DESC_ONLY = exports.FLAG_ONLY = void 0;\nconst clc = require(\"cli-color\");\nconst childProcess = require(\"child_process\");\nconst controller = require(\"../emulator/controller\");\nconst config_1 = require(\"../config\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nconst path = require(\"path\");\nconst constants_1 = require(\"./constants\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst requireConfig = require(\"../requireConfig\");\nconst types_1 = require(\"./types\");\nconst error_1 = require(\"../error\");\nconst registry_1 = require(\"./registry\");\nconst firestoreEmulator_1 = require(\"./firestoreEmulator\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst prompt_1 = require(\"../prompt\");\nconst controller_1 = require(\"./controller\");\nconst fsutils = require(\"../fsutils\");\nconst Table = require(\"cli-table\");\nexports.FLAG_ONLY = \"--only <emulators>\";\nexports.DESC_ONLY = \"only specific emulators. \" +\n    \"This is a comma separated list of emulator names. \" +\n    \"Valid options are: \" +\n    JSON.stringify(types_1.ALL_SERVICE_EMULATORS);\nexports.FLAG_INSPECT_FUNCTIONS = \"--inspect-functions [port]\";\nexports.DESC_INSPECT_FUNCTIONS = \"emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)\";\nexports.FLAG_IMPORT = \"--import [dir]\";\nexports.DESC_IMPORT = \"import emulator data from a previous export (see emulators:export)\";\nexports.FLAG_EXPORT_ON_EXIT_NAME = \"--export-on-exit\";\nexports.FLAG_EXPORT_ON_EXIT = `${exports.FLAG_EXPORT_ON_EXIT_NAME} [dir]`;\nexports.DESC_EXPORT_ON_EXIT = \"automatically export emulator data (emulators:export) \" +\n    \"when the emulators make a clean exit (SIGINT), \" +\n    `when no dir is provided the location of ${exports.FLAG_IMPORT} is used`;\nexports.EXPORT_ON_EXIT_USAGE_ERROR = `\"${exports.FLAG_EXPORT_ON_EXIT_NAME}\" must be used with \"${exports.FLAG_IMPORT}\"` +\n    ` or provide a dir directly to \"${exports.FLAG_EXPORT_ON_EXIT}\"`;\nexports.FLAG_UI = \"--ui\";\nexports.DESC_UI = \"run the Emulator UI\";\nexports.FLAG_TEST_CONFIG = \"--test-config <firebase.json file>\";\nexports.DESC_TEST_CONFIG = \"A firebase.json style file. Used to configure the Firestore and Realtime Database emulators.\";\nexports.FLAG_TEST_PARAMS = \"--test-params <params.env file>\";\nexports.DESC_TEST_PARAMS = \"A .env file containing test param values for your emulated extension.\";\nconst DEFAULT_CONFIG = new config_1.Config({ database: {}, firestore: {}, functions: {}, hosting: {}, emulators: { auth: {}, pubsub: {} } }, {});\nfunction printNoticeIfEmulated(options, emulator) {\n    if (emulator !== types_1.Emulators.DATABASE && emulator !== types_1.Emulators.FIRESTORE) {\n        return;\n    }\n    const emuName = constants_1.Constants.description(emulator);\n    const envKey = emulator === types_1.Emulators.DATABASE\n        ? constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST\n        : constants_1.Constants.FIRESTORE_EMULATOR_HOST;\n    const envVal = process.env[envKey];\n    if (envVal) {\n        utils.logBullet(`You have set ${clc.bold(`${envKey}=${envVal}`)}, this command will execute against the ${emuName} running at that address.`);\n    }\n}\nexports.printNoticeIfEmulated = printNoticeIfEmulated;\nfunction warnEmulatorNotSupported(options, emulator) {\n    if (emulator !== types_1.Emulators.DATABASE && emulator !== types_1.Emulators.FIRESTORE) {\n        return;\n    }\n    const emuName = constants_1.Constants.description(emulator);\n    const envKey = emulator === types_1.Emulators.DATABASE\n        ? constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST\n        : constants_1.Constants.FIRESTORE_EMULATOR_HOST;\n    const envVal = process.env[envKey];\n    if (envVal) {\n        utils.logWarning(`You have set ${clc.bold(`${envKey}=${envVal}`)}, however this command does not support running against the ${emuName} so this action will affect production.`);\n        const opts = {\n            confirm: undefined,\n        };\n        return prompt_1.promptOnce({\n            type: \"confirm\",\n            default: false,\n            message: \"Do you want to continue?\",\n        }).then((confirm) => {\n            if (!opts.confirm) {\n                return utils.reject(\"Command aborted.\", { exit: 1 });\n            }\n        });\n    }\n}\nexports.warnEmulatorNotSupported = warnEmulatorNotSupported;\nasync function beforeEmulatorCommand(options) {\n    const optionsWithDefaultConfig = Object.assign(Object.assign({}, options), { config: DEFAULT_CONFIG });\n    const optionsWithConfig = options.config ? options : optionsWithDefaultConfig;\n    const canStartWithoutConfig = options.only &&\n        !controller.shouldStart(optionsWithConfig, types_1.Emulators.FUNCTIONS) &&\n        !controller.shouldStart(optionsWithConfig, types_1.Emulators.HOSTING);\n    try {\n        await requireAuth_1.requireAuth(options);\n    }\n    catch (e) {\n        logger_1.logger.debug(e);\n        utils.logLabeledWarning(\"emulators\", `You are not currently authenticated so some features may not work correctly. Please run ${clc.bold(\"firebase login\")} to authenticate the CLI.`);\n    }\n    if (canStartWithoutConfig && !options.config) {\n        utils.logWarning(\"Could not find config (firebase.json) so using defaults.\");\n        options.config = DEFAULT_CONFIG;\n    }\n    else {\n        await requireConfig(options);\n    }\n}\nexports.beforeEmulatorCommand = beforeEmulatorCommand;\nfunction parseInspectionPort(options) {\n    let port = options.inspectFunctions;\n    if (port === true) {\n        port = \"9229\";\n    }\n    const parsed = Number(port);\n    if (isNaN(parsed) || parsed < 1024 || parsed > 65535) {\n        throw new error_1.FirebaseError(`\"${port}\" is not a valid port for debugging, please pass an integer between 1024 and 65535.`);\n    }\n    return parsed;\n}\nexports.parseInspectionPort = parseInspectionPort;\nfunction setExportOnExitOptions(options) {\n    if (options.exportOnExit || typeof options.exportOnExit === \"string\") {\n        if (options.import) {\n            options.exportOnExit =\n                typeof options.exportOnExit === \"string\" ? options.exportOnExit : options.import;\n            const importPath = path.resolve(options.import);\n            if (!fsutils.dirExistsSync(importPath) && options.import === options.exportOnExit) {\n                options.exportOnExit = options.import;\n                delete options.import;\n            }\n        }\n        if (options.exportOnExit === true || !options.exportOnExit) {\n            throw new error_1.FirebaseError(exports.EXPORT_ON_EXIT_USAGE_ERROR);\n        }\n    }\n    return;\n}\nexports.setExportOnExitOptions = setExportOnExitOptions;\nfunction processKillSignal(signal, res, rej, options) {\n    let lastSignal = new Date().getTime();\n    let signalCount = 0;\n    return async () => {\n        try {\n            const now = new Date().getTime();\n            const diff = now - lastSignal;\n            if (diff < 100) {\n                logger_1.logger.debug(`Ignoring signal ${signal} due to short delay of ${diff}ms`);\n                return;\n            }\n            signalCount = signalCount + 1;\n            lastSignal = now;\n            const signalDisplay = signal === \"SIGINT\" ? `SIGINT (Ctrl-C)` : signal;\n            logger_1.logger.debug(`Received signal ${signalDisplay} ${signalCount}`);\n            logger_1.logger.info(\" \");\n            if (signalCount === 1) {\n                utils.logLabeledBullet(\"emulators\", `Received ${signalDisplay} for the first time. Starting a clean shutdown.`);\n                utils.logLabeledBullet(\"emulators\", `Please wait for a clean shutdown or send the ${signalDisplay} signal again to stop right now.`);\n                await controller_1.onExit(options);\n                await controller.cleanShutdown();\n            }\n            else {\n                logger_1.logger.debug(`Skipping clean onExit() and cleanShutdown()`);\n                const runningEmulatorsInfosWithPid = registry_1.EmulatorRegistry.listRunningWithInfo().filter((i) => Boolean(i.pid));\n                utils.logLabeledWarning(\"emulators\", `Received ${signalDisplay} ${signalCount} times. You have forced the Emulator Suite to exit without waiting for ${runningEmulatorsInfosWithPid.length} subprocess${runningEmulatorsInfosWithPid.length > 1 ? \"es\" : \"\"} to finish. These processes ${clc.bold(\"may\")} still be running on your machine: `);\n                const pids = [];\n                const emulatorsTable = new Table({\n                    head: [\"Emulator\", \"Host:Port\", \"PID\"],\n                    style: {\n                        head: [\"yellow\"],\n                    },\n                });\n                for (const emulatorInfo of runningEmulatorsInfosWithPid) {\n                    pids.push(emulatorInfo.pid);\n                    emulatorsTable.push([\n                        constants_1.Constants.description(emulatorInfo.name),\n                        registry_1.EmulatorRegistry.getInfoHostString(emulatorInfo),\n                        emulatorInfo.pid,\n                    ]);\n                }\n                logger_1.logger.info(`\\n${emulatorsTable}\\n\\nTo force them to exit run:\\n`);\n                if (process.platform === \"win32\") {\n                    logger_1.logger.info(clc.bold(`TASKKILL ${pids.map((pid) => \"/PID \" + pid).join(\" \")} /T\\n`));\n                }\n                else {\n                    logger_1.logger.info(clc.bold(`kill ${pids.join(\" \")}\\n`));\n                }\n            }\n            res();\n        }\n        catch (e) {\n            logger_1.logger.debug(e);\n            rej();\n        }\n    };\n}\nfunction shutdownWhenKilled(options) {\n    return new Promise((res, rej) => {\n        [\"SIGINT\", \"SIGTERM\", \"SIGHUP\", \"SIGQUIT\"].forEach((signal) => {\n            process.on(signal, processKillSignal(signal, res, rej, options));\n        });\n    })\n        .then(() => {\n        process.exit(0);\n    })\n        .catch((e) => {\n        logger_1.logger.debug(e);\n        utils.logLabeledWarning(\"emulators\", \"emulators failed to shut down cleanly, see firebase-debug.log for details.\");\n        process.exit(1);\n    });\n}\nexports.shutdownWhenKilled = shutdownWhenKilled;\nasync function runScript(script, extraEnv) {\n    utils.logBullet(`Running script: ${clc.bold(script)}`);\n    const env = Object.assign(Object.assign({}, process.env), extraEnv);\n    const databaseInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.DATABASE);\n    if (databaseInstance) {\n        const info = databaseInstance.getInfo();\n        const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n        env[constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST] = address;\n    }\n    const firestoreInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.FIRESTORE);\n    if (firestoreInstance) {\n        const info = firestoreInstance.getInfo();\n        const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n        env[constants_1.Constants.FIRESTORE_EMULATOR_HOST] = address;\n        env[firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT] = address;\n    }\n    const storageInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.STORAGE);\n    if (storageInstance) {\n        const info = storageInstance.getInfo();\n        const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n        env[constants_1.Constants.FIREBASE_STORAGE_EMULATOR_HOST] = address;\n        env[constants_1.Constants.CLOUD_STORAGE_EMULATOR_HOST] = `http://${address}`;\n    }\n    const authInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.AUTH);\n    if (authInstance) {\n        const info = authInstance.getInfo();\n        const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n        env[constants_1.Constants.FIREBASE_AUTH_EMULATOR_HOST] = address;\n    }\n    const hubInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.HUB);\n    if (hubInstance) {\n        const info = hubInstance.getInfo();\n        const address = registry_1.EmulatorRegistry.getInfoHostString(info);\n        env[constants_1.Constants.FIREBASE_EMULATOR_HUB] = address;\n    }\n    const proc = childProcess.spawn(script, {\n        stdio: [\"inherit\", \"inherit\", \"inherit\"],\n        shell: true,\n        windowsHide: true,\n        env,\n    });\n    logger_1.logger.debug(`Running ${script} with environment ${JSON.stringify(env)}`);\n    return new Promise((resolve, reject) => {\n        proc.on(\"error\", (err) => {\n            utils.logWarning(`There was an error running the script: ${JSON.stringify(err)}`);\n            reject();\n        });\n        const exitDelayMs = 500;\n        proc.once(\"exit\", (code, signal) => {\n            if (signal) {\n                utils.logWarning(`Script exited with signal: ${signal}`);\n                setTimeout(reject, exitDelayMs);\n                return;\n            }\n            const exitCode = code || 0;\n            if (code === 0) {\n                utils.logSuccess(`Script exited successfully (code 0)`);\n            }\n            else {\n                utils.logWarning(`Script exited unsuccessfully (code ${code})`);\n            }\n            setTimeout(() => {\n                resolve(exitCode);\n            }, exitDelayMs);\n        });\n    });\n}\nasync function emulatorExec(script, options) {\n    shutdownWhenKilled(options);\n    const projectId = projectUtils_1.getProjectId(options);\n    const extraEnv = {};\n    if (projectId) {\n        extraEnv.GCLOUD_PROJECT = projectId;\n    }\n    let exitCode = 0;\n    try {\n        const showUI = !!options.ui;\n        await controller.startAll(options, showUI);\n        exitCode = await runScript(script, extraEnv);\n        await controller_1.onExit(options);\n    }\n    finally {\n        await controller.cleanShutdown();\n    }\n    if (exitCode !== 0) {\n        throw new error_1.FirebaseError(`Script \"${clc.bold(script)}\" exited with code ${exitCode}`, {\n            exit: exitCode,\n        });\n    }\n}\nexports.emulatorExec = emulatorExec;\n"]},"metadata":{},"sourceType":"script"}