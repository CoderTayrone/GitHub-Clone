{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = varValueConvert;\n\nvar _isWindows = require('./is-windows');\n\nvar _isWindows2 = _interopRequireDefault(_isWindows);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar pathLikeEnvVarWhitelist = new Set(['PATH', 'NODE_PATH']);\n/**\n * This will transform UNIX-style list values to Windows-style.\n * For example, the value of the $PATH variable \"/usr/bin:/usr/local/bin:.\"\n * will become \"/usr/bin;/usr/local/bin;.\" on Windows.\n * @param {String} varValue Original value of the env variable\n * @param {String} varName Original name of the env variable\n * @returns {String} Converted value\n */\n\nfunction replaceListDelimiters(varValue) {\n  var varName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var targetSeparator = (0, _isWindows2.default)() ? ';' : ':';\n\n  if (!pathLikeEnvVarWhitelist.has(varName)) {\n    return varValue;\n  }\n\n  return varValue.replace(/(\\\\*):/g, function (match, backslashes) {\n    if (backslashes.length % 2) {\n      // Odd number of backslashes preceding it means it's escaped,\n      // remove 1 backslash and return the rest as-is\n      return match.substr(1);\n    }\n\n    return backslashes + targetSeparator;\n  });\n}\n/**\n * This will attempt to resolve the value of any env variables that are inside\n * this string. For example, it will transform this:\n * cross-env FOO=$NODE_ENV BAR=\\\\$NODE_ENV echo $FOO $BAR\n * Into this:\n * FOO=development BAR=$NODE_ENV echo $FOO\n * (Or whatever value the variable NODE_ENV has)\n * Note that this function is only called with the right-side portion of the\n * env var assignment, so in that example, this function would transform\n * the string \"$NODE_ENV\" into \"development\"\n * @param {String} varValue Original value of the env variable\n * @returns {String} Converted value\n */\n\n\nfunction resolveEnvVars(varValue) {\n  var envUnixRegex = /(\\\\*)(\\$(\\w+)|\\${(\\w+)})/g; // $my_var or ${my_var} or \\$my_var\n\n  return varValue.replace(envUnixRegex, function (_, escapeChars, varNameWithDollarSign, varName, altVarName) {\n    // do not replace things preceded by a odd number of \\\n    if (escapeChars.length % 2 === 1) {\n      return varNameWithDollarSign;\n    }\n\n    return escapeChars.substr(0, escapeChars.length / 2) + (process.env[varName || altVarName] || '');\n  });\n}\n/**\n * Converts an environment variable value to be appropriate for the current OS.\n * @param {String} originalValue Original value of the env variable\n * @param {String} originalName Original name of the env variable\n * @returns {String} Converted value\n */\n\n\nfunction varValueConvert(originalValue, originalName) {\n  return resolveEnvVars(replaceListDelimiters(originalValue, originalName));\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/cross-env/dist/variable.js"],"names":["Object","defineProperty","exports","value","default","varValueConvert","_isWindows","require","_isWindows2","_interopRequireDefault","obj","__esModule","pathLikeEnvVarWhitelist","Set","replaceListDelimiters","varValue","varName","arguments","length","undefined","targetSeparator","has","replace","match","backslashes","substr","resolveEnvVars","envUnixRegex","_","escapeChars","varNameWithDollarSign","altVarName","process","env","originalValue","originalName"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACH,UAAD,CAAxC;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,uBAAuB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,WAAT,CAAR,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AACvC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AAEA,MAAIG,eAAe,GAAG,CAAC,GAAGZ,WAAW,CAACJ,OAAhB,MAA6B,GAA7B,GAAmC,GAAzD;;AACA,MAAI,CAACQ,uBAAuB,CAACS,GAAxB,CAA4BL,OAA5B,CAAL,EAA2C;AACzC,WAAOD,QAAP;AACD;;AAED,SAAOA,QAAQ,CAACO,OAAT,CAAiB,SAAjB,EAA4B,UAAUC,KAAV,EAAiBC,WAAjB,EAA8B;AAC/D,QAAIA,WAAW,CAACN,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B;AACA;AACA,aAAOK,KAAK,CAACE,MAAN,CAAa,CAAb,CAAP;AACD;;AACD,WAAOD,WAAW,GAAGJ,eAArB;AACD,GAPM,CAAP;AAQD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,cAAT,CAAwBX,QAAxB,EAAkC;AAChC,MAAIY,YAAY,GAAG,2BAAnB,CADgC,CACgB;;AAChD,SAAOZ,QAAQ,CAACO,OAAT,CAAiBK,YAAjB,EAA+B,UAAUC,CAAV,EAAaC,WAAb,EAA0BC,qBAA1B,EAAiDd,OAAjD,EAA0De,UAA1D,EAAsE;AAC1G;AACA,QAAIF,WAAW,CAACX,MAAZ,GAAqB,CAArB,KAA2B,CAA/B,EAAkC;AAChC,aAAOY,qBAAP;AACD;;AACD,WAAOD,WAAW,CAACJ,MAAZ,CAAmB,CAAnB,EAAsBI,WAAW,CAACX,MAAZ,GAAqB,CAA3C,KAAiDc,OAAO,CAACC,GAAR,CAAYjB,OAAO,IAAIe,UAAvB,KAAsC,EAAvF,CAAP;AACD,GANM,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS1B,eAAT,CAAyB6B,aAAzB,EAAwCC,YAAxC,EAAsD;AACpD,SAAOT,cAAc,CAACZ,qBAAqB,CAACoB,aAAD,EAAgBC,YAAhB,CAAtB,CAArB;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = varValueConvert;\n\nvar _isWindows = require('./is-windows');\n\nvar _isWindows2 = _interopRequireDefault(_isWindows);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar pathLikeEnvVarWhitelist = new Set(['PATH', 'NODE_PATH']);\n\n/**\n * This will transform UNIX-style list values to Windows-style.\n * For example, the value of the $PATH variable \"/usr/bin:/usr/local/bin:.\"\n * will become \"/usr/bin;/usr/local/bin;.\" on Windows.\n * @param {String} varValue Original value of the env variable\n * @param {String} varName Original name of the env variable\n * @returns {String} Converted value\n */\nfunction replaceListDelimiters(varValue) {\n  var varName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  var targetSeparator = (0, _isWindows2.default)() ? ';' : ':';\n  if (!pathLikeEnvVarWhitelist.has(varName)) {\n    return varValue;\n  }\n\n  return varValue.replace(/(\\\\*):/g, function (match, backslashes) {\n    if (backslashes.length % 2) {\n      // Odd number of backslashes preceding it means it's escaped,\n      // remove 1 backslash and return the rest as-is\n      return match.substr(1);\n    }\n    return backslashes + targetSeparator;\n  });\n}\n\n/**\n * This will attempt to resolve the value of any env variables that are inside\n * this string. For example, it will transform this:\n * cross-env FOO=$NODE_ENV BAR=\\\\$NODE_ENV echo $FOO $BAR\n * Into this:\n * FOO=development BAR=$NODE_ENV echo $FOO\n * (Or whatever value the variable NODE_ENV has)\n * Note that this function is only called with the right-side portion of the\n * env var assignment, so in that example, this function would transform\n * the string \"$NODE_ENV\" into \"development\"\n * @param {String} varValue Original value of the env variable\n * @returns {String} Converted value\n */\nfunction resolveEnvVars(varValue) {\n  var envUnixRegex = /(\\\\*)(\\$(\\w+)|\\${(\\w+)})/g; // $my_var or ${my_var} or \\$my_var\n  return varValue.replace(envUnixRegex, function (_, escapeChars, varNameWithDollarSign, varName, altVarName) {\n    // do not replace things preceded by a odd number of \\\n    if (escapeChars.length % 2 === 1) {\n      return varNameWithDollarSign;\n    }\n    return escapeChars.substr(0, escapeChars.length / 2) + (process.env[varName || altVarName] || '');\n  });\n}\n\n/**\n * Converts an environment variable value to be appropriate for the current OS.\n * @param {String} originalValue Original value of the env variable\n * @param {String} originalName Original name of the env variable\n * @returns {String} Converted value\n */\nfunction varValueConvert(originalValue, originalName) {\n  return resolveEnvVars(replaceListDelimiters(originalValue, originalName));\n}"]},"metadata":{},"sourceType":"script"}