{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _crossSpawn = require('cross-spawn');\n\nvar _command = require('./command');\n\nvar _command2 = _interopRequireDefault(_command);\n\nvar _variable = require('./variable');\n\nvar _variable2 = _interopRequireDefault(_variable);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = crossEnv;\nvar envSetterRegex = /(\\w+)=('(.*)'|\"(.*)\"|(.*))/;\n\nfunction crossEnv(args) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _parseCommand = parseCommand(args),\n      _parseCommand2 = _slicedToArray(_parseCommand, 3),\n      envSetters = _parseCommand2[0],\n      command = _parseCommand2[1],\n      commandArgs = _parseCommand2[2];\n\n  var env = getEnvVars(envSetters);\n\n  if (command) {\n    var proc = (0, _crossSpawn.spawn)( // run `path.normalize` for command(on windows)\n    (0, _command2.default)(command, env, true), // by default normalize is `false`, so not run for cmd args\n    commandArgs.map(function (arg) {\n      return (0, _command2.default)(arg, env);\n    }), {\n      stdio: 'inherit',\n      shell: options.shell,\n      env\n    });\n    process.on('SIGTERM', function () {\n      return proc.kill('SIGTERM');\n    });\n    process.on('SIGINT', function () {\n      return proc.kill('SIGINT');\n    });\n    process.on('SIGBREAK', function () {\n      return proc.kill('SIGBREAK');\n    });\n    process.on('SIGHUP', function () {\n      return proc.kill('SIGHUP');\n    });\n    proc.on('exit', function (code, signal) {\n      var crossEnvExitCode = code; // exit code could be null when OS kills the process(out of memory, etc) or due to node handling it\n      // but if the signal is SIGINT the user exited the process so we want exit code 0\n\n      if (crossEnvExitCode === null) {\n        crossEnvExitCode = signal === 'SIGINT' ? 0 : 1;\n      }\n\n      process.exit(crossEnvExitCode); //eslint-disable-line no-process-exit\n    });\n    return proc;\n  }\n\n  return null;\n}\n\nfunction parseCommand(args) {\n  var envSetters = {};\n  var command = null;\n  var commandArgs = [];\n\n  for (var i = 0; i < args.length; i++) {\n    var match = envSetterRegex.exec(args[i]);\n\n    if (match) {\n      var value = void 0;\n\n      if (typeof match[3] !== 'undefined') {\n        value = match[3];\n      } else if (typeof match[4] === 'undefined') {\n        value = match[5];\n      } else {\n        value = match[4];\n      }\n\n      envSetters[match[1]] = value;\n    } else {\n      // No more env setters, the rest of the line must be the command and args\n      var cStart = [];\n      cStart = args.slice(i) // Regex:\n      // match \"\\'\" or \"'\"\n      // or match \"\\\" if followed by [$\"\\] (lookahead)\n      .map(function (a) {\n        var re = /\\\\\\\\|(\\\\)?'|([\\\\])(?=[$\"\\\\])/g; // Eliminate all matches except for \"\\'\" => \"'\"\n\n        return a.replace(re, function (m) {\n          if (m === '\\\\\\\\') return '\\\\';\n          if (m === \"\\\\'\") return \"'\";\n          return '';\n        });\n      });\n      command = cStart[0];\n      commandArgs = cStart.slice(1);\n      break;\n    }\n  }\n\n  return [envSetters, command, commandArgs];\n}\n\nfunction getEnvVars(envSetters) {\n  var envVars = Object.assign({}, process.env);\n\n  if (process.env.APPDATA) {\n    envVars.APPDATA = process.env.APPDATA;\n  }\n\n  Object.keys(envSetters).forEach(function (varName) {\n    envVars[varName] = (0, _variable2.default)(envSetters[varName], varName);\n  });\n  return envVars;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/cross-env/dist/index.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_crossSpawn","require","_command","_command2","_interopRequireDefault","_variable","_variable2","obj","__esModule","default","module","exports","crossEnv","envSetterRegex","args","options","arguments","_parseCommand","parseCommand","_parseCommand2","envSetters","command","commandArgs","env","getEnvVars","proc","spawn","map","arg","stdio","shell","process","on","kill","code","signal","crossEnvExitCode","exit","match","exec","cStart","slice","a","re","replace","m","envVars","assign","APPDATA","keys","forEach","varName"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _crossSpawn = require('cross-spawn');\n\nvar _command = require('./command');\n\nvar _command2 = _interopRequireDefault(_command);\n\nvar _variable = require('./variable');\n\nvar _variable2 = _interopRequireDefault(_variable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = crossEnv;\n\nvar envSetterRegex = /(\\w+)=('(.*)'|\"(.*)\"|(.*))/;\n\nfunction crossEnv(args) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _parseCommand = parseCommand(args),\n      _parseCommand2 = _slicedToArray(_parseCommand, 3),\n      envSetters = _parseCommand2[0],\n      command = _parseCommand2[1],\n      commandArgs = _parseCommand2[2];\n\n  var env = getEnvVars(envSetters);\n  if (command) {\n    var proc = (0, _crossSpawn.spawn)(\n    // run `path.normalize` for command(on windows)\n    (0, _command2.default)(command, env, true),\n    // by default normalize is `false`, so not run for cmd args\n    commandArgs.map(function (arg) {\n      return (0, _command2.default)(arg, env);\n    }), {\n      stdio: 'inherit',\n      shell: options.shell,\n      env\n    });\n    process.on('SIGTERM', function () {\n      return proc.kill('SIGTERM');\n    });\n    process.on('SIGINT', function () {\n      return proc.kill('SIGINT');\n    });\n    process.on('SIGBREAK', function () {\n      return proc.kill('SIGBREAK');\n    });\n    process.on('SIGHUP', function () {\n      return proc.kill('SIGHUP');\n    });\n    proc.on('exit', function (code, signal) {\n      var crossEnvExitCode = code;\n      // exit code could be null when OS kills the process(out of memory, etc) or due to node handling it\n      // but if the signal is SIGINT the user exited the process so we want exit code 0\n      if (crossEnvExitCode === null) {\n        crossEnvExitCode = signal === 'SIGINT' ? 0 : 1;\n      }\n      process.exit(crossEnvExitCode); //eslint-disable-line no-process-exit\n    });\n    return proc;\n  }\n  return null;\n}\n\nfunction parseCommand(args) {\n  var envSetters = {};\n  var command = null;\n  var commandArgs = [];\n  for (var i = 0; i < args.length; i++) {\n    var match = envSetterRegex.exec(args[i]);\n    if (match) {\n      var value = void 0;\n\n      if (typeof match[3] !== 'undefined') {\n        value = match[3];\n      } else if (typeof match[4] === 'undefined') {\n        value = match[5];\n      } else {\n        value = match[4];\n      }\n\n      envSetters[match[1]] = value;\n    } else {\n      // No more env setters, the rest of the line must be the command and args\n      var cStart = [];\n      cStart = args.slice(i)\n      // Regex:\n      // match \"\\'\" or \"'\"\n      // or match \"\\\" if followed by [$\"\\] (lookahead)\n      .map(function (a) {\n        var re = /\\\\\\\\|(\\\\)?'|([\\\\])(?=[$\"\\\\])/g;\n        // Eliminate all matches except for \"\\'\" => \"'\"\n        return a.replace(re, function (m) {\n          if (m === '\\\\\\\\') return '\\\\';\n          if (m === \"\\\\'\") return \"'\";\n          return '';\n        });\n      });\n      command = cStart[0];\n      commandArgs = cStart.slice(1);\n      break;\n    }\n  }\n\n  return [envSetters, command, commandArgs];\n}\n\nfunction getEnvVars(envSetters) {\n  var envVars = Object.assign({}, process.env);\n  if (process.env.APPDATA) {\n    envVars.APPDATA = process.env.APPDATA;\n  }\n  Object.keys(envSetters).forEach(function (varName) {\n    envVars[varName] = (0, _variable2.default)(envSetters[varName], varName);\n  });\n  return envVars;\n}"]},"metadata":{},"sourceType":"script"}