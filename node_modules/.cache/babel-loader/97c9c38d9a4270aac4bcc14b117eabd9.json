{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar fs = require(\"fs\");\n\nvar homeDir = require(\"os\").homedir();\n\nvar path = require(\"path\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nvar {\n  Config\n} = require(\"../config\");\n\nvar fsutils = require(\"../fsutils\");\n\nvar {\n  init\n} = require(\"../init\");\n\nconst {\n  logger\n} = require(\"../logger\");\n\nvar {\n  prompt,\n  promptOnce\n} = require(\"../prompt\");\n\nvar {\n  requireAuth\n} = require(\"../requireAuth\");\n\nvar utils = require(\"../utils\");\n\nconst {\n  getAllAccounts\n} = require(\"../auth\");\n\nvar TEMPLATE_ROOT = path.resolve(__dirname, \"../../templates/\");\nvar BANNER_TEXT = fs.readFileSync(path.join(TEMPLATE_ROOT, \"banner.txt\"), \"utf8\");\nvar GITIGNORE_TEMPLATE = fs.readFileSync(path.join(TEMPLATE_ROOT, \"_gitignore\"), \"utf8\");\n\nvar _isOutside = function (from, to) {\n  return path.relative(from, to).match(/^\\.\\./);\n};\n\nconst choices = [{\n  value: \"database\",\n  name: \"Realtime Database: Configure a security rules file for Realtime Database and (optionally) provision default instance\",\n  checked: false\n}, {\n  value: \"firestore\",\n  name: \"Firestore: Configure security rules and indexes files for Firestore\",\n  checked: false\n}, {\n  value: \"functions\",\n  name: \"Functions: Configure a Cloud Functions directory and its files\",\n  checked: false\n}, {\n  value: \"hosting\",\n  name: \"Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys\",\n  checked: false\n}, {\n  value: \"hosting:github\",\n  name: \"Hosting: Set up GitHub Action deploys\",\n  checked: false\n}, {\n  value: \"storage\",\n  name: \"Storage: Configure a security rules file for Cloud Storage\",\n  checked: false\n}, {\n  value: \"emulators\",\n  name: \"Emulators: Set up local emulators for Firebase products\",\n  checked: false\n}, {\n  value: \"remoteconfig\",\n  name: \"Remote Config: Configure a template file for Remote Config\",\n  checked: false\n}];\nconst featureNames = choices.map(choice => choice.value);\nconst DESCRIPTION = `Interactively configure the current directory as a Firebase project or initialize new features in an already configured Firebase project directory.\n\nThis command will create or update 'firebase.json' and '.firebaserc' configuration files in the current directory. \n\nTo initialize a specific Firebase feature, run 'firebase init [feature]'. Valid features are:\n${[...featureNames].sort().map(n => `\\n  - ${n}`).join(\"\")}`;\nmodule.exports = new Command(\"init [feature]\").description(DESCRIPTION).before(requireAuth).action(function (feature, options) {\n  if (feature && !featureNames.includes(feature)) {\n    return utils.reject(clc.bold(feature) + \" is not a supported feature; must be one of \" + featureNames.join(\", \") + \".\", {\n      exit: 1\n    });\n  }\n\n  var cwd = options.cwd || process.cwd();\n  var warnings = [];\n  var warningText = \"\";\n\n  if (_isOutside(homeDir, cwd)) {\n    warnings.push(\"You are currently outside your home directory\");\n  }\n\n  if (cwd === homeDir) {\n    warnings.push(\"You are initializing your home directory as a Firebase project directory\");\n  }\n\n  var existingConfig = Config.load(options, true);\n\n  if (existingConfig) {\n    warnings.push(\"You are initializing within an existing Firebase project directory\");\n  }\n\n  var config = existingConfig !== null ? existingConfig : new Config({}, {\n    projectDir: cwd,\n    cwd: cwd\n  });\n\n  if (warnings.length) {\n    warningText = \"\\nBefore we get started, keep in mind:\\n\\n  \" + clc.yellow.bold(\"* \") + warnings.join(\"\\n  \" + clc.yellow.bold(\"* \")) + \"\\n\";\n  }\n\n  logger.info(clc.yellow.bold(BANNER_TEXT) + \"\\nYou're about to initialize a Firebase project in this directory:\\n\\n  \" + clc.bold(config.projectDir) + \"\\n\" + warningText);\n  var setup = {\n    config: config.src,\n    rcfile: config.readProjectFile(\".firebaserc\", {\n      json: true,\n      fallback: {}\n    })\n  };\n  var next;\n\n  if (process.platform === \"win32\") {\n    next = promptOnce({\n      type: \"confirm\",\n      message: \"Are you ready to proceed?\"\n    });\n  } else {\n    next = Promise.resolve(true);\n  }\n\n  return next.then(function (proceed) {\n    if (!proceed) {\n      return utils.reject(\"Aborted by user.\", {\n        exit: 1\n      });\n    }\n\n    if (feature) {\n      setup.featureArg = true;\n      setup.features = [feature];\n      return undefined;\n    }\n\n    return prompt(setup, [{\n      type: \"checkbox\",\n      name: \"features\",\n      message: \"Which Firebase features do you want to set up for this directory? \" + \"Press Space to select features, then Enter to confirm your choices.\",\n      choices: choices\n    }]);\n  }).then(function () {\n    if (setup.features.length === 0) {\n      return utils.reject(\"Must select at least one feature. Use \" + clc.bold.underline(\"SPACEBAR\") + \" to select features, or specify a feature by running \" + clc.bold(\"firebase init [feature_name]\"));\n    }\n\n    setup.features.unshift(\"project\");\n    const allAccounts = getAllAccounts();\n\n    if (allAccounts.length > 1) {\n      setup.features.unshift(\"account\");\n    }\n\n    return init(setup, config, options);\n  }).then(function () {\n    logger.info();\n    utils.logBullet(\"Writing configuration info to \" + clc.bold(\"firebase.json\") + \"...\");\n    config.writeProjectFile(\"firebase.json\", setup.config);\n    utils.logBullet(\"Writing project information to \" + clc.bold(\".firebaserc\") + \"...\");\n    config.writeProjectFile(\".firebaserc\", setup.rcfile);\n\n    if (!fsutils.fileExistsSync(config.path(\".gitignore\"))) {\n      utils.logBullet(\"Writing gitignore file to \" + clc.bold(\".gitignore\") + \"...\");\n      config.writeProjectFile(\".gitignore\", GITIGNORE_TEMPLATE);\n    }\n\n    logger.info();\n    utils.logSuccess(\"Firebase initialization complete!\");\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/init.js"],"names":["clc","require","fs","homeDir","homedir","path","Command","Config","fsutils","init","logger","prompt","promptOnce","requireAuth","utils","getAllAccounts","TEMPLATE_ROOT","resolve","__dirname","BANNER_TEXT","readFileSync","join","GITIGNORE_TEMPLATE","_isOutside","from","to","relative","match","choices","value","name","checked","featureNames","map","choice","DESCRIPTION","sort","n","module","exports","description","before","action","feature","options","includes","reject","bold","exit","cwd","process","warnings","warningText","push","existingConfig","load","config","projectDir","length","yellow","info","setup","src","rcfile","readProjectFile","json","fallback","next","platform","type","message","Promise","then","proceed","featureArg","features","undefined","underline","unshift","allAccounts","logBullet","writeProjectFile","fileExistsSync","logSuccess"],"mappings":"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","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar fs = require(\"fs\");\nvar homeDir = require(\"os\").homedir();\nvar path = require(\"path\");\nvar { Command } = require(\"../command\");\nvar { Config } = require(\"../config\");\nvar fsutils = require(\"../fsutils\");\nvar { init } = require(\"../init\");\nconst { logger } = require(\"../logger\");\nvar { prompt, promptOnce } = require(\"../prompt\");\nvar { requireAuth } = require(\"../requireAuth\");\nvar utils = require(\"../utils\");\nconst { getAllAccounts } = require(\"../auth\");\nvar TEMPLATE_ROOT = path.resolve(__dirname, \"../../templates/\");\nvar BANNER_TEXT = fs.readFileSync(path.join(TEMPLATE_ROOT, \"banner.txt\"), \"utf8\");\nvar GITIGNORE_TEMPLATE = fs.readFileSync(path.join(TEMPLATE_ROOT, \"_gitignore\"), \"utf8\");\nvar _isOutside = function (from, to) {\n    return path.relative(from, to).match(/^\\.\\./);\n};\nconst choices = [\n    {\n        value: \"database\",\n        name: \"Realtime Database: Configure a security rules file for Realtime Database and (optionally) provision default instance\",\n        checked: false,\n    },\n    {\n        value: \"firestore\",\n        name: \"Firestore: Configure security rules and indexes files for Firestore\",\n        checked: false,\n    },\n    {\n        value: \"functions\",\n        name: \"Functions: Configure a Cloud Functions directory and its files\",\n        checked: false,\n    },\n    {\n        value: \"hosting\",\n        name: \"Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys\",\n        checked: false,\n    },\n    {\n        value: \"hosting:github\",\n        name: \"Hosting: Set up GitHub Action deploys\",\n        checked: false,\n    },\n    {\n        value: \"storage\",\n        name: \"Storage: Configure a security rules file for Cloud Storage\",\n        checked: false,\n    },\n    {\n        value: \"emulators\",\n        name: \"Emulators: Set up local emulators for Firebase products\",\n        checked: false,\n    },\n    {\n        value: \"remoteconfig\",\n        name: \"Remote Config: Configure a template file for Remote Config\",\n        checked: false,\n    },\n];\nconst featureNames = choices.map((choice) => choice.value);\nconst DESCRIPTION = `Interactively configure the current directory as a Firebase project or initialize new features in an already configured Firebase project directory.\n\nThis command will create or update 'firebase.json' and '.firebaserc' configuration files in the current directory. \n\nTo initialize a specific Firebase feature, run 'firebase init [feature]'. Valid features are:\n${[...featureNames]\n    .sort()\n    .map((n) => `\\n  - ${n}`)\n    .join(\"\")}`;\nmodule.exports = new Command(\"init [feature]\")\n    .description(DESCRIPTION)\n    .before(requireAuth)\n    .action(function (feature, options) {\n    if (feature && !featureNames.includes(feature)) {\n        return utils.reject(clc.bold(feature) +\n            \" is not a supported feature; must be one of \" +\n            featureNames.join(\", \") +\n            \".\", { exit: 1 });\n    }\n    var cwd = options.cwd || process.cwd();\n    var warnings = [];\n    var warningText = \"\";\n    if (_isOutside(homeDir, cwd)) {\n        warnings.push(\"You are currently outside your home directory\");\n    }\n    if (cwd === homeDir) {\n        warnings.push(\"You are initializing your home directory as a Firebase project directory\");\n    }\n    var existingConfig = Config.load(options, true);\n    if (existingConfig) {\n        warnings.push(\"You are initializing within an existing Firebase project directory\");\n    }\n    var config = existingConfig !== null ? existingConfig : new Config({}, { projectDir: cwd, cwd: cwd });\n    if (warnings.length) {\n        warningText =\n            \"\\nBefore we get started, keep in mind:\\n\\n  \" +\n                clc.yellow.bold(\"* \") +\n                warnings.join(\"\\n  \" + clc.yellow.bold(\"* \")) +\n                \"\\n\";\n    }\n    logger.info(clc.yellow.bold(BANNER_TEXT) +\n        \"\\nYou're about to initialize a Firebase project in this directory:\\n\\n  \" +\n        clc.bold(config.projectDir) +\n        \"\\n\" +\n        warningText);\n    var setup = {\n        config: config.src,\n        rcfile: config.readProjectFile(\".firebaserc\", {\n            json: true,\n            fallback: {},\n        }),\n    };\n    var next;\n    if (process.platform === \"win32\") {\n        next = promptOnce({\n            type: \"confirm\",\n            message: \"Are you ready to proceed?\",\n        });\n    }\n    else {\n        next = Promise.resolve(true);\n    }\n    return next\n        .then(function (proceed) {\n        if (!proceed) {\n            return utils.reject(\"Aborted by user.\", { exit: 1 });\n        }\n        if (feature) {\n            setup.featureArg = true;\n            setup.features = [feature];\n            return undefined;\n        }\n        return prompt(setup, [\n            {\n                type: \"checkbox\",\n                name: \"features\",\n                message: \"Which Firebase features do you want to set up for this directory? \" +\n                    \"Press Space to select features, then Enter to confirm your choices.\",\n                choices: choices,\n            },\n        ]);\n    })\n        .then(function () {\n        if (setup.features.length === 0) {\n            return utils.reject(\"Must select at least one feature. Use \" +\n                clc.bold.underline(\"SPACEBAR\") +\n                \" to select features, or specify a feature by running \" +\n                clc.bold(\"firebase init [feature_name]\"));\n        }\n        setup.features.unshift(\"project\");\n        const allAccounts = getAllAccounts();\n        if (allAccounts.length > 1) {\n            setup.features.unshift(\"account\");\n        }\n        return init(setup, config, options);\n    })\n        .then(function () {\n        logger.info();\n        utils.logBullet(\"Writing configuration info to \" + clc.bold(\"firebase.json\") + \"...\");\n        config.writeProjectFile(\"firebase.json\", setup.config);\n        utils.logBullet(\"Writing project information to \" + clc.bold(\".firebaserc\") + \"...\");\n        config.writeProjectFile(\".firebaserc\", setup.rcfile);\n        if (!fsutils.fileExistsSync(config.path(\".gitignore\"))) {\n            utils.logBullet(\"Writing gitignore file to \" + clc.bold(\".gitignore\") + \"...\");\n            config.writeProjectFile(\".gitignore\", GITIGNORE_TEMPLATE);\n        }\n        logger.info();\n        utils.logSuccess(\"Firebase initialization complete!\");\n    });\n});\n"]},"metadata":{},"sourceType":"script"}