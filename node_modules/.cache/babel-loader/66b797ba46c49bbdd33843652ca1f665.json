{"ast":null,"code":"var _jsxFileName = \"/home/dev/Documentos/Projects/github-clone/src/Contexts/SearchContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react'; // Criar Variabel Global\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchContext = /*#__PURE__*/createContext({});\nexport const selectSearch = ({\n  children\n}) => {\n  _s();\n\n  const [search, setSearch] = useState();\n  return /*#__PURE__*/_jsxDEV(SearchContext.Provider, {\n    value: {\n      setSearch,\n      search\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(selectSearch, \"KLrPbisl3Mlzlvtc6UZb5fIFlSg=\");\n\nexport function useGetSearch() {\n  _s2();\n\n  const context = useContext(SearchContext);\n\n  if (!context) {\n    console.log('Usando ');\n  }\n\n  return context;\n}\n\n_s2(useGetSearch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/src/Contexts/SearchContext.js"],"names":["createContext","useContext","useState","SearchContext","selectSearch","children","search","setSearch","useGetSearch","context","console","log"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD,C,CAEA;;;AAEA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAEP,OAAO,MAAMI,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAE1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,EAApC;AAEA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAACK,MAAAA,SAAD;AAAYD,MAAAA;AAAZ,KAA/B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CATM;;GAAMD,Y;;AAWb,OAAO,SAASI,YAAT,GAAuB;AAAA;;AAC5B,QAAMC,OAAO,GAAGR,UAAU,CAACE,aAAD,CAA1B;;AAEA,MAAG,CAACM,OAAJ,EAAa;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;;AAED,SAAOF,OAAP;AACD;;IAReD,Y","sourcesContent":["import { createContext, useContext, useState } from 'react'\n\n// Criar Variabel Global\n\nexport const SearchContext = createContext({});\n\nexport const selectSearch = ({children}) => {\n\n  const [search, setSearch] = useState();\n\n  return (\n    <SearchContext.Provider value={{setSearch, search}}>\n      {children}\n    </SearchContext.Provider>\n  )\n}\n\nexport function useGetSearch(){\n  const context = useContext(SearchContext);\n\n  if(!context) {\n    console.log('Usando ')\n  }\n  \n  return context\n}"]},"metadata":{},"sourceType":"module"}