{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst Table = require(\"cli-table\");\n\nconst _ = require(\"lodash\");\n\nconst command_1 = require(\"../command\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst error_1 = require(\"../error\");\n\nconst utils = require(\"../utils\");\n\nconst extensionsUtils = require(\"../extensions/utils\");\n\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nexports.default = new command_1.Command(\"ext:dev:list <publisherId>\").description(\"list all published extensions associated with this publisher ID\").before(requireAuth_1.requireAuth).action(async publisherId => {\n  let extensions;\n\n  try {\n    extensions = await extensionsApi_1.listExtensions(publisherId);\n  } catch (err) {\n    throw new error_1.FirebaseError(err);\n  }\n\n  if (extensions.length < 1) {\n    throw new error_1.FirebaseError(`There are no published extensions associated with publisher ID ${clc.bold(publisherId)}. This could happen for two reasons:\\n` + \"  - The publisher ID doesn't exist or could be misspelled\\n\" + \"  - This publisher has not published any extensions\\n\\n\" + \"If you are expecting some extensions to appear, please make sure you have the correct publisher ID and try again.\");\n  }\n\n  const table = new Table({\n    head: [\"Extension ID\", \"Version\", \"Published\"],\n    style: {\n      head: [\"yellow\"]\n    }\n  });\n\n  const sorted = _.sortBy(extensions, \"createTime\", \"asc\").reverse();\n\n  sorted.forEach(extension => {\n    table.push([_.last(extension.ref.split(\"/\")), extension.latestVersion, extension.createTime ? extensionsUtils.formatTimestamp(extension.createTime) : \"\"]);\n  });\n  utils.logLabeledBullet(extensionsHelper_1.logPrefix, `list of published extensions for publisher ${clc.bold(publisherId)}:`);\n  logger_1.logger.info(table.toString());\n  return {\n    extensions: sorted\n  };\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-dev-list.js"],"names":["Object","defineProperty","exports","value","clc","require","Table","_","command_1","extensionsHelper_1","error_1","utils","extensionsUtils","extensionsApi_1","logger_1","requireAuth_1","default","Command","description","before","requireAuth","action","publisherId","extensions","listExtensions","err","FirebaseError","length","bold","table","head","style","sorted","sortBy","reverse","forEach","extension","push","last","ref","split","latestVersion","createTime","formatTimestamp","logLabeledBullet","logPrefix","logger","info","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,WAAD,CAArB;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMO,eAAe,GAAGP,OAAO,CAAC,qBAAD,CAA/B;;AACA,MAAMQ,eAAe,GAAGR,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMS,QAAQ,GAAGT,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMU,aAAa,GAAGV,OAAO,CAAC,gBAAD,CAA7B;;AACAH,OAAO,CAACc,OAAR,GAAkB,IAAIR,SAAS,CAACS,OAAd,CAAsB,4BAAtB,EACbC,WADa,CACD,iEADC,EAEbC,MAFa,CAENJ,aAAa,CAACK,WAFR,EAGbC,MAHa,CAGN,MAAOC,WAAP,IAAuB;AAC/B,MAAIC,UAAJ;;AACA,MAAI;AACAA,IAAAA,UAAU,GAAG,MAAMV,eAAe,CAACW,cAAhB,CAA+BF,WAA/B,CAAnB;AACH,GAFD,CAGA,OAAOG,GAAP,EAAY;AACR,UAAM,IAAIf,OAAO,CAACgB,aAAZ,CAA0BD,GAA1B,CAAN;AACH;;AACD,MAAIF,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;AACvB,UAAM,IAAIjB,OAAO,CAACgB,aAAZ,CAA2B,kEAAiEtB,GAAG,CAACwB,IAAJ,CAASN,WAAT,CAAsB,wCAAxF,GAC5B,6DAD4B,GAE5B,yDAF4B,GAG5B,mHAHE,CAAN;AAIH;;AACD,QAAMO,KAAK,GAAG,IAAIvB,KAAJ,CAAU;AACpBwB,IAAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,SAAjB,EAA4B,WAA5B,CADc;AAEpBC,IAAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAE,CAAC,QAAD;AAAR;AAFa,GAAV,CAAd;;AAIA,QAAME,MAAM,GAAGzB,CAAC,CAAC0B,MAAF,CAASV,UAAT,EAAqB,YAArB,EAAmC,KAAnC,EAA0CW,OAA1C,EAAf;;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAgBC,SAAD,IAAe;AAC1BP,IAAAA,KAAK,CAACQ,IAAN,CAAW,CACP9B,CAAC,CAAC+B,IAAF,CAAOF,SAAS,CAACG,GAAV,CAAcC,KAAd,CAAoB,GAApB,CAAP,CADO,EAEPJ,SAAS,CAACK,aAFH,EAGPL,SAAS,CAACM,UAAV,GAAuB9B,eAAe,CAAC+B,eAAhB,CAAgCP,SAAS,CAACM,UAA1C,CAAvB,GAA+E,EAHxE,CAAX;AAKH,GAND;AAOA/B,EAAAA,KAAK,CAACiC,gBAAN,CAAuBnC,kBAAkB,CAACoC,SAA1C,EAAsD,8CAA6CzC,GAAG,CAACwB,IAAJ,CAASN,WAAT,CAAsB,GAAzH;AACAR,EAAAA,QAAQ,CAACgC,MAAT,CAAgBC,IAAhB,CAAqBlB,KAAK,CAACmB,QAAN,EAArB;AACA,SAAO;AAAEzB,IAAAA,UAAU,EAAES;AAAd,GAAP;AACH,CAhCiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst Table = require(\"cli-table\");\nconst _ = require(\"lodash\");\nconst command_1 = require(\"../command\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst error_1 = require(\"../error\");\nconst utils = require(\"../utils\");\nconst extensionsUtils = require(\"../extensions/utils\");\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\nconst logger_1 = require(\"../logger\");\nconst requireAuth_1 = require(\"../requireAuth\");\nexports.default = new command_1.Command(\"ext:dev:list <publisherId>\")\n    .description(\"list all published extensions associated with this publisher ID\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (publisherId) => {\n    let extensions;\n    try {\n        extensions = await extensionsApi_1.listExtensions(publisherId);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(err);\n    }\n    if (extensions.length < 1) {\n        throw new error_1.FirebaseError(`There are no published extensions associated with publisher ID ${clc.bold(publisherId)}. This could happen for two reasons:\\n` +\n            \"  - The publisher ID doesn't exist or could be misspelled\\n\" +\n            \"  - This publisher has not published any extensions\\n\\n\" +\n            \"If you are expecting some extensions to appear, please make sure you have the correct publisher ID and try again.\");\n    }\n    const table = new Table({\n        head: [\"Extension ID\", \"Version\", \"Published\"],\n        style: { head: [\"yellow\"] },\n    });\n    const sorted = _.sortBy(extensions, \"createTime\", \"asc\").reverse();\n    sorted.forEach((extension) => {\n        table.push([\n            _.last(extension.ref.split(\"/\")),\n            extension.latestVersion,\n            extension.createTime ? extensionsUtils.formatTimestamp(extension.createTime) : \"\",\n        ]);\n    });\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `list of published extensions for publisher ${clc.bold(publisherId)}:`);\n    logger_1.logger.info(table.toString());\n    return { extensions: sorted };\n});\n"]},"metadata":{},"sourceType":"script"}