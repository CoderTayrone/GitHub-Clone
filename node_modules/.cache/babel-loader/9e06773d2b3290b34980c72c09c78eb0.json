{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst clc = require(\"cli-color\");\n\nconst utils = require(\"../utils\");\n\nconst auth = require(\"../auth\");\n\nconst prompt_1 = require(\"../prompt\");\n\nmodule.exports = new command_1.Command(\"logout [email]\").description(\"log the CLI out of Firebase\").action(async (email, options) => {\n  const globalToken = utils.getInheritedOption(options, \"token\");\n  utils.assertIsStringOrUndefined(globalToken);\n  const allAccounts = auth.getAllAccounts();\n\n  if (allAccounts.length === 0 && !globalToken) {\n    logger_1.logger.info(\"No need to logout, not logged in\");\n    return;\n  }\n\n  const defaultAccount = auth.getGlobalDefaultAccount();\n  const additionalAccounts = auth.getAdditionalAccounts();\n  const accountsToLogOut = email ? allAccounts.filter(a => a.user.email === email) : allAccounts;\n\n  if (email && accountsToLogOut.length === 0) {\n    utils.logWarning(`No account matches ${email}, can't log out.`);\n    return;\n  }\n\n  const logoutDefault = email === (defaultAccount === null || defaultAccount === void 0 ? void 0 : defaultAccount.user.email);\n  let newDefaultAccount = undefined;\n\n  if (logoutDefault && additionalAccounts.length > 0) {\n    if (additionalAccounts.length === 1) {\n      newDefaultAccount = additionalAccounts[0];\n    } else {\n      const choices = additionalAccounts.map(a => {\n        return {\n          name: a.user.email,\n          value: a\n        };\n      });\n      newDefaultAccount = await prompt_1.promptOnce({\n        type: \"list\",\n        message: \"You are logging out of your default account, which account should become the new default?\",\n        choices\n      });\n    }\n  }\n\n  for (const account of accountsToLogOut) {\n    const token = account.tokens.refresh_token;\n\n    if (token) {\n      auth.setRefreshToken(token);\n\n      try {\n        await auth.logout(token);\n      } catch (e) {\n        utils.logWarning(`Invalid refresh token for ${account.user.email}, did not need to deauthorize`);\n      }\n\n      utils.logSuccess(`Logged out from ${clc.bold(account.user.email)}`);\n    }\n  }\n\n  if (globalToken) {\n    auth.setRefreshToken(globalToken);\n\n    try {\n      await auth.logout(globalToken);\n    } catch (e) {\n      utils.logWarning(\"Invalid refresh token, did not need to deauthorize\");\n    }\n\n    utils.logSuccess(`Logged out from token \"${clc.bold(globalToken)}\"`);\n  }\n\n  if (newDefaultAccount) {\n    utils.logSuccess(`Setting default account to \"${newDefaultAccount.user.email}\"`);\n    auth.setGlobalDefaultAccount(newDefaultAccount);\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/logout.js"],"names":["Object","defineProperty","exports","value","command_1","require","logger_1","clc","utils","auth","prompt_1","module","Command","description","action","email","options","globalToken","getInheritedOption","assertIsStringOrUndefined","allAccounts","getAllAccounts","length","logger","info","defaultAccount","getGlobalDefaultAccount","additionalAccounts","getAdditionalAccounts","accountsToLogOut","filter","a","user","logWarning","logoutDefault","newDefaultAccount","undefined","choices","map","name","promptOnce","type","message","account","token","tokens","refresh_token","setRefreshToken","logout","e","logSuccess","bold","setGlobalDefaultAccount"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst clc = require(\"cli-color\");\nconst utils = require(\"../utils\");\nconst auth = require(\"../auth\");\nconst prompt_1 = require(\"../prompt\");\nmodule.exports = new command_1.Command(\"logout [email]\")\n    .description(\"log the CLI out of Firebase\")\n    .action(async (email, options) => {\n    const globalToken = utils.getInheritedOption(options, \"token\");\n    utils.assertIsStringOrUndefined(globalToken);\n    const allAccounts = auth.getAllAccounts();\n    if (allAccounts.length === 0 && !globalToken) {\n        logger_1.logger.info(\"No need to logout, not logged in\");\n        return;\n    }\n    const defaultAccount = auth.getGlobalDefaultAccount();\n    const additionalAccounts = auth.getAdditionalAccounts();\n    const accountsToLogOut = email\n        ? allAccounts.filter((a) => a.user.email === email)\n        : allAccounts;\n    if (email && accountsToLogOut.length === 0) {\n        utils.logWarning(`No account matches ${email}, can't log out.`);\n        return;\n    }\n    const logoutDefault = email === (defaultAccount === null || defaultAccount === void 0 ? void 0 : defaultAccount.user.email);\n    let newDefaultAccount = undefined;\n    if (logoutDefault && additionalAccounts.length > 0) {\n        if (additionalAccounts.length === 1) {\n            newDefaultAccount = additionalAccounts[0];\n        }\n        else {\n            const choices = additionalAccounts.map((a) => {\n                return {\n                    name: a.user.email,\n                    value: a,\n                };\n            });\n            newDefaultAccount = await prompt_1.promptOnce({\n                type: \"list\",\n                message: \"You are logging out of your default account, which account should become the new default?\",\n                choices,\n            });\n        }\n    }\n    for (const account of accountsToLogOut) {\n        const token = account.tokens.refresh_token;\n        if (token) {\n            auth.setRefreshToken(token);\n            try {\n                await auth.logout(token);\n            }\n            catch (e) {\n                utils.logWarning(`Invalid refresh token for ${account.user.email}, did not need to deauthorize`);\n            }\n            utils.logSuccess(`Logged out from ${clc.bold(account.user.email)}`);\n        }\n    }\n    if (globalToken) {\n        auth.setRefreshToken(globalToken);\n        try {\n            await auth.logout(globalToken);\n        }\n        catch (e) {\n            utils.logWarning(\"Invalid refresh token, did not need to deauthorize\");\n        }\n        utils.logSuccess(`Logged out from token \"${clc.bold(globalToken)}\"`);\n    }\n    if (newDefaultAccount) {\n        utils.logSuccess(`Setting default account to \"${newDefaultAccount.user.email}\"`);\n        auth.setGlobalDefaultAccount(newDefaultAccount);\n    }\n});\n"]},"metadata":{},"sourceType":"script"}