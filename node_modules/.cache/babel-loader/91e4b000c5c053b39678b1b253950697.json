{"ast":null,"code":"'use strict'; // most of this code was written by Andrew Kelley\n// licensed under the BSD license: see\n// https://github.com/andrewrk/node-mv/blob/master/package.json\n// this needs a cleanup\n\nconst u = require('universalify').fromCallback;\n\nconst fs = require('graceful-fs');\n\nconst copy = require('../copy/copy');\n\nconst path = require('path');\n\nconst remove = require('../remove').remove;\n\nconst mkdirp = require('../mkdirs').mkdirs;\n\nfunction move(src, dest, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  const overwrite = options.overwrite || options.clobber || false;\n  isSrcSubdir(src, dest, (err, itIs) => {\n    if (err) return callback(err);\n    if (itIs) return callback(new Error(`Cannot move '${src}' to a subdirectory of itself, '${dest}'.`));\n    mkdirp(path.dirname(dest), err => {\n      if (err) return callback(err);\n      doRename();\n    });\n  });\n\n  function doRename() {\n    if (path.resolve(src) === path.resolve(dest)) {\n      fs.access(src, callback);\n    } else if (overwrite) {\n      fs.rename(src, dest, err => {\n        if (!err) return callback();\n\n        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {\n          remove(dest, err => {\n            if (err) return callback(err);\n            options.overwrite = false; // just overwriteed it, no need to do it again\n\n            move(src, dest, options, callback);\n          });\n          return;\n        } // weird Windows shit\n\n\n        if (err.code === 'EPERM') {\n          setTimeout(() => {\n            remove(dest, err => {\n              if (err) return callback(err);\n              options.overwrite = false;\n              move(src, dest, options, callback);\n            });\n          }, 200);\n          return;\n        }\n\n        if (err.code !== 'EXDEV') return callback(err);\n        moveAcrossDevice(src, dest, overwrite, callback);\n      });\n    } else {\n      fs.link(src, dest, err => {\n        if (err) {\n          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {\n            return moveAcrossDevice(src, dest, overwrite, callback);\n          }\n\n          return callback(err);\n        }\n\n        return fs.unlink(src, callback);\n      });\n    }\n  }\n}\n\nfunction moveAcrossDevice(src, dest, overwrite, callback) {\n  fs.stat(src, (err, stat) => {\n    if (err) return callback(err);\n\n    if (stat.isDirectory()) {\n      moveDirAcrossDevice(src, dest, overwrite, callback);\n    } else {\n      moveFileAcrossDevice(src, dest, overwrite, callback);\n    }\n  });\n}\n\nfunction moveFileAcrossDevice(src, dest, overwrite, callback) {\n  const flags = overwrite ? 'w' : 'wx';\n  const ins = fs.createReadStream(src);\n  const outs = fs.createWriteStream(dest, {\n    flags\n  });\n  ins.on('error', err => {\n    ins.destroy();\n    outs.destroy();\n    outs.removeListener('close', onClose); // may want to create a directory but `out` line above\n    // creates an empty file for us: See #108\n    // don't care about error here\n\n    fs.unlink(dest, () => {\n      // note: `err` here is from the input stream errror\n      if (err.code === 'EISDIR' || err.code === 'EPERM') {\n        moveDirAcrossDevice(src, dest, overwrite, callback);\n      } else {\n        callback(err);\n      }\n    });\n  });\n  outs.on('error', err => {\n    ins.destroy();\n    outs.destroy();\n    outs.removeListener('close', onClose);\n    callback(err);\n  });\n  outs.once('close', onClose);\n  ins.pipe(outs);\n\n  function onClose() {\n    fs.unlink(src, callback);\n  }\n}\n\nfunction moveDirAcrossDevice(src, dest, overwrite, callback) {\n  const options = {\n    overwrite: false\n  };\n\n  if (overwrite) {\n    remove(dest, err => {\n      if (err) return callback(err);\n      startCopy();\n    });\n  } else {\n    startCopy();\n  }\n\n  function startCopy() {\n    copy(src, dest, options, err => {\n      if (err) return callback(err);\n      remove(src, callback);\n    });\n  }\n} // return true if dest is a subdir of src, otherwise false.\n// extract dest base dir and check if that is the same as src basename\n\n\nfunction isSrcSubdir(src, dest, cb) {\n  fs.stat(src, (err, st) => {\n    if (err) return cb(err);\n\n    if (st.isDirectory()) {\n      const baseDir = dest.split(path.dirname(src) + path.sep)[1];\n\n      if (baseDir) {\n        const destBasename = baseDir.split(path.sep)[0];\n        if (destBasename) return cb(null, src !== dest && dest.indexOf(src) > -1 && destBasename === path.basename(src));\n        return cb(null, false);\n      }\n\n      return cb(null, false);\n    }\n\n    return cb(null, false);\n  });\n}\n\nmodule.exports = {\n  move: u(move)\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/node_modules/fs-extra/lib/move/index.js"],"names":["u","require","fromCallback","fs","copy","path","remove","mkdirp","mkdirs","move","src","dest","options","callback","overwrite","clobber","isSrcSubdir","err","itIs","Error","dirname","doRename","resolve","access","rename","code","setTimeout","moveAcrossDevice","link","unlink","stat","isDirectory","moveDirAcrossDevice","moveFileAcrossDevice","flags","ins","createReadStream","outs","createWriteStream","on","destroy","removeListener","onClose","once","pipe","startCopy","cb","st","baseDir","split","sep","destBasename","indexOf","basename","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// most of this code was written by Andrew Kelley\n// licensed under the BSD license: see\n// https://github.com/andrewrk/node-mv/blob/master/package.json\n\n// this needs a cleanup\n\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\nconst copy = require('../copy/copy')\nconst path = require('path')\nconst remove = require('../remove').remove\nconst mkdirp = require('../mkdirs').mkdirs\n\nfunction move (src, dest, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = {}\n  }\n\n  const overwrite = options.overwrite || options.clobber || false\n\n  isSrcSubdir(src, dest, (err, itIs) => {\n    if (err) return callback(err)\n    if (itIs) return callback(new Error(`Cannot move '${src}' to a subdirectory of itself, '${dest}'.`))\n    mkdirp(path.dirname(dest), err => {\n      if (err) return callback(err)\n      doRename()\n    })\n  })\n\n  function doRename () {\n    if (path.resolve(src) === path.resolve(dest)) {\n      fs.access(src, callback)\n    } else if (overwrite) {\n      fs.rename(src, dest, err => {\n        if (!err) return callback()\n\n        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {\n          remove(dest, err => {\n            if (err) return callback(err)\n            options.overwrite = false // just overwriteed it, no need to do it again\n            move(src, dest, options, callback)\n          })\n          return\n        }\n\n        // weird Windows shit\n        if (err.code === 'EPERM') {\n          setTimeout(() => {\n            remove(dest, err => {\n              if (err) return callback(err)\n              options.overwrite = false\n              move(src, dest, options, callback)\n            })\n          }, 200)\n          return\n        }\n\n        if (err.code !== 'EXDEV') return callback(err)\n        moveAcrossDevice(src, dest, overwrite, callback)\n      })\n    } else {\n      fs.link(src, dest, err => {\n        if (err) {\n          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {\n            return moveAcrossDevice(src, dest, overwrite, callback)\n          }\n          return callback(err)\n        }\n        return fs.unlink(src, callback)\n      })\n    }\n  }\n}\n\nfunction moveAcrossDevice (src, dest, overwrite, callback) {\n  fs.stat(src, (err, stat) => {\n    if (err) return callback(err)\n\n    if (stat.isDirectory()) {\n      moveDirAcrossDevice(src, dest, overwrite, callback)\n    } else {\n      moveFileAcrossDevice(src, dest, overwrite, callback)\n    }\n  })\n}\n\nfunction moveFileAcrossDevice (src, dest, overwrite, callback) {\n  const flags = overwrite ? 'w' : 'wx'\n  const ins = fs.createReadStream(src)\n  const outs = fs.createWriteStream(dest, { flags })\n\n  ins.on('error', err => {\n    ins.destroy()\n    outs.destroy()\n    outs.removeListener('close', onClose)\n\n    // may want to create a directory but `out` line above\n    // creates an empty file for us: See #108\n    // don't care about error here\n    fs.unlink(dest, () => {\n      // note: `err` here is from the input stream errror\n      if (err.code === 'EISDIR' || err.code === 'EPERM') {\n        moveDirAcrossDevice(src, dest, overwrite, callback)\n      } else {\n        callback(err)\n      }\n    })\n  })\n\n  outs.on('error', err => {\n    ins.destroy()\n    outs.destroy()\n    outs.removeListener('close', onClose)\n    callback(err)\n  })\n\n  outs.once('close', onClose)\n  ins.pipe(outs)\n\n  function onClose () {\n    fs.unlink(src, callback)\n  }\n}\n\nfunction moveDirAcrossDevice (src, dest, overwrite, callback) {\n  const options = {\n    overwrite: false\n  }\n\n  if (overwrite) {\n    remove(dest, err => {\n      if (err) return callback(err)\n      startCopy()\n    })\n  } else {\n    startCopy()\n  }\n\n  function startCopy () {\n    copy(src, dest, options, err => {\n      if (err) return callback(err)\n      remove(src, callback)\n    })\n  }\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// extract dest base dir and check if that is the same as src basename\nfunction isSrcSubdir (src, dest, cb) {\n  fs.stat(src, (err, st) => {\n    if (err) return cb(err)\n    if (st.isDirectory()) {\n      const baseDir = dest.split(path.dirname(src) + path.sep)[1]\n      if (baseDir) {\n        const destBasename = baseDir.split(path.sep)[0]\n        if (destBasename) return cb(null, src !== dest && dest.indexOf(src) > -1 && destBasename === path.basename(src))\n        return cb(null, false)\n      }\n      return cb(null, false)\n    }\n    return cb(null, false)\n  })\n}\n\nmodule.exports = {\n  move: u(move)\n}\n"]},"metadata":{},"sourceType":"script"}