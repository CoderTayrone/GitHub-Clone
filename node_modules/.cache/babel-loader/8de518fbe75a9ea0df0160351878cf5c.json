{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar clc = require(\"cli-color\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nconst {\n  logger\n} = require(\"../logger\");\n\nvar requireConfig = require(\"../requireConfig\");\n\nvar utils = require(\"../utils\");\n\nfunction _logTargets(type, targets) {\n  logger.info(clc.cyan(\"[ \" + type + \" ]\"));\n\n  _.forEach(targets, function (resources, name) {\n    logger.info(name, \"(\" + (resources || []).join(\",\") + \")\");\n  });\n}\n\nmodule.exports = new Command(\"target [type]\").description(\"display configured deploy targets for the current project\").before(requireConfig).action(function (type, options) {\n  if (!options.project) {\n    return utils.reject(\"No active project, cannot list deploy targets.\");\n  }\n\n  logger.info(\"Resource targets for\", clc.bold(options.project) + \":\");\n  logger.info();\n\n  if (type) {\n    var targets = options.rc.targets(options.project, type);\n\n    _logTargets(type, targets);\n\n    return Promise.resolve(targets);\n  }\n\n  const allTargets = options.rc.allTargets(options.project);\n\n  for (const [targetType, targetName] of Object.entries(allTargets)) {\n    _logTargets(targetType, targetName);\n  }\n\n  return Promise.resolve(allTargets);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/target.js"],"names":["_","require","clc","Command","logger","requireConfig","utils","_logTargets","type","targets","info","cyan","forEach","resources","name","join","module","exports","description","before","action","options","project","reject","bold","rc","Promise","resolve","allTargets","targetType","targetName","Object","entries"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAI;AAAEE,EAAAA;AAAF,IAAcF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAaH,OAAO,CAAC,WAAD,CAA1B;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAAnB;;AACA,SAASM,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoC;AAChCL,EAAAA,MAAM,CAACM,IAAP,CAAYR,GAAG,CAACS,IAAJ,CAAS,OAAOH,IAAP,GAAc,IAAvB,CAAZ;;AACAR,EAAAA,CAAC,CAACY,OAAF,CAAUH,OAAV,EAAmB,UAAUI,SAAV,EAAqBC,IAArB,EAA2B;AAC1CV,IAAAA,MAAM,CAACM,IAAP,CAAYI,IAAZ,EAAkB,MAAM,CAACD,SAAS,IAAI,EAAd,EAAkBE,IAAlB,CAAuB,GAAvB,CAAN,GAAoC,GAAtD;AACH,GAFD;AAGH;;AACDC,MAAM,CAACC,OAAP,GAAiB,IAAId,OAAJ,CAAY,eAAZ,EACZe,WADY,CACA,2DADA,EAEZC,MAFY,CAELd,aAFK,EAGZe,MAHY,CAGL,UAAUZ,IAAV,EAAgBa,OAAhB,EAAyB;AACjC,MAAI,CAACA,OAAO,CAACC,OAAb,EAAsB;AAClB,WAAOhB,KAAK,CAACiB,MAAN,CAAa,gDAAb,CAAP;AACH;;AACDnB,EAAAA,MAAM,CAACM,IAAP,CAAY,sBAAZ,EAAoCR,GAAG,CAACsB,IAAJ,CAASH,OAAO,CAACC,OAAjB,IAA4B,GAAhE;AACAlB,EAAAA,MAAM,CAACM,IAAP;;AACA,MAAIF,IAAJ,EAAU;AACN,QAAIC,OAAO,GAAGY,OAAO,CAACI,EAAR,CAAWhB,OAAX,CAAmBY,OAAO,CAACC,OAA3B,EAAoCd,IAApC,CAAd;;AACAD,IAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,CAAX;;AACA,WAAOiB,OAAO,CAACC,OAAR,CAAgBlB,OAAhB,CAAP;AACH;;AACD,QAAMmB,UAAU,GAAGP,OAAO,CAACI,EAAR,CAAWG,UAAX,CAAsBP,OAAO,CAACC,OAA9B,CAAnB;;AACA,OAAK,MAAM,CAACO,UAAD,EAAaC,UAAb,CAAX,IAAuCC,MAAM,CAACC,OAAP,CAAeJ,UAAf,CAAvC,EAAmE;AAC/DrB,IAAAA,WAAW,CAACsB,UAAD,EAAaC,UAAb,CAAX;AACH;;AACD,SAAOJ,OAAO,CAACC,OAAR,CAAgBC,UAAhB,CAAP;AACH,CAnBgB,CAAjB","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar clc = require(\"cli-color\");\nvar { Command } = require(\"../command\");\nconst { logger } = require(\"../logger\");\nvar requireConfig = require(\"../requireConfig\");\nvar utils = require(\"../utils\");\nfunction _logTargets(type, targets) {\n    logger.info(clc.cyan(\"[ \" + type + \" ]\"));\n    _.forEach(targets, function (resources, name) {\n        logger.info(name, \"(\" + (resources || []).join(\",\") + \")\");\n    });\n}\nmodule.exports = new Command(\"target [type]\")\n    .description(\"display configured deploy targets for the current project\")\n    .before(requireConfig)\n    .action(function (type, options) {\n    if (!options.project) {\n        return utils.reject(\"No active project, cannot list deploy targets.\");\n    }\n    logger.info(\"Resource targets for\", clc.bold(options.project) + \":\");\n    logger.info();\n    if (type) {\n        var targets = options.rc.targets(options.project, type);\n        _logTargets(type, targets);\n        return Promise.resolve(targets);\n    }\n    const allTargets = options.rc.allTargets(options.project);\n    for (const [targetType, targetName] of Object.entries(allTargets)) {\n        _logTargets(targetType, targetName);\n    }\n    return Promise.resolve(allTargets);\n});\n"]},"metadata":{},"sourceType":"script"}