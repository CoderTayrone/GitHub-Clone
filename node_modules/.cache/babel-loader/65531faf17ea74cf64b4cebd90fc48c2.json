{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst metadata = require(\"../database/metadata\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nexports.default = new command_1.Command(\"database:rules:list\").description(\"list realtime database rulesets\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async options => {\n  const labeled = await metadata.getRulesetLabels(options.instance);\n  const rulesets = await metadata.listAllRulesets(options.instance);\n\n  for (const ruleset of rulesets) {\n    const labels = [];\n\n    if (ruleset.id == labeled.stable) {\n      labels.push(\"stable\");\n    }\n\n    if (ruleset.id == labeled.canary) {\n      labels.push(\"canary\");\n    }\n\n    logger_1.logger.info(`${ruleset.id}  ${ruleset.createdAt}  ${labels.join(\",\")}`);\n  }\n\n  logger_1.logger.info(\"Labels:\");\n  logger_1.logger.info(`  stable: ${labeled.stable}`);\n\n  if (labeled.canary) {\n    logger_1.logger.info(`  canary: ${labeled.canary}`);\n  }\n\n  return {\n    rulesets,\n    labeled\n  };\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-rules-list.js"],"names":["Object","defineProperty","exports","value","command_1","require","logger_1","requireDatabaseInstance_1","requirePermissions_1","metadata","types_1","commandUtils_1","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","warnEmulatorNotSupported","Emulators","DATABASE","action","options","labeled","getRulesetLabels","instance","rulesets","listAllRulesets","ruleset","labels","id","stable","push","canary","logger","info","createdAt","join"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,4BAAD,CAAzC;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,0BAAD,CAA9B;;AACAH,OAAO,CAACU,OAAR,GAAkB,IAAIR,SAAS,CAACS,OAAd,CAAsB,qBAAtB,EACbC,WADa,CACD,iCADC,EAEbC,MAFa,CAEN,uBAFM,EAEmB,yFAFnB,EAGbC,MAHa,CAGNR,oBAAoB,CAACS,kBAHf,EAGmC,CAAC,gCAAD,CAHnC,EAIbD,MAJa,CAINT,yBAAyB,CAACW,uBAJpB,EAKbF,MALa,CAKNL,cAAc,CAACQ,wBALT,EAKmCT,OAAO,CAACU,SAAR,CAAkBC,QALrD,EAMbC,MANa,CAMN,MAAOC,OAAP,IAAmB;AAC3B,QAAMC,OAAO,GAAG,MAAMf,QAAQ,CAACgB,gBAAT,CAA0BF,OAAO,CAACG,QAAlC,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMlB,QAAQ,CAACmB,eAAT,CAAyBL,OAAO,CAACG,QAAjC,CAAvB;;AACA,OAAK,MAAMG,OAAX,IAAsBF,QAAtB,EAAgC;AAC5B,UAAMG,MAAM,GAAG,EAAf;;AACA,QAAID,OAAO,CAACE,EAAR,IAAcP,OAAO,CAACQ,MAA1B,EAAkC;AAC9BF,MAAAA,MAAM,CAACG,IAAP,CAAY,QAAZ;AACH;;AACD,QAAIJ,OAAO,CAACE,EAAR,IAAcP,OAAO,CAACU,MAA1B,EAAkC;AAC9BJ,MAAAA,MAAM,CAACG,IAAP,CAAY,QAAZ;AACH;;AACD3B,IAAAA,QAAQ,CAAC6B,MAAT,CAAgBC,IAAhB,CAAsB,GAAEP,OAAO,CAACE,EAAG,KAAIF,OAAO,CAACQ,SAAU,KAAIP,MAAM,CAACQ,IAAP,CAAY,GAAZ,CAAiB,EAA9E;AACH;;AACDhC,EAAAA,QAAQ,CAAC6B,MAAT,CAAgBC,IAAhB,CAAqB,SAArB;AACA9B,EAAAA,QAAQ,CAAC6B,MAAT,CAAgBC,IAAhB,CAAsB,aAAYZ,OAAO,CAACQ,MAAO,EAAjD;;AACA,MAAIR,OAAO,CAACU,MAAZ,EAAoB;AAChB5B,IAAAA,QAAQ,CAAC6B,MAAT,CAAgBC,IAAhB,CAAsB,aAAYZ,OAAO,CAACU,MAAO,EAAjD;AACH;;AACD,SAAO;AAAEP,IAAAA,QAAF;AAAYH,IAAAA;AAAZ,GAAP;AACH,CAzBiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst metadata = require(\"../database/metadata\");\nconst types_1 = require(\"../emulator/types\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nexports.default = new command_1.Command(\"database:rules:list\")\n    .description(\"list realtime database rulesets\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (options) => {\n    const labeled = await metadata.getRulesetLabels(options.instance);\n    const rulesets = await metadata.listAllRulesets(options.instance);\n    for (const ruleset of rulesets) {\n        const labels = [];\n        if (ruleset.id == labeled.stable) {\n            labels.push(\"stable\");\n        }\n        if (ruleset.id == labeled.canary) {\n            labels.push(\"canary\");\n        }\n        logger_1.logger.info(`${ruleset.id}  ${ruleset.createdAt}  ${labels.join(\",\")}`);\n    }\n    logger_1.logger.info(\"Labels:\");\n    logger_1.logger.info(`  stable: ${labeled.stable}`);\n    if (labeled.canary) {\n        logger_1.logger.info(`  canary: ${labeled.canary}`);\n    }\n    return { rulesets, labeled };\n});\n"]},"metadata":{},"sourceType":"script"}