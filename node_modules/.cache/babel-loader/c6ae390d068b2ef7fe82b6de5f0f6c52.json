{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pollOperation = exports.OperationPoller = void 0;\n\nconst apiv2_1 = require(\"./apiv2\");\n\nconst error_1 = require(\"./error\");\n\nconst queue_1 = require(\"./throttler/queue\");\n\nconst DEFAULT_INITIAL_BACKOFF_DELAY_MILLIS = 250;\nconst DEFAULT_MASTER_TIMEOUT_MILLIS = 30000;\n\nclass OperationPoller {\n  async poll(options) {\n    const queue = new queue_1.Queue({\n      name: options.pollerName || \"LRO Poller\",\n      concurrency: 1,\n      retries: Number.MAX_SAFE_INTEGER,\n      maxBackoff: options.maxBackoff,\n      backoff: options.backoff || DEFAULT_INITIAL_BACKOFF_DELAY_MILLIS\n    });\n    const masterTimeout = options.masterTimeout || DEFAULT_MASTER_TIMEOUT_MILLIS;\n    const {\n      response,\n      error\n    } = await queue.run(this.getPollingTask(options), masterTimeout);\n    queue.close();\n\n    if (error) {\n      throw error instanceof error_1.FirebaseError ? error : new error_1.FirebaseError(error.message, {\n        status: error.code\n      });\n    }\n\n    return response;\n  }\n\n  getPollingTask(options) {\n    const apiClient = new apiv2_1.Client({\n      urlPrefix: options.apiOrigin,\n      apiVersion: options.apiVersion,\n      auth: true\n    });\n    return async () => {\n      let res;\n\n      try {\n        res = await apiClient.get(options.operationResourceName);\n      } catch (err) {\n        if (err.status === 500 || err.status === 503) {\n          throw err;\n        }\n\n        return {\n          error: err\n        };\n      }\n\n      if (options.onPoll) {\n        options.onPoll(res.body);\n      }\n\n      if (!res.body.done) {\n        throw new Error(\"Polling incomplete, should trigger retry with backoff\");\n      }\n\n      return res.body;\n    };\n  }\n\n}\n\nexports.OperationPoller = OperationPoller;\n\nfunction pollOperation(options) {\n  return new OperationPoller().poll(options);\n}\n\nexports.pollOperation = pollOperation;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/operation-poller.js"],"names":["Object","defineProperty","exports","value","pollOperation","OperationPoller","apiv2_1","require","error_1","queue_1","DEFAULT_INITIAL_BACKOFF_DELAY_MILLIS","DEFAULT_MASTER_TIMEOUT_MILLIS","poll","options","queue","Queue","name","pollerName","concurrency","retries","Number","MAX_SAFE_INTEGER","maxBackoff","backoff","masterTimeout","response","error","run","getPollingTask","close","FirebaseError","message","status","code","apiClient","Client","urlPrefix","apiOrigin","apiVersion","auth","res","get","operationResourceName","err","onPoll","body","done","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pollOperation = exports.OperationPoller = void 0;\nconst apiv2_1 = require(\"./apiv2\");\nconst error_1 = require(\"./error\");\nconst queue_1 = require(\"./throttler/queue\");\nconst DEFAULT_INITIAL_BACKOFF_DELAY_MILLIS = 250;\nconst DEFAULT_MASTER_TIMEOUT_MILLIS = 30000;\nclass OperationPoller {\n    async poll(options) {\n        const queue = new queue_1.Queue({\n            name: options.pollerName || \"LRO Poller\",\n            concurrency: 1,\n            retries: Number.MAX_SAFE_INTEGER,\n            maxBackoff: options.maxBackoff,\n            backoff: options.backoff || DEFAULT_INITIAL_BACKOFF_DELAY_MILLIS,\n        });\n        const masterTimeout = options.masterTimeout || DEFAULT_MASTER_TIMEOUT_MILLIS;\n        const { response, error } = await queue.run(this.getPollingTask(options), masterTimeout);\n        queue.close();\n        if (error) {\n            throw error instanceof error_1.FirebaseError\n                ? error\n                : new error_1.FirebaseError(error.message, { status: error.code });\n        }\n        return response;\n    }\n    getPollingTask(options) {\n        const apiClient = new apiv2_1.Client({\n            urlPrefix: options.apiOrigin,\n            apiVersion: options.apiVersion,\n            auth: true,\n        });\n        return async () => {\n            let res;\n            try {\n                res = await apiClient.get(options.operationResourceName);\n            }\n            catch (err) {\n                if (err.status === 500 || err.status === 503) {\n                    throw err;\n                }\n                return { error: err };\n            }\n            if (options.onPoll) {\n                options.onPoll(res.body);\n            }\n            if (!res.body.done) {\n                throw new Error(\"Polling incomplete, should trigger retry with backoff\");\n            }\n            return res.body;\n        };\n    }\n}\nexports.OperationPoller = OperationPoller;\nfunction pollOperation(options) {\n    return new OperationPoller().poll(options);\n}\nexports.pollOperation = pollOperation;\n"]},"metadata":{},"sourceType":"script"}