{"ast":null,"code":"\"use strict\";\n\nvar generate = require(\"es5-ext/array/generate\"),\n    from = require(\"es5-ext/array/from\"),\n    iterable = require(\"es5-ext/iterable/validate-object\"),\n    isValue = require(\"es5-ext/object/is-value\"),\n    stringifiable = require(\"es5-ext/object/validate-stringifiable\"),\n    repeat = require(\"es5-ext/string/#/repeat\"),\n    getStrippedLength = require(\"./get-stripped-length\");\n\nvar push = Array.prototype.push;\n\nmodule.exports = function (inputRows\n/*, options*/\n) {\n  var options = Object(arguments[1]),\n      colsMeta = [],\n      colsOptions = options.columns || [],\n      rows = [];\n  from(iterable(inputRows), function (row) {\n    var rowRows = [[]];\n    from(iterable(row), function (cellStr, columnIndex) {\n      var cellRows = stringifiable(cellStr).split(\"\\n\");\n\n      while (cellRows.length > rowRows.length) rowRows.push(generate(columnIndex, \"\"));\n\n      cellRows.forEach(function (cellRow, rowRowIndex) {\n        rowRows[rowRowIndex][columnIndex] = cellRow;\n      });\n    });\n    push.apply(rows, rowRows);\n  });\n  return rows.map(function (row) {\n    return from(iterable(row), function (str, index) {\n      var col = colsMeta[index],\n          strLength;\n      if (!col) col = colsMeta[index] = {\n        width: 0\n      };\n      str = stringifiable(str);\n      strLength = getStrippedLength(str);\n      if (strLength > col.width) col.width = strLength;\n      return {\n        str: str,\n        length: strLength\n      };\n    });\n  }).map(function (row) {\n    return row.map(function (item, index) {\n      var pad,\n          align = \"left\",\n          colOptions = colsOptions && colsOptions[index];\n      align = colOptions && colOptions.align === \"right\" ? \"right\" : \"left\";\n      pad = repeat.call(\" \", colsMeta[index].width - item.length);\n      if (align === \"left\") return item.str + pad;\n      return pad + item.str;\n    }).join(isValue(options.sep) ? options.sep : \" | \");\n  }).join(\"\\n\") + \"\\n\";\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/cli-color/columns.js"],"names":["generate","require","from","iterable","isValue","stringifiable","repeat","getStrippedLength","push","Array","prototype","module","exports","inputRows","options","Object","arguments","colsMeta","colsOptions","columns","rows","row","rowRows","cellStr","columnIndex","cellRows","split","length","forEach","cellRow","rowRowIndex","apply","map","str","index","col","strLength","width","item","pad","align","colOptions","call","join","sep"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar generate          = require(\"es5-ext/array/generate\")\n  , from              = require(\"es5-ext/array/from\")\n  , iterable          = require(\"es5-ext/iterable/validate-object\")\n  , isValue           = require(\"es5-ext/object/is-value\")\n  , stringifiable     = require(\"es5-ext/object/validate-stringifiable\")\n  , repeat            = require(\"es5-ext/string/#/repeat\")\n  , getStrippedLength = require(\"./get-stripped-length\");\n\nvar push = Array.prototype.push;\n\nmodule.exports = function (inputRows/*, options*/) {\n\tvar options = Object(arguments[1])\n\t  , colsMeta = []\n\t  , colsOptions = options.columns || []\n\t  , rows = [];\n\n\tfrom(iterable(inputRows), function (row) {\n\t\tvar rowRows = [[]];\n\t\tfrom(iterable(row), function (cellStr, columnIndex) {\n\t\t\tvar cellRows = stringifiable(cellStr).split(\"\\n\");\n\t\t\twhile (cellRows.length > rowRows.length) rowRows.push(generate(columnIndex, \"\"));\n\t\t\tcellRows.forEach(function (cellRow, rowRowIndex) {\n\t\t\t\trowRows[rowRowIndex][columnIndex] = cellRow;\n\t\t\t});\n\t\t});\n\t\tpush.apply(rows, rowRows);\n\t});\n\n\treturn (\n\t\trows\n\t\t\t.map(function (row) {\n\t\t\t\treturn from(iterable(row), function (str, index) {\n\t\t\t\t\tvar col = colsMeta[index], strLength;\n\t\t\t\t\tif (!col) col = colsMeta[index] = { width: 0 };\n\t\t\t\t\tstr = stringifiable(str);\n\t\t\t\t\tstrLength = getStrippedLength(str);\n\t\t\t\t\tif (strLength > col.width) col.width = strLength;\n\t\t\t\t\treturn { str: str, length: strLength };\n\t\t\t\t});\n\t\t\t})\n\t\t\t.map(function (row) {\n\t\t\t\treturn row\n\t\t\t\t\t.map(function (item, index) {\n\t\t\t\t\t\tvar pad, align = \"left\", colOptions = colsOptions && colsOptions[index];\n\t\t\t\t\t\talign = colOptions && colOptions.align === \"right\" ? \"right\" : \"left\";\n\t\t\t\t\t\tpad = repeat.call(\" \", colsMeta[index].width - item.length);\n\t\t\t\t\t\tif (align === \"left\") return item.str + pad;\n\t\t\t\t\t\treturn pad + item.str;\n\t\t\t\t\t})\n\t\t\t\t\t.join(isValue(options.sep) ? options.sep : \" | \");\n\t\t\t})\n\t\t\t.join(\"\\n\") + \"\\n\"\n\t);\n};\n"]},"metadata":{},"sourceType":"script"}