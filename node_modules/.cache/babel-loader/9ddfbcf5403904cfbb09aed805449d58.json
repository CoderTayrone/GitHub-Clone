{"ast":null,"code":"/**\n * @fileOverview\n * A simple promises-based check to see if a TCP port is already in use.\n */\n'use strict'; // define the exports first to avoid cyclic dependencies.\n\nexports.check = check;\nexports.waitUntilFreeOnHost = waitUntilFreeOnHost;\nexports.waitUntilFree = waitUntilFree;\nexports.waitUntilUsedOnHost = waitUntilUsedOnHost;\nexports.waitUntilUsed = waitUntilUsed;\nexports.waitForStatus = waitForStatus;\n\nvar is = require('is2');\n\nvar net = require('net');\n\nvar util = require('util');\n\nvar debug = require('debug')('tcp-port-used'); // Global Values\n\n\nvar TIMEOUT = 2000;\nvar RETRYTIME = 250;\n\nfunction getDeferred() {\n  var resolve,\n      reject,\n      promise = new Promise(function (res, rej) {\n    resolve = res;\n    reject = rej;\n  });\n  return {\n    resolve: resolve,\n    reject: reject,\n    promise: promise\n  };\n}\n/**\n * Creates an options object from all the possible arguments\n * @private\n * @param {Number} port a valid TCP port number\n * @param {String} host The DNS name or IP address.\n * @param {Boolean} status The desired in use status to wait for: false === not in use, true === in use\n * @param {Number} retryTimeMs the retry interval in milliseconds - defaultis is 200ms\n * @param {Number} timeOutMs the amount of time to wait until port is free default is 1000ms\n * @return {Object} An options object with all the above parameters as properties.\n */\n\n\nfunction makeOptionsObj(port, host, inUse, retryTimeMs, timeOutMs) {\n  var opts = {};\n  opts.port = port;\n  opts.host = host;\n  opts.inUse = inUse;\n  opts.retryTimeMs = retryTimeMs;\n  opts.timeOutMs = timeOutMs;\n  return opts;\n}\n/**\n * Checks if a TCP port is in use by creating the socket and binding it to the\n * target port. Once bound, successfully, it's assume the port is availble.\n * After the socket is closed or in error, the promise is resolved.\n * Note: you have to be super user to correctly test system ports (0-1023).\n * @param {Number|Object} port The port you are curious to see if available. If an object, must have the parameters as properties.\n * @param {String} [host] May be a DNS name or IP address. Default '127.0.0.1'\n * @return {Object} A deferred Q promise.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.check(22, '127.0.0.1')\n * .then(function(inUse) {\n *    debug('Port 22 usage: '+inUse);\n * }, function(err) {\n *    console.error('Error on check: '+util.inspect(err));\n * });\n */\n\n\nfunction check(port, host) {\n  var deferred = getDeferred();\n  var inUse = true;\n  var client;\n  var opts;\n\n  if (!is.obj(port)) {\n    opts = makeOptionsObj(port, host);\n  } else {\n    opts = port;\n  }\n\n  if (!is.port(opts.port)) {\n    debug('Error invalid port: ' + util.inspect(opts.port));\n    deferred.reject(new Error('invalid port: ' + util.inspect(opts.port)));\n    return deferred.promise;\n  }\n\n  if (is.nullOrUndefined(opts.host)) {\n    debug('set host address to default 127.0.0.1');\n    opts.host = '127.0.0.1';\n  }\n\n  function cleanUp() {\n    if (client) {\n      client.removeAllListeners('connect');\n      client.removeAllListeners('error');\n      client.end();\n      client.destroy();\n      client.unref();\n    } //debug('listeners removed from client socket');\n\n  }\n\n  function onConnectCb() {\n    //debug('check - promise resolved - in use');\n    deferred.resolve(inUse);\n    cleanUp();\n  }\n\n  function onErrorCb(err) {\n    if (err.code !== 'ECONNREFUSED') {\n      //debug('check - promise rejected, error: '+err.message);\n      deferred.reject(err);\n    } else {\n      //debug('ECONNREFUSED');\n      inUse = false; //debug('check - promise resolved - not in use');\n\n      deferred.resolve(inUse);\n    }\n\n    cleanUp();\n  }\n\n  client = new net.Socket();\n  client.once('connect', onConnectCb);\n  client.once('error', onErrorCb);\n  client.connect({\n    port: opts.port,\n    host: opts.host\n  }, function () {});\n  return deferred.promise;\n}\n/**\n * Creates a deferred promise and fulfills it only when the socket's usage\n * equals status in terms of 'in use' (false === not in use, true === in use).\n * Will retry on an interval specified in retryTimeMs.  Note: you have to be\n * super user to correctly test system ports (0-1023).\n * @param {Number|Object} port a valid TCP port number, if an object, has all the parameters described as properties.\n * @param {String} host The DNS name or IP address.\n * @param {Boolean} status The desired in use status to wait for false === not in use, true === in use\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 200ms\n * @param {Number} [timeOutMs] the amount of time to wait until port is free default is 1000ms\n * @return {Object} A deferred promise from the Q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitForStatus(44204, 'some.host.com', true, 500, 4000)\n * .then(function() {\n *     console.log('Port 44204 is now in use.');\n * }, function(err) {\n *     console.log('Error: ', error.message);\n * });\n */\n\n\nfunction waitForStatus(port, host, inUse, retryTimeMs, timeOutMs) {\n  var deferred = getDeferred();\n  var timeoutId;\n  var timedout = false;\n  var retryId; // the first arument may be an object, if it is not, make an object\n\n  var opts;\n\n  if (is.obj(port)) {\n    opts = port;\n  } else {\n    opts = makeOptionsObj(port, host, inUse, retryTimeMs, timeOutMs);\n  } //debug('opts:'+util.inspect(opts);\n\n\n  if (!is.bool(opts.inUse)) {\n    deferred.reject(new Error('inUse must be a boolean'));\n    return deferred.promise;\n  }\n\n  if (!is.positiveInt(opts.retryTimeMs)) {\n    opts.retryTimeMs = RETRYTIME;\n    debug('set retryTime to default ' + RETRYTIME + 'ms');\n  }\n\n  if (!is.positiveInt(opts.timeOutMs)) {\n    opts.timeOutMs = TIMEOUT;\n    debug('set timeOutMs to default ' + TIMEOUT + 'ms');\n  }\n\n  function cleanUp() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    if (retryId) {\n      clearTimeout(retryId);\n    }\n  }\n\n  function timeoutFunc() {\n    timedout = true;\n    cleanUp();\n    deferred.reject(new Error('timeout'));\n  }\n\n  timeoutId = setTimeout(timeoutFunc, opts.timeOutMs);\n\n  function doCheck() {\n    check(opts.port, opts.host).then(function (inUse) {\n      if (timedout) {\n        return;\n      } //debug('doCheck inUse: '+inUse);\n      //debug('doCheck opts.inUse: '+opts.inUse);\n\n\n      if (inUse === opts.inUse) {\n        deferred.resolve();\n        cleanUp();\n        return;\n      } else {\n        retryId = setTimeout(function () {\n          doCheck();\n        }, opts.retryTimeMs);\n        return;\n      }\n    }, function (err) {\n      if (timedout) {\n        return;\n      }\n\n      deferred.reject(err);\n      cleanUp();\n    });\n  }\n\n  doCheck();\n  return deferred.promise;\n}\n/**\n * Creates a deferred promise and fulfills it only when the socket is free.\n * Will retry on an interval specified in retryTimeMs.\n * Note: you have to be super user to correctly test system ports (0-1023).\n * @param {Number} port a valid TCP port number\n * @param {String} [host] The hostname or IP address of where the socket is.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 100ms.\n * @param {Number} [timeOutMs] the amount of time to wait until port is free. Default 300ms.\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilFreeOnHost(44203, 'some.host.com', 500, 4000)\n * .then(function() {\n *     console.log('Port 44203 is now free.');\n *  }, function(err) {\n *     console.loh('Error: ', error.message);\n *  });\n */\n\n\nfunction waitUntilFreeOnHost(port, host, retryTimeMs, timeOutMs) {\n  // the first arument may be an object, if it is not, make an object\n  var opts;\n\n  if (is.obj(port)) {\n    opts = port;\n    opts.inUse = false;\n  } else {\n    opts = makeOptionsObj(port, host, false, retryTimeMs, timeOutMs);\n  }\n\n  return waitForStatus(opts);\n}\n/**\n * For compatibility with previous version of the module, that did not provide\n * arguements for hostnames. The host is set to the localhost '127.0.0.1'.\n * @param {Number|Object} port a valid TCP port number. If an object, must contain all the parameters as properties.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 100ms.\n * @param {Number} [timeOutMs] the amount of time to wait until port is free. Default 300ms.\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilFree(44203, 500, 4000)\n * .then(function() {\n *     console.log('Port 44203 is now free.');\n *  }, function(err) {\n *     console.loh('Error: ', error.message);\n *  });\n */\n\n\nfunction waitUntilFree(port, retryTimeMs, timeOutMs) {\n  // the first arument may be an object, if it is not, make an object\n  var opts;\n\n  if (is.obj(port)) {\n    opts = port;\n    opts.host = '127.0.0.1';\n    opts.inUse = false;\n  } else {\n    opts = makeOptionsObj(port, '127.0.0.1', false, retryTimeMs, timeOutMs);\n  }\n\n  return waitForStatus(opts);\n}\n/**\n * Creates a deferred promise and fulfills it only when the socket is used.\n * Will retry on an interval specified in retryTimeMs.\n * Note: you have to be super user to correctly test system ports (0-1023).\n * @param {Number|Object} port a valid TCP port number. If an object, must contain all the parameters as properties.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 500ms\n * @param {Number} [timeOutMs] the amount of time to wait until port is free\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilUsedOnHost(44204, 'some.host.com', 500, 4000)\n * .then(function() {\n *     console.log('Port 44204 is now in use.');\n * }, function(err) {\n *     console.log('Error: ', error.message);\n * });\n */\n\n\nfunction waitUntilUsedOnHost(port, host, retryTimeMs, timeOutMs) {\n  // the first arument may be an object, if it is not, make an object\n  var opts;\n\n  if (is.obj(port)) {\n    opts = port;\n    opts.inUse = true;\n  } else {\n    opts = makeOptionsObj(port, host, true, retryTimeMs, timeOutMs);\n  }\n\n  return waitForStatus(opts);\n}\n/**\n * For compatibility to previous version of module which did not have support\n * for host addresses. This function works only for localhost.\n * @param {Number} port a valid TCP port number. If an Object, must contain all the parameters as properties.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 500ms\n * @param {Number} [timeOutMs] the amount of time to wait until port is free\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n * .then(function() {\n *     console.log('Port 44204 is now in use.');\n * }, function(err) {\n *     console.log('Error: ', error.message);\n * });\n */\n\n\nfunction waitUntilUsed(port, retryTimeMs, timeOutMs) {\n  // the first arument may be an object, if it is not, make an object\n  var opts;\n\n  if (is.obj(port)) {\n    opts = port;\n    opts.host = '127.0.0.1';\n    opts.inUse = true;\n  } else {\n    opts = makeOptionsObj(port, '127.0.0.1', true, retryTimeMs, timeOutMs);\n  }\n\n  return waitUntilUsedOnHost(opts);\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/tcp-port-used/index.js"],"names":["exports","check","waitUntilFreeOnHost","waitUntilFree","waitUntilUsedOnHost","waitUntilUsed","waitForStatus","is","require","net","util","debug","TIMEOUT","RETRYTIME","getDeferred","resolve","reject","promise","Promise","res","rej","makeOptionsObj","port","host","inUse","retryTimeMs","timeOutMs","opts","deferred","client","obj","inspect","Error","nullOrUndefined","cleanUp","removeAllListeners","end","destroy","unref","onConnectCb","onErrorCb","err","code","Socket","once","connect","timeoutId","timedout","retryId","bool","positiveInt","clearTimeout","timeoutFunc","setTimeout","doCheck","then"],"mappings":"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","sourcesContent":["/**\n * @fileOverview\n * A simple promises-based check to see if a TCP port is already in use.\n */\n'use strict';\n\n// define the exports first to avoid cyclic dependencies.\nexports.check = check;\nexports.waitUntilFreeOnHost = waitUntilFreeOnHost;\nexports.waitUntilFree = waitUntilFree;\nexports.waitUntilUsedOnHost = waitUntilUsedOnHost;\nexports.waitUntilUsed = waitUntilUsed;\nexports.waitForStatus = waitForStatus;\n\nvar is = require('is2');\nvar net = require('net');\nvar util = require('util');\nvar debug = require('debug')('tcp-port-used');\n\n// Global Values\nvar TIMEOUT = 2000;\nvar RETRYTIME = 250;\n\nfunction getDeferred() {\n    var resolve, reject, promise = new Promise(function(res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n\n    return {\n        resolve: resolve,\n        reject: reject,\n        promise: promise\n    };\n}\n\n/**\n * Creates an options object from all the possible arguments\n * @private\n * @param {Number} port a valid TCP port number\n * @param {String} host The DNS name or IP address.\n * @param {Boolean} status The desired in use status to wait for: false === not in use, true === in use\n * @param {Number} retryTimeMs the retry interval in milliseconds - defaultis is 200ms\n * @param {Number} timeOutMs the amount of time to wait until port is free default is 1000ms\n * @return {Object} An options object with all the above parameters as properties.\n */\nfunction makeOptionsObj(port, host, inUse, retryTimeMs, timeOutMs) {\n    var opts = {};\n    opts.port = port;\n    opts.host = host;\n    opts.inUse = inUse;\n    opts.retryTimeMs = retryTimeMs;\n    opts.timeOutMs = timeOutMs;\n    return opts;\n}\n\n/**\n * Checks if a TCP port is in use by creating the socket and binding it to the\n * target port. Once bound, successfully, it's assume the port is availble.\n * After the socket is closed or in error, the promise is resolved.\n * Note: you have to be super user to correctly test system ports (0-1023).\n * @param {Number|Object} port The port you are curious to see if available. If an object, must have the parameters as properties.\n * @param {String} [host] May be a DNS name or IP address. Default '127.0.0.1'\n * @return {Object} A deferred Q promise.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.check(22, '127.0.0.1')\n * .then(function(inUse) {\n *    debug('Port 22 usage: '+inUse);\n * }, function(err) {\n *    console.error('Error on check: '+util.inspect(err));\n * });\n */\nfunction check(port, host) {\n\n    var deferred = getDeferred();\n    var inUse = true;\n    var client;\n\n    var opts;\n    if (!is.obj(port)) {\n        opts = makeOptionsObj(port, host);\n    } else {\n        opts = port;\n    }\n\n    if (!is.port(opts.port)) {\n        debug('Error invalid port: '+util.inspect(opts.port));\n        deferred.reject(new Error('invalid port: '+util.inspect(opts.port)));\n        return deferred.promise;\n    }\n\n    if (is.nullOrUndefined(opts.host)) {\n        debug('set host address to default 127.0.0.1');\n        opts.host = '127.0.0.1';\n    }\n\n    function cleanUp() {\n        if (client) {\n            client.removeAllListeners('connect');\n            client.removeAllListeners('error');\n            client.end();\n            client.destroy();\n            client.unref();\n        }\n        //debug('listeners removed from client socket');\n    }\n\n    function onConnectCb() {\n        //debug('check - promise resolved - in use');\n        deferred.resolve(inUse);\n        cleanUp();\n    }\n\n    function onErrorCb(err) {\n        if (err.code !== 'ECONNREFUSED') {\n            //debug('check - promise rejected, error: '+err.message);\n            deferred.reject(err);\n        } else {\n            //debug('ECONNREFUSED');\n            inUse = false;\n            //debug('check - promise resolved - not in use');\n            deferred.resolve(inUse);\n        }\n        cleanUp();\n    }\n\n    client = new net.Socket();\n    client.once('connect', onConnectCb);\n    client.once('error', onErrorCb);\n    client.connect({port: opts.port, host: opts.host}, function() {});\n\n    return deferred.promise;\n}\n\n/**\n * Creates a deferred promise and fulfills it only when the socket's usage\n * equals status in terms of 'in use' (false === not in use, true === in use).\n * Will retry on an interval specified in retryTimeMs.  Note: you have to be\n * super user to correctly test system ports (0-1023).\n * @param {Number|Object} port a valid TCP port number, if an object, has all the parameters described as properties.\n * @param {String} host The DNS name or IP address.\n * @param {Boolean} status The desired in use status to wait for false === not in use, true === in use\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 200ms\n * @param {Number} [timeOutMs] the amount of time to wait until port is free default is 1000ms\n * @return {Object} A deferred promise from the Q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitForStatus(44204, 'some.host.com', true, 500, 4000)\n * .then(function() {\n *     console.log('Port 44204 is now in use.');\n * }, function(err) {\n *     console.log('Error: ', error.message);\n * });\n */\nfunction waitForStatus(port, host, inUse, retryTimeMs, timeOutMs) {\n\n    var deferred = getDeferred();\n    var timeoutId;\n    var timedout = false;\n    var retryId;\n\n    // the first arument may be an object, if it is not, make an object\n    var opts;\n    if (is.obj(port)) {\n        opts = port;\n    } else {\n        opts = makeOptionsObj(port, host, inUse, retryTimeMs, timeOutMs);\n    }\n\n    //debug('opts:'+util.inspect(opts);\n\n    if (!is.bool(opts.inUse)) {\n        deferred.reject(new Error('inUse must be a boolean'));\n        return deferred.promise;\n    }\n\n    if (!is.positiveInt(opts.retryTimeMs)) {\n        opts.retryTimeMs = RETRYTIME;\n        debug('set retryTime to default '+RETRYTIME+'ms');\n    }\n\n    if (!is.positiveInt(opts.timeOutMs)) {\n        opts.timeOutMs = TIMEOUT;\n        debug('set timeOutMs to default '+TIMEOUT+'ms');\n    }\n\n    function cleanUp() {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (retryId) {\n            clearTimeout(retryId);\n        }\n    }\n\n    function timeoutFunc() {\n        timedout = true;\n        cleanUp();\n        deferred.reject(new Error('timeout'));\n    }\n    timeoutId = setTimeout(timeoutFunc, opts.timeOutMs);\n\n    function doCheck() {\n        check(opts.port, opts.host)\n        .then(function(inUse) {\n            if (timedout) {\n                return;\n            }\n            //debug('doCheck inUse: '+inUse);\n            //debug('doCheck opts.inUse: '+opts.inUse);\n            if (inUse === opts.inUse) {\n                deferred.resolve();\n                cleanUp();\n                return;\n            } else {\n                retryId = setTimeout(function() { doCheck(); }, opts.retryTimeMs);\n                return;\n            }\n        }, function(err) {\n            if (timedout) {\n                return;\n            }\n            deferred.reject(err);\n            cleanUp();\n        });\n    }\n\n    doCheck();\n    return deferred.promise;\n}\n\n/**\n * Creates a deferred promise and fulfills it only when the socket is free.\n * Will retry on an interval specified in retryTimeMs.\n * Note: you have to be super user to correctly test system ports (0-1023).\n * @param {Number} port a valid TCP port number\n * @param {String} [host] The hostname or IP address of where the socket is.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 100ms.\n * @param {Number} [timeOutMs] the amount of time to wait until port is free. Default 300ms.\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilFreeOnHost(44203, 'some.host.com', 500, 4000)\n * .then(function() {\n *     console.log('Port 44203 is now free.');\n *  }, function(err) {\n *     console.loh('Error: ', error.message);\n *  });\n */\nfunction waitUntilFreeOnHost(port, host, retryTimeMs, timeOutMs) {\n\n    // the first arument may be an object, if it is not, make an object\n    var opts;\n    if (is.obj(port)) {\n        opts = port;\n        opts.inUse = false;\n    } else {\n        opts = makeOptionsObj(port, host, false, retryTimeMs, timeOutMs);\n    }\n\n    return waitForStatus(opts);\n}\n\n/**\n * For compatibility with previous version of the module, that did not provide\n * arguements for hostnames. The host is set to the localhost '127.0.0.1'.\n * @param {Number|Object} port a valid TCP port number. If an object, must contain all the parameters as properties.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 100ms.\n * @param {Number} [timeOutMs] the amount of time to wait until port is free. Default 300ms.\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilFree(44203, 500, 4000)\n * .then(function() {\n *     console.log('Port 44203 is now free.');\n *  }, function(err) {\n *     console.loh('Error: ', error.message);\n *  });\n */\nfunction waitUntilFree(port, retryTimeMs, timeOutMs) {\n\n    // the first arument may be an object, if it is not, make an object\n    var opts;\n    if (is.obj(port)) {\n        opts = port;\n        opts.host = '127.0.0.1';\n        opts.inUse = false;\n    } else {\n        opts = makeOptionsObj(port, '127.0.0.1', false, retryTimeMs, timeOutMs);\n    }\n\n    return waitForStatus(opts);\n}\n\n/**\n * Creates a deferred promise and fulfills it only when the socket is used.\n * Will retry on an interval specified in retryTimeMs.\n * Note: you have to be super user to correctly test system ports (0-1023).\n * @param {Number|Object} port a valid TCP port number. If an object, must contain all the parameters as properties.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 500ms\n * @param {Number} [timeOutMs] the amount of time to wait until port is free\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilUsedOnHost(44204, 'some.host.com', 500, 4000)\n * .then(function() {\n *     console.log('Port 44204 is now in use.');\n * }, function(err) {\n *     console.log('Error: ', error.message);\n * });\n */\nfunction waitUntilUsedOnHost(port, host, retryTimeMs, timeOutMs) {\n\n    // the first arument may be an object, if it is not, make an object\n    var opts;\n    if (is.obj(port)) {\n        opts = port;\n        opts.inUse = true;\n    } else {\n        opts = makeOptionsObj(port, host, true, retryTimeMs, timeOutMs);\n    }\n\n    return waitForStatus(opts);\n}\n\n/**\n * For compatibility to previous version of module which did not have support\n * for host addresses. This function works only for localhost.\n * @param {Number} port a valid TCP port number. If an Object, must contain all the parameters as properties.\n * @param {Number} [retryTimeMs] the retry interval in milliseconds - defaultis is 500ms\n * @param {Number} [timeOutMs] the amount of time to wait until port is free\n * @return {Object} A deferred promise from the q library.\n *\n * Example usage:\n *\n * var tcpPortUsed = require('tcp-port-used');\n * tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n * .then(function() {\n *     console.log('Port 44204 is now in use.');\n * }, function(err) {\n *     console.log('Error: ', error.message);\n * });\n */\nfunction waitUntilUsed(port, retryTimeMs, timeOutMs) {\n\n    // the first arument may be an object, if it is not, make an object\n    var opts;\n    if (is.obj(port)) {\n        opts = port;\n        opts.host = '127.0.0.1';\n        opts.inUse = true;\n    } else {\n        opts = makeOptionsObj(port, '127.0.0.1', true, retryTimeMs, timeOutMs);\n    }\n\n    return waitUntilUsedOnHost(opts);\n}\n\n"]},"metadata":{},"sourceType":"script"}