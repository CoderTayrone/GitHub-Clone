{"ast":null,"code":"/*jslint node: true*/\nvar toArray = require('lodash/toArray');\n\nvar emojiByName = require('./emoji.json');\n\n\"use strict\";\n/**\n * regex to parse emoji in a string - finds emoji, e.g. :coffee:\n */\n\n\nvar emojiNameRegex = /:([a-zA-Z0-9_\\-\\+]+):/g;\n/**\n * regex to trim whitespace\n * use instead of String.prototype.trim() for IE8 support\n */\n\nvar trimSpaceRegex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n/**\n * Removes colons on either side\n * of the string if present\n * @param  {string} str\n * @return {string}\n */\n\nfunction stripColons(str) {\n  var colonIndex = str.indexOf(':');\n\n  if (colonIndex > -1) {\n    // :emoji: (http://www.emoji-cheat-sheet.com/)\n    if (colonIndex === str.length - 1) {\n      str = str.substring(0, colonIndex);\n      return stripColons(str);\n    } else {\n      str = str.substr(colonIndex + 1);\n      return stripColons(str);\n    }\n  }\n\n  return str;\n}\n/**\n * Adds colons to either side\n * of the string\n * @param {string} str\n * @return {string}\n */\n\n\nfunction wrapColons(str) {\n  return typeof str === 'string' && str.length > 0 ? ':' + str + ':' : str;\n}\n/**\n * Ensure that the word is wrapped in colons\n * by only adding them, if they are not there.\n * @param {string} str\n * @return {string}\n */\n\n\nfunction ensureColons(str) {\n  return typeof str === 'string' && str[0] !== ':' ? wrapColons(str) : str;\n} // Non spacing mark, some emoticons have them. It's the 'Variant Form',\n// which provides more information so that emoticons can be rendered as\n// more colorful graphics. FE0E is a unicode text version, where as FE0F\n// should be rendered as a graphical version. The code gracefully degrades.\n\n\nvar NON_SPACING_MARK = String.fromCharCode(65039); // 65039 - '️' - 0xFE0F;\n\nvar nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g'); // Remove the non-spacing-mark from the code, never send a stripped version\n// to the client, as it kills graphical emoticons.\n\nfunction stripNSB(code) {\n  return code.replace(nonSpacingRegex, '');\n}\n\n; // Reversed hash table, where as emojiByName contains a { heart: '❤' }\n// dictionary emojiByCode contains { ❤: 'heart' }. The codes are normalized\n// to the text version.\n\nvar emojiByCode = Object.keys(emojiByName).reduce(function (h, k) {\n  h[stripNSB(emojiByName[k])] = k;\n  return h;\n}, {});\n/**\n * Emoji namespace\n */\n\nvar Emoji = {\n  emoji: emojiByName\n};\n/**\n * get emoji code from name. return emoji code back if code is passed in.\n * @param  {string} emoji\n * @return {string}\n */\n\nEmoji._get = function _get(emoji) {\n  if (emojiByCode[stripNSB(emoji)]) {\n    return emoji;\n  } else if (emojiByName.hasOwnProperty(emoji)) {\n    return emojiByName[emoji];\n  }\n\n  return ensureColons(emoji);\n};\n/**\n * get emoji code from :emoji: string or name\n * @param  {string} emoji\n * @return {string}\n */\n\n\nEmoji.get = function get(emoji) {\n  emoji = stripColons(emoji);\n  return Emoji._get(emoji);\n};\n/**\n * find the emoji by either code or name\n * @param {string} nameOrCode The emoji to find, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\n\n\nEmoji.find = function find(nameOrCode) {\n  return Emoji.findByName(nameOrCode) || Emoji.findByCode(nameOrCode);\n};\n/**\n * find the emoji by name\n * @param {string} name The emoji to find either `coffee` or `:coffee:`;\n * @return {object}\n */\n\n\nEmoji.findByName = function findByName(name) {\n  var stripped = stripColons(name);\n  var emoji = emojiByName[stripped];\n  return emoji ? {\n    emoji: emoji,\n    key: stripped\n  } : undefined;\n};\n/**\n * find the emoji by code (emoji)\n * @param {string} code The emoji to find; for example `☕` or `☔`\n * @return {object}\n */\n\n\nEmoji.findByCode = function findByCode(code) {\n  var stripped = stripNSB(code);\n  var name = emojiByCode[stripped]; // lookup emoji to ensure the Variant Form is returned\n\n  return name ? {\n    emoji: emojiByName[name],\n    key: name\n  } : undefined;\n};\n/**\n * Check if an emoji is known by this library\n * @param {string} nameOrCode The emoji to validate, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\n\n\nEmoji.hasEmoji = function hasEmoji(nameOrCode) {\n  return Emoji.hasEmojiByName(nameOrCode) || Emoji.hasEmojiByCode(nameOrCode);\n};\n/**\n * Check if an emoji with given name is known by this library\n * @param {string} name The emoji to validate either `coffee` or `:coffee:`;\n * @return {object}\n */\n\n\nEmoji.hasEmojiByName = function hasEmojiByName(name) {\n  var result = Emoji.findByName(name);\n  return !!result && result.key === stripColons(name);\n};\n/**\n * Check if a given emoji is known by this library\n * @param {string} code The emoji to validate; for example `☕` or `☔`\n * @return {object}\n */\n\n\nEmoji.hasEmojiByCode = function hasEmojiByCode(code) {\n  var result = Emoji.findByCode(code);\n  return !!result && stripNSB(result.emoji) === stripNSB(code);\n};\n/**\n * get emoji name from code\n * @param  {string} emoji\n * @param  {boolean} includeColons should the result include the ::\n * @return {string}\n */\n\n\nEmoji.which = function which(emoji_code, includeColons) {\n  var code = stripNSB(emoji_code);\n  var word = emojiByCode[code];\n  return includeColons ? wrapColons(word) : word;\n};\n/**\n * emojify a string (replace :emoji: with an emoji)\n * @param  {string} str\n * @param  {function} on_missing (gets emoji name without :: and returns a proper emoji if no emoji was found)\n * @param  {function} format (wrap the returned emoji in a custom element)\n * @return {string}\n */\n\n\nEmoji.emojify = function emojify(str, on_missing, format) {\n  if (!str) return '';\n  return str.split(emojiNameRegex) // parse emoji via regex\n  .map(function parseEmoji(s, i) {\n    // every second element is an emoji, e.g. \"test :fast_forward:\" -> [ \"test \", \"fast_forward\" ]\n    if (i % 2 === 0) return s;\n\n    var emoji = Emoji._get(s);\n\n    var isMissing = emoji.indexOf(':') > -1;\n\n    if (isMissing && typeof on_missing === 'function') {\n      return on_missing(s);\n    }\n\n    if (!isMissing && typeof format === 'function') {\n      return format(emoji, s);\n    }\n\n    return emoji;\n  }).join('') // convert back to string\n  ;\n};\n/**\n * return a random emoji\n * @return {string}\n */\n\n\nEmoji.random = function random() {\n  var emojiKeys = Object.keys(emojiByName);\n  var randomIndex = Math.floor(Math.random() * emojiKeys.length);\n  var key = emojiKeys[randomIndex];\n\n  var emoji = Emoji._get(key);\n\n  return {\n    key: key,\n    emoji: emoji\n  };\n};\n/**\n *  return an collection of potential emoji matches\n *  @param {string} str\n *  @return {Array.<Object>}\n */\n\n\nEmoji.search = function search(str) {\n  var emojiKeys = Object.keys(emojiByName);\n  var matcher = stripColons(str);\n  var matchingKeys = emojiKeys.filter(function (key) {\n    return key.toString().indexOf(matcher) === 0;\n  });\n  return matchingKeys.map(function (key) {\n    return {\n      key: key,\n      emoji: Emoji._get(key)\n    };\n  });\n};\n/**\n * unemojify a string (replace emoji with :emoji:)\n * @param  {string} str\n * @return {string}\n */\n\n\nEmoji.unemojify = function unemojify(str) {\n  if (!str) return '';\n  var words = toArray(str);\n  return words.map(function (word) {\n    return Emoji.which(word, true) || word;\n  }).join('');\n};\n/**\n * replace emojis with replacement value\n * @param {string} str\n * @param {function|string} the string or callback function to replace the emoji with\n * @param {boolean} should trailing whitespaces be cleaned? Defaults false\n * @return {string}\n */\n\n\nEmoji.replace = function replace(str, replacement, cleanSpaces) {\n  if (!str) return '';\n  var replace = typeof replacement === 'function' ? replacement : function () {\n    return replacement;\n  };\n  var words = toArray(str);\n  var replaced = words.map(function (word, idx) {\n    var emoji = Emoji.findByCode(word);\n\n    if (emoji && cleanSpaces && words[idx + 1] === ' ') {\n      words[idx + 1] = '';\n    }\n\n    return emoji ? replace(emoji) : word;\n  }).join('');\n  return cleanSpaces ? replaced.replace(trimSpaceRegex, '') : replaced;\n};\n/**\n * remove all emojis from a string\n * @param {string} str\n * @return {string}\n */\n\n\nEmoji.strip = function strip(str) {\n  return Emoji.replace(str, '', true);\n};\n\nmodule.exports = Emoji;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/node-emoji/lib/emoji.js"],"names":["toArray","require","emojiByName","emojiNameRegex","trimSpaceRegex","stripColons","str","colonIndex","indexOf","length","substring","substr","wrapColons","ensureColons","NON_SPACING_MARK","String","fromCharCode","nonSpacingRegex","RegExp","stripNSB","code","replace","emojiByCode","Object","keys","reduce","h","k","Emoji","emoji","_get","hasOwnProperty","get","find","nameOrCode","findByName","findByCode","name","stripped","key","undefined","hasEmoji","hasEmojiByName","hasEmojiByCode","result","which","emoji_code","includeColons","word","emojify","on_missing","format","split","map","parseEmoji","s","i","isMissing","join","random","emojiKeys","randomIndex","Math","floor","search","matcher","matchingKeys","filter","toString","unemojify","words","replacement","cleanSpaces","replaced","idx","strip","module","exports"],"mappings":"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","sourcesContent":["/*jslint node: true*/\nvar toArray = require('lodash/toArray');\nvar emojiByName = require('./emoji.json');\n\n\"use strict\";\n\n/**\n * regex to parse emoji in a string - finds emoji, e.g. :coffee:\n */\nvar emojiNameRegex = /:([a-zA-Z0-9_\\-\\+]+):/g;\n\n/**\n * regex to trim whitespace\n * use instead of String.prototype.trim() for IE8 support\n */\nvar trimSpaceRegex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n/**\n * Removes colons on either side\n * of the string if present\n * @param  {string} str\n * @return {string}\n */\nfunction stripColons (str) {\n  var colonIndex = str.indexOf(':');\n  if (colonIndex > -1) {\n    // :emoji: (http://www.emoji-cheat-sheet.com/)\n    if (colonIndex === str.length - 1) {\n      str = str.substring(0, colonIndex);\n      return stripColons(str);\n    } else {\n      str = str.substr(colonIndex + 1);\n      return stripColons(str);\n    }\n  }\n\n  return str;\n}\n\n/**\n * Adds colons to either side\n * of the string\n * @param {string} str\n * @return {string}\n */\nfunction wrapColons (str) {\n  return (typeof str === 'string' && str.length > 0) ? ':' + str + ':' : str;\n}\n\n/**\n * Ensure that the word is wrapped in colons\n * by only adding them, if they are not there.\n * @param {string} str\n * @return {string}\n */\nfunction ensureColons (str) {\n  return (typeof str === 'string' && str[0] !== ':') ? wrapColons(str) : str;\n}\n\n// Non spacing mark, some emoticons have them. It's the 'Variant Form',\n// which provides more information so that emoticons can be rendered as\n// more colorful graphics. FE0E is a unicode text version, where as FE0F\n// should be rendered as a graphical version. The code gracefully degrades.\nvar NON_SPACING_MARK = String.fromCharCode(65039); // 65039 - '️' - 0xFE0F;\nvar nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g')\n\n// Remove the non-spacing-mark from the code, never send a stripped version\n// to the client, as it kills graphical emoticons.\nfunction stripNSB (code) {\n  return code.replace(nonSpacingRegex, '');\n};\n\n// Reversed hash table, where as emojiByName contains a { heart: '❤' }\n// dictionary emojiByCode contains { ❤: 'heart' }. The codes are normalized\n// to the text version.\nvar emojiByCode = Object.keys(emojiByName).reduce(function(h,k) {\n  h[stripNSB(emojiByName[k])] = k;\n  return h;\n}, {});\n\n/**\n * Emoji namespace\n */\nvar Emoji = {\n  emoji: emojiByName,\n};\n\n/**\n * get emoji code from name. return emoji code back if code is passed in.\n * @param  {string} emoji\n * @return {string}\n */\nEmoji._get = function _get (emoji) {\n  if (emojiByCode[stripNSB(emoji)]) {\n    return emoji;\n  } else if (emojiByName.hasOwnProperty(emoji)) {\n    return emojiByName[emoji];\n  }\n\n  return ensureColons(emoji);\n};\n\n/**\n * get emoji code from :emoji: string or name\n * @param  {string} emoji\n * @return {string}\n */\nEmoji.get = function get (emoji) {\n  emoji = stripColons(emoji);\n\n  return Emoji._get(emoji);\n};\n\n/**\n * find the emoji by either code or name\n * @param {string} nameOrCode The emoji to find, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\nEmoji.find = function find (nameOrCode) {\n  return Emoji.findByName(nameOrCode) || Emoji.findByCode(nameOrCode);\n};\n\n/**\n * find the emoji by name\n * @param {string} name The emoji to find either `coffee` or `:coffee:`;\n * @return {object}\n */\nEmoji.findByName = function findByName (name) {\n  var stripped = stripColons(name);\n  var emoji = emojiByName[stripped];\n\n  return emoji ? ({ emoji: emoji, key: stripped }) : undefined;\n};\n\n/**\n * find the emoji by code (emoji)\n * @param {string} code The emoji to find; for example `☕` or `☔`\n * @return {object}\n */\nEmoji.findByCode = function findByCode (code) {\n  var stripped = stripNSB(code);\n  var name = emojiByCode[stripped];\n\n  // lookup emoji to ensure the Variant Form is returned\n  return name ? ({ emoji: emojiByName[name], key: name }) : undefined;\n};\n\n\n/**\n * Check if an emoji is known by this library\n * @param {string} nameOrCode The emoji to validate, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\nEmoji.hasEmoji = function hasEmoji (nameOrCode) {\n  return Emoji.hasEmojiByName(nameOrCode) || Emoji.hasEmojiByCode(nameOrCode);\n};\n\n/**\n * Check if an emoji with given name is known by this library\n * @param {string} name The emoji to validate either `coffee` or `:coffee:`;\n * @return {object}\n */\nEmoji.hasEmojiByName = function hasEmojiByName (name) {\n  var result = Emoji.findByName(name);\n  return !!result && result.key === stripColons(name);\n};\n\n/**\n * Check if a given emoji is known by this library\n * @param {string} code The emoji to validate; for example `☕` or `☔`\n * @return {object}\n */\nEmoji.hasEmojiByCode = function hasEmojiByCode (code) {\n  var result = Emoji.findByCode(code);\n  return !!result && stripNSB(result.emoji) === stripNSB(code);\n};\n\n/**\n * get emoji name from code\n * @param  {string} emoji\n * @param  {boolean} includeColons should the result include the ::\n * @return {string}\n */\nEmoji.which = function which (emoji_code, includeColons) {\n  var code = stripNSB(emoji_code);\n  var word = emojiByCode[code];\n\n  return includeColons ? wrapColons(word) : word;\n};\n\n/**\n * emojify a string (replace :emoji: with an emoji)\n * @param  {string} str\n * @param  {function} on_missing (gets emoji name without :: and returns a proper emoji if no emoji was found)\n * @param  {function} format (wrap the returned emoji in a custom element)\n * @return {string}\n */\nEmoji.emojify = function emojify (str, on_missing, format) {\n  if (!str) return '';\n\n  return str.split(emojiNameRegex) // parse emoji via regex\n            .map(function parseEmoji(s, i) {\n              // every second element is an emoji, e.g. \"test :fast_forward:\" -> [ \"test \", \"fast_forward\" ]\n              if (i % 2 === 0) return s;\n              var emoji = Emoji._get(s);\n              var isMissing = emoji.indexOf(':') > -1;\n\n              if (isMissing && typeof on_missing === 'function') {\n                return on_missing(s);\n              }\n\n              if (!isMissing && typeof format === 'function') {\n                return format(emoji, s);\n              }\n\n              return emoji;\n            })\n            .join('') // convert back to string\n  ;\n};\n\n/**\n * return a random emoji\n * @return {string}\n */\nEmoji.random = function random () {\n  var emojiKeys = Object.keys(emojiByName);\n  var randomIndex = Math.floor(Math.random() * emojiKeys.length);\n  var key = emojiKeys[randomIndex];\n  var emoji = Emoji._get(key);\n  return { key: key, emoji: emoji };\n}\n\n/**\n *  return an collection of potential emoji matches\n *  @param {string} str\n *  @return {Array.<Object>}\n */\nEmoji.search = function search (str) {\n  var emojiKeys = Object.keys(emojiByName);\n  var matcher = stripColons(str)\n  var matchingKeys = emojiKeys.filter(function(key) {\n    return key.toString().indexOf(matcher) === 0;\n  });\n  return matchingKeys.map(function(key) {\n    return {\n      key: key,\n      emoji: Emoji._get(key),\n    };\n  });\n}\n\n/**\n * unemojify a string (replace emoji with :emoji:)\n * @param  {string} str\n * @return {string}\n */\nEmoji.unemojify = function unemojify (str) {\n  if (!str) return '';\n  var words = toArray(str);\n\n  return words.map(function(word) {\n    return Emoji.which(word, true) || word;\n  }).join('');\n};\n\n/**\n * replace emojis with replacement value\n * @param {string} str\n * @param {function|string} the string or callback function to replace the emoji with\n * @param {boolean} should trailing whitespaces be cleaned? Defaults false\n * @return {string}\n */\nEmoji.replace = function replace (str, replacement, cleanSpaces) {\n  if (!str) return '';\n\n  var replace = typeof replacement === 'function' ? replacement : function() { return replacement; };\n  var words = toArray(str);\n\n  var replaced = words.map(function(word, idx) {\n    var emoji = Emoji.findByCode(word);\n\n    if (emoji && cleanSpaces && words[idx + 1] === ' ') {\n      words[idx + 1] = '';\n    }\n\n    return emoji ? replace(emoji) : word;\n  }).join('');\n\n  return cleanSpaces ? replaced.replace(trimSpaceRegex, '') : replaced;\n};\n\n\n/**\n * remove all emojis from a string\n * @param {string} str\n * @return {string}\n */\nEmoji.strip = function strip (str) {\n  return Emoji.replace(str, '', true);\n};\n\nmodule.exports = Emoji;\n"]},"metadata":{},"sourceType":"script"}