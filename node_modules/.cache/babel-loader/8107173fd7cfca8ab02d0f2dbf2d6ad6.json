{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.displayWarningPrompts = void 0;\n\nconst marked = require(\"marked\");\n\nconst clc = require(\"cli-color\");\n\nconst extensionsApi_1 = require(\"./extensionsApi\");\n\nconst displayExtensionInfo_1 = require(\"./displayExtensionInfo\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst resolveSource_1 = require(\"./resolveSource\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst utils = require(\"../utils\");\n\nfunction displayEAPWarning({\n  publisherId,\n  sourceDownloadUri,\n  githubLink\n}) {\n  const publisherNameLink = githubLink ? `[${publisherId}](${githubLink})` : publisherId;\n  const warningMsg = `This extension is in preview and is built by a developer in the [Extensions Publisher Early Access Program](http://bit.ly/firex-provider). Its functionality might change in backward-incompatible ways. Since this extension isn't built by Firebase, reach out to ${publisherNameLink} with questions about this extension.`;\n  const legalMsg = \"\\n\\nIt is provided “AS IS”, without any warranty, express or implied, from Google. Google disclaims all liability for any damages, direct or indirect, resulting from the use of the extension, and its functionality might change in backward - incompatible ways.\";\n  utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(warningMsg + legalMsg));\n  displayExtensionInfo_1.printSourceDownloadLink(sourceDownloadUri);\n}\n\nfunction displayExperimentalWarning() {\n  utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`${clc.yellow.bold(\"Important\")}: This extension is ${clc.bold(\"experimental\")} and may not be production-ready. Its functionality might change in backward-incompatible ways before its official release, or it may be discontinued.`));\n}\n\nasync function displayWarningPrompts(publisherId, launchStage, extensionVersion) {\n  const trustedPublishers = await resolveSource_1.getTrustedPublishers();\n\n  if (!trustedPublishers.includes(publisherId)) {\n    displayEAPWarning({\n      publisherId,\n      sourceDownloadUri: extensionVersion.sourceDownloadUri,\n      githubLink: extensionVersion.spec.sourceUrl\n    });\n  } else if (launchStage === extensionsApi_1.RegistryLaunchStage.EXPERIMENTAL) {\n    displayExperimentalWarning();\n  } else {\n    return true;\n  }\n\n  return await prompt_1.promptOnce({\n    type: \"confirm\",\n    message: \"Do you acknowledge the status of this extension?\",\n    default: true\n  });\n}\n\nexports.displayWarningPrompts = displayWarningPrompts;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/warnings.js"],"names":["Object","defineProperty","exports","value","displayWarningPrompts","marked","require","clc","extensionsApi_1","displayExtensionInfo_1","extensionsHelper_1","resolveSource_1","prompt_1","utils","displayEAPWarning","publisherId","sourceDownloadUri","githubLink","publisherNameLink","warningMsg","legalMsg","logLabeledBullet","logPrefix","printSourceDownloadLink","displayExperimentalWarning","yellow","bold","launchStage","extensionVersion","trustedPublishers","getTrustedPublishers","includes","spec","sourceUrl","RegistryLaunchStage","EXPERIMENTAL","promptOnce","type","message","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,wBAAD,CAAtC;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMO,KAAK,GAAGP,OAAO,CAAC,UAAD,CAArB;;AACA,SAASQ,iBAAT,CAA2B;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,iBAAf;AAAkCC,EAAAA;AAAlC,CAA3B,EAA4E;AACxE,QAAMC,iBAAiB,GAAGD,UAAU,GAAI,IAAGF,WAAY,KAAIE,UAAW,GAAlC,GAAuCF,WAA3E;AACA,QAAMI,UAAU,GAAI,uQAAsQD,iBAAkB,uCAA5S;AACA,QAAME,QAAQ,GAAG,qQAAjB;AACAP,EAAAA,KAAK,CAACQ,gBAAN,CAAuBX,kBAAkB,CAACY,SAA1C,EAAqDjB,MAAM,CAACc,UAAU,GAAGC,QAAd,CAA3D;AACAX,EAAAA,sBAAsB,CAACc,uBAAvB,CAA+CP,iBAA/C;AACH;;AACD,SAASQ,0BAAT,GAAsC;AAClCX,EAAAA,KAAK,CAACQ,gBAAN,CAAuBX,kBAAkB,CAACY,SAA1C,EAAqDjB,MAAM,CAAE,GAAEE,GAAG,CAACkB,MAAJ,CAAWC,IAAX,CAAgB,WAAhB,CAA6B,uBAAsBnB,GAAG,CAACmB,IAAJ,CAAS,cAAT,CAAyB,wJAAhF,CAA3D;AACH;;AACD,eAAetB,qBAAf,CAAqCW,WAArC,EAAkDY,WAAlD,EAA+DC,gBAA/D,EAAiF;AAC7E,QAAMC,iBAAiB,GAAG,MAAMlB,eAAe,CAACmB,oBAAhB,EAAhC;;AACA,MAAI,CAACD,iBAAiB,CAACE,QAAlB,CAA2BhB,WAA3B,CAAL,EAA8C;AAC1CD,IAAAA,iBAAiB,CAAC;AACdC,MAAAA,WADc;AAEdC,MAAAA,iBAAiB,EAAEY,gBAAgB,CAACZ,iBAFtB;AAGdC,MAAAA,UAAU,EAAEW,gBAAgB,CAACI,IAAjB,CAAsBC;AAHpB,KAAD,CAAjB;AAKH,GAND,MAOK,IAAIN,WAAW,KAAKnB,eAAe,CAAC0B,mBAAhB,CAAoCC,YAAxD,EAAsE;AACvEX,IAAAA,0BAA0B;AAC7B,GAFI,MAGA;AACD,WAAO,IAAP;AACH;;AACD,SAAO,MAAMZ,QAAQ,CAACwB,UAAT,CAAoB;AAC7BC,IAAAA,IAAI,EAAE,SADuB;AAE7BC,IAAAA,OAAO,EAAE,kDAFoB;AAG7BC,IAAAA,OAAO,EAAE;AAHoB,GAApB,CAAb;AAKH;;AACDrC,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.displayWarningPrompts = void 0;\nconst marked = require(\"marked\");\nconst clc = require(\"cli-color\");\nconst extensionsApi_1 = require(\"./extensionsApi\");\nconst displayExtensionInfo_1 = require(\"./displayExtensionInfo\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst resolveSource_1 = require(\"./resolveSource\");\nconst prompt_1 = require(\"../prompt\");\nconst utils = require(\"../utils\");\nfunction displayEAPWarning({ publisherId, sourceDownloadUri, githubLink, }) {\n    const publisherNameLink = githubLink ? `[${publisherId}](${githubLink})` : publisherId;\n    const warningMsg = `This extension is in preview and is built by a developer in the [Extensions Publisher Early Access Program](http://bit.ly/firex-provider). Its functionality might change in backward-incompatible ways. Since this extension isn't built by Firebase, reach out to ${publisherNameLink} with questions about this extension.`;\n    const legalMsg = \"\\n\\nIt is provided “AS IS”, without any warranty, express or implied, from Google. Google disclaims all liability for any damages, direct or indirect, resulting from the use of the extension, and its functionality might change in backward - incompatible ways.\";\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(warningMsg + legalMsg));\n    displayExtensionInfo_1.printSourceDownloadLink(sourceDownloadUri);\n}\nfunction displayExperimentalWarning() {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`${clc.yellow.bold(\"Important\")}: This extension is ${clc.bold(\"experimental\")} and may not be production-ready. Its functionality might change in backward-incompatible ways before its official release, or it may be discontinued.`));\n}\nasync function displayWarningPrompts(publisherId, launchStage, extensionVersion) {\n    const trustedPublishers = await resolveSource_1.getTrustedPublishers();\n    if (!trustedPublishers.includes(publisherId)) {\n        displayEAPWarning({\n            publisherId,\n            sourceDownloadUri: extensionVersion.sourceDownloadUri,\n            githubLink: extensionVersion.spec.sourceUrl,\n        });\n    }\n    else if (launchStage === extensionsApi_1.RegistryLaunchStage.EXPERIMENTAL) {\n        displayExperimentalWarning();\n    }\n    else {\n        return true;\n    }\n    return await prompt_1.promptOnce({\n        type: \"confirm\",\n        message: \"Do you acknowledge the status of this extension?\",\n        default: true,\n    });\n}\nexports.displayWarningPrompts = displayWarningPrompts;\n"]},"metadata":{},"sourceType":"script"}