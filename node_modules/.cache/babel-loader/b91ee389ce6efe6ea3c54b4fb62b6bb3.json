{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.start = exports.downloadIfNecessary = exports.stop = exports.getPID = exports.get = exports.getDownloadDetails = exports.handleEmulatorProcessError = exports._getCommand = exports.getLogFileName = exports.DownloadDetails = void 0;\n\nconst types_1 = require(\"./types\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"../error\");\n\nconst childProcess = require(\"child_process\");\n\nconst utils = require(\"../utils\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst registry_1 = require(\"./registry\");\n\nconst download_1 = require(\"../emulator/download\");\n\nconst EMULATOR_INSTANCE_KILL_TIMEOUT = 4000;\nconst CACHE_DIR = process.env.FIREBASE_EMULATORS_PATH || path.join(os.homedir(), \".cache\", \"firebase\", \"emulators\");\nexports.DownloadDetails = {\n  database: {\n    downloadPath: path.join(CACHE_DIR, \"firebase-database-emulator-v4.7.2.jar\"),\n    version: \"4.7.2\",\n    opts: {\n      cacheDir: CACHE_DIR,\n      remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/firebase-database-emulator-v4.7.2.jar\",\n      expectedSize: 28910604,\n      expectedChecksum: \"264e5df0c0661c064ef7dc9ce8179aba\",\n      namePrefix: \"firebase-database-emulator\"\n    }\n  },\n  firestore: {\n    downloadPath: path.join(CACHE_DIR, \"cloud-firestore-emulator-v1.13.1.jar\"),\n    version: \"1.13.1\",\n    opts: {\n      cacheDir: CACHE_DIR,\n      remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/cloud-firestore-emulator-v1.13.1.jar\",\n      expectedSize: 60486708,\n      expectedChecksum: \"e0590880408eacb790874643147c0081\",\n      namePrefix: \"cloud-firestore-emulator\"\n    }\n  },\n  storage: {\n    downloadPath: path.join(CACHE_DIR, \"cloud-storage-rules-runtime-v1.0.1.jar\"),\n    version: \"1.0.1\",\n    opts: {\n      cacheDir: CACHE_DIR,\n      remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/cloud-storage-rules-runtime-v1.0.1.jar\",\n      expectedSize: 32729999,\n      expectedChecksum: \"1a441f5e16c17aa7a27db71c9c9186d5\",\n      namePrefix: \"cloud-storage-rules-emulator\"\n    }\n  },\n  ui: {\n    version: \"1.6.3\",\n    downloadPath: path.join(CACHE_DIR, \"ui-v1.6.3.zip\"),\n    unzipDir: path.join(CACHE_DIR, \"ui-v1.6.3\"),\n    binaryPath: path.join(CACHE_DIR, \"ui-v1.6.3\", \"server.bundle.js\"),\n    opts: {\n      cacheDir: CACHE_DIR,\n      remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/ui-v1.6.3.zip\",\n      expectedSize: 3757268,\n      expectedChecksum: \"153090a46072545aadeb307397cc8f45\",\n      namePrefix: \"ui\"\n    }\n  },\n  pubsub: {\n    downloadPath: path.join(CACHE_DIR, \"pubsub-emulator-0.1.0.zip\"),\n    version: \"0.1.0\",\n    unzipDir: path.join(CACHE_DIR, \"pubsub-emulator-0.1.0\"),\n    binaryPath: path.join(CACHE_DIR, \"pubsub-emulator-0.1.0\", `pubsub-emulator/bin/cloud-pubsub-emulator${process.platform === \"win32\" ? \".bat\" : \"\"}`),\n    opts: {\n      cacheDir: CACHE_DIR,\n      remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/pubsub-emulator-0.1.0.zip\",\n      expectedSize: 36623622,\n      expectedChecksum: \"81704b24737d4968734d3e175f4cde71\",\n      namePrefix: \"pubsub-emulator\"\n    }\n  }\n};\nconst EmulatorDetails = {\n  database: {\n    name: types_1.Emulators.DATABASE,\n    instance: null,\n    stdout: null\n  },\n  firestore: {\n    name: types_1.Emulators.FIRESTORE,\n    instance: null,\n    stdout: null\n  },\n  storage: {\n    name: types_1.Emulators.STORAGE,\n    instance: null,\n    stdout: null\n  },\n  pubsub: {\n    name: types_1.Emulators.PUBSUB,\n    instance: null,\n    stdout: null\n  },\n  ui: {\n    name: types_1.Emulators.UI,\n    instance: null,\n    stdout: null\n  }\n};\nconst Commands = {\n  database: {\n    binary: \"java\",\n    args: [\"-Duser.language=en\", \"-jar\", getExecPath(types_1.Emulators.DATABASE)],\n    optionalArgs: [\"port\", \"host\", \"functions_emulator_port\", \"functions_emulator_host\"],\n    joinArgs: false\n  },\n  firestore: {\n    binary: \"java\",\n    args: [\"-Dgoogle.cloud_firestore.debug_log_level=FINE\", \"-Duser.language=en\", \"-jar\", getExecPath(types_1.Emulators.FIRESTORE)],\n    optionalArgs: [\"port\", \"webchannel_port\", \"host\", \"rules\", \"functions_emulator\", \"seed_from_export\"],\n    joinArgs: false\n  },\n  storage: {\n    binary: \"java\",\n    args: [\"-jar\", \"-Duser.language=en\", getExecPath(types_1.Emulators.STORAGE), \"serve\"],\n    optionalArgs: [],\n    joinArgs: false\n  },\n  pubsub: {\n    binary: getExecPath(types_1.Emulators.PUBSUB),\n    args: [],\n    optionalArgs: [\"port\", \"host\"],\n    joinArgs: true\n  },\n  ui: {\n    binary: \"node\",\n    args: [getExecPath(types_1.Emulators.UI)],\n    optionalArgs: [],\n    joinArgs: false\n  }\n};\n\nfunction getExecPath(name) {\n  const details = getDownloadDetails(name);\n  return details.binaryPath || details.downloadPath;\n}\n\nfunction getLogFileName(name) {\n  return `${name}-debug.log`;\n}\n\nexports.getLogFileName = getLogFileName;\n\nfunction _getCommand(emulator, args) {\n  const baseCmd = Commands[emulator];\n  const defaultPort = constants_1.Constants.getDefaultPort(emulator);\n\n  if (!args.port) {\n    args.port = defaultPort;\n  }\n\n  const cmdLineArgs = baseCmd.args.slice();\n\n  if (baseCmd.binary === \"java\" && utils.isRunningInWSL() && (!args.host || !args.host.includes(\":\"))) {\n    cmdLineArgs.unshift(\"-Djava.net.preferIPv4Stack=true\");\n  }\n\n  const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator);\n  Object.keys(args).forEach(key => {\n    if (!baseCmd.optionalArgs.includes(key)) {\n      logger.log(\"DEBUG\", `Ignoring unsupported arg: ${key}`);\n      return;\n    }\n\n    const argKey = \"--\" + key;\n    const argVal = args[key];\n\n    if (argVal === undefined) {\n      logger.log(\"DEBUG\", `Ignoring empty arg for key: ${key}`);\n      return;\n    }\n\n    if (baseCmd.joinArgs) {\n      cmdLineArgs.push(`${argKey}=${argVal}`);\n    } else {\n      cmdLineArgs.push(argKey, argVal);\n    }\n  });\n  return {\n    binary: baseCmd.binary,\n    args: cmdLineArgs,\n    optionalArgs: baseCmd.optionalArgs,\n    joinArgs: baseCmd.joinArgs\n  };\n}\n\nexports._getCommand = _getCommand;\n\nasync function _fatal(emulator, errorMsg) {\n  try {\n    const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator);\n    logger.logLabeled(\"WARN\", emulator, `Fatal error occurred: \\n   ${errorMsg}, \\n   stopping all running emulators`);\n    await registry_1.EmulatorRegistry.stopAll();\n  } finally {\n    process.exit(1);\n  }\n}\n\nasync function handleEmulatorProcessError(emulator, err) {\n  const description = constants_1.Constants.description(emulator);\n\n  if (err.path === \"java\" && err.code === \"ENOENT\") {\n    await _fatal(emulator, `${description} has exited because java is not installed, you can install it from https://openjdk.java.net/install/`);\n  } else {\n    await _fatal(emulator, `${description} has exited: ${err}`);\n  }\n}\n\nexports.handleEmulatorProcessError = handleEmulatorProcessError;\n\nasync function _runBinary(emulator, command, extraEnv) {\n  return new Promise(resolve => {\n    const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator.name);\n    emulator.stdout = fs.createWriteStream(getLogFileName(emulator.name));\n\n    try {\n      emulator.instance = childProcess.spawn(command.binary, command.args, {\n        env: Object.assign(Object.assign({}, process.env), extraEnv),\n        detached: true,\n        stdio: [\"inherit\", \"pipe\", \"pipe\"]\n      });\n    } catch (e) {\n      if (e.code === \"EACCES\") {\n        logger.logLabeled(\"WARN\", emulator.name, `Could not spawn child process for emulator, check that java is installed and on your $PATH.`);\n      }\n\n      _fatal(emulator.name, e);\n    }\n\n    const description = constants_1.Constants.description(emulator.name);\n\n    if (emulator.instance == null) {\n      logger.logLabeled(\"WARN\", emulator.name, `Could not spawn child process for ${description}.`);\n      return;\n    }\n\n    logger.logLabeled(\"BULLET\", emulator.name, `${description} logging to ${clc.bold(getLogFileName(emulator.name))}`);\n    emulator.instance.stdout.on(\"data\", data => {\n      logger.log(\"DEBUG\", data.toString());\n      emulator.stdout.write(data);\n    });\n    emulator.instance.stderr.on(\"data\", data => {\n      logger.log(\"DEBUG\", data.toString());\n      emulator.stdout.write(data);\n\n      if (data.toString().includes(\"java.lang.UnsupportedClassVersionError\")) {\n        logger.logLabeled(\"WARN\", emulator.name, \"Unsupported java version, make sure java --version reports 1.8 or higher.\");\n      }\n    });\n    emulator.instance.on(\"error\", err => {\n      handleEmulatorProcessError(emulator.name, err);\n    });\n    emulator.instance.once(\"exit\", async (code, signal) => {\n      if (signal) {\n        utils.logWarning(`${description} has exited upon receiving signal: ${signal}`);\n      } else if (code && code !== 0 && code !== 130) {\n        await _fatal(emulator.name, `${description} has exited with code: ${code}`);\n      }\n    });\n    resolve();\n  });\n}\n\nfunction getDownloadDetails(emulator) {\n  return exports.DownloadDetails[emulator];\n}\n\nexports.getDownloadDetails = getDownloadDetails;\n\nfunction get(emulator) {\n  return EmulatorDetails[emulator];\n}\n\nexports.get = get;\n\nfunction getPID(emulator) {\n  const emulatorInstance = get(emulator).instance;\n  return emulatorInstance && emulatorInstance.pid ? emulatorInstance.pid : 0;\n}\n\nexports.getPID = getPID;\n\nasync function stop(targetName) {\n  const emulator = get(targetName);\n  return new Promise((resolve, reject) => {\n    const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator.name);\n\n    if (emulator.instance) {\n      const killTimeout = setTimeout(() => {\n        const pid = emulator.instance ? emulator.instance.pid : -1;\n        const errorMsg = constants_1.Constants.description(emulator.name) + \": Unable to terminate process (PID=\" + pid + \")\";\n        logger.log(\"DEBUG\", errorMsg);\n        reject(new error_1.FirebaseError(emulator.name + \": \" + errorMsg));\n      }, EMULATOR_INSTANCE_KILL_TIMEOUT);\n      emulator.instance.once(\"exit\", () => {\n        clearTimeout(killTimeout);\n        resolve();\n      });\n      emulator.instance.kill(\"SIGINT\");\n    } else {\n      resolve();\n    }\n  });\n}\n\nexports.stop = stop;\n\nasync function downloadIfNecessary(targetName) {\n  const hasEmulator = fs.existsSync(getExecPath(targetName));\n\n  if (hasEmulator) {\n    return;\n  }\n\n  await download_1.downloadEmulator(targetName);\n}\n\nexports.downloadIfNecessary = downloadIfNecessary;\n\nasync function start(targetName, args, extraEnv = {}) {\n  const downloadDetails = exports.DownloadDetails[targetName];\n  const emulator = get(targetName);\n  const hasEmulator = fs.existsSync(getExecPath(targetName));\n  const logger = emulatorLogger_1.EmulatorLogger.forEmulator(targetName);\n\n  if (!hasEmulator || downloadDetails.opts.skipCache) {\n    if (args.auto_download) {\n      if (process.env.CI) {\n        utils.logWarning(`It appears you are running in a CI environment. You can avoid downloading the ${constants_1.Constants.description(targetName)} repeatedly by caching the ${downloadDetails.opts.cacheDir} directory.`);\n      }\n\n      await download_1.downloadEmulator(targetName);\n    } else {\n      utils.logWarning(\"Setup required, please run: firebase setup:emulators:\" + targetName);\n      throw new error_1.FirebaseError(\"emulator not found\");\n    }\n  }\n\n  const command = _getCommand(targetName, args);\n\n  logger.log(\"DEBUG\", `Starting ${constants_1.Constants.description(targetName)} with command ${JSON.stringify(command)}`);\n  return _runBinary(emulator, command, extraEnv);\n}\n\nexports.start = start;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/downloadableEmulators.js"],"names":["Object","defineProperty","exports","value","start","downloadIfNecessary","stop","getPID","get","getDownloadDetails","handleEmulatorProcessError","_getCommand","getLogFileName","DownloadDetails","types_1","require","constants_1","error_1","childProcess","utils","emulatorLogger_1","clc","fs","path","os","registry_1","download_1","EMULATOR_INSTANCE_KILL_TIMEOUT","CACHE_DIR","process","env","FIREBASE_EMULATORS_PATH","join","homedir","database","downloadPath","version","opts","cacheDir","remoteUrl","expectedSize","expectedChecksum","namePrefix","firestore","storage","ui","unzipDir","binaryPath","pubsub","platform","EmulatorDetails","name","Emulators","DATABASE","instance","stdout","FIRESTORE","STORAGE","PUBSUB","UI","Commands","binary","args","getExecPath","optionalArgs","joinArgs","details","emulator","baseCmd","defaultPort","Constants","getDefaultPort","port","cmdLineArgs","slice","isRunningInWSL","host","includes","unshift","logger","EmulatorLogger","forEmulator","keys","forEach","key","log","argKey","argVal","undefined","push","_fatal","errorMsg","logLabeled","EmulatorRegistry","stopAll","exit","err","description","code","_runBinary","command","extraEnv","Promise","resolve","createWriteStream","spawn","assign","detached","stdio","e","bold","on","data","toString","write","stderr","once","signal","logWarning","emulatorInstance","pid","targetName","reject","killTimeout","setTimeout","FirebaseError","clearTimeout","kill","hasEmulator","existsSync","downloadEmulator","downloadDetails","skipCache","auto_download","CI","JSON","stringify"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACG,mBAAR,GAA8BH,OAAO,CAACI,IAAR,GAAeJ,OAAO,CAACK,MAAR,GAAiBL,OAAO,CAACM,GAAR,GAAcN,OAAO,CAACO,kBAAR,GAA6BP,OAAO,CAACQ,0BAAR,GAAqCR,OAAO,CAACS,WAAR,GAAsBT,OAAO,CAACU,cAAR,GAAyBV,OAAO,CAACW,eAAR,GAA0B,KAAK,CAA5O;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAMM,GAAG,GAAGN,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMO,EAAE,GAAGP,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMQ,IAAI,GAAGR,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMS,EAAE,GAAGT,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMU,UAAU,GAAGV,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMW,UAAU,GAAGX,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAMY,8BAA8B,GAAG,IAAvC;AACA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAAZ,IAAuCR,IAAI,CAACS,IAAL,CAAUR,EAAE,CAACS,OAAH,EAAV,EAAwB,QAAxB,EAAkC,UAAlC,EAA8C,WAA9C,CAAzD;AACA/B,OAAO,CAACW,eAAR,GAA0B;AACtBqB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAEZ,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,uCAArB,CADR;AAENQ,IAAAA,OAAO,EAAE,OAFH;AAGNC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAEV,SADR;AAEFW,MAAAA,SAAS,EAAE,qGAFT;AAGFC,MAAAA,YAAY,EAAE,QAHZ;AAIFC,MAAAA,gBAAgB,EAAE,kCAJhB;AAKFC,MAAAA,UAAU,EAAE;AALV;AAHA,GADY;AAYtBC,EAAAA,SAAS,EAAE;AACPR,IAAAA,YAAY,EAAEZ,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,sCAArB,CADP;AAEPQ,IAAAA,OAAO,EAAE,QAFF;AAGPC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAEV,SADR;AAEFW,MAAAA,SAAS,EAAE,oGAFT;AAGFC,MAAAA,YAAY,EAAE,QAHZ;AAIFC,MAAAA,gBAAgB,EAAE,kCAJhB;AAKFC,MAAAA,UAAU,EAAE;AALV;AAHC,GAZW;AAuBtBE,EAAAA,OAAO,EAAE;AACLT,IAAAA,YAAY,EAAEZ,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,wCAArB,CADT;AAELQ,IAAAA,OAAO,EAAE,OAFJ;AAGLC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAEV,SADR;AAEFW,MAAAA,SAAS,EAAE,sGAFT;AAGFC,MAAAA,YAAY,EAAE,QAHZ;AAIFC,MAAAA,gBAAgB,EAAE,kCAJhB;AAKFC,MAAAA,UAAU,EAAE;AALV;AAHD,GAvBa;AAkCtBG,EAAAA,EAAE,EAAE;AACAT,IAAAA,OAAO,EAAE,OADT;AAEAD,IAAAA,YAAY,EAAEZ,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,eAArB,CAFd;AAGAkB,IAAAA,QAAQ,EAAEvB,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,WAArB,CAHV;AAIAmB,IAAAA,UAAU,EAAExB,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,WAArB,EAAkC,kBAAlC,CAJZ;AAKAS,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAEV,SADR;AAEFW,MAAAA,SAAS,EAAE,6EAFT;AAGFC,MAAAA,YAAY,EAAE,OAHZ;AAIFC,MAAAA,gBAAgB,EAAE,kCAJhB;AAKFC,MAAAA,UAAU,EAAE;AALV;AALN,GAlCkB;AA+CtBM,EAAAA,MAAM,EAAE;AACJb,IAAAA,YAAY,EAAEZ,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,2BAArB,CADV;AAEJQ,IAAAA,OAAO,EAAE,OAFL;AAGJU,IAAAA,QAAQ,EAAEvB,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,uBAArB,CAHN;AAIJmB,IAAAA,UAAU,EAAExB,IAAI,CAACS,IAAL,CAAUJ,SAAV,EAAqB,uBAArB,EAA+C,4CAA2CC,OAAO,CAACoB,QAAR,KAAqB,OAArB,GAA+B,MAA/B,GAAwC,EAAG,EAArI,CAJR;AAKJZ,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAEV,SADR;AAEFW,MAAAA,SAAS,EAAE,yFAFT;AAGFC,MAAAA,YAAY,EAAE,QAHZ;AAIFC,MAAAA,gBAAgB,EAAE,kCAJhB;AAKFC,MAAAA,UAAU,EAAE;AALV;AALF;AA/Cc,CAA1B;AA6DA,MAAMQ,eAAe,GAAG;AACpBhB,EAAAA,QAAQ,EAAE;AACNiB,IAAAA,IAAI,EAAErC,OAAO,CAACsC,SAAR,CAAkBC,QADlB;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,MAAM,EAAE;AAHF,GADU;AAMpBZ,EAAAA,SAAS,EAAE;AACPQ,IAAAA,IAAI,EAAErC,OAAO,CAACsC,SAAR,CAAkBI,SADjB;AAEPF,IAAAA,QAAQ,EAAE,IAFH;AAGPC,IAAAA,MAAM,EAAE;AAHD,GANS;AAWpBX,EAAAA,OAAO,EAAE;AACLO,IAAAA,IAAI,EAAErC,OAAO,CAACsC,SAAR,CAAkBK,OADnB;AAELH,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE;AAHH,GAXW;AAgBpBP,EAAAA,MAAM,EAAE;AACJG,IAAAA,IAAI,EAAErC,OAAO,CAACsC,SAAR,CAAkBM,MADpB;AAEJJ,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,MAAM,EAAE;AAHJ,GAhBY;AAqBpBV,EAAAA,EAAE,EAAE;AACAM,IAAAA,IAAI,EAAErC,OAAO,CAACsC,SAAR,CAAkBO,EADxB;AAEAL,IAAAA,QAAQ,EAAE,IAFV;AAGAC,IAAAA,MAAM,EAAE;AAHR;AArBgB,CAAxB;AA2BA,MAAMK,QAAQ,GAAG;AACb1B,EAAAA,QAAQ,EAAE;AACN2B,IAAAA,MAAM,EAAE,MADF;AAENC,IAAAA,IAAI,EAAE,CAAC,oBAAD,EAAuB,MAAvB,EAA+BC,WAAW,CAACjD,OAAO,CAACsC,SAAR,CAAkBC,QAAnB,CAA1C,CAFA;AAGNW,IAAAA,YAAY,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,yBAAjB,EAA4C,yBAA5C,CAHR;AAINC,IAAAA,QAAQ,EAAE;AAJJ,GADG;AAObtB,EAAAA,SAAS,EAAE;AACPkB,IAAAA,MAAM,EAAE,MADD;AAEPC,IAAAA,IAAI,EAAE,CACF,+CADE,EAEF,oBAFE,EAGF,MAHE,EAIFC,WAAW,CAACjD,OAAO,CAACsC,SAAR,CAAkBI,SAAnB,CAJT,CAFC;AAQPQ,IAAAA,YAAY,EAAE,CACV,MADU,EAEV,iBAFU,EAGV,MAHU,EAIV,OAJU,EAKV,oBALU,EAMV,kBANU,CARP;AAgBPC,IAAAA,QAAQ,EAAE;AAhBH,GAPE;AAyBbrB,EAAAA,OAAO,EAAE;AACLiB,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,IAAI,EAAE,CACF,MADE,EAEF,oBAFE,EAGFC,WAAW,CAACjD,OAAO,CAACsC,SAAR,CAAkBK,OAAnB,CAHT,EAIF,OAJE,CAFD;AAQLO,IAAAA,YAAY,EAAE,EART;AASLC,IAAAA,QAAQ,EAAE;AATL,GAzBI;AAoCbjB,EAAAA,MAAM,EAAE;AACJa,IAAAA,MAAM,EAAEE,WAAW,CAACjD,OAAO,CAACsC,SAAR,CAAkBM,MAAnB,CADf;AAEJI,IAAAA,IAAI,EAAE,EAFF;AAGJE,IAAAA,YAAY,EAAE,CAAC,MAAD,EAAS,MAAT,CAHV;AAIJC,IAAAA,QAAQ,EAAE;AAJN,GApCK;AA0CbpB,EAAAA,EAAE,EAAE;AACAgB,IAAAA,MAAM,EAAE,MADR;AAEAC,IAAAA,IAAI,EAAE,CAACC,WAAW,CAACjD,OAAO,CAACsC,SAAR,CAAkBO,EAAnB,CAAZ,CAFN;AAGAK,IAAAA,YAAY,EAAE,EAHd;AAIAC,IAAAA,QAAQ,EAAE;AAJV;AA1CS,CAAjB;;AAiDA,SAASF,WAAT,CAAqBZ,IAArB,EAA2B;AACvB,QAAMe,OAAO,GAAGzD,kBAAkB,CAAC0C,IAAD,CAAlC;AACA,SAAOe,OAAO,CAACnB,UAAR,IAAsBmB,OAAO,CAAC/B,YAArC;AACH;;AACD,SAASvB,cAAT,CAAwBuC,IAAxB,EAA8B;AAC1B,SAAQ,GAAEA,IAAK,YAAf;AACH;;AACDjD,OAAO,CAACU,cAAR,GAAyBA,cAAzB;;AACA,SAASD,WAAT,CAAqBwD,QAArB,EAA+BL,IAA/B,EAAqC;AACjC,QAAMM,OAAO,GAAGR,QAAQ,CAACO,QAAD,CAAxB;AACA,QAAME,WAAW,GAAGrD,WAAW,CAACsD,SAAZ,CAAsBC,cAAtB,CAAqCJ,QAArC,CAApB;;AACA,MAAI,CAACL,IAAI,CAACU,IAAV,EAAgB;AACZV,IAAAA,IAAI,CAACU,IAAL,GAAYH,WAAZ;AACH;;AACD,QAAMI,WAAW,GAAGL,OAAO,CAACN,IAAR,CAAaY,KAAb,EAApB;;AACA,MAAIN,OAAO,CAACP,MAAR,KAAmB,MAAnB,IACA1C,KAAK,CAACwD,cAAN,EADA,KAEC,CAACb,IAAI,CAACc,IAAN,IAAc,CAACd,IAAI,CAACc,IAAL,CAAUC,QAAV,CAAmB,GAAnB,CAFhB,CAAJ,EAE8C;AAC1CJ,IAAAA,WAAW,CAACK,OAAZ,CAAoB,iCAApB;AACH;;AACD,QAAMC,MAAM,GAAG3D,gBAAgB,CAAC4D,cAAjB,CAAgCC,WAAhC,CAA4Cd,QAA5C,CAAf;AACAnE,EAAAA,MAAM,CAACkF,IAAP,CAAYpB,IAAZ,EAAkBqB,OAAlB,CAA2BC,GAAD,IAAS;AAC/B,QAAI,CAAChB,OAAO,CAACJ,YAAR,CAAqBa,QAArB,CAA8BO,GAA9B,CAAL,EAAyC;AACrCL,MAAAA,MAAM,CAACM,GAAP,CAAW,OAAX,EAAqB,6BAA4BD,GAAI,EAArD;AACA;AACH;;AACD,UAAME,MAAM,GAAG,OAAOF,GAAtB;AACA,UAAMG,MAAM,GAAGzB,IAAI,CAACsB,GAAD,CAAnB;;AACA,QAAIG,MAAM,KAAKC,SAAf,EAA0B;AACtBT,MAAAA,MAAM,CAACM,GAAP,CAAW,OAAX,EAAqB,+BAA8BD,GAAI,EAAvD;AACA;AACH;;AACD,QAAIhB,OAAO,CAACH,QAAZ,EAAsB;AAClBQ,MAAAA,WAAW,CAACgB,IAAZ,CAAkB,GAAEH,MAAO,IAAGC,MAAO,EAArC;AACH,KAFD,MAGK;AACDd,MAAAA,WAAW,CAACgB,IAAZ,CAAiBH,MAAjB,EAAyBC,MAAzB;AACH;AACJ,GAjBD;AAkBA,SAAO;AACH1B,IAAAA,MAAM,EAAEO,OAAO,CAACP,MADb;AAEHC,IAAAA,IAAI,EAAEW,WAFH;AAGHT,IAAAA,YAAY,EAAEI,OAAO,CAACJ,YAHnB;AAIHC,IAAAA,QAAQ,EAAEG,OAAO,CAACH;AAJf,GAAP;AAMH;;AACD/D,OAAO,CAACS,WAAR,GAAsBA,WAAtB;;AACA,eAAe+E,MAAf,CAAsBvB,QAAtB,EAAgCwB,QAAhC,EAA0C;AACtC,MAAI;AACA,UAAMZ,MAAM,GAAG3D,gBAAgB,CAAC4D,cAAjB,CAAgCC,WAAhC,CAA4Cd,QAA5C,CAAf;AACAY,IAAAA,MAAM,CAACa,UAAP,CAAkB,MAAlB,EAA0BzB,QAA1B,EAAqC,8BAA6BwB,QAAS,uCAA3E;AACA,UAAMlE,UAAU,CAACoE,gBAAX,CAA4BC,OAA5B,EAAN;AACH,GAJD,SAKQ;AACJjE,IAAAA,OAAO,CAACkE,IAAR,CAAa,CAAb;AACH;AACJ;;AACD,eAAerF,0BAAf,CAA0CyD,QAA1C,EAAoD6B,GAApD,EAAyD;AACrD,QAAMC,WAAW,GAAGjF,WAAW,CAACsD,SAAZ,CAAsB2B,WAAtB,CAAkC9B,QAAlC,CAApB;;AACA,MAAI6B,GAAG,CAACzE,IAAJ,KAAa,MAAb,IAAuByE,GAAG,CAACE,IAAJ,KAAa,QAAxC,EAAkD;AAC9C,UAAMR,MAAM,CAACvB,QAAD,EAAY,GAAE8B,WAAY,sGAA1B,CAAZ;AACH,GAFD,MAGK;AACD,UAAMP,MAAM,CAACvB,QAAD,EAAY,GAAE8B,WAAY,gBAAeD,GAAI,EAA7C,CAAZ;AACH;AACJ;;AACD9F,OAAO,CAACQ,0BAAR,GAAqCA,0BAArC;;AACA,eAAeyF,UAAf,CAA0BhC,QAA1B,EAAoCiC,OAApC,EAA6CC,QAA7C,EAAuD;AACnD,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,UAAMxB,MAAM,GAAG3D,gBAAgB,CAAC4D,cAAjB,CAAgCC,WAAhC,CAA4Cd,QAAQ,CAAChB,IAArD,CAAf;AACAgB,IAAAA,QAAQ,CAACZ,MAAT,GAAkBjC,EAAE,CAACkF,iBAAH,CAAqB5F,cAAc,CAACuD,QAAQ,CAAChB,IAAV,CAAnC,CAAlB;;AACA,QAAI;AACAgB,MAAAA,QAAQ,CAACb,QAAT,GAAoBpC,YAAY,CAACuF,KAAb,CAAmBL,OAAO,CAACvC,MAA3B,EAAmCuC,OAAO,CAACtC,IAA3C,EAAiD;AACjEhC,QAAAA,GAAG,EAAE9B,MAAM,CAAC0G,MAAP,CAAc1G,MAAM,CAAC0G,MAAP,CAAc,EAAd,EAAkB7E,OAAO,CAACC,GAA1B,CAAd,EAA8CuE,QAA9C,CAD4D;AAEjEM,QAAAA,QAAQ,EAAE,IAFuD;AAGjEC,QAAAA,KAAK,EAAE,CAAC,SAAD,EAAY,MAAZ,EAAoB,MAApB;AAH0D,OAAjD,CAApB;AAKH,KAND,CAOA,OAAOC,CAAP,EAAU;AACN,UAAIA,CAAC,CAACX,IAAF,KAAW,QAAf,EAAyB;AACrBnB,QAAAA,MAAM,CAACa,UAAP,CAAkB,MAAlB,EAA0BzB,QAAQ,CAAChB,IAAnC,EAA0C,6FAA1C;AACH;;AACDuC,MAAAA,MAAM,CAACvB,QAAQ,CAAChB,IAAV,EAAgB0D,CAAhB,CAAN;AACH;;AACD,UAAMZ,WAAW,GAAGjF,WAAW,CAACsD,SAAZ,CAAsB2B,WAAtB,CAAkC9B,QAAQ,CAAChB,IAA3C,CAApB;;AACA,QAAIgB,QAAQ,CAACb,QAAT,IAAqB,IAAzB,EAA+B;AAC3ByB,MAAAA,MAAM,CAACa,UAAP,CAAkB,MAAlB,EAA0BzB,QAAQ,CAAChB,IAAnC,EAA0C,qCAAoC8C,WAAY,GAA1F;AACA;AACH;;AACDlB,IAAAA,MAAM,CAACa,UAAP,CAAkB,QAAlB,EAA4BzB,QAAQ,CAAChB,IAArC,EAA4C,GAAE8C,WAAY,eAAc5E,GAAG,CAACyF,IAAJ,CAASlG,cAAc,CAACuD,QAAQ,CAAChB,IAAV,CAAvB,CAAwC,EAAhH;AACAgB,IAAAA,QAAQ,CAACb,QAAT,CAAkBC,MAAlB,CAAyBwD,EAAzB,CAA4B,MAA5B,EAAqCC,IAAD,IAAU;AAC1CjC,MAAAA,MAAM,CAACM,GAAP,CAAW,OAAX,EAAoB2B,IAAI,CAACC,QAAL,EAApB;AACA9C,MAAAA,QAAQ,CAACZ,MAAT,CAAgB2D,KAAhB,CAAsBF,IAAtB;AACH,KAHD;AAIA7C,IAAAA,QAAQ,CAACb,QAAT,CAAkB6D,MAAlB,CAAyBJ,EAAzB,CAA4B,MAA5B,EAAqCC,IAAD,IAAU;AAC1CjC,MAAAA,MAAM,CAACM,GAAP,CAAW,OAAX,EAAoB2B,IAAI,CAACC,QAAL,EAApB;AACA9C,MAAAA,QAAQ,CAACZ,MAAT,CAAgB2D,KAAhB,CAAsBF,IAAtB;;AACA,UAAIA,IAAI,CAACC,QAAL,GAAgBpC,QAAhB,CAAyB,wCAAzB,CAAJ,EAAwE;AACpEE,QAAAA,MAAM,CAACa,UAAP,CAAkB,MAAlB,EAA0BzB,QAAQ,CAAChB,IAAnC,EAAyC,2EAAzC;AACH;AACJ,KAND;AAOAgB,IAAAA,QAAQ,CAACb,QAAT,CAAkByD,EAAlB,CAAqB,OAArB,EAA+Bf,GAAD,IAAS;AACnCtF,MAAAA,0BAA0B,CAACyD,QAAQ,CAAChB,IAAV,EAAgB6C,GAAhB,CAA1B;AACH,KAFD;AAGA7B,IAAAA,QAAQ,CAACb,QAAT,CAAkB8D,IAAlB,CAAuB,MAAvB,EAA+B,OAAOlB,IAAP,EAAamB,MAAb,KAAwB;AACnD,UAAIA,MAAJ,EAAY;AACRlG,QAAAA,KAAK,CAACmG,UAAN,CAAkB,GAAErB,WAAY,sCAAqCoB,MAAO,EAA5E;AACH,OAFD,MAGK,IAAInB,IAAI,IAAIA,IAAI,KAAK,CAAjB,IAAsBA,IAAI,KAAK,GAAnC,EAAwC;AACzC,cAAMR,MAAM,CAACvB,QAAQ,CAAChB,IAAV,EAAiB,GAAE8C,WAAY,0BAAyBC,IAAK,EAA7D,CAAZ;AACH;AACJ,KAPD;AAQAK,IAAAA,OAAO;AACV,GA7CM,CAAP;AA8CH;;AACD,SAAS9F,kBAAT,CAA4B0D,QAA5B,EAAsC;AAClC,SAAOjE,OAAO,CAACW,eAAR,CAAwBsD,QAAxB,CAAP;AACH;;AACDjE,OAAO,CAACO,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,GAAT,CAAa2D,QAAb,EAAuB;AACnB,SAAOjB,eAAe,CAACiB,QAAD,CAAtB;AACH;;AACDjE,OAAO,CAACM,GAAR,GAAcA,GAAd;;AACA,SAASD,MAAT,CAAgB4D,QAAhB,EAA0B;AACtB,QAAMoD,gBAAgB,GAAG/G,GAAG,CAAC2D,QAAD,CAAH,CAAcb,QAAvC;AACA,SAAOiE,gBAAgB,IAAIA,gBAAgB,CAACC,GAArC,GAA2CD,gBAAgB,CAACC,GAA5D,GAAkE,CAAzE;AACH;;AACDtH,OAAO,CAACK,MAAR,GAAiBA,MAAjB;;AACA,eAAeD,IAAf,CAAoBmH,UAApB,EAAgC;AAC5B,QAAMtD,QAAQ,GAAG3D,GAAG,CAACiH,UAAD,CAApB;AACA,SAAO,IAAInB,OAAJ,CAAY,CAACC,OAAD,EAAUmB,MAAV,KAAqB;AACpC,UAAM3C,MAAM,GAAG3D,gBAAgB,CAAC4D,cAAjB,CAAgCC,WAAhC,CAA4Cd,QAAQ,CAAChB,IAArD,CAAf;;AACA,QAAIgB,QAAQ,CAACb,QAAb,EAAuB;AACnB,YAAMqE,WAAW,GAAGC,UAAU,CAAC,MAAM;AACjC,cAAMJ,GAAG,GAAGrD,QAAQ,CAACb,QAAT,GAAoBa,QAAQ,CAACb,QAAT,CAAkBkE,GAAtC,GAA4C,CAAC,CAAzD;AACA,cAAM7B,QAAQ,GAAG3E,WAAW,CAACsD,SAAZ,CAAsB2B,WAAtB,CAAkC9B,QAAQ,CAAChB,IAA3C,IAAmD,qCAAnD,GAA2FqE,GAA3F,GAAiG,GAAlH;AACAzC,QAAAA,MAAM,CAACM,GAAP,CAAW,OAAX,EAAoBM,QAApB;AACA+B,QAAAA,MAAM,CAAC,IAAIzG,OAAO,CAAC4G,aAAZ,CAA0B1D,QAAQ,CAAChB,IAAT,GAAgB,IAAhB,GAAuBwC,QAAjD,CAAD,CAAN;AACH,OAL6B,EAK3BhE,8BAL2B,CAA9B;AAMAwC,MAAAA,QAAQ,CAACb,QAAT,CAAkB8D,IAAlB,CAAuB,MAAvB,EAA+B,MAAM;AACjCU,QAAAA,YAAY,CAACH,WAAD,CAAZ;AACApB,QAAAA,OAAO;AACV,OAHD;AAIApC,MAAAA,QAAQ,CAACb,QAAT,CAAkByE,IAAlB,CAAuB,QAAvB;AACH,KAZD,MAaK;AACDxB,MAAAA,OAAO;AACV;AACJ,GAlBM,CAAP;AAmBH;;AACDrG,OAAO,CAACI,IAAR,GAAeA,IAAf;;AACA,eAAeD,mBAAf,CAAmCoH,UAAnC,EAA+C;AAC3C,QAAMO,WAAW,GAAG1G,EAAE,CAAC2G,UAAH,CAAclE,WAAW,CAAC0D,UAAD,CAAzB,CAApB;;AACA,MAAIO,WAAJ,EAAiB;AACb;AACH;;AACD,QAAMtG,UAAU,CAACwG,gBAAX,CAA4BT,UAA5B,CAAN;AACH;;AACDvH,OAAO,CAACG,mBAAR,GAA8BA,mBAA9B;;AACA,eAAeD,KAAf,CAAqBqH,UAArB,EAAiC3D,IAAjC,EAAuCuC,QAAQ,GAAG,EAAlD,EAAsD;AAClD,QAAM8B,eAAe,GAAGjI,OAAO,CAACW,eAAR,CAAwB4G,UAAxB,CAAxB;AACA,QAAMtD,QAAQ,GAAG3D,GAAG,CAACiH,UAAD,CAApB;AACA,QAAMO,WAAW,GAAG1G,EAAE,CAAC2G,UAAH,CAAclE,WAAW,CAAC0D,UAAD,CAAzB,CAApB;AACA,QAAM1C,MAAM,GAAG3D,gBAAgB,CAAC4D,cAAjB,CAAgCC,WAAhC,CAA4CwC,UAA5C,CAAf;;AACA,MAAI,CAACO,WAAD,IAAgBG,eAAe,CAAC9F,IAAhB,CAAqB+F,SAAzC,EAAoD;AAChD,QAAItE,IAAI,CAACuE,aAAT,EAAwB;AACpB,UAAIxG,OAAO,CAACC,GAAR,CAAYwG,EAAhB,EAAoB;AAChBnH,QAAAA,KAAK,CAACmG,UAAN,CAAkB,iFAAgFtG,WAAW,CAACsD,SAAZ,CAAsB2B,WAAtB,CAAkCwB,UAAlC,CAA8C,8BAA6BU,eAAe,CAAC9F,IAAhB,CAAqBC,QAAS,aAA3M;AACH;;AACD,YAAMZ,UAAU,CAACwG,gBAAX,CAA4BT,UAA5B,CAAN;AACH,KALD,MAMK;AACDtG,MAAAA,KAAK,CAACmG,UAAN,CAAiB,0DAA0DG,UAA3E;AACA,YAAM,IAAIxG,OAAO,CAAC4G,aAAZ,CAA0B,oBAA1B,CAAN;AACH;AACJ;;AACD,QAAMzB,OAAO,GAAGzF,WAAW,CAAC8G,UAAD,EAAa3D,IAAb,CAA3B;;AACAiB,EAAAA,MAAM,CAACM,GAAP,CAAW,OAAX,EAAqB,YAAWrE,WAAW,CAACsD,SAAZ,CAAsB2B,WAAtB,CAAkCwB,UAAlC,CAA8C,iBAAgBc,IAAI,CAACC,SAAL,CAAepC,OAAf,CAAwB,EAAtH;AACA,SAAOD,UAAU,CAAChC,QAAD,EAAWiC,OAAX,EAAoBC,QAApB,CAAjB;AACH;;AACDnG,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.start = exports.downloadIfNecessary = exports.stop = exports.getPID = exports.get = exports.getDownloadDetails = exports.handleEmulatorProcessError = exports._getCommand = exports.getLogFileName = exports.DownloadDetails = void 0;\nconst types_1 = require(\"./types\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"../error\");\nconst childProcess = require(\"child_process\");\nconst utils = require(\"../utils\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst registry_1 = require(\"./registry\");\nconst download_1 = require(\"../emulator/download\");\nconst EMULATOR_INSTANCE_KILL_TIMEOUT = 4000;\nconst CACHE_DIR = process.env.FIREBASE_EMULATORS_PATH || path.join(os.homedir(), \".cache\", \"firebase\", \"emulators\");\nexports.DownloadDetails = {\n    database: {\n        downloadPath: path.join(CACHE_DIR, \"firebase-database-emulator-v4.7.2.jar\"),\n        version: \"4.7.2\",\n        opts: {\n            cacheDir: CACHE_DIR,\n            remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/firebase-database-emulator-v4.7.2.jar\",\n            expectedSize: 28910604,\n            expectedChecksum: \"264e5df0c0661c064ef7dc9ce8179aba\",\n            namePrefix: \"firebase-database-emulator\",\n        },\n    },\n    firestore: {\n        downloadPath: path.join(CACHE_DIR, \"cloud-firestore-emulator-v1.13.1.jar\"),\n        version: \"1.13.1\",\n        opts: {\n            cacheDir: CACHE_DIR,\n            remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/cloud-firestore-emulator-v1.13.1.jar\",\n            expectedSize: 60486708,\n            expectedChecksum: \"e0590880408eacb790874643147c0081\",\n            namePrefix: \"cloud-firestore-emulator\",\n        },\n    },\n    storage: {\n        downloadPath: path.join(CACHE_DIR, \"cloud-storage-rules-runtime-v1.0.1.jar\"),\n        version: \"1.0.1\",\n        opts: {\n            cacheDir: CACHE_DIR,\n            remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/cloud-storage-rules-runtime-v1.0.1.jar\",\n            expectedSize: 32729999,\n            expectedChecksum: \"1a441f5e16c17aa7a27db71c9c9186d5\",\n            namePrefix: \"cloud-storage-rules-emulator\",\n        },\n    },\n    ui: {\n        version: \"1.6.3\",\n        downloadPath: path.join(CACHE_DIR, \"ui-v1.6.3.zip\"),\n        unzipDir: path.join(CACHE_DIR, \"ui-v1.6.3\"),\n        binaryPath: path.join(CACHE_DIR, \"ui-v1.6.3\", \"server.bundle.js\"),\n        opts: {\n            cacheDir: CACHE_DIR,\n            remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/ui-v1.6.3.zip\",\n            expectedSize: 3757268,\n            expectedChecksum: \"153090a46072545aadeb307397cc8f45\",\n            namePrefix: \"ui\",\n        },\n    },\n    pubsub: {\n        downloadPath: path.join(CACHE_DIR, \"pubsub-emulator-0.1.0.zip\"),\n        version: \"0.1.0\",\n        unzipDir: path.join(CACHE_DIR, \"pubsub-emulator-0.1.0\"),\n        binaryPath: path.join(CACHE_DIR, \"pubsub-emulator-0.1.0\", `pubsub-emulator/bin/cloud-pubsub-emulator${process.platform === \"win32\" ? \".bat\" : \"\"}`),\n        opts: {\n            cacheDir: CACHE_DIR,\n            remoteUrl: \"https://storage.googleapis.com/firebase-preview-drop/emulator/pubsub-emulator-0.1.0.zip\",\n            expectedSize: 36623622,\n            expectedChecksum: \"81704b24737d4968734d3e175f4cde71\",\n            namePrefix: \"pubsub-emulator\",\n        },\n    },\n};\nconst EmulatorDetails = {\n    database: {\n        name: types_1.Emulators.DATABASE,\n        instance: null,\n        stdout: null,\n    },\n    firestore: {\n        name: types_1.Emulators.FIRESTORE,\n        instance: null,\n        stdout: null,\n    },\n    storage: {\n        name: types_1.Emulators.STORAGE,\n        instance: null,\n        stdout: null,\n    },\n    pubsub: {\n        name: types_1.Emulators.PUBSUB,\n        instance: null,\n        stdout: null,\n    },\n    ui: {\n        name: types_1.Emulators.UI,\n        instance: null,\n        stdout: null,\n    },\n};\nconst Commands = {\n    database: {\n        binary: \"java\",\n        args: [\"-Duser.language=en\", \"-jar\", getExecPath(types_1.Emulators.DATABASE)],\n        optionalArgs: [\"port\", \"host\", \"functions_emulator_port\", \"functions_emulator_host\"],\n        joinArgs: false,\n    },\n    firestore: {\n        binary: \"java\",\n        args: [\n            \"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\n            \"-Duser.language=en\",\n            \"-jar\",\n            getExecPath(types_1.Emulators.FIRESTORE),\n        ],\n        optionalArgs: [\n            \"port\",\n            \"webchannel_port\",\n            \"host\",\n            \"rules\",\n            \"functions_emulator\",\n            \"seed_from_export\",\n        ],\n        joinArgs: false,\n    },\n    storage: {\n        binary: \"java\",\n        args: [\n            \"-jar\",\n            \"-Duser.language=en\",\n            getExecPath(types_1.Emulators.STORAGE),\n            \"serve\",\n        ],\n        optionalArgs: [],\n        joinArgs: false,\n    },\n    pubsub: {\n        binary: getExecPath(types_1.Emulators.PUBSUB),\n        args: [],\n        optionalArgs: [\"port\", \"host\"],\n        joinArgs: true,\n    },\n    ui: {\n        binary: \"node\",\n        args: [getExecPath(types_1.Emulators.UI)],\n        optionalArgs: [],\n        joinArgs: false,\n    },\n};\nfunction getExecPath(name) {\n    const details = getDownloadDetails(name);\n    return details.binaryPath || details.downloadPath;\n}\nfunction getLogFileName(name) {\n    return `${name}-debug.log`;\n}\nexports.getLogFileName = getLogFileName;\nfunction _getCommand(emulator, args) {\n    const baseCmd = Commands[emulator];\n    const defaultPort = constants_1.Constants.getDefaultPort(emulator);\n    if (!args.port) {\n        args.port = defaultPort;\n    }\n    const cmdLineArgs = baseCmd.args.slice();\n    if (baseCmd.binary === \"java\" &&\n        utils.isRunningInWSL() &&\n        (!args.host || !args.host.includes(\":\"))) {\n        cmdLineArgs.unshift(\"-Djava.net.preferIPv4Stack=true\");\n    }\n    const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator);\n    Object.keys(args).forEach((key) => {\n        if (!baseCmd.optionalArgs.includes(key)) {\n            logger.log(\"DEBUG\", `Ignoring unsupported arg: ${key}`);\n            return;\n        }\n        const argKey = \"--\" + key;\n        const argVal = args[key];\n        if (argVal === undefined) {\n            logger.log(\"DEBUG\", `Ignoring empty arg for key: ${key}`);\n            return;\n        }\n        if (baseCmd.joinArgs) {\n            cmdLineArgs.push(`${argKey}=${argVal}`);\n        }\n        else {\n            cmdLineArgs.push(argKey, argVal);\n        }\n    });\n    return {\n        binary: baseCmd.binary,\n        args: cmdLineArgs,\n        optionalArgs: baseCmd.optionalArgs,\n        joinArgs: baseCmd.joinArgs,\n    };\n}\nexports._getCommand = _getCommand;\nasync function _fatal(emulator, errorMsg) {\n    try {\n        const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator);\n        logger.logLabeled(\"WARN\", emulator, `Fatal error occurred: \\n   ${errorMsg}, \\n   stopping all running emulators`);\n        await registry_1.EmulatorRegistry.stopAll();\n    }\n    finally {\n        process.exit(1);\n    }\n}\nasync function handleEmulatorProcessError(emulator, err) {\n    const description = constants_1.Constants.description(emulator);\n    if (err.path === \"java\" && err.code === \"ENOENT\") {\n        await _fatal(emulator, `${description} has exited because java is not installed, you can install it from https://openjdk.java.net/install/`);\n    }\n    else {\n        await _fatal(emulator, `${description} has exited: ${err}`);\n    }\n}\nexports.handleEmulatorProcessError = handleEmulatorProcessError;\nasync function _runBinary(emulator, command, extraEnv) {\n    return new Promise((resolve) => {\n        const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator.name);\n        emulator.stdout = fs.createWriteStream(getLogFileName(emulator.name));\n        try {\n            emulator.instance = childProcess.spawn(command.binary, command.args, {\n                env: Object.assign(Object.assign({}, process.env), extraEnv),\n                detached: true,\n                stdio: [\"inherit\", \"pipe\", \"pipe\"],\n            });\n        }\n        catch (e) {\n            if (e.code === \"EACCES\") {\n                logger.logLabeled(\"WARN\", emulator.name, `Could not spawn child process for emulator, check that java is installed and on your $PATH.`);\n            }\n            _fatal(emulator.name, e);\n        }\n        const description = constants_1.Constants.description(emulator.name);\n        if (emulator.instance == null) {\n            logger.logLabeled(\"WARN\", emulator.name, `Could not spawn child process for ${description}.`);\n            return;\n        }\n        logger.logLabeled(\"BULLET\", emulator.name, `${description} logging to ${clc.bold(getLogFileName(emulator.name))}`);\n        emulator.instance.stdout.on(\"data\", (data) => {\n            logger.log(\"DEBUG\", data.toString());\n            emulator.stdout.write(data);\n        });\n        emulator.instance.stderr.on(\"data\", (data) => {\n            logger.log(\"DEBUG\", data.toString());\n            emulator.stdout.write(data);\n            if (data.toString().includes(\"java.lang.UnsupportedClassVersionError\")) {\n                logger.logLabeled(\"WARN\", emulator.name, \"Unsupported java version, make sure java --version reports 1.8 or higher.\");\n            }\n        });\n        emulator.instance.on(\"error\", (err) => {\n            handleEmulatorProcessError(emulator.name, err);\n        });\n        emulator.instance.once(\"exit\", async (code, signal) => {\n            if (signal) {\n                utils.logWarning(`${description} has exited upon receiving signal: ${signal}`);\n            }\n            else if (code && code !== 0 && code !== 130) {\n                await _fatal(emulator.name, `${description} has exited with code: ${code}`);\n            }\n        });\n        resolve();\n    });\n}\nfunction getDownloadDetails(emulator) {\n    return exports.DownloadDetails[emulator];\n}\nexports.getDownloadDetails = getDownloadDetails;\nfunction get(emulator) {\n    return EmulatorDetails[emulator];\n}\nexports.get = get;\nfunction getPID(emulator) {\n    const emulatorInstance = get(emulator).instance;\n    return emulatorInstance && emulatorInstance.pid ? emulatorInstance.pid : 0;\n}\nexports.getPID = getPID;\nasync function stop(targetName) {\n    const emulator = get(targetName);\n    return new Promise((resolve, reject) => {\n        const logger = emulatorLogger_1.EmulatorLogger.forEmulator(emulator.name);\n        if (emulator.instance) {\n            const killTimeout = setTimeout(() => {\n                const pid = emulator.instance ? emulator.instance.pid : -1;\n                const errorMsg = constants_1.Constants.description(emulator.name) + \": Unable to terminate process (PID=\" + pid + \")\";\n                logger.log(\"DEBUG\", errorMsg);\n                reject(new error_1.FirebaseError(emulator.name + \": \" + errorMsg));\n            }, EMULATOR_INSTANCE_KILL_TIMEOUT);\n            emulator.instance.once(\"exit\", () => {\n                clearTimeout(killTimeout);\n                resolve();\n            });\n            emulator.instance.kill(\"SIGINT\");\n        }\n        else {\n            resolve();\n        }\n    });\n}\nexports.stop = stop;\nasync function downloadIfNecessary(targetName) {\n    const hasEmulator = fs.existsSync(getExecPath(targetName));\n    if (hasEmulator) {\n        return;\n    }\n    await download_1.downloadEmulator(targetName);\n}\nexports.downloadIfNecessary = downloadIfNecessary;\nasync function start(targetName, args, extraEnv = {}) {\n    const downloadDetails = exports.DownloadDetails[targetName];\n    const emulator = get(targetName);\n    const hasEmulator = fs.existsSync(getExecPath(targetName));\n    const logger = emulatorLogger_1.EmulatorLogger.forEmulator(targetName);\n    if (!hasEmulator || downloadDetails.opts.skipCache) {\n        if (args.auto_download) {\n            if (process.env.CI) {\n                utils.logWarning(`It appears you are running in a CI environment. You can avoid downloading the ${constants_1.Constants.description(targetName)} repeatedly by caching the ${downloadDetails.opts.cacheDir} directory.`);\n            }\n            await download_1.downloadEmulator(targetName);\n        }\n        else {\n            utils.logWarning(\"Setup required, please run: firebase setup:emulators:\" + targetName);\n            throw new error_1.FirebaseError(\"emulator not found\");\n        }\n    }\n    const command = _getCommand(targetName, args);\n    logger.log(\"DEBUG\", `Starting ${constants_1.Constants.description(targetName)} with command ${JSON.stringify(command)}`);\n    return _runBinary(emulator, command, extraEnv);\n}\nexports.start = start;\n"]},"metadata":{},"sourceType":"script"}