{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizedHostingConfigs = void 0;\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst lodash_1 = require(\"lodash\");\n\nconst error_1 = require(\"../error\");\n\nfunction filterOnly(configs, onlyString) {\n  if (!onlyString) {\n    return configs;\n  }\n\n  let onlyTargets = onlyString.split(\",\");\n\n  if (onlyTargets.includes(\"hosting\")) {\n    return configs;\n  }\n\n  onlyTargets = onlyTargets.filter(target => target.startsWith(\"hosting:\")).map(target => target.replace(\"hosting:\", \"\"));\n  const configsBySite = new Map();\n  const configsByTarget = new Map();\n\n  for (const c of configs) {\n    if (c.site) {\n      configsBySite.set(c.site, c);\n    }\n\n    if (c.target) {\n      configsByTarget.set(c.target, c);\n    }\n  }\n\n  const filteredConfigs = [];\n\n  for (const onlyTarget of onlyTargets) {\n    if (configsBySite.has(onlyTarget)) {\n      filteredConfigs.push(configsBySite.get(onlyTarget));\n    } else if (configsByTarget.has(onlyTarget)) {\n      filteredConfigs.push(configsByTarget.get(onlyTarget));\n    } else {\n      throw new error_1.FirebaseError(`Hosting site or target ${cli_color_1.bold(onlyTarget)} not detected in firebase.json`);\n    }\n  }\n\n  return filteredConfigs;\n}\n\nfunction filterExcept(configs, exceptOption) {\n  if (!exceptOption) {\n    return configs;\n  }\n\n  const exceptTargets = exceptOption.split(\",\");\n\n  if (exceptTargets.includes(\"hosting\")) {\n    return [];\n  }\n\n  const exceptValues = new Set(exceptTargets.filter(t => t.startsWith(\"hosting:\")).map(t => t.replace(\"hosting:\", \"\")));\n  const filteredConfigs = [];\n\n  for (const c of configs) {\n    if (!(exceptValues.has(c.site) || exceptValues.has(c.target))) {\n      filteredConfigs.push(c);\n    }\n  }\n\n  return filteredConfigs;\n}\n\nfunction normalizedHostingConfigs(cmdOptions, options = {}) {\n  let configs = lodash_1.cloneDeep(cmdOptions.config.get(\"hosting\"));\n\n  if (!configs) {\n    return [];\n  }\n\n  if (!Array.isArray(configs)) {\n    if (!configs.target && !configs.site) {\n      configs.site = cmdOptions.site;\n    }\n\n    configs = [configs];\n  }\n\n  for (const c of configs) {\n    if (c.target && c.site) {\n      throw new error_1.FirebaseError(`Hosting configs should only include either \"site\" or \"target\", not both.`);\n    }\n  }\n\n  let hostingConfigs = filterOnly(configs, cmdOptions.only);\n  hostingConfigs = filterExcept(hostingConfigs, cmdOptions.except);\n\n  if (options.resolveTargets) {\n    for (const cfg of hostingConfigs) {\n      if (cfg.target) {\n        const matchingTargets = cmdOptions.rc.requireTarget(cmdOptions.project, \"hosting\", cfg.target);\n\n        if (matchingTargets.length > 1) {\n          throw new error_1.FirebaseError(`Hosting target ${cli_color_1.bold(cfg.target)} is linked to multiple sites, ` + `but only one is permitted. ` + `To clear, run:\\n\\n  firebase target:clear hosting ${cfg.target}`);\n        }\n\n        cfg.site = matchingTargets[0];\n      } else if (!cfg.site) {\n        throw new error_1.FirebaseError('Must supply either \"site\" or \"target\" in each \"hosting\" config.');\n      }\n    }\n  }\n\n  return hostingConfigs;\n}\n\nexports.normalizedHostingConfigs = normalizedHostingConfigs;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/hosting/normalizedHostingConfigs.js"],"names":["Object","defineProperty","exports","value","normalizedHostingConfigs","cli_color_1","require","lodash_1","error_1","filterOnly","configs","onlyString","onlyTargets","split","includes","filter","target","startsWith","map","replace","configsBySite","Map","configsByTarget","c","site","set","filteredConfigs","onlyTarget","has","push","get","FirebaseError","bold","filterExcept","exceptOption","exceptTargets","exceptValues","Set","t","cmdOptions","options","cloneDeep","config","Array","isArray","hostingConfigs","only","except","resolveTargets","cfg","matchingTargets","rc","requireTarget","project","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizedHostingConfigs = void 0;\nconst cli_color_1 = require(\"cli-color\");\nconst lodash_1 = require(\"lodash\");\nconst error_1 = require(\"../error\");\nfunction filterOnly(configs, onlyString) {\n    if (!onlyString) {\n        return configs;\n    }\n    let onlyTargets = onlyString.split(\",\");\n    if (onlyTargets.includes(\"hosting\")) {\n        return configs;\n    }\n    onlyTargets = onlyTargets\n        .filter((target) => target.startsWith(\"hosting:\"))\n        .map((target) => target.replace(\"hosting:\", \"\"));\n    const configsBySite = new Map();\n    const configsByTarget = new Map();\n    for (const c of configs) {\n        if (c.site) {\n            configsBySite.set(c.site, c);\n        }\n        if (c.target) {\n            configsByTarget.set(c.target, c);\n        }\n    }\n    const filteredConfigs = [];\n    for (const onlyTarget of onlyTargets) {\n        if (configsBySite.has(onlyTarget)) {\n            filteredConfigs.push(configsBySite.get(onlyTarget));\n        }\n        else if (configsByTarget.has(onlyTarget)) {\n            filteredConfigs.push(configsByTarget.get(onlyTarget));\n        }\n        else {\n            throw new error_1.FirebaseError(`Hosting site or target ${cli_color_1.bold(onlyTarget)} not detected in firebase.json`);\n        }\n    }\n    return filteredConfigs;\n}\nfunction filterExcept(configs, exceptOption) {\n    if (!exceptOption) {\n        return configs;\n    }\n    const exceptTargets = exceptOption.split(\",\");\n    if (exceptTargets.includes(\"hosting\")) {\n        return [];\n    }\n    const exceptValues = new Set(exceptTargets.filter((t) => t.startsWith(\"hosting:\")).map((t) => t.replace(\"hosting:\", \"\")));\n    const filteredConfigs = [];\n    for (const c of configs) {\n        if (!(exceptValues.has(c.site) || exceptValues.has(c.target))) {\n            filteredConfigs.push(c);\n        }\n    }\n    return filteredConfigs;\n}\nfunction normalizedHostingConfigs(cmdOptions, options = {}) {\n    let configs = lodash_1.cloneDeep(cmdOptions.config.get(\"hosting\"));\n    if (!configs) {\n        return [];\n    }\n    if (!Array.isArray(configs)) {\n        if (!configs.target && !configs.site) {\n            configs.site = cmdOptions.site;\n        }\n        configs = [configs];\n    }\n    for (const c of configs) {\n        if (c.target && c.site) {\n            throw new error_1.FirebaseError(`Hosting configs should only include either \"site\" or \"target\", not both.`);\n        }\n    }\n    let hostingConfigs = filterOnly(configs, cmdOptions.only);\n    hostingConfigs = filterExcept(hostingConfigs, cmdOptions.except);\n    if (options.resolveTargets) {\n        for (const cfg of hostingConfigs) {\n            if (cfg.target) {\n                const matchingTargets = cmdOptions.rc.requireTarget(cmdOptions.project, \"hosting\", cfg.target);\n                if (matchingTargets.length > 1) {\n                    throw new error_1.FirebaseError(`Hosting target ${cli_color_1.bold(cfg.target)} is linked to multiple sites, ` +\n                        `but only one is permitted. ` +\n                        `To clear, run:\\n\\n  firebase target:clear hosting ${cfg.target}`);\n                }\n                cfg.site = matchingTargets[0];\n            }\n            else if (!cfg.site) {\n                throw new error_1.FirebaseError('Must supply either \"site\" or \"target\" in each \"hosting\" config.');\n            }\n        }\n    }\n    return hostingConfigs;\n}\nexports.normalizedHostingConfigs = normalizedHostingConfigs;\n"]},"metadata":{},"sourceType":"script"}