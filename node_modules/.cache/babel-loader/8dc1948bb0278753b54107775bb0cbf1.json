{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = require(\"lodash\");\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst open = require(\"open\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst api_1 = require(\"../hosting/api\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst requireConfig = require(\"../requireConfig\");\n\nconst utils_1 = require(\"../utils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requireHostingSite_1 = require(\"../requireHostingSite\");\n\nexports.default = new command_1.Command(\"hosting:channel:open [channelId]\").description(\"opens the URL for a Firebase Hosting channel\").help(\"if unable to open the URL in a browser, it will be displayed in the output\").option(\"--site <siteId>\", \"the site to which the channel belongs\").before(requireConfig).before(requirePermissions_1.requirePermissions, [\"firebasehosting.sites.get\"]).before(requireHostingSite_1.requireHostingSite).action(async (channelId, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const siteId = options.site;\n\n  if (!channelId) {\n    if (options.nonInteractive) {\n      throw new error_1.FirebaseError(`Please provide a channelId.`);\n    }\n\n    const channels = await api_1.listChannels(projectId, siteId);\n    lodash_1.sortBy(channels, [\"name\"]);\n    channelId = await prompt_1.promptOnce({\n      type: \"list\",\n      message: \"Which channel would you like to open?\",\n      choices: channels.map(c => lodash_1.last(c.name.split(\"/\")) || c.name)\n    });\n  }\n\n  channelId = api_1.normalizeName(channelId);\n  const channel = await api_1.getChannel(projectId, siteId, channelId);\n\n  if (!channel) {\n    throw new error_1.FirebaseError(`Could not find the channel ${cli_color_1.bold(channelId)} for site ${cli_color_1.bold(siteId)}.`);\n  }\n\n  utils_1.logLabeledBullet(\"hosting:channel\", channel.url);\n\n  if (!options.nonInteractive) {\n    open(channel.url);\n  }\n\n  return {\n    url: channel.url\n  };\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/hosting-channel-open.js"],"names":["Object","defineProperty","exports","value","lodash_1","require","cli_color_1","open","command_1","error_1","api_1","requirePermissions_1","projectUtils_1","requireConfig","utils_1","prompt_1","requireHostingSite_1","default","Command","description","help","option","before","requirePermissions","requireHostingSite","action","channelId","options","projectId","needProjectId","siteId","site","nonInteractive","FirebaseError","channels","listChannels","sortBy","promptOnce","type","message","choices","map","c","last","name","split","normalizeName","channel","getChannel","bold","logLabeledBullet","url"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = require(\"lodash\");\nconst cli_color_1 = require(\"cli-color\");\nconst open = require(\"open\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst api_1 = require(\"../hosting/api\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst requireConfig = require(\"../requireConfig\");\nconst utils_1 = require(\"../utils\");\nconst prompt_1 = require(\"../prompt\");\nconst requireHostingSite_1 = require(\"../requireHostingSite\");\nexports.default = new command_1.Command(\"hosting:channel:open [channelId]\")\n    .description(\"opens the URL for a Firebase Hosting channel\")\n    .help(\"if unable to open the URL in a browser, it will be displayed in the output\")\n    .option(\"--site <siteId>\", \"the site to which the channel belongs\")\n    .before(requireConfig)\n    .before(requirePermissions_1.requirePermissions, [\"firebasehosting.sites.get\"])\n    .before(requireHostingSite_1.requireHostingSite)\n    .action(async (channelId, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const siteId = options.site;\n    if (!channelId) {\n        if (options.nonInteractive) {\n            throw new error_1.FirebaseError(`Please provide a channelId.`);\n        }\n        const channels = await api_1.listChannels(projectId, siteId);\n        lodash_1.sortBy(channels, [\"name\"]);\n        channelId = await prompt_1.promptOnce({\n            type: \"list\",\n            message: \"Which channel would you like to open?\",\n            choices: channels.map((c) => lodash_1.last(c.name.split(\"/\")) || c.name),\n        });\n    }\n    channelId = api_1.normalizeName(channelId);\n    const channel = await api_1.getChannel(projectId, siteId, channelId);\n    if (!channel) {\n        throw new error_1.FirebaseError(`Could not find the channel ${cli_color_1.bold(channelId)} for site ${cli_color_1.bold(siteId)}.`);\n    }\n    utils_1.logLabeledBullet(\"hosting:channel\", channel.url);\n    if (!options.nonInteractive) {\n        open(channel.url);\n    }\n    return { url: channel.url };\n});\n"]},"metadata":{},"sourceType":"script"}