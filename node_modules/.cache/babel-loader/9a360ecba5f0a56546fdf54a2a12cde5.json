{"ast":null,"code":"/**\n * @fileOverview\n * is2 derived from is by Enrico Marino, adapted for Node.js.\n * Slightly modified by Edmond Meinfelder\n *\n * is\n * the definitive JavaScript type testing library\n * Copyright(c) 2013,2014 Edmond Meinfelder <edmond@stdarg.com>\n * Copyright(c) 2011 Enrico Marino <enrico.marino@email.com>\n * MIT license\n */\n'use strict';\n\nconst owns = {}.hasOwnProperty;\nconst toString = {}.toString;\nconst is = exports;\n\nconst deepIs = require('deep-is');\n\nconst ipRegEx = require('ip-regex');\n\nis.version = require('./package.json').version; ////////////////////////////////////////////////////////////////////////////////\n// Environment\n\n/**\n * Tests if is is running under a browser.\n * @return {Boolean} true if the environment has process, process.version and process.versions.\n */\n\nis.browser = function () {\n  return !is.node() && typeof window !== 'undefined' && toString.call(window) === '[object global]';\n};\n/**\n * Test if 'value' is defined.\n * Alias: def\n * @param {Any} value The value to test.\n * @return {Boolean} true if 'value' is defined, false otherwise.\n */\n\n\nis.defined = function (value) {\n  return typeof value !== 'undefined';\n};\n\nis.def = is.defined;\n/**\n * Tests if is is running under node.js\n * @return {Boolean} true if the environment has process, process.version and process.versions.\n */\n\nis.nodejs = function () {\n  return process && process.hasOwnProperty('version') && process.hasOwnProperty('versions');\n};\n\nis.node = is.nodejs;\n/**\n * Test if 'value' is undefined.\n * Aliases: undef, udef\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is undefined, false otherwise.\n */\n\nis.undefined = function (value) {\n  return value === undefined;\n};\n\nis.udef = is.undef = is.undefined; ////////////////////////////////////////////////////////////////////////////////\n// Types\n\n/**\n * Test if 'value' is an array.\n * Alias: ary, arry\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an array, false otherwise.\n */\n\nis.array = function (value) {\n  return '[object Array]' === toString.call(value);\n};\n\nis.arr = is.ary = is.arry = is.array;\n/**\n * Test if 'value' is an arraylike object (i.e. it has a length property with a valid value)\n * Aliases: arraylike, arryLike, aryLike\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an arguments object, false otherwise.\n */\n\nis.arrayLike = function (value) {\n  if (is.nullOrUndef(value)) return false;\n  return value !== undefined && owns.call(value, 'length') && isFinite(value.length);\n};\n\nis.arrLike = is.arryLike = is.aryLike = is.arraylike = is.arrayLike;\n/**\n * Test if 'value' is an arguments object.\n * Alias: args\n * @param {Any} value value to test\n * @return {Boolean} true if 'value' is an arguments object, false otherwise\n */\n\nis.arguments = function (value) {\n  return '[object Arguments]' === toString.call(value);\n};\n\nis.args = is.arguments;\n/**\n * Test if 'value' is a boolean.\n * Alias: bool\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a boolean, false otherwise.\n */\n\nis.boolean = function (value) {\n  return '[object Boolean]' === toString.call(value);\n};\n\nis.bool = is.boolean;\n/**\n * Test if 'value' is an instance of Buffer.\n * Aliases: instOf, instanceof\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an instance of 'constructor'.\n */\n\nis.buffer = function (value) {\n  return is.nodejs() && Buffer && Buffer.hasOwnProperty('isBuffer') && Buffer.isBuffer(value);\n};\n\nis.buff = is.buf = is.buffer;\n/**\n * Test if 'value' is a date.\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a date, false otherwise.\n */\n\nis.date = function (value) {\n  return '[object Date]' === toString.call(value);\n};\n/**\n * Test if 'value' is an error object.\n * Alias: err\n * @param value value to test.\n * @return {Boolean} true if 'value' is an error object, false otherwise.\n */\n\n\nis.error = function (value) {\n  return '[object Error]' === toString.call(value);\n};\n\nis.err = is.error;\n/**\n * Test if 'value' is false.\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is false, false otherwise\n */\n\nis.false = function (value) {\n  return value === false;\n};\n/**\n * Test if 'value' is a function or async function.\n * Alias: func\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a function, false otherwise.\n */\n\n\nis.function = function (value) {\n  return is.syncFunction(value) || is.asyncFunction(value);\n};\n\nis.fun = is.func = is.function;\n/**\n * Test if 'value' is an async function using `async () => {}` or `async function () {}`.\n * Alias: func\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a function, false otherwise.\n */\n\nis.asyncFunction = function (value) {\n  return '[object AsyncFunction]' === toString.call(value);\n};\n\nis.asyncFun = is.asyncFunc = is.asyncFunction;\n/**\n * Test if 'value' is a synchronous function.\n * Alias: syncFunc\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a function, false otherwise.\n */\n\nis.syncFunction = function (value) {\n  return '[object Function]' === toString.call(value);\n};\n\nis.syncFun = is.syncFunc = is.syncFunction;\n/**\n * Test if 'value' is null.\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is null, false otherwise.\n */\n\nis.null = function (value) {\n  return value === null;\n};\n/**\n * Test is 'value' is either null or undefined.\n * Alias: nullOrUndef\n * @param {Any} value value to test.\n * @return {Boolean} True if value is null or undefined, false otherwise.\n */\n\n\nis.nullOrUndefined = function (value) {\n  return value === null || typeof value === 'undefined';\n};\n\nis.nullOrUndef = is.nullOrUndefined;\n/**\n * Test if 'value' is a number.\n * Alias: num\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a number, false otherwise.\n */\n\nis.number = function (value) {\n  return '[object Number]' === toString.call(value);\n};\n\nis.num = is.number;\n/**\n * Test if 'value' is an object. Note: Arrays, RegExps, Date, Error, etc all return false.\n * Alias: obj\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\n\nis.object = function (value) {\n  return '[object Object]' === toString.call(value);\n};\n\nis.obj = is.object;\n/**\n * Test if 'value' is a regular expression.\n * Alias: regexp\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a regexp, false otherwise.\n */\n\nis.regExp = function (value) {\n  return '[object RegExp]' === toString.call(value);\n};\n\nis.re = is.regexp = is.regExp;\n/**\n * Test if 'value' is a string.\n * Alias: str\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a string, false otherwise.\n */\n\nis.string = function (value) {\n  return '[object String]' === toString.call(value);\n};\n\nis.str = is.string;\n/**\n * Test if 'value' is true.\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is true, false otherwise.\n */\n\nis.true = function (value) {\n  return value === true;\n};\n/**\n * Test if 'value' is a uuid (v1-v5)\n * @param {Any} value to test.\n * @return {Boolean} true if 'value is a valid RFC4122 UUID. Case non-specific.\n */\n\n\nvar uuidRegExp = new RegExp('[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab]' + '[0-9a-f]{3}-[0-9a-f]{12}', 'i');\n\nis.uuid = function (value) {\n  return uuidRegExp.test(value);\n}; ////////////////////////////////////////////////////////////////////////////////\n// Object Relationships\n\n/**\n * Test if 'value' is equal to 'other'. Works for objects and arrays and will do deep comparisions,\n * using recursion.\n * Alias: eq\n * @param {Any} value value.\n * @param {Any} other value to compare with.\n * @return {Boolean} true if 'value' is equal to 'other', false otherwise\n */\n\n\nis.equal = function (value, other) {\n  var type = toString.call(value);\n\n  if (typeof value !== typeof other) {\n    return false;\n  }\n\n  if (type !== toString.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type || '[object Array]' === type) {\n    return deepIs(value, other);\n  } else if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  } else if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return value === other;\n};\n\nis.objEquals = is.eq = is.equal;\n/**\n * JS Type definitions which cannot host values.\n * @api private\n */\n\nvar NON_HOST_TYPES = {\n  'boolean': 1,\n  'number': 1,\n  'string': 1,\n  'undefined': 1\n};\n/**\n * Test if 'key' in host is an object. To be hosted means host[value] is an object.\n * @param {Any} value The value to test.\n * @param {Any} host Host that may contain value.\n * @return {Boolean} true if 'value' is hosted by 'host', false otherwise.\n */\n\nis.hosted = function (value, host) {\n  if (is.nullOrUndef(value)) return false;\n  var type = typeof host[value];\n  return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];\n};\n/**\n * Test if 'value' is an instance of 'constructor'.\n * Aliases: instOf, instanceof\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an instance of 'constructor'.\n */\n\n\nis.instanceOf = function (value, constructor) {\n  if (is.nullOrUndef(value) || is.nullOrUndef(constructor)) return false;\n  return value instanceof constructor;\n};\n\nis.instOf = is.instanceof = is.instanceOf;\n/**\n * Test if 'value' is an instance type objType.\n * Aliases: objInstOf, objectinstanceof, instOf, instanceOf\n * @param {object} objInst an object to testfor type.\n * @param {object} objType an object type to compare.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\n\nis.objectInstanceOf = function (objInst, objType) {\n  try {\n    return '[object Object]' === toString.call(objInst) && objInst instanceof objType;\n  } catch (err) {\n    return false;\n  }\n};\n\nis.instOf = is.instanceOf = is.objInstOf = is.objectInstanceOf;\n/**\n * Test if 'value' is a type of 'type'.\n * Alias: a\n * @param value value to test.\n * @param {String} type The name of the type.\n * @return {Boolean} true if 'value' is an arguments object, false otherwise.\n */\n\nis.type = function (value, type) {\n  return typeof value === type;\n};\n\nis.a = is.type; ////////////////////////////////////////////////////////////////////////////////\n// Object State\n\n/**\n * Test if 'value' is empty. To be empty means to be an array, object or string with nothing contained.\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is empty, false otherwise.\n */\n\nis.empty = function (value) {\n  var type = toString.call(value);\n\n  if ('[object Array]' === type || '[object Arguments]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (var key in value) if (owns.call(value, key)) return false;\n\n    return true;\n  }\n\n  if ('[object String]' === type) {\n    return value === '';\n  }\n\n  return false;\n};\n/**\n * Test if 'value' is an arguments object that is empty.\n * Alias: args\n * @param {Any} value value to test\n * @return {Boolean} true if 'value' is an arguments object with no args, false otherwise\n */\n\n\nis.emptyArguments = function (value) {\n  return '[object Arguments]' === toString.call(value) && value.length === 0;\n};\n\nis.noArgs = is.emptyArgs = is.emptyArguments;\n/**\n * Test if 'value' is an array containing no entries.\n * Aliases: emptyArry, emptyAry\n * @param {Any} value The value to test.\n * @return {Boolean} true if 'value' is an array with no elemnets.\n */\n\nis.emptyArray = function (value) {\n  return '[object Array]' === toString.call(value) && value.length === 0;\n};\n\nis.emptyArry = is.emptyAry = is.emptyArray;\n/**\n * Test if 'value' is an empty array(like) object.\n * Aliases: arguents.empty, args.empty, ary.empty, arry.empty\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an empty array(like), false otherwise.\n */\n\nis.emptyArrayLike = function (value) {\n  return value.length === 0;\n};\n\nis.emptyArrLike = is.emptyArrayLike;\n/**\n * Test if 'value' is an empty string.\n * Alias: emptyStr\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is am empty string, false otherwise.\n */\n\nis.emptyString = function (value) {\n  return is.string(value) && value.length === 0;\n};\n\nis.emptyStr = is.emptyString;\n/**\n * Test if 'value' is an array containing at least 1 entry.\n * Aliases: nonEmptyArry, nonEmptyAry\n * @param {Any} value The value to test.\n * @return {Boolean} true if 'value' is an array with at least 1 value, false otherwise.\n */\n\nis.nonEmptyArray = function (value) {\n  return '[object Array]' === toString.call(value) && value.length > 0;\n};\n\nis.nonEmptyArr = is.nonEmptyArry = is.nonEmptyAry = is.nonEmptyArray;\n/**\n * Test if 'value' is an object with properties. Note: Arrays are objects.\n * Alias: nonEmptyObj\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\n\nis.nonEmptyObject = function (value) {\n  return '[object Object]' === toString.call(value) && Object.keys(value).length > 0;\n};\n\nis.nonEmptyObj = is.nonEmptyObject;\n/**\n * Test if 'value' is an object with no properties. Note: Arrays are objects.\n * Alias: nonEmptyObj\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\n\nis.emptyObject = function (value) {\n  return '[object Object]' === toString.call(value) && Object.keys(value).length === 0;\n};\n\nis.emptyObj = is.emptyObject;\n/**\n * Test if 'value' is a non-empty string.\n * Alias: nonEmptyStr\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a non-empty string, false otherwise.\n */\n\nis.nonEmptyString = function (value) {\n  return is.string(value) && value.length > 0;\n};\n\nis.nonEmptyStr = is.nonEmptyString; ////////////////////////////////////////////////////////////////////////////////\n// Numeric Types within Number\n\n/**\n * Test if 'value' is an even number.\n * @param {Number} value to test.\n * @return {Boolean} true if 'value' is an even number, false otherwise.\n */\n\nis.even = function (value) {\n  return '[object Number]' === toString.call(value) && value % 2 === 0;\n};\n/**\n * Test if 'value' is a decimal number.\n * Aliases: decimalNumber, decNum\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a decimal number, false otherwise.\n */\n\n\nis.decimal = function (value) {\n  return '[object Number]' === toString.call(value) && value % 1 !== 0;\n};\n\nis.dec = is.decNum = is.decimal;\n/**\n * Test if 'value' is an integer.\n * Alias: integer\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an integer, false otherwise.\n */\n\nis.integer = function (value) {\n  return '[object Number]' === toString.call(value) && value % 1 === 0;\n};\n\nis.int = is.integer;\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */\n\nis.notANumber = function (value) {\n  return !is.num(value) || value !== value;\n};\n\nis.nan = is.notANum = is.notANumber;\n/**\n * Test if 'value' is an odd number.\n * @param {Number} value to test.\n * @return {Boolean} true if 'value' is an odd number, false otherwise.\n */\n\nis.odd = function (value) {\n  return !is.decimal(value) && '[object Number]' === toString.call(value) && value % 2 !== 0;\n};\n\nis.oddNumber = is.oddNum = is.odd; ////////////////////////////////////////////////////////////////////////////////\n// Numeric Type & State\n\n/**\n * Test if 'value' is a positive number.\n * Alias: positiveNum, posNum\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a number, false otherwise.\n */\n\nis.positiveNumber = function (value) {\n  return '[object Number]' === toString.call(value) && value > 0;\n};\n\nis.pos = is.positive = is.posNum = is.positiveNum = is.positiveNumber;\n/**\n * Test if 'value' is a negative number.\n * Aliases: negNum, negativeNum\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a number, false otherwise.\n */\n\nis.negativeNumber = function (value) {\n  return '[object Number]' === toString.call(value) && value < 0;\n};\n\nis.neg = is.negNum = is.negativeNum = is.negativeNumber;\n/**\n * Test if 'value' is a negative integer.\n * Aliases: negInt, negativeInteger\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a negative integer, false otherwise.\n */\n\nis.negativeInteger = function (value) {\n  return '[object Number]' === toString.call(value) && value % 1 === 0 && value < 0;\n};\n\nis.negativeInt = is.negInt = is.negativeInteger;\n/**\n * Test if 'value' is a positive integer.\n * Alias: posInt\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a positive integer, false otherwise.\n */\n\nis.positiveInteger = function (value) {\n  return '[object Number]' === toString.call(value) && value % 1 === 0 && value > 0;\n};\n\nis.posInt = is.positiveInt = is.positiveInteger; ////////////////////////////////////////////////////////////////////////////////\n// Numeric Relationships\n\n/**\n * Test if 'value' is divisible by 'n'.\n * Alias: divisBy\n * @param {Number} value value to test.\n * @param {Number} n dividend.\n * @return {Boolean} true if 'value' is divisible by 'n', false otherwise.\n */\n\nis.divisibleBy = function (value, n) {\n  if (value === 0) return false;\n  return '[object Number]' === toString.call(value) && n !== 0 && value % n === 0;\n};\n\nis.divBy = is.divisBy = is.divisibleBy;\n/**\n * Test if 'value' is greater than or equal to 'other'.\n * Aliases: greaterOrEq, greaterOrEqual\n * @param {Number} value value to test.\n * @param {Number} other value to compare with.\n * @return {Boolean} true, if value is greater than or equal to other, false otherwise.\n */\n\nis.greaterOrEqualTo = function (value, other) {\n  return value >= other;\n};\n\nis.greaterOrEqual = is.ge = is.greaterOrEqualTo;\n/**\n * Test if 'value' is greater than 'other'.\n * Aliases: greaterThan\n * @param {Number} value value to test.\n * @param {Number} other value to compare with.\n * @return {Boolean} true, if value is greater than other, false otherwise.\n */\n\nis.greaterThan = function (value, other) {\n  return value > other;\n};\n\nis.gt = is.greaterThan;\n/**\n * Test if 'value' is less than or equal to 'other'.\n * Alias: lessThanOrEq, lessThanOrEqual\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} true, if 'value' is less than or equal to 'other', false otherwise.\n */\n\nis.lessThanOrEqualTo = function (value, other) {\n  return value <= other;\n};\n\nis.lessThanOrEq = is.lessThanOrEqual = is.le = is.lessThanOrEqualTo;\n/**\n * Test if 'value' is less than 'other'.\n * Alias: lessThan\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} true, if 'value' is less than 'other', false otherwise.\n */\n\nis.lessThan = function (value, other) {\n  return value < other;\n};\n\nis.lt = is.lessThan;\n/**\n * Test if 'value' is greater than 'others' values.\n * Alias: max\n * @param {Number} value value to test.\n * @param {Array} others values to compare with.\n * @return {Boolean} true if 'value' is greater than 'others' values.\n */\n\nis.maximum = function (value, others) {\n  if (!is.arrayLike(others) || !is.number(value)) return false;\n  var len = others.length;\n\n  while (--len > -1) {\n    if (value < others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nis.max = is.maximum;\n/**\n * Test if 'value' is less than 'others' values.\n * Alias: min\n * @param {Number} value value to test.\n * @param {Array} others values to compare with.\n * @return {Boolean} true if 'value' is less than 'others' values.\n */\n\nis.minimum = function (value, others) {\n  if (!is.arrayLike(others) || !is.number(value)) return false;\n  var len = others.length;\n\n  while (--len > -1) {\n    if (value > others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nis.min = is.minimum;\n/**\n * Test if 'value' is within 'start' and 'finish'.\n * Alias: withIn\n * @param {Number} value value to test.\n * @param {Number} start lower bound.\n * @param {Number} finish upper bound.\n * @return {Boolean} true if 'value' is is within 'start' and 'finish', false otherwise.\n */\n\nis.within = function (value, start, finish) {\n  return value >= start && value <= finish;\n};\n\nis.withIn = is.within;\n/**\n * Test if 'value' is within 'precision' decimal places from 'comparitor'.\n * Alias: closish, near.\n * @param {Number} value value to test\n * @param {Number} comparitor value to test 'value' against\n * @param {Number} precision number of decimals to compare floating points, defaults to 2\n * @return {Boolean} true if 'value' is within 'precision' decimal places from 'comparitor', false otherwise.\n */\n\nis.prettyClose = function (value, comparitor, precision) {\n  if (!is.number(value) || !is.number(comparitor)) return false;\n  if (is.defined(precision) && !is.posInt(precision)) return false;\n  if (is.undefined(precision)) precision = 2;\n  return value.toFixed(precision) === comparitor.toFixed(precision);\n};\n\nis.closish = is.near = is.prettyClose; ////////////////////////////////////////////////////////////////////////////////\n// Networking\n\n/**\n * Test if a value is a valid DNS address. eg www.stdarg.com is true while\n * 127.0.0.1 is false.\n * @param {Any} value to test if a DNS address.\n * @return {Boolean} true if a DNS address, false otherwise.\n * DNS Address is made up of labels separated by '.'\n * Each label must be between 1 and 63 characters long\n * The entire hostname (including the delimiting dots) has a maximum of 255 characters.\n * Hostname may not contain other characters, such as the underscore character (_)\n * other DNS names may contain the underscore.\n */\n\nis.dnsAddress = function (value) {\n  if (!is.nonEmptyStr(value)) return false;\n  if (value.length > 255) return false;\n  if (numbersLabel.test(value)) return false;\n  if (!dnsLabel.test(value)) return false;\n  return true; //var names = value.split('.');\n  //if (!is.array(names) || !names.length)  return false;\n  //if (names[0].indexOf('_') > -1)  return false;\n  //for (var i=0; i<names.length; i++) {\n  //if (!dnsLabel.test(names[i]))  return false;\n  //}\n  //return true;\n};\n\nis.dnsAddr = is.dns = is.dnsAddress;\nvar dnsLabel = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])(\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]))*$/;\nvar numbersLabel = /^([0-9]|[0-9][0-9\\-]{0,61}[0-9])(\\.([0-9]|[0-9][0-9\\-]{0,61}[0-9]))*$/;\n/**\n * Test if value is a valid email address.\n * @param {Any} value to test if an email address.\n * @return {Boolean} true if an email address, false otherwise.\n */\n\nis.emailAddress = function (value) {\n  if (!is.nonEmptyStr(value)) return false;\n  return emailRegexp.test(value);\n};\n\nis.email = is.emailAddr = is.emailAddress;\nvar emailRegexp = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*$/;\n/**\n * Test if a value is either an IPv4 numeric IP address.\n * The rules are:\n * must be a string\n * length must be 15 characters or less\n * There must be four octets separated by a '.'\n * No octet can be less than 0 or greater than 255.\n * @param {Any} value to test if an ip address.\n * @return {Boolean} true if an ip address, false otherwise.\n */\n\nis.ipv4Address = function (value) {\n  if (!is.nonEmptyStr(value)) return false;\n  if (value.length > 15) return false;\n  var octets = value.split('.');\n  if (!is.array(octets) || octets.length !== 4) return false;\n\n  for (var i = 0; i < octets.length; i++) {\n    var val = parseInt(octets[i], 10);\n    if (isNaN(val)) return false;\n    if (val < 0 || val > 255) return false;\n  }\n\n  return true;\n};\n\nis.ipv4 = is.ipv4Addr = is.ipv4Address;\n/**\n * Test if a value is either an IPv6 numeric IP address.\n * @param {Any} value to test if an ip address.\n * @return {Boolean} true if an ip address, false otherwise.\n */\n\nis.ipv6Address = function (value) {\n  if (!is.nonEmptyStr(value)) return false;\n  return ipRegEx.v6({\n    extract: true\n  }).test(value);\n};\n\nis.ipv6 = is.ipv6Addr = is.ipv6Address;\n/**\n * Test if a value is either an IPv4 or IPv6 numeric IP address.\n * @param {Any} value to test if an ip address.\n * @return {Boolean} true if an ip address, false otherwise.\n */\n\nis.ipAddress = function (value) {\n  if (!is.nonEmptyStr(value)) return false;\n  return is.ipv4Address(value) || is.ipv6Address(value);\n};\n\nis.ip = is.ipAddr = is.ipAddress;\n/**\n * Test is a value is a valid ipv4, ipv6 or DNS name.\n * Aliases: host, hostAddr, hostAddress.\n * @param {Any} value to test if a host address.\n * @return {Boolean} true if a host address, false otherwise.\n */\n\nis.hostAddress = function (value) {\n  if (!is.nonEmptyStr(value)) return false;\n  return is.dns(value) || is.ipv4(value) || is.ipv6(value);\n};\n\nis.host = is.hostIp = is.hostAddr = is.hostAddress;\n/**\n * Test if a number is a valid TCP port\n * @param {Any} value to test if its a valid TCP port\n */\n\nis.port = function (value) {\n  if (!is.num(value) || is.negativeInt(value) || value > 65535) return false;\n  return true;\n};\n/**\n * Test if a number is a valid TCP port in the range 0-1023.\n * Alias: is.sysPort.\n * @param {Any} value to test if its a valid TCP port\n */\n\n\nis.systemPort = function (value) {\n  if (is.port(value) && value < 1024) return true;\n  return false;\n};\n\nis.sysPort = is.systemPort;\n/**\n * Test if a number is a valid TCP port in the range 1024-65535.\n * @param {Any} value to test if its a valid TCP port\n */\n\nis.userPort = function (value) {\n  if (is.port(value) && value > 1023) return true;\n  return false;\n};\n/*\nfunction sumDigits(num) {\n    var str = num.toString();\n    var sum = 0;\n    for (var i = 0; i < str.length; i++)\n        sum += (str[i]-0);\n    return sum;\n}\n*/\n\n/**\n * Test if a string is a credit card.\n * From http://en.wikipedia.org/wiki/Luhn_algorithm\n * @param {String} value to test if a credit card.\n * @return true if the string is the correct format, false otherwise\n */\n\n\nis.creditCardNumber = function (str) {\n  if (!is.str(str)) return false;\n  var ary = str.split('');\n  var i, cnt; // From the rightmost digit, which is the check digit, moving left, double\n  // the value of every second digit;\n\n  for (i = ary.length - 1, cnt = 1; i > -1; i--, cnt++) {\n    if (cnt % 2 === 0) ary[i] *= 2;\n  }\n\n  str = ary.join('');\n  var sum = 0; // if the product of the previous doubling operation is greater than 9\n  // (e.g., 7 * 2 = 14), then sum the digits of the products (e.g., 10: 1 + 0\n  // = 1, 14: 1 + 4 = 5).  We do the this by joining the array of numbers and\n  // add adding the int value of all the characters in the string.\n\n  for (i = 0; i < str.length; i++) sum += Math.floor(str[i]); // If the total (sum) modulo 10 is equal to 0 (if the total ends in zero)\n  // then the number is valid according to the Luhn formula; else it is not\n  // valid.\n\n\n  return sum % 10 === 0;\n};\n\nis.creditCard = is.creditCardNum = is.creditCardNumber; ////////////////////////////////////////////////////////////////////////////////\n// The following credit card info is from:\n// http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\n\n/**\n * Test if card number is an American Express card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.americanExpressCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 15) return false;\n  var prefix = Math.floor(str.slice(0, 2));\n  if (prefix !== 34 && prefix !== 37) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.amexCard = is.amexCardNum = is.americanExpressCardNumber;\n/**\n * Test if card number is a China UnionPay card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.chinaUnionPayCardNumber = function (str) {\n  if (!is.str(str) || str.length < 16 && str.length > 19) return false;\n  var prefix = Math.floor(str.slice(0, 2));\n  if (prefix !== 62 && prefix !== 88) return false; // no validation for this card\n\n  return true;\n};\n\nis.chinaUnion = is.chinaUnionPayCard = is.chinaUnionPayCardNumber;\n/**\n * Test if card number is a Diner's Club Carte Blance card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.dinersClubCarteBlancheCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 14) return false;\n  var prefix = Math.floor(str.slice(0, 3));\n  if (prefix < 300 || prefix > 305) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.dinersClubCB = is.dinersClubCarteBlancheCard = is.dinersClubCarteBlancheCardNumber;\n/**\n * Test if card number is a Diner's Club International card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.dinersClubInternationalCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 14) return false;\n  var prefix = Math.floor(str.slice(0, 3));\n  var prefix2 = Math.floor(str.slice(0, 2)); // 300-305, 309, 36, 38-39\n\n  if ((prefix < 300 || prefix > 305) && prefix !== 309 && prefix2 !== 36 && (prefix2 < 38 || prefix2 > 39)) {\n    return false;\n  }\n\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.dinersClubInt = is.dinersClubInternationalCard = is.dinersClubInternationalCardNumber;\n/**\n * Test if card number is a Diner's Club USA & CA card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.dinersClubUSACanadaCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 16) return false;\n  var prefix = Math.floor(str.slice(0, 2));\n  if (prefix !== 54 && prefix !== 55) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.dinersClub = is.dinersClubUSACanCard = is.dinersClubUSACanadaCardNumber;\n/**\n * Test if card number is a Diner's Club USA/CA card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.discoverCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 16) return false;\n  var prefix = Math.floor(str.slice(0, 6));\n  var prefix2 = Math.floor(str.slice(0, 3));\n\n  if (str.slice(0, 4) !== '6011' && (prefix < 622126 || prefix > 622925) && (prefix2 < 644 || prefix2 > 649) && str.slice(0, 2) !== '65') {\n    return false;\n  }\n\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.discover = is.discoverCard = is.discoverCardNumber;\n/**\n * Test if card number is an InstaPayment card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.instaPaymentCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 16) return false;\n  var prefix = Math.floor(str.slice(0, 3));\n  if (prefix < 637 || prefix > 639) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.instaPayment = is.instaPaymentCardNumber;\n/**\n * Test if card number is a JCB card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.jcbCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 16) return false;\n  var prefix = Math.floor(str.slice(0, 4));\n  if (prefix < 3528 || prefix > 3589) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.jcb = is.jcbCard = is.jcbCardNumber;\n/**\n * Test if card number is a Laser card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.laserCardNumber = function (str) {\n  if (!is.str(str) || str.length < 16 && str.length > 19) return false;\n  var prefix = Math.floor(str.slice(0, 4));\n  var valid = [6304, 6706, 6771, 6709];\n  if (valid.indexOf(prefix) === -1) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.laser = is.laserCard = is.laserCardNumber;\n/**\n * Test if card number is a Maestro card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.maestroCardNumber = function (str) {\n  if (!is.str(str) || str.length < 12 || str.length > 19) return false;\n  var prefix = str.slice(0, 4);\n  var valid = ['5018', '5020', '5038', '5612', '5893', '6304', '6759', '6761', '6762', '6763', '0604', '6390'];\n  if (valid.indexOf(prefix) === -1) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.maestro = is.maestroCard = is.maestroCardNumber;\n/**\n * Test if card number is a Dankort card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.dankortCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 16) return false;\n  if (str.slice(0, 4) !== '5019') return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.dankort = is.dankortCard = is.dankortCardNumber;\n/**\n * Test if card number is a MasterCard card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.masterCardCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 16) return false;\n  var prefix = Math.floor(str.slice(0, 2));\n  if (prefix < 50 || prefix > 55) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.masterCard = is.masterCardCard = is.masterCardCardNumber;\n/**\n * Test if card number is a Visa card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.visaCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 13 && str.length !== 16) return false;\n  if ('4' !== str.slice(0, 1)) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return true;\n};\n\nis.visa = is.visaCard = is.visaCardNumber;\n/**\n * Test if card number is a Visa card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\n\nis.visaElectronCardNumber = function (str) {\n  if (!is.str(str) || str.length !== 16) return false;\n  var prefix = Math.floor(str.slice(0, 4));\n  var valid = [4026, 4405, 4508, 4844, 4913, 4917];\n  if ('417500' !== str.slice(0, 6) && valid.indexOf(prefix) === -1) return false;\n  if (!is.creditCardNumber(str)) return false;\n  return false;\n};\n\nis.visaElectron = is.visaElectronCard = is.visaElectronCardNumber;\n/**\n * Test if the input is a valid MongoDB id.\n * @param {String|Object} Either a mongodb object id or a string representation.\n * @return true if the string is the correct format, false otherwise\n * Thanks to Jason Denizac (https://github.com/jden) for pointing this out.\n * https://github.com/jden/objectid/blob/master/index.js#L7-L10\n */\n\nvar objIdPattern = /^[0-9a-fA-F]{24}$/;\n\nis.mongoId = is.objectId = is.objId = function (id) {\n  return Boolean(id) && !Array.isArray(id) && objIdPattern.test(String(id));\n};\n/**\n * Test is the first argument is structly equal to any of the subsequent args.\n * @param Value to test against subsequent arguments.\n * @return true if the first value matches any of subsequent values.\n */\n\n\nis.matching = is.match = is.inArgs = function (val) {\n  if (arguments.length < 2) return false;\n  var result = false;\n\n  for (var i = 1; i < arguments.length; i++) {\n    var eq = is.equal(val, arguments[i]);\n    result = result || eq;\n  }\n\n  return result;\n}; // US Address components\n\n/**********************************\n***Definitely a work in progress***\n**********************************/\n\n/**\n * Test if a string contains a US street address\n * @param {String} the string to search\n * @return true if an address is present, false otherwise\n */\n\n\nis.streetAddress = function (str) {\n  if (!is.str(str)) return false;\n  var regex = /\\b\\d+[\\s](?:[A-Za-z0-9.-]+[\\s]+)+\\b(ALLEY|ALY|AVENUE|AVE|BEND|BND|BLUFFS?|BLFS?|BOULEVARD|BLVD|BRANCH|BR|CENTERS?|CTRS?|CIRCLES?|CIRS?|CLIFFS?|CLFS?|COURTS?|CTS?|COVES?|CVS?|CREEK|CRK|CRESCENT|CRES|CREST|CRST|CROSSING|XING|DRIVES?|DRS?|EXPRESSWAY|EXPY|FREEWAY|FWY|HEIGHTS|HTS|HIGHWAY|HWY|HILLS?|HLS?|LANE|LN|LOOP|MANORS?|MNRS?|MOTORWAY|MTWY|MOUNT|MT|PARKS?|PARKWAYS?|PKWY|PASS|PLACE|PL|PLAZA|PLZ|POINTS?|PTS?|RIDGES?|RDGS?|ROADS?|RDS?|ROUTE|RTE?|SHOALS?|SHLS?|SHORES?|SHRS?|SPRINGS?|SPGS?|SPURS?|STREETS?|STS?|SUMMIT|SMT|TERRACE|TER|THROUGHWAY|TRWY|TRAFFICWAY|TRFY|TRAIL|TRL|TURNPIKE|TPKE|VALLEYS?|VLYS?|WAYS?)+(?:[\\.\\-\\s\\,]?)*((APARTMENT|APT|APPT|#|NUMBER|NUM|FLOOR|FL|\\s)?(\\d)*)\\b/ig;\n  return regex.test(str);\n};\n\nis.street = is.address = is.streetAddress;\n/**\n * Test if a string resembles a US Zip code,\n * no regular expression will be perfect for this,\n * as there are many numbers that aren't valid zip codes\n * @param {String || Number} the string or number literal to test\n * @return true if zipcode like, false otherwise\n */\n\nis.zipCode = function (str) {\n  if (is.undefined(str) || !(is.string(str) || is.number(str))) return false;\n  var zip = /^\\d{5}(?:-\\d{4})?$/;\n  return zip.test(str);\n};\n\nis.zip = is.zipCode;\n/**\n * Test if a string contains a US phone number\n * @param {String} the string to search\n * @return true if str contains a phone number, false otherwise.\n */\n\nis.phoneNumber = function (str) {\n  if (!is.string(str)) return false;\n  var nums = /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:(\\(?)(?:(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]‌​)\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\)?)\\s*(?:[.-]\\s*)?)?([2-9]1[02-‌​9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})/g;\n  return nums.test(str);\n};\n\nis.phone = is.phoneNumber;\n/**\n * Test is a string is a valid URL\n * @param {string} val - the possible url to check\n * @return true if str contains a phone number, false otherwise.\n */\n\nvar isUrl = require('is-url');\n\nis.url = function (val) {\n  return isUrl(val);\n};\n\nis.uri = is.url;\n\nis.enumerator = function (val, ary) {\n  var value = false;\n  if (!is.defined(val) || !is.defined(ary) || !is.arrayLike(ary)) return value;\n\n  for (var i = 0, len = ary.length; i < len; i++) {\n    if (is.equal(val, ary[i])) {\n      value = true;\n      break;\n    }\n  }\n\n  return value;\n};\n\nis.enum = is.inArray = is.enumerator;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/is2/index.js"],"names":["owns","hasOwnProperty","toString","is","exports","deepIs","require","ipRegEx","version","browser","node","window","call","defined","value","def","nodejs","process","undefined","udef","undef","array","arr","ary","arry","arrayLike","nullOrUndef","isFinite","length","arrLike","arryLike","aryLike","arraylike","arguments","args","boolean","bool","buffer","Buffer","isBuffer","buff","buf","date","error","err","false","function","syncFunction","asyncFunction","fun","func","asyncFun","asyncFunc","syncFun","syncFunc","null","nullOrUndefined","number","num","object","obj","regExp","re","regexp","string","str","true","uuidRegExp","RegExp","uuid","test","equal","other","type","prototype","getTime","objEquals","eq","NON_HOST_TYPES","hosted","host","instanceOf","constructor","instOf","instanceof","objectInstanceOf","objInst","objType","objInstOf","a","empty","key","emptyArguments","noArgs","emptyArgs","emptyArray","emptyArry","emptyAry","emptyArrayLike","emptyArrLike","emptyString","emptyStr","nonEmptyArray","nonEmptyArr","nonEmptyArry","nonEmptyAry","nonEmptyObject","Object","keys","nonEmptyObj","emptyObject","emptyObj","nonEmptyString","nonEmptyStr","even","decimal","dec","decNum","integer","int","notANumber","nan","notANum","odd","oddNumber","oddNum","positiveNumber","pos","positive","posNum","positiveNum","negativeNumber","neg","negNum","negativeNum","negativeInteger","negativeInt","negInt","positiveInteger","posInt","positiveInt","divisibleBy","n","divBy","divisBy","greaterOrEqualTo","greaterOrEqual","ge","greaterThan","gt","lessThanOrEqualTo","lessThanOrEq","lessThanOrEqual","le","lessThan","lt","maximum","others","len","max","minimum","min","within","start","finish","withIn","prettyClose","comparitor","precision","toFixed","closish","near","dnsAddress","numbersLabel","dnsLabel","dnsAddr","dns","emailAddress","emailRegexp","email","emailAddr","ipv4Address","octets","split","i","val","parseInt","isNaN","ipv4","ipv4Addr","ipv6Address","v6","extract","ipv6","ipv6Addr","ipAddress","ip","ipAddr","hostAddress","hostIp","hostAddr","port","systemPort","sysPort","userPort","creditCardNumber","cnt","join","sum","Math","floor","creditCard","creditCardNum","americanExpressCardNumber","prefix","slice","amexCard","amexCardNum","chinaUnionPayCardNumber","chinaUnion","chinaUnionPayCard","dinersClubCarteBlancheCardNumber","dinersClubCB","dinersClubCarteBlancheCard","dinersClubInternationalCardNumber","prefix2","dinersClubInt","dinersClubInternationalCard","dinersClubUSACanadaCardNumber","dinersClub","dinersClubUSACanCard","discoverCardNumber","discover","discoverCard","instaPaymentCardNumber","instaPayment","jcbCardNumber","jcb","jcbCard","laserCardNumber","valid","indexOf","laser","laserCard","maestroCardNumber","maestro","maestroCard","dankortCardNumber","dankort","dankortCard","masterCardCardNumber","masterCard","masterCardCard","visaCardNumber","visa","visaCard","visaElectronCardNumber","visaElectron","visaElectronCard","objIdPattern","mongoId","objectId","objId","id","Boolean","Array","isArray","String","matching","match","inArgs","result","streetAddress","regex","street","address","zipCode","zip","phoneNumber","nums","phone","isUrl","url","uri","enumerator","enum","inArray"],"mappings":"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","sourcesContent":["/**\n * @fileOverview\n * is2 derived from is by Enrico Marino, adapted for Node.js.\n * Slightly modified by Edmond Meinfelder\n *\n * is\n * the definitive JavaScript type testing library\n * Copyright(c) 2013,2014 Edmond Meinfelder <edmond@stdarg.com>\n * Copyright(c) 2011 Enrico Marino <enrico.marino@email.com>\n * MIT license\n */\n'use strict';\nconst owns = {}.hasOwnProperty;\nconst toString = {}.toString;\nconst is = exports;\nconst deepIs = require('deep-is');\nconst ipRegEx =  require('ip-regex');\nis.version = require('./package.json').version;\n\n////////////////////////////////////////////////////////////////////////////////\n// Environment\n\n/**\n * Tests if is is running under a browser.\n * @return {Boolean} true if the environment has process, process.version and process.versions.\n */\nis.browser = function() {\n    return (!is.node() && typeof window !== 'undefined' && toString.call(window) === '[object global]');\n};\n\n/**\n * Test if 'value' is defined.\n * Alias: def\n * @param {Any} value The value to test.\n * @return {Boolean} true if 'value' is defined, false otherwise.\n */\nis.defined = function(value) {\n    return typeof value !== 'undefined';\n};\nis.def = is.defined;\n\n/**\n * Tests if is is running under node.js\n * @return {Boolean} true if the environment has process, process.version and process.versions.\n */\nis.nodejs = function() {\n    return (process && process.hasOwnProperty('version') &&\n            process.hasOwnProperty('versions'));\n};\nis.node = is.nodejs;\n\n/**\n * Test if 'value' is undefined.\n * Aliases: undef, udef\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is undefined, false otherwise.\n */\nis.undefined = function(value) {\n    return value === undefined;\n};\nis.udef = is.undef = is.undefined;\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\n/**\n * Test if 'value' is an array.\n * Alias: ary, arry\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an array, false otherwise.\n */\nis.array = function(value) {\n    return '[object Array]' === toString.call(value);\n};\nis.arr = is.ary = is.arry = is.array;\n\n/**\n * Test if 'value' is an arraylike object (i.e. it has a length property with a valid value)\n * Aliases: arraylike, arryLike, aryLike\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an arguments object, false otherwise.\n */\nis.arrayLike = function(value) {\n    if (is.nullOrUndef(value))\n        return false;\n    return value !== undefined &&\n        owns.call(value, 'length') &&\n        isFinite(value.length);\n};\nis.arrLike = is.arryLike = is.aryLike = is.arraylike = is.arrayLike;\n\n/**\n * Test if 'value' is an arguments object.\n * Alias: args\n * @param {Any} value value to test\n * @return {Boolean} true if 'value' is an arguments object, false otherwise\n */\nis.arguments = function(value) {\n    return '[object Arguments]' === toString.call(value);\n};\nis.args = is.arguments;\n\n/**\n * Test if 'value' is a boolean.\n * Alias: bool\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a boolean, false otherwise.\n */\nis.boolean = function(value) {\n    return '[object Boolean]' === toString.call(value);\n};\nis.bool = is.boolean;\n\n/**\n * Test if 'value' is an instance of Buffer.\n * Aliases: instOf, instanceof\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an instance of 'constructor'.\n */\nis.buffer = function(value) {\n    return is.nodejs() && Buffer && Buffer.hasOwnProperty('isBuffer') && Buffer.isBuffer(value);\n};\nis.buff = is.buf = is.buffer;\n\n/**\n * Test if 'value' is a date.\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a date, false otherwise.\n */\nis.date = function(value) {\n    return '[object Date]' === toString.call(value);\n};\n\n/**\n * Test if 'value' is an error object.\n * Alias: err\n * @param value value to test.\n * @return {Boolean} true if 'value' is an error object, false otherwise.\n */\nis.error = function(value) {\n    return '[object Error]' === toString.call(value);\n};\nis.err = is.error;\n\n/**\n * Test if 'value' is false.\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is false, false otherwise\n */\nis.false = function(value) {\n    return value === false;\n};\n\n/**\n * Test if 'value' is a function or async function.\n * Alias: func\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a function, false otherwise.\n */\nis.function = function(value) {\n    return is.syncFunction(value) || is.asyncFunction(value)\n};\nis.fun = is.func = is.function;\n\n/**\n * Test if 'value' is an async function using `async () => {}` or `async function () {}`.\n * Alias: func\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a function, false otherwise.\n */\nis.asyncFunction = function(value) {\n  return '[object AsyncFunction]' === toString.call(value);\n}\nis.asyncFun = is.asyncFunc = is.asyncFunction;\n\n/**\n * Test if 'value' is a synchronous function.\n * Alias: syncFunc\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a function, false otherwise.\n */\nis.syncFunction = function (value) {\n  return '[object Function]' === toString.call(value);\n}\nis.syncFun = is.syncFunc = is.syncFunction\n/**\n * Test if 'value' is null.\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is null, false otherwise.\n */\nis.null = function(value) {\n    return value === null;\n};\n\n/**\n * Test is 'value' is either null or undefined.\n * Alias: nullOrUndef\n * @param {Any} value value to test.\n * @return {Boolean} True if value is null or undefined, false otherwise.\n */\nis.nullOrUndefined = function(value) {\n    return value === null || typeof value === 'undefined';\n};\nis.nullOrUndef = is.nullOrUndefined;\n\n/**\n * Test if 'value' is a number.\n * Alias: num\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a number, false otherwise.\n */\nis.number = function(value) {\n    return '[object Number]' === toString.call(value);\n};\nis.num = is.number;\n\n/**\n * Test if 'value' is an object. Note: Arrays, RegExps, Date, Error, etc all return false.\n * Alias: obj\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\nis.object = function(value) {\n    return '[object Object]' === toString.call(value);\n};\nis.obj = is.object;\n\n/**\n * Test if 'value' is a regular expression.\n * Alias: regexp\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a regexp, false otherwise.\n */\nis.regExp = function(value) {\n    return '[object RegExp]' === toString.call(value);\n};\nis.re = is.regexp = is.regExp;\n\n/**\n * Test if 'value' is a string.\n * Alias: str\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a string, false otherwise.\n */\nis.string = function(value) {\n    return '[object String]' === toString.call(value);\n};\nis.str = is.string;\n\n/**\n * Test if 'value' is true.\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is true, false otherwise.\n */\nis.true = function(value) {\n    return value === true;\n};\n\n/**\n * Test if 'value' is a uuid (v1-v5)\n * @param {Any} value to test.\n * @return {Boolean} true if 'value is a valid RFC4122 UUID. Case non-specific.\n */\nvar uuidRegExp = new RegExp('[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab]'+\n                            '[0-9a-f]{3}-[0-9a-f]{12}', 'i');\nis.uuid = function(value) {\n    return uuidRegExp.test(value);\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Object Relationships\n\n/**\n * Test if 'value' is equal to 'other'. Works for objects and arrays and will do deep comparisions,\n * using recursion.\n * Alias: eq\n * @param {Any} value value.\n * @param {Any} other value to compare with.\n * @return {Boolean} true if 'value' is equal to 'other', false otherwise\n */\nis.equal = function(value, other) {\n    var type = toString.call(value);\n\n    if (typeof value !== typeof other) {\n        return false;\n    }\n\n    if (type !== toString.call(other)) {\n        return false;\n    }\n\n    if ('[object Object]' === type || '[object Array]' === type) {\n        return deepIs(value, other);\n    } else if ('[object Function]' === type) {\n        return value.prototype === other.prototype;\n    } else if ('[object Date]' === type) {\n        return value.getTime() === other.getTime();\n    }\n\n    return value === other;\n};\nis.objEquals = is.eq = is.equal;\n\n/**\n * JS Type definitions which cannot host values.\n * @api private\n */\nvar NON_HOST_TYPES = {\n    'boolean': 1,\n    'number': 1,\n    'string': 1,\n    'undefined': 1\n};\n\n/**\n * Test if 'key' in host is an object. To be hosted means host[value] is an object.\n * @param {Any} value The value to test.\n * @param {Any} host Host that may contain value.\n * @return {Boolean} true if 'value' is hosted by 'host', false otherwise.\n */\nis.hosted = function(value, host) {\n    if (is.nullOrUndef(value))\n        return false;\n    var type = typeof host[value];\n    return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];\n};\n\n/**\n * Test if 'value' is an instance of 'constructor'.\n * Aliases: instOf, instanceof\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an instance of 'constructor'.\n */\nis.instanceOf = function(value, constructor) {\n    if (is.nullOrUndef(value) || is.nullOrUndef(constructor))\n        return false;\n    return (value instanceof constructor);\n};\nis.instOf = is.instanceof = is.instanceOf;\n\n/**\n * Test if 'value' is an instance type objType.\n * Aliases: objInstOf, objectinstanceof, instOf, instanceOf\n * @param {object} objInst an object to testfor type.\n * @param {object} objType an object type to compare.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\nis.objectInstanceOf = function(objInst, objType) {\n    try {\n        return '[object Object]' === toString.call(objInst) && (objInst instanceof objType);\n    } catch(err) {\n        return false;\n    }\n};\nis.instOf = is.instanceOf = is.objInstOf = is.objectInstanceOf;\n\n/**\n * Test if 'value' is a type of 'type'.\n * Alias: a\n * @param value value to test.\n * @param {String} type The name of the type.\n * @return {Boolean} true if 'value' is an arguments object, false otherwise.\n */\nis.type = function(value, type) {\n    return typeof value === type;\n};\nis.a = is.type;\n\n////////////////////////////////////////////////////////////////////////////////\n// Object State\n\n/**\n * Test if 'value' is empty. To be empty means to be an array, object or string with nothing contained.\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is empty, false otherwise.\n */\nis.empty = function(value) {\n    var type = toString.call(value);\n\n    if ('[object Array]' === type || '[object Arguments]' === type) {\n        return value.length === 0;\n    }\n\n    if ('[object Object]' === type) {\n        for (var key in value) if (owns.call(value, key)) return false;\n        return true;\n    }\n\n    if ('[object String]' === type) {\n        return value === '';\n    }\n\n    return false;\n};\n\n/**\n * Test if 'value' is an arguments object that is empty.\n * Alias: args\n * @param {Any} value value to test\n * @return {Boolean} true if 'value' is an arguments object with no args, false otherwise\n */\nis.emptyArguments = function(value) {\n    return '[object Arguments]' === toString.call(value) && value.length === 0;\n};\nis.noArgs = is.emptyArgs = is.emptyArguments;\n\n/**\n * Test if 'value' is an array containing no entries.\n * Aliases: emptyArry, emptyAry\n * @param {Any} value The value to test.\n * @return {Boolean} true if 'value' is an array with no elemnets.\n */\nis.emptyArray = function(value) {\n    return '[object Array]' === toString.call(value) && value.length === 0;\n};\nis.emptyArry = is.emptyAry = is.emptyArray;\n\n/**\n * Test if 'value' is an empty array(like) object.\n * Aliases: arguents.empty, args.empty, ary.empty, arry.empty\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is an empty array(like), false otherwise.\n */\nis.emptyArrayLike = function(value) {\n    return value.length === 0;\n};\nis.emptyArrLike = is.emptyArrayLike;\n\n/**\n * Test if 'value' is an empty string.\n * Alias: emptyStr\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is am empty string, false otherwise.\n */\nis.emptyString = function(value) {\n    return is.string(value) && value.length === 0;\n};\nis.emptyStr = is.emptyString;\n\n/**\n * Test if 'value' is an array containing at least 1 entry.\n * Aliases: nonEmptyArry, nonEmptyAry\n * @param {Any} value The value to test.\n * @return {Boolean} true if 'value' is an array with at least 1 value, false otherwise.\n */\nis.nonEmptyArray = function(value) {\n    return '[object Array]' === toString.call(value) && value.length > 0;\n};\nis.nonEmptyArr = is.nonEmptyArry = is.nonEmptyAry = is.nonEmptyArray;\n\n/**\n * Test if 'value' is an object with properties. Note: Arrays are objects.\n * Alias: nonEmptyObj\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\nis.nonEmptyObject = function(value) {\n    return '[object Object]' === toString.call(value) && Object.keys(value).length > 0;\n};\nis.nonEmptyObj = is.nonEmptyObject;\n\n/**\n * Test if 'value' is an object with no properties. Note: Arrays are objects.\n * Alias: nonEmptyObj\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an object, false otherwise.\n */\nis.emptyObject = function(value) {\n    return '[object Object]' === toString.call(value) && Object.keys(value).length === 0;\n};\nis.emptyObj = is.emptyObject;\n\n/**\n * Test if 'value' is a non-empty string.\n * Alias: nonEmptyStr\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a non-empty string, false otherwise.\n */\nis.nonEmptyString = function(value) {\n    return is.string(value) && value.length > 0;\n};\nis.nonEmptyStr = is.nonEmptyString;\n\n////////////////////////////////////////////////////////////////////////////////\n// Numeric Types within Number\n\n/**\n * Test if 'value' is an even number.\n * @param {Number} value to test.\n * @return {Boolean} true if 'value' is an even number, false otherwise.\n */\nis.even = function(value) {\n    return '[object Number]' === toString.call(value) && value % 2 === 0;\n};\n\n/**\n * Test if 'value' is a decimal number.\n * Aliases: decimalNumber, decNum\n * @param {Any} value value to test.\n * @return {Boolean} true if 'value' is a decimal number, false otherwise.\n */\nis.decimal = function(value) {\n    return '[object Number]' === toString.call(value) && value % 1 !== 0;\n};\nis.dec = is.decNum = is.decimal;\n\n/**\n * Test if 'value' is an integer.\n * Alias: integer\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is an integer, false otherwise.\n */\nis.integer = function(value) {\n    return '[object Number]' === toString.call(value) && value % 1 === 0;\n};\nis.int = is.integer;\n\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */\nis.notANumber = function(value) {\n    return !is.num(value) || value !== value;\n};\nis.nan = is.notANum = is.notANumber;\n\n/**\n * Test if 'value' is an odd number.\n * @param {Number} value to test.\n * @return {Boolean} true if 'value' is an odd number, false otherwise.\n */\nis.odd = function(value) {\n    return !is.decimal(value) && '[object Number]' === toString.call(value) && value % 2 !== 0;\n};\nis.oddNumber = is.oddNum = is.odd;\n\n////////////////////////////////////////////////////////////////////////////////\n// Numeric Type & State\n\n/**\n * Test if 'value' is a positive number.\n * Alias: positiveNum, posNum\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a number, false otherwise.\n */\nis.positiveNumber = function(value) {\n    return '[object Number]' === toString.call(value) && value > 0;\n};\nis.pos = is.positive = is.posNum = is.positiveNum = is.positiveNumber;\n\n/**\n * Test if 'value' is a negative number.\n * Aliases: negNum, negativeNum\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a number, false otherwise.\n */\nis.negativeNumber = function(value) {\n    return '[object Number]' === toString.call(value) && value < 0;\n};\nis.neg = is.negNum = is.negativeNum = is.negativeNumber;\n\n/**\n * Test if 'value' is a negative integer.\n * Aliases: negInt, negativeInteger\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a negative integer, false otherwise.\n */\nis.negativeInteger = function(value) {\n    return '[object Number]' === toString.call(value) && value % 1 === 0 && value < 0;\n};\nis.negativeInt = is.negInt = is.negativeInteger;\n\n/**\n * Test if 'value' is a positive integer.\n * Alias: posInt\n * @param {Any} value to test.\n * @return {Boolean} true if 'value' is a positive integer, false otherwise.\n */\nis.positiveInteger = function(value) {\n    return '[object Number]' === toString.call(value) && value % 1 === 0 && value > 0;\n};\nis.posInt = is.positiveInt = is.positiveInteger;\n\n////////////////////////////////////////////////////////////////////////////////\n// Numeric Relationships\n\n/**\n * Test if 'value' is divisible by 'n'.\n * Alias: divisBy\n * @param {Number} value value to test.\n * @param {Number} n dividend.\n * @return {Boolean} true if 'value' is divisible by 'n', false otherwise.\n */\nis.divisibleBy = function(value, n) {\n    if (value === 0)\n        return false;\n    return '[object Number]' === toString.call(value) &&\n        n !== 0 &&\n        value % n === 0;\n};\nis.divBy = is.divisBy = is.divisibleBy;\n\n/**\n * Test if 'value' is greater than or equal to 'other'.\n * Aliases: greaterOrEq, greaterOrEqual\n * @param {Number} value value to test.\n * @param {Number} other value to compare with.\n * @return {Boolean} true, if value is greater than or equal to other, false otherwise.\n */\nis.greaterOrEqualTo = function(value, other) {\n    return value >= other;\n};\nis.greaterOrEqual = is.ge = is.greaterOrEqualTo;\n\n/**\n * Test if 'value' is greater than 'other'.\n * Aliases: greaterThan\n * @param {Number} value value to test.\n * @param {Number} other value to compare with.\n * @return {Boolean} true, if value is greater than other, false otherwise.\n */\nis.greaterThan = function(value, other) {\n    return value > other;\n};\nis.gt = is.greaterThan;\n\n/**\n * Test if 'value' is less than or equal to 'other'.\n * Alias: lessThanOrEq, lessThanOrEqual\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} true, if 'value' is less than or equal to 'other', false otherwise.\n */\nis.lessThanOrEqualTo = function(value, other) {\n    return value <= other;\n};\nis.lessThanOrEq = is.lessThanOrEqual = is.le = is.lessThanOrEqualTo;\n\n/**\n * Test if 'value' is less than 'other'.\n * Alias: lessThan\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} true, if 'value' is less than 'other', false otherwise.\n */\nis.lessThan = function(value, other) {\n    return value < other;\n};\nis.lt = is.lessThan;\n\n/**\n * Test if 'value' is greater than 'others' values.\n * Alias: max\n * @param {Number} value value to test.\n * @param {Array} others values to compare with.\n * @return {Boolean} true if 'value' is greater than 'others' values.\n */\nis.maximum = function(value, others) {\n    if (!is.arrayLike(others) || !is.number(value))\n        return false;\n\n    var len = others.length;\n    while (--len > -1) {\n        if (value < others[len]) {\n            return false;\n        }\n    }\n\n    return true;\n};\nis.max = is.maximum;\n\n/**\n * Test if 'value' is less than 'others' values.\n * Alias: min\n * @param {Number} value value to test.\n * @param {Array} others values to compare with.\n * @return {Boolean} true if 'value' is less than 'others' values.\n */\nis.minimum = function(value, others) {\n    if (!is.arrayLike(others) || !is.number(value))\n        return false;\n\n    var len = others.length;\n    while (--len > -1) {\n        if (value > others[len]) {\n            return false;\n        }\n    }\n\n    return true;\n};\nis.min = is.minimum;\n\n/**\n * Test if 'value' is within 'start' and 'finish'.\n * Alias: withIn\n * @param {Number} value value to test.\n * @param {Number} start lower bound.\n * @param {Number} finish upper bound.\n * @return {Boolean} true if 'value' is is within 'start' and 'finish', false otherwise.\n */\nis.within = function(value, start, finish) {\n    return value >= start && value <= finish;\n};\nis.withIn = is.within;\n\n/**\n * Test if 'value' is within 'precision' decimal places from 'comparitor'.\n * Alias: closish, near.\n * @param {Number} value value to test\n * @param {Number} comparitor value to test 'value' against\n * @param {Number} precision number of decimals to compare floating points, defaults to 2\n * @return {Boolean} true if 'value' is within 'precision' decimal places from 'comparitor', false otherwise.\n */\nis.prettyClose = function(value, comparitor, precision) {\n  if (!is.number(value) || !is.number(comparitor)) return false;\n  if (is.defined(precision) && !is.posInt(precision)) return false;\n  if (is.undefined(precision)) precision = 2;\n\n  return value.toFixed(precision) === comparitor.toFixed(precision);\n};\nis.closish = is.near = is.prettyClose;\n////////////////////////////////////////////////////////////////////////////////\n// Networking\n\n/**\n * Test if a value is a valid DNS address. eg www.stdarg.com is true while\n * 127.0.0.1 is false.\n * @param {Any} value to test if a DNS address.\n * @return {Boolean} true if a DNS address, false otherwise.\n * DNS Address is made up of labels separated by '.'\n * Each label must be between 1 and 63 characters long\n * The entire hostname (including the delimiting dots) has a maximum of 255 characters.\n * Hostname may not contain other characters, such as the underscore character (_)\n * other DNS names may contain the underscore.\n */\nis.dnsAddress = function(value) {\n    if (!is.nonEmptyStr(value))  return false;\n    if (value.length > 255)  return false;\n    if (numbersLabel.test(value))  return false;\n    if (!dnsLabel.test(value))  return false;\n    return true;\n    //var names = value.split('.');\n    //if (!is.array(names) || !names.length)  return false;\n    //if (names[0].indexOf('_') > -1)  return false;\n    //for (var i=0; i<names.length; i++) {\n        //if (!dnsLabel.test(names[i]))  return false;\n    //}\n    //return true;\n};\nis.dnsAddr = is.dns = is.dnsAddress;\nvar dnsLabel = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])(\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]))*$/;\nvar numbersLabel = /^([0-9]|[0-9][0-9\\-]{0,61}[0-9])(\\.([0-9]|[0-9][0-9\\-]{0,61}[0-9]))*$/;\n\n/**\n * Test if value is a valid email address.\n * @param {Any} value to test if an email address.\n * @return {Boolean} true if an email address, false otherwise.\n */\nis.emailAddress = function(value) {\n    if (!is.nonEmptyStr(value))\n        return false;\n    return emailRegexp.test(value);\n};\nis.email = is.emailAddr = is.emailAddress;\nvar emailRegexp = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*$/;\n\n/**\n * Test if a value is either an IPv4 numeric IP address.\n * The rules are:\n * must be a string\n * length must be 15 characters or less\n * There must be four octets separated by a '.'\n * No octet can be less than 0 or greater than 255.\n * @param {Any} value to test if an ip address.\n * @return {Boolean} true if an ip address, false otherwise.\n */\nis.ipv4Address = function(value) {\n    if (!is.nonEmptyStr(value))  return false;\n    if (value.length > 15)  return false;\n    var octets = value.split('.');\n    if (!is.array(octets) || octets.length !== 4)  return false;\n    for (var i=0; i<octets.length; i++) {\n        var val = parseInt(octets[i], 10);\n        if (isNaN(val))  return false;\n        if (val < 0 || val > 255)  return false;\n    }\n    return true;\n};\nis.ipv4 = is.ipv4Addr = is.ipv4Address;\n\n/**\n * Test if a value is either an IPv6 numeric IP address.\n * @param {Any} value to test if an ip address.\n * @return {Boolean} true if an ip address, false otherwise.\n */\nis.ipv6Address = function(value) {\n    if (!is.nonEmptyStr(value))  return false;\n    return ipRegEx.v6({extract: true}).test(value);\n};\nis.ipv6 = is.ipv6Addr = is.ipv6Address;\n\n/**\n * Test if a value is either an IPv4 or IPv6 numeric IP address.\n * @param {Any} value to test if an ip address.\n * @return {Boolean} true if an ip address, false otherwise.\n */\nis.ipAddress = function(value) {\n    if (!is.nonEmptyStr(value)) return false;\n    return is.ipv4Address(value) || is.ipv6Address(value)\n};\nis.ip = is.ipAddr = is.ipAddress;\n\n/**\n * Test is a value is a valid ipv4, ipv6 or DNS name.\n * Aliases: host, hostAddr, hostAddress.\n * @param {Any} value to test if a host address.\n * @return {Boolean} true if a host address, false otherwise.\n */\nis.hostAddress = function(value) {\n    if (!is.nonEmptyStr(value)) return false;\n    return is.dns(value) || is.ipv4(value) || is.ipv6(value);\n};\nis.host = is.hostIp = is.hostAddr = is.hostAddress;\n\n/**\n * Test if a number is a valid TCP port\n * @param {Any} value to test if its a valid TCP port\n */\nis.port = function(value) {\n    if (!is.num(value) || is.negativeInt(value) || value > 65535)\n        return false;\n    return true;\n};\n\n/**\n * Test if a number is a valid TCP port in the range 0-1023.\n * Alias: is.sysPort.\n * @param {Any} value to test if its a valid TCP port\n */\nis.systemPort = function(value) {\n    if (is.port(value) && value < 1024)\n        return true;\n    return false;\n};\nis.sysPort = is.systemPort;\n\n/**\n * Test if a number is a valid TCP port in the range 1024-65535.\n * @param {Any} value to test if its a valid TCP port\n */\nis.userPort = function(value) {\n    if (is.port(value) && value > 1023)\n        return true;\n    return false;\n};\n\n/*\nfunction sumDigits(num) {\n    var str = num.toString();\n    var sum = 0;\n    for (var i = 0; i < str.length; i++)\n        sum += (str[i]-0);\n    return sum;\n}\n*/\n\n/**\n * Test if a string is a credit card.\n * From http://en.wikipedia.org/wiki/Luhn_algorithm\n * @param {String} value to test if a credit card.\n * @return true if the string is the correct format, false otherwise\n */\nis.creditCardNumber = function(str) {\n    if (!is.str(str))\n        return false;\n\n    var ary = str.split('');\n    var i, cnt;\n    // From the rightmost digit, which is the check digit, moving left, double\n    // the value of every second digit;\n    for (i=ary.length-1, cnt=1; i>-1; i--, cnt++) {\n        if (cnt%2 === 0)\n            ary[i] *= 2;\n    }\n\n    str = ary.join('');\n    var sum = 0;\n    // if the product of the previous doubling operation is greater than 9\n    // (e.g., 7 * 2 = 14), then sum the digits of the products (e.g., 10: 1 + 0\n    // = 1, 14: 1 + 4 = 5).  We do the this by joining the array of numbers and\n    // add adding the int value of all the characters in the string.\n    for (i=0; i<str.length; i++)\n        sum += Math.floor(str[i]);\n\n    // If the total (sum) modulo 10 is equal to 0 (if the total ends in zero)\n    // then the number is valid according to the Luhn formula; else it is not\n    // valid.\n    return sum % 10 === 0;\n};\nis.creditCard = is.creditCardNum = is.creditCardNumber;\n\n\n////////////////////////////////////////////////////////////////////////////////\n// The following credit card info is from:\n// http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\n\n/**\n * Test if card number is an American Express card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.americanExpressCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 15)\n        return false;\n\n    var prefix = Math.floor(str.slice(0,2));\n    if (prefix !== 34 && prefix !== 37)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.amexCard = is.amexCardNum = is.americanExpressCardNumber;\n\n/**\n * Test if card number is a China UnionPay card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.chinaUnionPayCardNumber = function(str) {\n    if (!is.str(str) || (str.length < 16 && str.length > 19))\n        return false;\n\n    var prefix = Math.floor(str.slice(0,2));\n    if (prefix !== 62 && prefix !== 88)\n        return false;\n\n    // no validation for this card\n    return true;\n};\nis.chinaUnion = is.chinaUnionPayCard = is.chinaUnionPayCardNumber;\n\n/**\n * Test if card number is a Diner's Club Carte Blance card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.dinersClubCarteBlancheCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 14)\n        return false;\n\n    var prefix = Math.floor(str.slice(0,3));\n    if (prefix < 300 || prefix > 305)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.dinersClubCB = is.dinersClubCarteBlancheCard =\n    is.dinersClubCarteBlancheCardNumber;\n\n/**\n * Test if card number is a Diner's Club International card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.dinersClubInternationalCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 14)\n        return false;\n    var prefix = Math.floor(str.slice(0,3));\n    var prefix2 = Math.floor(str.slice(0,2));\n\n    // 300-305, 309, 36, 38-39\n    if ((prefix < 300 || prefix > 305) && prefix !== 309 && prefix2 !== 36 &&\n        (prefix2 < 38 || prefix2 > 39)) {\n        return false;\n    }\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.dinersClubInt = is.dinersClubInternationalCard =\n    is.dinersClubInternationalCardNumber;\n\n/**\n * Test if card number is a Diner's Club USA & CA card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.dinersClubUSACanadaCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 16)\n        return false;\n    var prefix = Math.floor(str.slice(0,2));\n\n    if (prefix !== 54 && prefix !== 55)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.dinersClub = is.dinersClubUSACanCard = is.dinersClubUSACanadaCardNumber;\n\n/**\n * Test if card number is a Diner's Club USA/CA card.\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.discoverCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 16)\n        return false;\n\n    var prefix = Math.floor(str.slice(0,6));\n    var prefix2 = Math.floor(str.slice(0,3));\n\n    if (str.slice(0,4) !== '6011' && (prefix < 622126 || prefix > 622925) &&\n        (prefix2 < 644 || prefix2 > 649) && str.slice(0,2) !== '65') {\n        return false;\n    }\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.discover = is.discoverCard = is.discoverCardNumber;\n\n/**\n * Test if card number is an InstaPayment card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.instaPaymentCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 16)\n        return false;\n\n    var prefix = Math.floor(str.slice(0,3));\n    if (prefix < 637 || prefix > 639)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.instaPayment = is.instaPaymentCardNumber;\n\n/**\n * Test if card number is a JCB card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.jcbCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 16)\n        return false;\n\n    var prefix = Math.floor(str.slice(0,4));\n    if (prefix < 3528 || prefix > 3589)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.jcb = is.jcbCard = is.jcbCardNumber;\n\n/**\n * Test if card number is a Laser card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.laserCardNumber = function(str) {\n    if (!is.str(str) || (str.length < 16 && str.length > 19))\n        return false;\n\n    var prefix = Math.floor(str.slice(0,4));\n    var valid = [ 6304, 6706, 6771, 6709 ];\n    if (valid.indexOf(prefix) === -1)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.laser = is.laserCard = is.laserCardNumber;\n\n/**\n * Test if card number is a Maestro card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.maestroCardNumber = function(str) {\n    if (!is.str(str) || str.length < 12 || str.length > 19)\n        return false;\n\n    var prefix = str.slice(0,4);\n    var valid = [ '5018', '5020', '5038', '5612', '5893', '6304', '6759',\n        '6761', '6762', '6763', '0604', '6390' ];\n\n    if (valid.indexOf(prefix) === -1)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.maestro = is.maestroCard = is.maestroCardNumber;\n\n/**\n * Test if card number is a Dankort card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.dankortCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 16)\n        return false;\n\n    if (str.slice(0,4) !== '5019')\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.dankort = is.dankortCard = is.dankortCardNumber;\n\n/**\n * Test if card number is a MasterCard card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.masterCardCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 16)\n        return false;\n\n    var prefix = Math.floor(str.slice(0,2));\n    if (prefix < 50 || prefix > 55)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\nis.masterCard = is.masterCardCard = is.masterCardCardNumber;\n\n/**\n * Test if card number is a Visa card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.visaCardNumber = function(str) {\n    if (!is.str(str) || (str.length !== 13 && str.length !== 16))\n        return false;\n\n    if ('4' !== str.slice(0,1))\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return true;\n};\n\nis.visa = is.visaCard = is.visaCardNumber;\n\n/**\n * Test if card number is a Visa card number\n * @param {String} the credit card number string to test.\n * @return true if the string is the correct format, false otherwise\n */\nis.visaElectronCardNumber = function(str) {\n    if (!is.str(str) || str.length !== 16)\n        return false;\n\n    var prefix = Math.floor(str.slice(0,4));\n    var valid = [ 4026, 4405, 4508, 4844, 4913, 4917 ];\n    if ('417500' !== str.slice(0,6) && valid.indexOf(prefix) === -1)\n        return false;\n\n    if (!is.creditCardNumber(str))\n        return false;\n\n    return false;\n};\n\nis.visaElectron = is.visaElectronCard = is.visaElectronCardNumber;\n\n/**\n * Test if the input is a valid MongoDB id.\n * @param {String|Object} Either a mongodb object id or a string representation.\n * @return true if the string is the correct format, false otherwise\n * Thanks to Jason Denizac (https://github.com/jden) for pointing this out.\n * https://github.com/jden/objectid/blob/master/index.js#L7-L10\n */\nvar objIdPattern = /^[0-9a-fA-F]{24}$/;\nis.mongoId = is.objectId = is.objId = function(id) {\n  return (Boolean(id) && !Array.isArray(id) && objIdPattern.test(String(id)));\n};\n\n/**\n * Test is the first argument is structly equal to any of the subsequent args.\n * @param Value to test against subsequent arguments.\n * @return true if the first value matches any of subsequent values.\n */\nis.matching = is.match = is.inArgs = function(val) {\n    if (arguments.length < 2)\n        return false;\n    var result = false;\n    for (var i=1; i<arguments.length; i++) {\n        var eq = is.equal(val, arguments[i]);\n        result = result || eq;\n    }\n    return result;\n};\n\n\n\n// US Address components\n/**********************************\n***Definitely a work in progress***\n**********************************/\n/**\n * Test if a string contains a US street address\n * @param {String} the string to search\n * @return true if an address is present, false otherwise\n */\nis.streetAddress = function(str) {\n  if (!is.str(str))\n      return false;\n\n  var regex = /\\b\\d+[\\s](?:[A-Za-z0-9.-]+[\\s]+)+\\b(ALLEY|ALY|AVENUE|AVE|BEND|BND|BLUFFS?|BLFS?|BOULEVARD|BLVD|BRANCH|BR|CENTERS?|CTRS?|CIRCLES?|CIRS?|CLIFFS?|CLFS?|COURTS?|CTS?|COVES?|CVS?|CREEK|CRK|CRESCENT|CRES|CREST|CRST|CROSSING|XING|DRIVES?|DRS?|EXPRESSWAY|EXPY|FREEWAY|FWY|HEIGHTS|HTS|HIGHWAY|HWY|HILLS?|HLS?|LANE|LN|LOOP|MANORS?|MNRS?|MOTORWAY|MTWY|MOUNT|MT|PARKS?|PARKWAYS?|PKWY|PASS|PLACE|PL|PLAZA|PLZ|POINTS?|PTS?|RIDGES?|RDGS?|ROADS?|RDS?|ROUTE|RTE?|SHOALS?|SHLS?|SHORES?|SHRS?|SPRINGS?|SPGS?|SPURS?|STREETS?|STS?|SUMMIT|SMT|TERRACE|TER|THROUGHWAY|TRWY|TRAFFICWAY|TRFY|TRAIL|TRL|TURNPIKE|TPKE|VALLEYS?|VLYS?|WAYS?)+(?:[\\.\\-\\s\\,]?)*((APARTMENT|APT|APPT|#|NUMBER|NUM|FLOOR|FL|\\s)?(\\d)*)\\b/ig;\n\n  return regex.test(str);\n};\nis.street = is.address = is.streetAddress;\n\n/**\n * Test if a string resembles a US Zip code,\n * no regular expression will be perfect for this,\n * as there are many numbers that aren't valid zip codes\n * @param {String || Number} the string or number literal to test\n * @return true if zipcode like, false otherwise\n */\nis.zipCode = function(str) {\n  if (is.undefined(str) || !(is.string(str) || is.number(str)))\n    return false;\n\n  var zip = /^\\d{5}(?:-\\d{4})?$/;\n  return zip.test(str);\n};\nis.zip = is.zipCode;\n\n/**\n * Test if a string contains a US phone number\n * @param {String} the string to search\n * @return true if str contains a phone number, false otherwise.\n */\n is.phoneNumber = function(str){\n   if (!is.string(str))\n    return false;\n   var nums = /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:(\\(?)(?:(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]‌​)\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\)?)\\s*(?:[.-]\\s*)?)?([2-9]1[02-‌​9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})/g;\n   return nums.test(str);\n };\n is.phone = is.phoneNumber;\n\n/**\n * Test is a string is a valid URL\n * @param {string} val - the possible url to check\n * @return true if str contains a phone number, false otherwise.\n */\nvar isUrl = require('is-url');\nis.url = function(val) {\n    return isUrl(val);\n};\nis.uri = is.url;\n\nis.enumerator = function(val, ary){\n  var value = false;\n\n  if (!is.defined(val) || !is.defined(ary) || !is.arrayLike(ary))\n    return value;\n\n  for (var i = 0, len = ary.length; i < len; i++) {\n    if (is.equal(val, ary[i])) {\n      value = true;\n      break;\n    }\n  }\n  return value;\n};\nis.enum = is.inArray = is.enumerator;\n"]},"metadata":{},"sourceType":"script"}