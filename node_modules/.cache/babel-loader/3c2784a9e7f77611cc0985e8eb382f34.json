{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setInvokerUpdate = exports.setInvokerCreate = exports.getIamPolicy = exports.setIamPolicy = exports.replaceService = exports.getService = exports.LOCATION_LABEL = void 0;\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst error_1 = require(\"../error\");\n\nconst api_1 = require(\"../api\");\n\nconst proto = require(\"./proto\");\n\nconst API_VERSION = \"v1\";\nconst client = new apiv2_1.Client({\n  urlPrefix: api_1.runOrigin,\n  auth: true,\n  apiVersion: API_VERSION\n});\nexports.LOCATION_LABEL = \"cloud.googleapis.com/location\";\n\nasync function getService(name) {\n  try {\n    const response = await client.get(name);\n    return response.body;\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to fetch Run service ${name}`, {\n      original: err\n    });\n  }\n}\n\nexports.getService = getService;\n\nasync function replaceService(name, service) {\n  try {\n    const response = await client.put(name, service);\n    return response.body;\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to update Run service ${name}`, {\n      original: err\n    });\n  }\n}\n\nexports.replaceService = replaceService;\n\nasync function setIamPolicy(name, policy, httpClient = client) {\n  try {\n    await httpClient.post(`${name}:setIamPolicy`, {\n      policy,\n      updateMask: proto.fieldMasks(policy).join(\",\")\n    });\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to set the IAM Policy on the Service ${name}`, {\n      original: err\n    });\n  }\n}\n\nexports.setIamPolicy = setIamPolicy;\n\nasync function getIamPolicy(serviceName, httpClient = client) {\n  try {\n    const response = await httpClient.get(`${serviceName}:getIamPolicy`);\n    return response.body;\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to get the IAM Policy on the Service ${serviceName}`, {\n      original: err\n    });\n  }\n}\n\nexports.getIamPolicy = getIamPolicy;\n\nasync function setInvokerCreate(projectId, serviceName, invoker, httpClient = client) {\n  if (invoker.length == 0) {\n    throw new error_1.FirebaseError(\"Invoker cannot be an empty array\");\n  }\n\n  const invokerMembers = proto.getInvokerMembers(invoker, projectId);\n  const invokerRole = \"roles/run.invoker\";\n  const bindings = [{\n    role: invokerRole,\n    members: invokerMembers\n  }];\n  const policy = {\n    bindings: bindings,\n    etag: \"\",\n    version: 3\n  };\n  await setIamPolicy(serviceName, policy, httpClient);\n}\n\nexports.setInvokerCreate = setInvokerCreate;\n\nasync function setInvokerUpdate(projectId, serviceName, invoker, httpClient = client) {\n  var _a;\n\n  if (invoker.length == 0) {\n    throw new error_1.FirebaseError(\"Invoker cannot be an empty array\");\n  }\n\n  const invokerMembers = proto.getInvokerMembers(invoker, projectId);\n  const invokerRole = \"roles/run.invoker\";\n  const currentPolicy = await getIamPolicy(serviceName, httpClient);\n  const currentInvokerBinding = (_a = currentPolicy.bindings) === null || _a === void 0 ? void 0 : _a.find(binding => binding.role === invokerRole);\n\n  if (currentInvokerBinding && JSON.stringify(currentInvokerBinding.members.sort()) === JSON.stringify(invokerMembers.sort())) {\n    return;\n  }\n\n  const bindings = (currentPolicy.bindings || []).filter(binding => binding.role !== invokerRole);\n  bindings.push({\n    role: invokerRole,\n    members: invokerMembers\n  });\n  const policy = {\n    bindings: bindings,\n    etag: currentPolicy.etag || \"\",\n    version: 3\n  };\n  await setIamPolicy(serviceName, policy, httpClient);\n}\n\nexports.setInvokerUpdate = setInvokerUpdate;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/gcp/run.js"],"names":["Object","defineProperty","exports","value","setInvokerUpdate","setInvokerCreate","getIamPolicy","setIamPolicy","replaceService","getService","LOCATION_LABEL","apiv2_1","require","error_1","api_1","proto","API_VERSION","client","Client","urlPrefix","runOrigin","auth","apiVersion","name","response","get","body","err","FirebaseError","original","service","put","policy","httpClient","post","updateMask","fieldMasks","join","serviceName","projectId","invoker","length","invokerMembers","getInvokerMembers","invokerRole","bindings","role","members","etag","version","_a","currentPolicy","currentInvokerBinding","find","binding","JSON","stringify","sort","filter","push"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setInvokerUpdate = exports.setInvokerCreate = exports.getIamPolicy = exports.setIamPolicy = exports.replaceService = exports.getService = exports.LOCATION_LABEL = void 0;\nconst apiv2_1 = require(\"../apiv2\");\nconst error_1 = require(\"../error\");\nconst api_1 = require(\"../api\");\nconst proto = require(\"./proto\");\nconst API_VERSION = \"v1\";\nconst client = new apiv2_1.Client({\n    urlPrefix: api_1.runOrigin,\n    auth: true,\n    apiVersion: API_VERSION,\n});\nexports.LOCATION_LABEL = \"cloud.googleapis.com/location\";\nasync function getService(name) {\n    try {\n        const response = await client.get(name);\n        return response.body;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to fetch Run service ${name}`, {\n            original: err,\n        });\n    }\n}\nexports.getService = getService;\nasync function replaceService(name, service) {\n    try {\n        const response = await client.put(name, service);\n        return response.body;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to update Run service ${name}`, {\n            original: err,\n        });\n    }\n}\nexports.replaceService = replaceService;\nasync function setIamPolicy(name, policy, httpClient = client) {\n    try {\n        await httpClient.post(`${name}:setIamPolicy`, {\n            policy,\n            updateMask: proto.fieldMasks(policy).join(\",\"),\n        });\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to set the IAM Policy on the Service ${name}`, {\n            original: err,\n        });\n    }\n}\nexports.setIamPolicy = setIamPolicy;\nasync function getIamPolicy(serviceName, httpClient = client) {\n    try {\n        const response = await httpClient.get(`${serviceName}:getIamPolicy`);\n        return response.body;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to get the IAM Policy on the Service ${serviceName}`, {\n            original: err,\n        });\n    }\n}\nexports.getIamPolicy = getIamPolicy;\nasync function setInvokerCreate(projectId, serviceName, invoker, httpClient = client) {\n    if (invoker.length == 0) {\n        throw new error_1.FirebaseError(\"Invoker cannot be an empty array\");\n    }\n    const invokerMembers = proto.getInvokerMembers(invoker, projectId);\n    const invokerRole = \"roles/run.invoker\";\n    const bindings = [{ role: invokerRole, members: invokerMembers }];\n    const policy = {\n        bindings: bindings,\n        etag: \"\",\n        version: 3,\n    };\n    await setIamPolicy(serviceName, policy, httpClient);\n}\nexports.setInvokerCreate = setInvokerCreate;\nasync function setInvokerUpdate(projectId, serviceName, invoker, httpClient = client) {\n    var _a;\n    if (invoker.length == 0) {\n        throw new error_1.FirebaseError(\"Invoker cannot be an empty array\");\n    }\n    const invokerMembers = proto.getInvokerMembers(invoker, projectId);\n    const invokerRole = \"roles/run.invoker\";\n    const currentPolicy = await getIamPolicy(serviceName, httpClient);\n    const currentInvokerBinding = (_a = currentPolicy.bindings) === null || _a === void 0 ? void 0 : _a.find((binding) => binding.role === invokerRole);\n    if (currentInvokerBinding &&\n        JSON.stringify(currentInvokerBinding.members.sort()) === JSON.stringify(invokerMembers.sort())) {\n        return;\n    }\n    const bindings = (currentPolicy.bindings || []).filter((binding) => binding.role !== invokerRole);\n    bindings.push({\n        role: invokerRole,\n        members: invokerMembers,\n    });\n    const policy = {\n        bindings: bindings,\n        etag: currentPolicy.etag || \"\",\n        version: 3,\n    };\n    await setIamPolicy(serviceName, policy, httpClient);\n}\nexports.setInvokerUpdate = setInvokerUpdate;\n"]},"metadata":{},"sourceType":"script"}