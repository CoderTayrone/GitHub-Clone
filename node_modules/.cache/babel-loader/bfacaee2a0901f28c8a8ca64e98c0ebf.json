{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTDBListRemote = void 0;\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst url_1 = require(\"url\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nclass RTDBListRemote {\n  constructor(instance, host) {\n    this.instance = instance;\n    this.host = host;\n    const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, \"/\"));\n    this.apiClient = new apiv2_1.Client({\n      urlPrefix: url.origin,\n      auth: true\n    });\n  }\n\n  async listPath(path, numSubPath, startAfter, timeout) {\n    const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, path + \".json\"));\n    const params = {\n      shallow: true,\n      limitToFirst: numSubPath\n    };\n\n    if (startAfter) {\n      params.startAfter = startAfter;\n    }\n\n    if (timeout) {\n      params.timeout = `${timeout}ms`;\n    }\n\n    const t0 = Date.now();\n    const res = await this.apiClient.get(url.pathname, {\n      queryParams: params\n    });\n    const paths = res.body ? Object.keys(res.body) : [];\n    const dt = Date.now() - t0;\n    logger_1.logger.debug(`[database] sucessfully fetched ${paths.length} path at ${path} ${dt}`);\n    return paths;\n  }\n\n}\n\nexports.RTDBListRemote = RTDBListRemote;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/database/listRemote.js"],"names":["Object","defineProperty","exports","value","RTDBListRemote","apiv2_1","require","url_1","logger_1","utils","constructor","instance","host","url","URL","getDatabaseUrl","apiClient","Client","urlPrefix","origin","auth","listPath","path","numSubPath","startAfter","timeout","params","shallow","limitToFirst","t0","Date","now","res","get","pathname","queryParams","paths","body","keys","dt","logger","debug","length"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,KAAD,CAArB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMF,cAAN,CAAqB;AACjBM,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACxB,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,UAAMC,GAAG,GAAG,IAAIN,KAAK,CAACO,GAAV,CAAcL,KAAK,CAACM,cAAN,CAAqB,KAAKH,IAA1B,EAAgC,KAAKD,QAArC,EAA+C,GAA/C,CAAd,CAAZ;AACA,SAAKK,SAAL,GAAiB,IAAIX,OAAO,CAACY,MAAZ,CAAmB;AAAEC,MAAAA,SAAS,EAAEL,GAAG,CAACM,MAAjB;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAAnB,CAAjB;AACH;;AACa,QAARC,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmBC,UAAnB,EAA+BC,OAA/B,EAAwC;AAClD,UAAMZ,GAAG,GAAG,IAAIN,KAAK,CAACO,GAAV,CAAcL,KAAK,CAACM,cAAN,CAAqB,KAAKH,IAA1B,EAAgC,KAAKD,QAArC,EAA+CW,IAAI,GAAG,OAAtD,CAAd,CAAZ;AACA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,YAAY,EAAEL;AAFH,KAAf;;AAIA,QAAIC,UAAJ,EAAgB;AACZE,MAAAA,MAAM,CAACF,UAAP,GAAoBA,UAApB;AACH;;AACD,QAAIC,OAAJ,EAAa;AACTC,MAAAA,MAAM,CAACD,OAAP,GAAkB,GAAEA,OAAQ,IAA5B;AACH;;AACD,UAAMI,EAAE,GAAGC,IAAI,CAACC,GAAL,EAAX;AACA,UAAMC,GAAG,GAAG,MAAM,KAAKhB,SAAL,CAAeiB,GAAf,CAAmBpB,GAAG,CAACqB,QAAvB,EAAiC;AAC/CC,MAAAA,WAAW,EAAET;AADkC,KAAjC,CAAlB;AAGA,UAAMU,KAAK,GAAGJ,GAAG,CAACK,IAAJ,GAAWrC,MAAM,CAACsC,IAAP,CAAYN,GAAG,CAACK,IAAhB,CAAX,GAAmC,EAAjD;AACA,UAAME,EAAE,GAAGT,IAAI,CAACC,GAAL,KAAaF,EAAxB;AACArB,IAAAA,QAAQ,CAACgC,MAAT,CAAgBC,KAAhB,CAAuB,kCAAiCL,KAAK,CAACM,MAAO,YAAWpB,IAAK,IAAGiB,EAAG,EAA3F;AACA,WAAOH,KAAP;AACH;;AA3BgB;;AA6BrBlC,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RTDBListRemote = void 0;\nconst apiv2_1 = require(\"../apiv2\");\nconst url_1 = require(\"url\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nclass RTDBListRemote {\n    constructor(instance, host) {\n        this.instance = instance;\n        this.host = host;\n        const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, \"/\"));\n        this.apiClient = new apiv2_1.Client({ urlPrefix: url.origin, auth: true });\n    }\n    async listPath(path, numSubPath, startAfter, timeout) {\n        const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, path + \".json\"));\n        const params = {\n            shallow: true,\n            limitToFirst: numSubPath,\n        };\n        if (startAfter) {\n            params.startAfter = startAfter;\n        }\n        if (timeout) {\n            params.timeout = `${timeout}ms`;\n        }\n        const t0 = Date.now();\n        const res = await this.apiClient.get(url.pathname, {\n            queryParams: params,\n        });\n        const paths = res.body ? Object.keys(res.body) : [];\n        const dt = Date.now() - t0;\n        logger_1.logger.debug(`[database] sucessfully fetched ${paths.length} path at ${path} ${dt}`);\n        return paths;\n    }\n}\nexports.RTDBListRemote = RTDBListRemote;\n"]},"metadata":{},"sourceType":"script"}