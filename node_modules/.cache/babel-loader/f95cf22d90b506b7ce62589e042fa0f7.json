{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar _ = require(\"lodash\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nconst {\n  logger\n} = require(\"../logger\");\n\nvar utils = require(\"../utils\");\n\nvar {\n  requirePermissions\n} = require(\"../requirePermissions\");\n\nvar requireConfig = require(\"../requireConfig\");\n\nvar {\n  serve\n} = require(\"../serve/index\");\n\nvar {\n  filterTargets\n} = require(\"../filterTargets\");\n\nvar {\n  needProjectNumber\n} = require(\"../projectUtils\");\n\nvar {\n  FirebaseError\n} = require(\"../error\");\n\nvar VALID_TARGETS = [\"hosting\", \"functions\"];\nvar REQUIRES_AUTH = [\"hosting\", \"functions\"];\n\nvar ALL_TARGETS = _.union(VALID_TARGETS, [\"database\", \"firestore\"]);\n\nvar filterOnly = (list, only) => {\n  if (!only) {\n    return [];\n  }\n\n  return _.intersection(list, only.split(\",\").map(opt => {\n    return opt.split(\":\")[0];\n  }));\n};\n\nmodule.exports = new Command(\"serve\").description(\"start a local server for your static assets\").option(\"-p, --port <port>\", \"the port on which to listen (default: 5000)\", 5000).option(\"-o, --host <host>\", \"the host on which to listen (default: localhost)\", \"localhost\").option(\"--only <targets>\", \"only serve specified targets (valid targets are: \" + VALID_TARGETS.join(\", \") + \")\").option(\"--except <targets>\", \"serve all except specified targets (valid targets are: \" + VALID_TARGETS.join(\", \") + \")\").before(options => {\n  if (options.only && options.only.length > 0 && filterOnly(REQUIRES_AUTH, options.only).length === 0) {\n    return Promise.resolve();\n  }\n\n  return requireConfig(options).then(() => requirePermissions(options)).then(() => needProjectNumber(options));\n}).action(options => {\n  options.targets = filterOnly(ALL_TARGETS, options.only);\n\n  if (options.targets.includes(\"database\") || options.targets.includes(\"firestore\")) {\n    throw new FirebaseError(`Please use ${clc.bold(\"firebase emulators:start\")} to start the Realtime Database or Cloud Firestore emulators. ${clc.bold(\"firebase serve\")} only supports Hosting and Cloud Functions.`);\n  }\n\n  options.targets = filterOnly(VALID_TARGETS, options.only);\n\n  if (options.targets.length > 0) {\n    return serve(options);\n  }\n\n  if (options.config) {\n    logger.info();\n    logger.info(clc.bold(clc.white(\"===\") + \" Serving from '\" + options.config.projectDir + \"'...\"));\n    logger.info();\n  } else {\n    utils.logWarning(\"No Firebase project directory detected. Serving static content from \" + clc.bold(options.cwd || process.cwd()));\n  }\n\n  options.targets = filterTargets(options, VALID_TARGETS);\n  return serve(options);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/serve.js"],"names":["clc","require","_","Command","logger","utils","requirePermissions","requireConfig","serve","filterTargets","needProjectNumber","FirebaseError","VALID_TARGETS","REQUIRES_AUTH","ALL_TARGETS","union","filterOnly","list","only","intersection","split","map","opt","module","exports","description","option","join","before","options","length","Promise","resolve","then","action","targets","includes","bold","config","info","white","projectDir","logWarning","cwd","process"],"mappings":"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","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar _ = require(\"lodash\");\nvar { Command } = require(\"../command\");\nconst { logger } = require(\"../logger\");\nvar utils = require(\"../utils\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar requireConfig = require(\"../requireConfig\");\nvar { serve } = require(\"../serve/index\");\nvar { filterTargets } = require(\"../filterTargets\");\nvar { needProjectNumber } = require(\"../projectUtils\");\nvar { FirebaseError } = require(\"../error\");\nvar VALID_TARGETS = [\"hosting\", \"functions\"];\nvar REQUIRES_AUTH = [\"hosting\", \"functions\"];\nvar ALL_TARGETS = _.union(VALID_TARGETS, [\"database\", \"firestore\"]);\nvar filterOnly = (list, only) => {\n    if (!only) {\n        return [];\n    }\n    return _.intersection(list, only.split(\",\").map((opt) => {\n        return opt.split(\":\")[0];\n    }));\n};\nmodule.exports = new Command(\"serve\")\n    .description(\"start a local server for your static assets\")\n    .option(\"-p, --port <port>\", \"the port on which to listen (default: 5000)\", 5000)\n    .option(\"-o, --host <host>\", \"the host on which to listen (default: localhost)\", \"localhost\")\n    .option(\"--only <targets>\", \"only serve specified targets (valid targets are: \" + VALID_TARGETS.join(\", \") + \")\")\n    .option(\"--except <targets>\", \"serve all except specified targets (valid targets are: \" + VALID_TARGETS.join(\", \") + \")\")\n    .before((options) => {\n    if (options.only &&\n        options.only.length > 0 &&\n        filterOnly(REQUIRES_AUTH, options.only).length === 0) {\n        return Promise.resolve();\n    }\n    return requireConfig(options)\n        .then(() => requirePermissions(options))\n        .then(() => needProjectNumber(options));\n})\n    .action((options) => {\n    options.targets = filterOnly(ALL_TARGETS, options.only);\n    if (options.targets.includes(\"database\") || options.targets.includes(\"firestore\")) {\n        throw new FirebaseError(`Please use ${clc.bold(\"firebase emulators:start\")} to start the Realtime Database or Cloud Firestore emulators. ${clc.bold(\"firebase serve\")} only supports Hosting and Cloud Functions.`);\n    }\n    options.targets = filterOnly(VALID_TARGETS, options.only);\n    if (options.targets.length > 0) {\n        return serve(options);\n    }\n    if (options.config) {\n        logger.info();\n        logger.info(clc.bold(clc.white(\"===\") + \" Serving from '\" + options.config.projectDir + \"'...\"));\n        logger.info();\n    }\n    else {\n        utils.logWarning(\"No Firebase project directory detected. Serving static content from \" +\n            clc.bold(options.cwd || process.cwd()));\n    }\n    options.targets = filterTargets(options, VALID_TARGETS);\n    return serve(options);\n});\n"]},"metadata":{},"sourceType":"script"}