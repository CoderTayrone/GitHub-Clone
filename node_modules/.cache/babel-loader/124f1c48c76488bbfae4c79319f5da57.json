{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar _ = require('lodash');\n\nvar Separator = require('./separator');\n\nvar Choice = require('./choice');\n/**\n * Choices collection\n * Collection of multiple `choice` object\n * @constructor\n * @param {Array} choices  All `choice` to keep in the collection\n */\n\n\nmodule.exports = class Choices {\n  constructor(choices, answers) {\n    this.choices = choices.map(val => {\n      if (val.type === 'separator') {\n        if (!(val instanceof Separator)) {\n          val = new Separator(val.line);\n        }\n\n        return val;\n      }\n\n      return new Choice(val, answers);\n    });\n    this.realChoices = this.choices.filter(Separator.exclude).filter(item => !item.disabled);\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.choices.length;\n      },\n\n      set(val) {\n        this.choices.length = val;\n      }\n\n    });\n    Object.defineProperty(this, 'realLength', {\n      get() {\n        return this.realChoices.length;\n      },\n\n      set() {\n        throw new Error('Cannot set `realLength` of a Choices collection');\n      }\n\n    });\n  }\n  /**\n   * Get a valid choice from the collection\n   * @param  {Number} selector  The selected choice index\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n\n  getChoice(selector) {\n    assert(_.isNumber(selector));\n    return this.realChoices[selector];\n  }\n  /**\n   * Get a raw element from the collection\n   * @param  {Number} selector  The selected index value\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n\n  get(selector) {\n    assert(_.isNumber(selector));\n    return this.choices[selector];\n  }\n  /**\n   * Match the valid choices against a where clause\n   * @param  {Object} whereClause Lodash `where` clause\n   * @return {Array}              Matching choices or empty array\n   */\n\n\n  where(whereClause) {\n    return _.filter(this.realChoices, whereClause);\n  }\n  /**\n   * Pluck a particular key from the choices\n   * @param  {String} propertyName Property name to select\n   * @return {Array}               Selected properties\n   */\n\n\n  pluck(propertyName) {\n    return _.map(this.realChoices, propertyName);\n  } // Expose usual Array methods\n\n\n  indexOf() {\n    return this.choices.indexOf.apply(this.choices, arguments);\n  }\n\n  forEach() {\n    return this.choices.forEach.apply(this.choices, arguments);\n  }\n\n  filter() {\n    return this.choices.filter.apply(this.choices, arguments);\n  }\n\n  find(func) {\n    return _.find(this.choices, func);\n  }\n\n  push() {\n    var objs = _.map(arguments, val => new Choice(val));\n\n    this.choices.push.apply(this.choices, objs);\n    this.realChoices = this.choices.filter(Separator.exclude);\n    return this.choices;\n  }\n\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/objects/choices.js"],"names":["assert","require","_","Separator","Choice","module","exports","Choices","constructor","choices","answers","map","val","type","line","realChoices","filter","exclude","item","disabled","Object","defineProperty","get","length","set","Error","getChoice","selector","isNumber","where","whereClause","pluck","propertyName","indexOf","apply","arguments","forEach","find","func","push","objs"],"mappings":"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","sourcesContent":["'use strict';\nvar assert = require('assert');\nvar _ = require('lodash');\nvar Separator = require('./separator');\nvar Choice = require('./choice');\n\n/**\n * Choices collection\n * Collection of multiple `choice` object\n * @constructor\n * @param {Array} choices  All `choice` to keep in the collection\n */\n\nmodule.exports = class Choices {\n  constructor(choices, answers) {\n    this.choices = choices.map(val => {\n      if (val.type === 'separator') {\n        if (!(val instanceof Separator)) {\n          val = new Separator(val.line);\n        }\n\n        return val;\n      }\n\n      return new Choice(val, answers);\n    });\n\n    this.realChoices = this.choices\n      .filter(Separator.exclude)\n      .filter(item => !item.disabled);\n\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.choices.length;\n      },\n      set(val) {\n        this.choices.length = val;\n      }\n    });\n\n    Object.defineProperty(this, 'realLength', {\n      get() {\n        return this.realChoices.length;\n      },\n      set() {\n        throw new Error('Cannot set `realLength` of a Choices collection');\n      }\n    });\n  }\n\n  /**\n   * Get a valid choice from the collection\n   * @param  {Number} selector  The selected choice index\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n  getChoice(selector) {\n    assert(_.isNumber(selector));\n    return this.realChoices[selector];\n  }\n\n  /**\n   * Get a raw element from the collection\n   * @param  {Number} selector  The selected index value\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n  get(selector) {\n    assert(_.isNumber(selector));\n    return this.choices[selector];\n  }\n\n  /**\n   * Match the valid choices against a where clause\n   * @param  {Object} whereClause Lodash `where` clause\n   * @return {Array}              Matching choices or empty array\n   */\n\n  where(whereClause) {\n    return _.filter(this.realChoices, whereClause);\n  }\n\n  /**\n   * Pluck a particular key from the choices\n   * @param  {String} propertyName Property name to select\n   * @return {Array}               Selected properties\n   */\n\n  pluck(propertyName) {\n    return _.map(this.realChoices, propertyName);\n  }\n\n  // Expose usual Array methods\n  indexOf() {\n    return this.choices.indexOf.apply(this.choices, arguments);\n  }\n\n  forEach() {\n    return this.choices.forEach.apply(this.choices, arguments);\n  }\n\n  filter() {\n    return this.choices.filter.apply(this.choices, arguments);\n  }\n\n  find(func) {\n    return _.find(this.choices, func);\n  }\n\n  push() {\n    var objs = _.map(arguments, val => new Choice(val));\n    this.choices.push.apply(this.choices, objs);\n    this.realChoices = this.choices.filter(Separator.exclude);\n    return this.choices;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}