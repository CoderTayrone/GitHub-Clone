{"ast":null,"code":"/*!\n * connect\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('connect:dispatcher');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar finalhandler = require('finalhandler');\n\nvar http = require('http');\n\nvar merge = require('utils-merge');\n\nvar parseUrl = require('parseurl');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = createServer;\n/**\n * Module variables.\n * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n/* istanbul ignore next */\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n/**\n * Create a new connect server.\n *\n * @return {function}\n * @public\n */\n\nfunction createServer() {\n  function app(req, res, next) {\n    app.handle(req, res, next);\n  }\n\n  merge(app, proto);\n  merge(app, EventEmitter.prototype);\n  app.route = '/';\n  app.stack = [];\n  return app;\n}\n/**\n * Utilize the given middleware `handle` to the given `route`,\n * defaulting to _/_. This \"route\" is the mount-point for the\n * middleware, when given a value other than _/_ the middleware\n * is only effective when that segment is present in the request's\n * pathname.\n *\n * For example if we were to mount a function at _/admin_, it would\n * be invoked on _/admin_, and _/admin/settings_, however it would\n * not be invoked for _/_, or _/posts_.\n *\n * @param {String|Function|Server} route, callback or server\n * @param {Function|Server} callback or server\n * @return {Server} for chaining\n * @public\n */\n\n\nproto.use = function use(route, fn) {\n  var handle = fn;\n  var path = route; // default route to '/'\n\n  if (typeof route !== 'string') {\n    handle = route;\n    path = '/';\n  } // wrap sub-apps\n\n\n  if (typeof handle.handle === 'function') {\n    var server = handle;\n    server.route = path;\n\n    handle = function (req, res, next) {\n      server.handle(req, res, next);\n    };\n  } // wrap vanilla http.Servers\n\n\n  if (handle instanceof http.Server) {\n    handle = handle.listeners('request')[0];\n  } // strip trailing slash\n\n\n  if (path[path.length - 1] === '/') {\n    path = path.slice(0, -1);\n  } // add the middleware\n\n\n  debug('use %s %s', path || '/', handle.name || 'anonymous');\n  this.stack.push({\n    route: path,\n    handle: handle\n  });\n  return this;\n};\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @private\n */\n\n\nproto.handle = function handle(req, res, out) {\n  var index = 0;\n  var protohost = getProtohost(req.url) || '';\n  var removed = '';\n  var slashAdded = false;\n  var stack = this.stack; // final function handler\n\n  var done = out || finalhandler(req, res, {\n    env: env,\n    onerror: logerror\n  }); // store the original URL\n\n  req.originalUrl = req.originalUrl || req.url;\n\n  function next(err) {\n    if (slashAdded) {\n      req.url = req.url.substr(1);\n      slashAdded = false;\n    }\n\n    if (removed.length !== 0) {\n      req.url = protohost + removed + req.url.substr(protohost.length);\n      removed = '';\n    } // next callback\n\n\n    var layer = stack[index++]; // all done\n\n    if (!layer) {\n      defer(done, err);\n      return;\n    } // route data\n\n\n    var path = parseUrl(req).pathname || '/';\n    var route = layer.route; // skip this layer if the route doesn't match\n\n    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {\n      return next(err);\n    } // skip if route match does not border \"/\", \".\", or end\n\n\n    var c = path.length > route.length && path[route.length];\n\n    if (c && c !== '/' && c !== '.') {\n      return next(err);\n    } // trim off the part of the url that matches the route\n\n\n    if (route.length !== 0 && route !== '/') {\n      removed = route;\n      req.url = protohost + req.url.substr(protohost.length + removed.length); // ensure leading slash\n\n      if (!protohost && req.url[0] !== '/') {\n        req.url = '/' + req.url;\n        slashAdded = true;\n      }\n    } // call the layer handle\n\n\n    call(layer.handle, route, err, req, res, next);\n  }\n\n  next();\n};\n/**\n * Listen for connections.\n *\n * This method takes the same arguments\n * as node's `http.Server#listen()`.\n *\n * HTTP and HTTPS:\n *\n * If you run your application both as HTTP\n * and HTTPS you may wrap them individually,\n * since your Connect \"server\" is really just\n * a JavaScript `Function`.\n *\n *      var connect = require('connect')\n *        , http = require('http')\n *        , https = require('https');\n *\n *      var app = connect();\n *\n *      http.createServer(app).listen(80);\n *      https.createServer(options, app).listen(443);\n *\n * @return {http.Server}\n * @api public\n */\n\n\nproto.listen = function listen() {\n  var server = http.createServer(this);\n  return server.listen.apply(server, arguments);\n};\n/**\n * Invoke a route handle.\n * @private\n */\n\n\nfunction call(handle, route, err, req, res, next) {\n  var arity = handle.length;\n  var error = err;\n  var hasError = Boolean(err);\n  debug('%s %s : %s', handle.name || '<anonymous>', route, req.originalUrl);\n\n  try {\n    if (hasError && arity === 4) {\n      // error-handling middleware\n      handle(err, req, res, next);\n      return;\n    } else if (!hasError && arity < 4) {\n      // request-handling middleware\n      handle(req, res, next);\n      return;\n    }\n  } catch (e) {\n    // replace the error\n    error = e;\n  } // continue\n\n\n  next(error);\n}\n/**\n * Log error using console.error.\n *\n * @param {Error} err\n * @private\n */\n\n\nfunction logerror(err) {\n  if (env !== 'test') console.error(err.stack || err.toString());\n}\n/**\n * Get get protocol + host for a URL.\n *\n * @param {string} url\n * @private\n */\n\n\nfunction getProtohost(url) {\n  if (url.length === 0 || url[0] === '/') {\n    return undefined;\n  }\n\n  var fqdnIndex = url.indexOf('://');\n  return fqdnIndex !== -1 && url.lastIndexOf('?', fqdnIndex) === -1 ? url.substr(0, url.indexOf('/', 3 + fqdnIndex)) : undefined;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/connect/index.js"],"names":["debug","require","EventEmitter","finalhandler","http","merge","parseUrl","module","exports","createServer","env","process","NODE_ENV","proto","defer","setImmediate","fn","nextTick","bind","apply","arguments","app","req","res","next","handle","prototype","route","stack","use","path","server","Server","listeners","length","slice","name","push","out","index","protohost","getProtohost","url","removed","slashAdded","done","onerror","logerror","originalUrl","err","substr","layer","pathname","toLowerCase","c","call","listen","arity","error","hasError","Boolean","e","console","toString","undefined","fqdnIndex","indexOf","lastIndexOf"],"mappings":"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","sourcesContent":["/*!\n * connect\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('connect:dispatcher');\nvar EventEmitter = require('events').EventEmitter;\nvar finalhandler = require('finalhandler');\nvar http = require('http');\nvar merge = require('utils-merge');\nvar parseUrl = require('parseurl');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = createServer;\n\n/**\n * Module variables.\n * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Create a new connect server.\n *\n * @return {function}\n * @public\n */\n\nfunction createServer() {\n  function app(req, res, next){ app.handle(req, res, next); }\n  merge(app, proto);\n  merge(app, EventEmitter.prototype);\n  app.route = '/';\n  app.stack = [];\n  return app;\n}\n\n/**\n * Utilize the given middleware `handle` to the given `route`,\n * defaulting to _/_. This \"route\" is the mount-point for the\n * middleware, when given a value other than _/_ the middleware\n * is only effective when that segment is present in the request's\n * pathname.\n *\n * For example if we were to mount a function at _/admin_, it would\n * be invoked on _/admin_, and _/admin/settings_, however it would\n * not be invoked for _/_, or _/posts_.\n *\n * @param {String|Function|Server} route, callback or server\n * @param {Function|Server} callback or server\n * @return {Server} for chaining\n * @public\n */\n\nproto.use = function use(route, fn) {\n  var handle = fn;\n  var path = route;\n\n  // default route to '/'\n  if (typeof route !== 'string') {\n    handle = route;\n    path = '/';\n  }\n\n  // wrap sub-apps\n  if (typeof handle.handle === 'function') {\n    var server = handle;\n    server.route = path;\n    handle = function (req, res, next) {\n      server.handle(req, res, next);\n    };\n  }\n\n  // wrap vanilla http.Servers\n  if (handle instanceof http.Server) {\n    handle = handle.listeners('request')[0];\n  }\n\n  // strip trailing slash\n  if (path[path.length - 1] === '/') {\n    path = path.slice(0, -1);\n  }\n\n  // add the middleware\n  debug('use %s %s', path || '/', handle.name || 'anonymous');\n  this.stack.push({ route: path, handle: handle });\n\n  return this;\n};\n\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @private\n */\n\nproto.handle = function handle(req, res, out) {\n  var index = 0;\n  var protohost = getProtohost(req.url) || '';\n  var removed = '';\n  var slashAdded = false;\n  var stack = this.stack;\n\n  // final function handler\n  var done = out || finalhandler(req, res, {\n    env: env,\n    onerror: logerror\n  });\n\n  // store the original URL\n  req.originalUrl = req.originalUrl || req.url;\n\n  function next(err) {\n    if (slashAdded) {\n      req.url = req.url.substr(1);\n      slashAdded = false;\n    }\n\n    if (removed.length !== 0) {\n      req.url = protohost + removed + req.url.substr(protohost.length);\n      removed = '';\n    }\n\n    // next callback\n    var layer = stack[index++];\n\n    // all done\n    if (!layer) {\n      defer(done, err);\n      return;\n    }\n\n    // route data\n    var path = parseUrl(req).pathname || '/';\n    var route = layer.route;\n\n    // skip this layer if the route doesn't match\n    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {\n      return next(err);\n    }\n\n    // skip if route match does not border \"/\", \".\", or end\n    var c = path.length > route.length && path[route.length];\n    if (c && c !== '/' && c !== '.') {\n      return next(err);\n    }\n\n    // trim off the part of the url that matches the route\n    if (route.length !== 0 && route !== '/') {\n      removed = route;\n      req.url = protohost + req.url.substr(protohost.length + removed.length);\n\n      // ensure leading slash\n      if (!protohost && req.url[0] !== '/') {\n        req.url = '/' + req.url;\n        slashAdded = true;\n      }\n    }\n\n    // call the layer handle\n    call(layer.handle, route, err, req, res, next);\n  }\n\n  next();\n};\n\n/**\n * Listen for connections.\n *\n * This method takes the same arguments\n * as node's `http.Server#listen()`.\n *\n * HTTP and HTTPS:\n *\n * If you run your application both as HTTP\n * and HTTPS you may wrap them individually,\n * since your Connect \"server\" is really just\n * a JavaScript `Function`.\n *\n *      var connect = require('connect')\n *        , http = require('http')\n *        , https = require('https');\n *\n *      var app = connect();\n *\n *      http.createServer(app).listen(80);\n *      https.createServer(options, app).listen(443);\n *\n * @return {http.Server}\n * @api public\n */\n\nproto.listen = function listen() {\n  var server = http.createServer(this);\n  return server.listen.apply(server, arguments);\n};\n\n/**\n * Invoke a route handle.\n * @private\n */\n\nfunction call(handle, route, err, req, res, next) {\n  var arity = handle.length;\n  var error = err;\n  var hasError = Boolean(err);\n\n  debug('%s %s : %s', handle.name || '<anonymous>', route, req.originalUrl);\n\n  try {\n    if (hasError && arity === 4) {\n      // error-handling middleware\n      handle(err, req, res, next);\n      return;\n    } else if (!hasError && arity < 4) {\n      // request-handling middleware\n      handle(req, res, next);\n      return;\n    }\n  } catch (e) {\n    // replace the error\n    error = e;\n  }\n\n  // continue\n  next(error);\n}\n\n/**\n * Log error using console.error.\n *\n * @param {Error} err\n * @private\n */\n\nfunction logerror(err) {\n  if (env !== 'test') console.error(err.stack || err.toString());\n}\n\n/**\n * Get get protocol + host for a URL.\n *\n * @param {string} url\n * @private\n */\n\nfunction getProtohost(url) {\n  if (url.length === 0 || url[0] === '/') {\n    return undefined;\n  }\n\n  var fqdnIndex = url.indexOf('://')\n\n  return fqdnIndex !== -1 && url.lastIndexOf('?', fqdnIndex) === -1\n    ? url.substr(0, url.indexOf('/', 3 + fqdnIndex))\n    : undefined;\n}\n"]},"metadata":{},"sourceType":"script"}