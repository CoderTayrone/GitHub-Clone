{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initMiddleware = void 0;\n\nconst url = require(\"url\");\n\nconst qs = require(\"querystring\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nconst SDK_PATH_REGEXP = /^\\/__\\/firebase\\/([^/]+)\\/([^/]+)$/;\n\nfunction initMiddleware(init) {\n  return (req, res, next) => {\n    const parsedUrl = url.parse(req.url);\n    const match = RegExp(SDK_PATH_REGEXP).exec(req.url);\n\n    if (match) {\n      const version = match[1];\n      const sdkName = match[2];\n      const u = new url.URL(`https://www.gstatic.com/firebasejs/${version}/${sdkName}`);\n      const c = new apiv2_1.Client({\n        urlPrefix: u.origin,\n        auth: false\n      });\n      const headers = {};\n      const acceptEncoding = req.headers[\"accept-encoding\"];\n\n      if (typeof acceptEncoding === \"string\" && acceptEncoding) {\n        headers[\"accept-encoding\"] = acceptEncoding;\n      }\n\n      c.request({\n        method: \"GET\",\n        path: u.pathname,\n        headers,\n        responseType: \"stream\",\n        resolveOnHTTPError: true,\n        compress: false\n      }).then(sdkRes => {\n        if (sdkRes.status === 404) {\n          return next();\n        }\n\n        for (const [key, value] of Object.entries(sdkRes.response.headers.raw())) {\n          res.setHeader(key, value);\n        }\n\n        sdkRes.body.pipe(res);\n      }).catch(e => {\n        utils.logLabeledWarning(\"hosting\", `Could not load Firebase SDK ${sdkName} v${version}, check your internet connection.`);\n        logger_1.logger.debug(e);\n      });\n    } else if (parsedUrl.pathname === \"/__/firebase/init.js\") {\n      const query = qs.parse(parsedUrl.query || \"\");\n      res.setHeader(\"Content-Type\", \"application/javascript\");\n\n      if (query[\"useEmulator\"] === \"true\") {\n        res.end(init.emulatorsJs);\n      } else {\n        res.end(init.js);\n      }\n    } else if (parsedUrl.pathname === \"/__/firebase/init.json\") {\n      res.setHeader(\"Content-Type\", \"application/json\");\n      res.end(init.json);\n    } else {\n      next();\n    }\n  };\n}\n\nexports.initMiddleware = initMiddleware;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/hosting/initMiddleware.js"],"names":["Object","defineProperty","exports","value","initMiddleware","url","require","qs","apiv2_1","logger_1","utils","SDK_PATH_REGEXP","init","req","res","next","parsedUrl","parse","match","RegExp","exec","version","sdkName","u","URL","c","Client","urlPrefix","origin","auth","headers","acceptEncoding","request","method","path","pathname","responseType","resolveOnHTTPError","compress","then","sdkRes","status","key","entries","response","raw","setHeader","body","pipe","catch","e","logLabeledWarning","logger","debug","query","end","emulatorsJs","js","json"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initMiddleware = void 0;\nconst url = require(\"url\");\nconst qs = require(\"querystring\");\nconst apiv2_1 = require(\"../apiv2\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nconst SDK_PATH_REGEXP = /^\\/__\\/firebase\\/([^/]+)\\/([^/]+)$/;\nfunction initMiddleware(init) {\n    return (req, res, next) => {\n        const parsedUrl = url.parse(req.url);\n        const match = RegExp(SDK_PATH_REGEXP).exec(req.url);\n        if (match) {\n            const version = match[1];\n            const sdkName = match[2];\n            const u = new url.URL(`https://www.gstatic.com/firebasejs/${version}/${sdkName}`);\n            const c = new apiv2_1.Client({ urlPrefix: u.origin, auth: false });\n            const headers = {};\n            const acceptEncoding = req.headers[\"accept-encoding\"];\n            if (typeof acceptEncoding === \"string\" && acceptEncoding) {\n                headers[\"accept-encoding\"] = acceptEncoding;\n            }\n            c.request({\n                method: \"GET\",\n                path: u.pathname,\n                headers,\n                responseType: \"stream\",\n                resolveOnHTTPError: true,\n                compress: false,\n            })\n                .then((sdkRes) => {\n                if (sdkRes.status === 404) {\n                    return next();\n                }\n                for (const [key, value] of Object.entries(sdkRes.response.headers.raw())) {\n                    res.setHeader(key, value);\n                }\n                sdkRes.body.pipe(res);\n            })\n                .catch((e) => {\n                utils.logLabeledWarning(\"hosting\", `Could not load Firebase SDK ${sdkName} v${version}, check your internet connection.`);\n                logger_1.logger.debug(e);\n            });\n        }\n        else if (parsedUrl.pathname === \"/__/firebase/init.js\") {\n            const query = qs.parse(parsedUrl.query || \"\");\n            res.setHeader(\"Content-Type\", \"application/javascript\");\n            if (query[\"useEmulator\"] === \"true\") {\n                res.end(init.emulatorsJs);\n            }\n            else {\n                res.end(init.js);\n            }\n        }\n        else if (parsedUrl.pathname === \"/__/firebase/init.json\") {\n            res.setHeader(\"Content-Type\", \"application/json\");\n            res.end(init.json);\n        }\n        else {\n            next();\n        }\n    };\n}\nexports.initMiddleware = initMiddleware;\n"]},"metadata":{},"sourceType":"script"}