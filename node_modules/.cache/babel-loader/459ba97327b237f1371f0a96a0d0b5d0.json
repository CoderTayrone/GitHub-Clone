{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nvar needProjectId = require(\"../projectUtils\").needProjectId;\n\nvar {\n  requirePermissions\n} = require(\"../requirePermissions\");\n\nvar runtimeconfig = require(\"../gcp/runtimeconfig\");\n\nvar functionsConfig = require(\"../functionsConfig\");\n\nconst {\n  logger\n} = require(\"../logger\");\n\nmodule.exports = new Command(\"functions:config:legacy\").description(\"get legacy functions config variables\").before(requirePermissions, [\"runtimeconfig.configs.list\", \"runtimeconfig.configs.get\", \"runtimeconfig.variables.list\", \"runtimeconfig.variables.get\"]).action(function (options) {\n  var projectId = needProjectId(options);\n  var metaPath = \"projects/\" + projectId + \"/configs/firebase/variables/meta\";\n  return runtimeconfig.variables.get(metaPath).then(function (result) {\n    var metaVal = JSON.parse(result.text);\n\n    if (!_.has(metaVal, \"version\")) {\n      logger.info(\"You do not have any legacy config variables.\");\n      return null;\n    }\n\n    var latestVarPath = functionsConfig.idsToVarName(projectId, \"firebase\", metaVal.version);\n    return runtimeconfig.variables.get(latestVarPath);\n  }).then(function (latest) {\n    if (latest !== null) {\n      var latestVal = JSON.parse(latest.text);\n      logger.info(JSON.stringify(latestVal, null, 2));\n      return latestVal;\n    }\n  }).catch(function (err) {\n    if (_.get(err, \"context.response.statusCode\") === 404) {\n      logger.info(\"You do not have any legacy config variables.\");\n      return null;\n    }\n\n    return Promise.reject(err);\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/functions-config-legacy.js"],"names":["_","require","Command","needProjectId","requirePermissions","runtimeconfig","functionsConfig","logger","module","exports","description","before","action","options","projectId","metaPath","variables","get","then","result","metaVal","JSON","parse","text","has","info","latestVarPath","idsToVarName","version","latest","latestVal","stringify","catch","err","Promise","reject"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BE,aAA/C;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAyBH,OAAO,CAAC,uBAAD,CAApC;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,sBAAD,CAA3B;;AACA,IAAIK,eAAe,GAAGL,OAAO,CAAC,oBAAD,CAA7B;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAaN,OAAO,CAAC,WAAD,CAA1B;;AACAO,MAAM,CAACC,OAAP,GAAiB,IAAIP,OAAJ,CAAY,yBAAZ,EACZQ,WADY,CACA,uCADA,EAEZC,MAFY,CAELP,kBAFK,EAEe,CAC5B,4BAD4B,EAE5B,2BAF4B,EAG5B,8BAH4B,EAI5B,6BAJ4B,CAFf,EAQZQ,MARY,CAQL,UAAUC,OAAV,EAAmB;AAC3B,MAAIC,SAAS,GAAGX,aAAa,CAACU,OAAD,CAA7B;AACA,MAAIE,QAAQ,GAAG,cAAcD,SAAd,GAA0B,kCAAzC;AACA,SAAOT,aAAa,CAACW,SAAd,CACFC,GADE,CACEF,QADF,EAEFG,IAFE,CAEG,UAAUC,MAAV,EAAkB;AACxB,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAAd;;AACA,QAAI,CAACvB,CAAC,CAACwB,GAAF,CAAMJ,OAAN,EAAe,SAAf,CAAL,EAAgC;AAC5Bb,MAAAA,MAAM,CAACkB,IAAP,CAAY,8CAAZ;AACA,aAAO,IAAP;AACH;;AACD,QAAIC,aAAa,GAAGpB,eAAe,CAACqB,YAAhB,CAA6Bb,SAA7B,EAAwC,UAAxC,EAAoDM,OAAO,CAACQ,OAA5D,CAApB;AACA,WAAOvB,aAAa,CAACW,SAAd,CAAwBC,GAAxB,CAA4BS,aAA5B,CAAP;AACH,GAVM,EAWFR,IAXE,CAWG,UAAUW,MAAV,EAAkB;AACxB,QAAIA,MAAM,KAAK,IAAf,EAAqB;AACjB,UAAIC,SAAS,GAAGT,IAAI,CAACC,KAAL,CAAWO,MAAM,CAACN,IAAlB,CAAhB;AACAhB,MAAAA,MAAM,CAACkB,IAAP,CAAYJ,IAAI,CAACU,SAAL,CAAeD,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAZ;AACA,aAAOA,SAAP;AACH;AACJ,GAjBM,EAkBFE,KAlBE,CAkBI,UAAUC,GAAV,EAAe;AACtB,QAAIjC,CAAC,CAACiB,GAAF,CAAMgB,GAAN,EAAW,6BAAX,MAA8C,GAAlD,EAAuD;AACnD1B,MAAAA,MAAM,CAACkB,IAAP,CAAY,8CAAZ;AACA,aAAO,IAAP;AACH;;AACD,WAAOS,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,GAxBM,CAAP;AAyBH,CApCgB,CAAjB","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar { Command } = require(\"../command\");\nvar needProjectId = require(\"../projectUtils\").needProjectId;\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar runtimeconfig = require(\"../gcp/runtimeconfig\");\nvar functionsConfig = require(\"../functionsConfig\");\nconst { logger } = require(\"../logger\");\nmodule.exports = new Command(\"functions:config:legacy\")\n    .description(\"get legacy functions config variables\")\n    .before(requirePermissions, [\n    \"runtimeconfig.configs.list\",\n    \"runtimeconfig.configs.get\",\n    \"runtimeconfig.variables.list\",\n    \"runtimeconfig.variables.get\",\n])\n    .action(function (options) {\n    var projectId = needProjectId(options);\n    var metaPath = \"projects/\" + projectId + \"/configs/firebase/variables/meta\";\n    return runtimeconfig.variables\n        .get(metaPath)\n        .then(function (result) {\n        var metaVal = JSON.parse(result.text);\n        if (!_.has(metaVal, \"version\")) {\n            logger.info(\"You do not have any legacy config variables.\");\n            return null;\n        }\n        var latestVarPath = functionsConfig.idsToVarName(projectId, \"firebase\", metaVal.version);\n        return runtimeconfig.variables.get(latestVarPath);\n    })\n        .then(function (latest) {\n        if (latest !== null) {\n            var latestVal = JSON.parse(latest.text);\n            logger.info(JSON.stringify(latestVal, null, 2));\n            return latestVal;\n        }\n    })\n        .catch(function (err) {\n        if (_.get(err, \"context.response.statusCode\") === 404) {\n            logger.info(\"You do not have any legacy config variables.\");\n            return null;\n        }\n        return Promise.reject(err);\n    });\n});\n"]},"metadata":{},"sourceType":"script"}