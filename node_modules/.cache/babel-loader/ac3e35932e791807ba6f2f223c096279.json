{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirestoreEmulator = void 0;\n\nconst chokidar = require(\"chokidar\");\n\nconst fs = require(\"fs\");\n\nconst clc = require(\"cli-color\");\n\nconst path = require(\"path\");\n\nconst api = require(\"../api\");\n\nconst utils = require(\"../utils\");\n\nconst downloadableEmulators = require(\"./downloadableEmulators\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst registry_1 = require(\"./registry\");\n\nconst constants_1 = require(\"./constants\");\n\nclass FirestoreEmulator {\n  constructor(args) {\n    this.args = args;\n  }\n\n  async start() {\n    const functionsInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.FUNCTIONS);\n\n    if (functionsInfo) {\n      this.args.functions_emulator = registry_1.EmulatorRegistry.getInfoHostString(functionsInfo);\n    }\n\n    if (this.args.rules && this.args.projectId) {\n      const rulesPath = this.args.rules;\n      this.rulesWatcher = chokidar.watch(rulesPath, {\n        persistent: true,\n        ignoreInitial: true\n      });\n      this.rulesWatcher.on(\"change\", async (event, stats) => {\n        await new Promise(res => setTimeout(res, 5));\n        utils.logLabeledBullet(\"firestore\", \"Change detected, updating rules...\");\n        const newContent = fs.readFileSync(rulesPath, \"utf8\").toString();\n        const issues = await this.updateRules(newContent);\n\n        if (issues) {\n          for (const issue of issues) {\n            utils.logWarning(this.prettyPrintRulesIssue(rulesPath, issue));\n          }\n        }\n\n        if (issues.some(issue => issue.severity === types_1.Severity.ERROR)) {\n          utils.logWarning(\"Failed to update rules\");\n        } else {\n          utils.logLabeledSuccess(\"firestore\", \"Rules updated.\");\n        }\n      });\n    }\n\n    return downloadableEmulators.start(types_1.Emulators.FIRESTORE, this.args);\n  }\n\n  connect() {\n    return Promise.resolve();\n  }\n\n  stop() {\n    if (this.rulesWatcher) {\n      this.rulesWatcher.close();\n    }\n\n    return downloadableEmulators.stop(types_1.Emulators.FIRESTORE);\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FIRESTORE);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FIRESTORE);\n    return {\n      name: this.getName(),\n      host,\n      port,\n      pid: downloadableEmulators.getPID(types_1.Emulators.FIRESTORE)\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.FIRESTORE;\n  }\n\n  updateRules(content) {\n    const projectId = this.args.projectId;\n    const info = this.getInfo();\n    const body = {\n      ignore_errors: true,\n      rules: {\n        files: [{\n          name: \"security.rules\",\n          content\n        }]\n      }\n    };\n    return api.request(\"PUT\", `/emulator/v1/projects/${projectId}:securityRules`, {\n      origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(info)}`,\n      data: body\n    }).then(res => {\n      if (res.body && res.body.issues) {\n        return res.body.issues;\n      }\n\n      return [];\n    });\n  }\n\n  prettyPrintRulesIssue(filePath, issue) {\n    const relativePath = path.relative(process.cwd(), filePath);\n    const line = issue.sourcePosition.line || 0;\n    const col = issue.sourcePosition.column || 0;\n    return `${clc.cyan(relativePath)}:${clc.yellow(line)}:${clc.yellow(col)} - ${clc.red(issue.severity)} ${issue.description}`;\n  }\n\n}\n\nexports.FirestoreEmulator = FirestoreEmulator;\nFirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT = \"FIREBASE_FIRESTORE_EMULATOR_ADDRESS\";","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/firestoreEmulator.js"],"names":["Object","defineProperty","exports","value","FirestoreEmulator","chokidar","require","fs","clc","path","api","utils","downloadableEmulators","types_1","registry_1","constants_1","constructor","args","start","functionsInfo","EmulatorRegistry","getInfo","Emulators","FUNCTIONS","functions_emulator","getInfoHostString","rules","projectId","rulesPath","rulesWatcher","watch","persistent","ignoreInitial","on","event","stats","Promise","res","setTimeout","logLabeledBullet","newContent","readFileSync","toString","issues","updateRules","issue","logWarning","prettyPrintRulesIssue","some","severity","Severity","ERROR","logLabeledSuccess","FIRESTORE","connect","resolve","stop","close","host","Constants","getDefaultHost","port","getDefaultPort","name","getName","pid","getPID","content","info","body","ignore_errors","files","request","origin","data","then","filePath","relativePath","relative","process","cwd","line","sourcePosition","col","column","cyan","yellow","red","description","FIRESTORE_EMULATOR_ENV_ALT"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirestoreEmulator = void 0;\nconst chokidar = require(\"chokidar\");\nconst fs = require(\"fs\");\nconst clc = require(\"cli-color\");\nconst path = require(\"path\");\nconst api = require(\"../api\");\nconst utils = require(\"../utils\");\nconst downloadableEmulators = require(\"./downloadableEmulators\");\nconst types_1 = require(\"../emulator/types\");\nconst registry_1 = require(\"./registry\");\nconst constants_1 = require(\"./constants\");\nclass FirestoreEmulator {\n    constructor(args) {\n        this.args = args;\n    }\n    async start() {\n        const functionsInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.FUNCTIONS);\n        if (functionsInfo) {\n            this.args.functions_emulator = registry_1.EmulatorRegistry.getInfoHostString(functionsInfo);\n        }\n        if (this.args.rules && this.args.projectId) {\n            const rulesPath = this.args.rules;\n            this.rulesWatcher = chokidar.watch(rulesPath, { persistent: true, ignoreInitial: true });\n            this.rulesWatcher.on(\"change\", async (event, stats) => {\n                await new Promise((res) => setTimeout(res, 5));\n                utils.logLabeledBullet(\"firestore\", \"Change detected, updating rules...\");\n                const newContent = fs.readFileSync(rulesPath, \"utf8\").toString();\n                const issues = await this.updateRules(newContent);\n                if (issues) {\n                    for (const issue of issues) {\n                        utils.logWarning(this.prettyPrintRulesIssue(rulesPath, issue));\n                    }\n                }\n                if (issues.some((issue) => issue.severity === types_1.Severity.ERROR)) {\n                    utils.logWarning(\"Failed to update rules\");\n                }\n                else {\n                    utils.logLabeledSuccess(\"firestore\", \"Rules updated.\");\n                }\n            });\n        }\n        return downloadableEmulators.start(types_1.Emulators.FIRESTORE, this.args);\n    }\n    connect() {\n        return Promise.resolve();\n    }\n    stop() {\n        if (this.rulesWatcher) {\n            this.rulesWatcher.close();\n        }\n        return downloadableEmulators.stop(types_1.Emulators.FIRESTORE);\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FIRESTORE);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FIRESTORE);\n        return {\n            name: this.getName(),\n            host,\n            port,\n            pid: downloadableEmulators.getPID(types_1.Emulators.FIRESTORE),\n        };\n    }\n    getName() {\n        return types_1.Emulators.FIRESTORE;\n    }\n    updateRules(content) {\n        const projectId = this.args.projectId;\n        const info = this.getInfo();\n        const body = {\n            ignore_errors: true,\n            rules: {\n                files: [\n                    {\n                        name: \"security.rules\",\n                        content,\n                    },\n                ],\n            },\n        };\n        return api\n            .request(\"PUT\", `/emulator/v1/projects/${projectId}:securityRules`, {\n            origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(info)}`,\n            data: body,\n        })\n            .then((res) => {\n            if (res.body && res.body.issues) {\n                return res.body.issues;\n            }\n            return [];\n        });\n    }\n    prettyPrintRulesIssue(filePath, issue) {\n        const relativePath = path.relative(process.cwd(), filePath);\n        const line = issue.sourcePosition.line || 0;\n        const col = issue.sourcePosition.column || 0;\n        return `${clc.cyan(relativePath)}:${clc.yellow(line)}:${clc.yellow(col)} - ${clc.red(issue.severity)} ${issue.description}`;\n    }\n}\nexports.FirestoreEmulator = FirestoreEmulator;\nFirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT = \"FIREBASE_FIRESTORE_EMULATOR_ADDRESS\";\n"]},"metadata":{},"sourceType":"script"}