{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadEmulator = void 0;\n\nconst url_1 = require(\"url\");\n\nconst crypto = require(\"crypto\");\n\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nconst ProgressBar = require(\"progress\");\n\nconst tmp = require(\"tmp\");\n\nconst unzipper = require(\"unzipper\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst error_1 = require(\"../error\");\n\nconst downloadableEmulators = require(\"./downloadableEmulators\");\n\ntmp.setGracefulCleanup();\n\nasync function downloadEmulator(name) {\n  const emulator = downloadableEmulators.getDownloadDetails(name);\n  emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `downloading ${path.basename(emulator.downloadPath)}...`);\n  fs.ensureDirSync(emulator.opts.cacheDir);\n  const tmpfile = await downloadToTmp(emulator.opts.remoteUrl);\n\n  if (!emulator.opts.skipChecksumAndSize) {\n    await validateSize(tmpfile, emulator.opts.expectedSize);\n    await validateChecksum(tmpfile, emulator.opts.expectedChecksum);\n  }\n\n  if (emulator.opts.skipCache) {\n    removeOldFiles(name, emulator, true);\n  }\n\n  fs.copySync(tmpfile, emulator.downloadPath);\n\n  if (emulator.unzipDir) {\n    await unzip(emulator.downloadPath, emulator.unzipDir);\n  }\n\n  const executablePath = emulator.binaryPath || emulator.downloadPath;\n  fs.chmodSync(executablePath, 0o755);\n  removeOldFiles(name, emulator);\n}\n\nexports.downloadEmulator = downloadEmulator;\n\nfunction unzip(zipPath, unzipDir) {\n  return new Promise((resolve, reject) => {\n    fs.createReadStream(zipPath).pipe(unzipper.Extract({\n      path: unzipDir\n    })).on(\"error\", reject).on(\"finish\", resolve);\n  });\n}\n\nfunction removeOldFiles(name, emulator, removeAllVersions = false) {\n  const currentLocalPath = emulator.downloadPath;\n  const currentUnzipPath = emulator.unzipDir;\n  const files = fs.readdirSync(emulator.opts.cacheDir);\n\n  for (const file of files) {\n    const fullFilePath = path.join(emulator.opts.cacheDir, file);\n\n    if (file.indexOf(emulator.opts.namePrefix) < 0) {\n      continue;\n    }\n\n    if (fullFilePath !== currentLocalPath && fullFilePath !== currentUnzipPath || removeAllVersions) {\n      emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `Removing outdated emulator files: ${file}`);\n      fs.removeSync(fullFilePath);\n    }\n  }\n}\n\nasync function downloadToTmp(remoteUrl) {\n  const u = new url_1.URL(remoteUrl);\n  const c = new apiv2_1.Client({\n    urlPrefix: u.origin,\n    auth: false\n  });\n  const tmpfile = tmp.fileSync();\n  const writeStream = fs.createWriteStream(tmpfile.name);\n  const res = await c.request({\n    method: \"GET\",\n    path: u.pathname,\n    queryParams: u.searchParams,\n    responseType: \"stream\",\n    resolveOnHTTPError: true\n  });\n\n  if (res.status !== 200) {\n    throw new error_1.FirebaseError(`download failed, status ${res.status}`, {\n      exit: 1\n    });\n  }\n\n  const total = parseInt(res.response.headers.get(\"content-length\") || \"0\", 10);\n  const totalMb = Math.ceil(total / 1000000);\n  const bar = new ProgressBar(`Progress: :bar (:percent of ${totalMb}MB)`, {\n    total,\n    head: \">\"\n  });\n  res.body.on(\"data\", chunk => {\n    bar.tick(chunk.length);\n  });\n  await new Promise(resolve => {\n    writeStream.on(\"finish\", resolve);\n    res.body.pipe(writeStream);\n  });\n  return tmpfile.name;\n}\n\nfunction validateSize(filepath, expectedSize) {\n  return new Promise((resolve, reject) => {\n    const stat = fs.statSync(filepath);\n    return stat.size === expectedSize ? resolve() : reject(new error_1.FirebaseError(`download failed, expected ${expectedSize} bytes but got ${stat.size}`, {\n      exit: 1\n    }));\n  });\n}\n\nfunction validateChecksum(filepath, expectedChecksum) {\n  return new Promise((resolve, reject) => {\n    const hash = crypto.createHash(\"md5\");\n    const stream = fs.createReadStream(filepath);\n    stream.on(\"data\", data => hash.update(data));\n    stream.on(\"end\", () => {\n      const checksum = hash.digest(\"hex\");\n      return checksum === expectedChecksum ? resolve() : reject(new error_1.FirebaseError(`download failed, expected checksum ${expectedChecksum} but got ${checksum}`, {\n        exit: 1\n      }));\n    });\n  });\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/download.js"],"names":["Object","defineProperty","exports","value","downloadEmulator","url_1","require","crypto","fs","path","ProgressBar","tmp","unzipper","apiv2_1","emulatorLogger_1","error_1","downloadableEmulators","setGracefulCleanup","name","emulator","getDownloadDetails","EmulatorLogger","forEmulator","logLabeled","basename","downloadPath","ensureDirSync","opts","cacheDir","tmpfile","downloadToTmp","remoteUrl","skipChecksumAndSize","validateSize","expectedSize","validateChecksum","expectedChecksum","skipCache","removeOldFiles","copySync","unzipDir","unzip","executablePath","binaryPath","chmodSync","zipPath","Promise","resolve","reject","createReadStream","pipe","Extract","on","removeAllVersions","currentLocalPath","currentUnzipPath","files","readdirSync","file","fullFilePath","join","indexOf","namePrefix","removeSync","u","URL","c","Client","urlPrefix","origin","auth","fileSync","writeStream","createWriteStream","res","request","method","pathname","queryParams","searchParams","responseType","resolveOnHTTPError","status","FirebaseError","exit","total","parseInt","response","headers","get","totalMb","Math","ceil","bar","head","body","chunk","tick","length","filepath","stat","statSync","size","hash","createHash","stream","data","update","checksum","digest"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.downloadEmulator = void 0;\nconst url_1 = require(\"url\");\nconst crypto = require(\"crypto\");\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst ProgressBar = require(\"progress\");\nconst tmp = require(\"tmp\");\nconst unzipper = require(\"unzipper\");\nconst apiv2_1 = require(\"../apiv2\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst error_1 = require(\"../error\");\nconst downloadableEmulators = require(\"./downloadableEmulators\");\ntmp.setGracefulCleanup();\nasync function downloadEmulator(name) {\n    const emulator = downloadableEmulators.getDownloadDetails(name);\n    emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `downloading ${path.basename(emulator.downloadPath)}...`);\n    fs.ensureDirSync(emulator.opts.cacheDir);\n    const tmpfile = await downloadToTmp(emulator.opts.remoteUrl);\n    if (!emulator.opts.skipChecksumAndSize) {\n        await validateSize(tmpfile, emulator.opts.expectedSize);\n        await validateChecksum(tmpfile, emulator.opts.expectedChecksum);\n    }\n    if (emulator.opts.skipCache) {\n        removeOldFiles(name, emulator, true);\n    }\n    fs.copySync(tmpfile, emulator.downloadPath);\n    if (emulator.unzipDir) {\n        await unzip(emulator.downloadPath, emulator.unzipDir);\n    }\n    const executablePath = emulator.binaryPath || emulator.downloadPath;\n    fs.chmodSync(executablePath, 0o755);\n    removeOldFiles(name, emulator);\n}\nexports.downloadEmulator = downloadEmulator;\nfunction unzip(zipPath, unzipDir) {\n    return new Promise((resolve, reject) => {\n        fs.createReadStream(zipPath)\n            .pipe(unzipper.Extract({ path: unzipDir }))\n            .on(\"error\", reject)\n            .on(\"finish\", resolve);\n    });\n}\nfunction removeOldFiles(name, emulator, removeAllVersions = false) {\n    const currentLocalPath = emulator.downloadPath;\n    const currentUnzipPath = emulator.unzipDir;\n    const files = fs.readdirSync(emulator.opts.cacheDir);\n    for (const file of files) {\n        const fullFilePath = path.join(emulator.opts.cacheDir, file);\n        if (file.indexOf(emulator.opts.namePrefix) < 0) {\n            continue;\n        }\n        if ((fullFilePath !== currentLocalPath && fullFilePath !== currentUnzipPath) ||\n            removeAllVersions) {\n            emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `Removing outdated emulator files: ${file}`);\n            fs.removeSync(fullFilePath);\n        }\n    }\n}\nasync function downloadToTmp(remoteUrl) {\n    const u = new url_1.URL(remoteUrl);\n    const c = new apiv2_1.Client({ urlPrefix: u.origin, auth: false });\n    const tmpfile = tmp.fileSync();\n    const writeStream = fs.createWriteStream(tmpfile.name);\n    const res = await c.request({\n        method: \"GET\",\n        path: u.pathname,\n        queryParams: u.searchParams,\n        responseType: \"stream\",\n        resolveOnHTTPError: true,\n    });\n    if (res.status !== 200) {\n        throw new error_1.FirebaseError(`download failed, status ${res.status}`, { exit: 1 });\n    }\n    const total = parseInt(res.response.headers.get(\"content-length\") || \"0\", 10);\n    const totalMb = Math.ceil(total / 1000000);\n    const bar = new ProgressBar(`Progress: :bar (:percent of ${totalMb}MB)`, { total, head: \">\" });\n    res.body.on(\"data\", (chunk) => {\n        bar.tick(chunk.length);\n    });\n    await new Promise((resolve) => {\n        writeStream.on(\"finish\", resolve);\n        res.body.pipe(writeStream);\n    });\n    return tmpfile.name;\n}\nfunction validateSize(filepath, expectedSize) {\n    return new Promise((resolve, reject) => {\n        const stat = fs.statSync(filepath);\n        return stat.size === expectedSize\n            ? resolve()\n            : reject(new error_1.FirebaseError(`download failed, expected ${expectedSize} bytes but got ${stat.size}`, { exit: 1 }));\n    });\n}\nfunction validateChecksum(filepath, expectedChecksum) {\n    return new Promise((resolve, reject) => {\n        const hash = crypto.createHash(\"md5\");\n        const stream = fs.createReadStream(filepath);\n        stream.on(\"data\", (data) => hash.update(data));\n        stream.on(\"end\", () => {\n            const checksum = hash.digest(\"hex\");\n            return checksum === expectedChecksum\n                ? resolve()\n                : reject(new error_1.FirebaseError(`download failed, expected checksum ${expectedChecksum} but got ${checksum}`, { exit: 1 }));\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}