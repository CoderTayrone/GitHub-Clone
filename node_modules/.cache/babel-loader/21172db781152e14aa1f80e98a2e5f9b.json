{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doSetup = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst utils = require(\"../../utils\");\n\nconst prompt_1 = require(\"../../prompt\");\n\nconst types_1 = require(\"../../emulator/types\");\n\nconst constants_1 = require(\"../../emulator/constants\");\n\nconst downloadableEmulators_1 = require(\"../../emulator/downloadableEmulators\");\n\nasync function doSetup(setup, config) {\n  const choices = types_1.ALL_SERVICE_EMULATORS.map(e => {\n    return {\n      value: e,\n      name: constants_1.Constants.description(e),\n      checked: config && (config.has(e) || config.has(`emulators.${e}`))\n    };\n  });\n  const selections = {};\n  await prompt_1.prompt(selections, [{\n    type: \"checkbox\",\n    name: \"emulators\",\n    message: \"Which Firebase emulators do you want to set up? \" + \"Press Space to select emulators, then Enter to confirm your choices.\",\n    choices: choices\n  }]);\n\n  if (!selections.emulators) {\n    return;\n  }\n\n  setup.config.emulators = setup.config.emulators || {};\n\n  for (const selected of selections.emulators) {\n    setup.config.emulators[selected] = setup.config.emulators[selected] || {};\n    const currentPort = setup.config.emulators[selected].port;\n\n    if (currentPort) {\n      utils.logBullet(`Port for ${selected} already configured: ${clc.cyan(currentPort)}`);\n    } else {\n      await prompt_1.prompt(setup.config.emulators[selected], [{\n        type: \"number\",\n        name: \"port\",\n        message: `Which port do you want to use for the ${clc.underline(selected)} emulator?`,\n        default: constants_1.Constants.getDefaultPort(selected)\n      }]);\n    }\n  }\n\n  if (selections.emulators.length) {\n    const uiDesc = constants_1.Constants.description(types_1.Emulators.UI);\n\n    if (setup.config.emulators.ui && setup.config.emulators.ui.enabled !== false) {\n      const currentPort = setup.config.emulators.ui.port || \"(automatic)\";\n      utils.logBullet(`${uiDesc} already enabled with port: ${clc.cyan(currentPort)}`);\n    } else {\n      const ui = setup.config.emulators.ui || {};\n      setup.config.emulators.ui = ui;\n      await prompt_1.prompt(ui, [{\n        name: \"enabled\",\n        type: \"confirm\",\n        message: `Would you like to enable the ${uiDesc}?`,\n        default: true\n      }]);\n\n      if (ui.enabled) {\n        await prompt_1.prompt(ui, [{\n          type: \"input\",\n          name: \"port\",\n          message: `Which port do you want to use for the ${clc.underline(uiDesc)} (leave empty to use any available port)?`\n        }]);\n        const portNum = Number.parseInt(ui.port);\n        ui.port = isNaN(portNum) ? undefined : portNum;\n      }\n    }\n\n    await prompt_1.prompt(selections, [{\n      name: \"download\",\n      type: \"confirm\",\n      message: \"Would you like to download the emulators now?\",\n      default: false\n    }]);\n  }\n\n  if (selections.download) {\n    for (const selected of selections.emulators) {\n      if (types_1.isDownloadableEmulator(selected)) {\n        await downloadableEmulators_1.downloadIfNecessary(selected);\n      }\n    }\n\n    if (_.get(setup, \"config.emulators.ui.enabled\")) {\n      downloadableEmulators_1.downloadIfNecessary(types_1.Emulators.UI);\n    }\n  }\n}\n\nexports.doSetup = doSetup;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/emulators.js"],"names":["Object","defineProperty","exports","value","doSetup","clc","require","_","utils","prompt_1","types_1","constants_1","downloadableEmulators_1","setup","config","choices","ALL_SERVICE_EMULATORS","map","e","name","Constants","description","checked","has","selections","prompt","type","message","emulators","selected","currentPort","port","logBullet","cyan","underline","default","getDefaultPort","length","uiDesc","Emulators","UI","ui","enabled","portNum","Number","parseInt","isNaN","undefined","download","isDownloadableEmulator","downloadIfNecessary","get"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doSetup = void 0;\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst utils = require(\"../../utils\");\nconst prompt_1 = require(\"../../prompt\");\nconst types_1 = require(\"../../emulator/types\");\nconst constants_1 = require(\"../../emulator/constants\");\nconst downloadableEmulators_1 = require(\"../../emulator/downloadableEmulators\");\nasync function doSetup(setup, config) {\n    const choices = types_1.ALL_SERVICE_EMULATORS.map((e) => {\n        return {\n            value: e,\n            name: constants_1.Constants.description(e),\n            checked: config && (config.has(e) || config.has(`emulators.${e}`)),\n        };\n    });\n    const selections = {};\n    await prompt_1.prompt(selections, [\n        {\n            type: \"checkbox\",\n            name: \"emulators\",\n            message: \"Which Firebase emulators do you want to set up? \" +\n                \"Press Space to select emulators, then Enter to confirm your choices.\",\n            choices: choices,\n        },\n    ]);\n    if (!selections.emulators) {\n        return;\n    }\n    setup.config.emulators = setup.config.emulators || {};\n    for (const selected of selections.emulators) {\n        setup.config.emulators[selected] = setup.config.emulators[selected] || {};\n        const currentPort = setup.config.emulators[selected].port;\n        if (currentPort) {\n            utils.logBullet(`Port for ${selected} already configured: ${clc.cyan(currentPort)}`);\n        }\n        else {\n            await prompt_1.prompt(setup.config.emulators[selected], [\n                {\n                    type: \"number\",\n                    name: \"port\",\n                    message: `Which port do you want to use for the ${clc.underline(selected)} emulator?`,\n                    default: constants_1.Constants.getDefaultPort(selected),\n                },\n            ]);\n        }\n    }\n    if (selections.emulators.length) {\n        const uiDesc = constants_1.Constants.description(types_1.Emulators.UI);\n        if (setup.config.emulators.ui && setup.config.emulators.ui.enabled !== false) {\n            const currentPort = setup.config.emulators.ui.port || \"(automatic)\";\n            utils.logBullet(`${uiDesc} already enabled with port: ${clc.cyan(currentPort)}`);\n        }\n        else {\n            const ui = setup.config.emulators.ui || {};\n            setup.config.emulators.ui = ui;\n            await prompt_1.prompt(ui, [\n                {\n                    name: \"enabled\",\n                    type: \"confirm\",\n                    message: `Would you like to enable the ${uiDesc}?`,\n                    default: true,\n                },\n            ]);\n            if (ui.enabled) {\n                await prompt_1.prompt(ui, [\n                    {\n                        type: \"input\",\n                        name: \"port\",\n                        message: `Which port do you want to use for the ${clc.underline(uiDesc)} (leave empty to use any available port)?`,\n                    },\n                ]);\n                const portNum = Number.parseInt(ui.port);\n                ui.port = isNaN(portNum) ? undefined : portNum;\n            }\n        }\n        await prompt_1.prompt(selections, [\n            {\n                name: \"download\",\n                type: \"confirm\",\n                message: \"Would you like to download the emulators now?\",\n                default: false,\n            },\n        ]);\n    }\n    if (selections.download) {\n        for (const selected of selections.emulators) {\n            if (types_1.isDownloadableEmulator(selected)) {\n                await downloadableEmulators_1.downloadIfNecessary(selected);\n            }\n        }\n        if (_.get(setup, \"config.emulators.ui.enabled\")) {\n            downloadableEmulators_1.downloadIfNecessary(types_1.Emulators.UI);\n        }\n    }\n}\nexports.doSetup = doSetup;\n"]},"metadata":{},"sourceType":"script"}