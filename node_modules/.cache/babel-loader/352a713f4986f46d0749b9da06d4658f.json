{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRulesConfig = exports.normalizeRulesConfig = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nfunction normalizeRulesConfig(rulesConfig, options) {\n  const config = options.config;\n  return rulesConfig.map(rc => {\n    return {\n      instance: rc.instance,\n      rules: config.path(rc.rules)\n    };\n  });\n}\n\nexports.normalizeRulesConfig = normalizeRulesConfig;\n\nfunction getRulesConfig(projectId, options) {\n  const dbConfig = options.config.src.database;\n\n  if (dbConfig === undefined) {\n    return [];\n  }\n\n  if (!Array.isArray(dbConfig)) {\n    if (dbConfig && dbConfig.rules) {\n      utils.assertIsStringOrUndefined(options.instance);\n      const instance = options.instance || `${options.project}-default-rtdb`;\n      return [{\n        rules: dbConfig.rules,\n        instance\n      }];\n    } else {\n      logger_1.logger.debug(\"Possibly invalid database config: \", JSON.stringify(dbConfig));\n      return [];\n    }\n  }\n\n  const results = [];\n  const rc = options.rc;\n\n  for (const c of dbConfig) {\n    if (c.target) {\n      rc.requireTarget(projectId, \"database\", c.target);\n      const instances = rc.target(projectId, \"database\", c.target);\n\n      for (const i of instances) {\n        results.push({\n          instance: i,\n          rules: c.rules\n        });\n      }\n    } else if (c.instance) {\n      results.push(c);\n    } else {\n      throw new error_1.FirebaseError('Must supply either \"target\" or \"instance\" in database config');\n    }\n  }\n\n  return results;\n}\n\nexports.getRulesConfig = getRulesConfig;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/database/rulesConfig.js"],"names":["Object","defineProperty","exports","value","getRulesConfig","normalizeRulesConfig","error_1","require","logger_1","utils","rulesConfig","options","config","map","rc","instance","rules","path","projectId","dbConfig","src","database","undefined","Array","isArray","assertIsStringOrUndefined","project","logger","debug","JSON","stringify","results","c","target","requireTarget","instances","i","push","FirebaseError"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,oBAAR,GAA+B,KAAK,CAA7D;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,SAASF,oBAAT,CAA8BK,WAA9B,EAA2CC,OAA3C,EAAoD;AAChD,QAAMC,MAAM,GAAGD,OAAO,CAACC,MAAvB;AACA,SAAOF,WAAW,CAACG,GAAZ,CAAiBC,EAAD,IAAQ;AAC3B,WAAO;AACHC,MAAAA,QAAQ,EAAED,EAAE,CAACC,QADV;AAEHC,MAAAA,KAAK,EAAEJ,MAAM,CAACK,IAAP,CAAYH,EAAE,CAACE,KAAf;AAFJ,KAAP;AAIH,GALM,CAAP;AAMH;;AACDd,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;;AACA,SAASD,cAAT,CAAwBc,SAAxB,EAAmCP,OAAnC,EAA4C;AACxC,QAAMQ,QAAQ,GAAGR,OAAO,CAACC,MAAR,CAAeQ,GAAf,CAAmBC,QAApC;;AACA,MAAIF,QAAQ,KAAKG,SAAjB,EAA4B;AACxB,WAAO,EAAP;AACH;;AACD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAL,EAA8B;AAC1B,QAAIA,QAAQ,IAAIA,QAAQ,CAACH,KAAzB,EAAgC;AAC5BP,MAAAA,KAAK,CAACgB,yBAAN,CAAgCd,OAAO,CAACI,QAAxC;AACA,YAAMA,QAAQ,GAAGJ,OAAO,CAACI,QAAR,IAAqB,GAAEJ,OAAO,CAACe,OAAQ,eAAxD;AACA,aAAO,CAAC;AAAEV,QAAAA,KAAK,EAAEG,QAAQ,CAACH,KAAlB;AAAyBD,QAAAA;AAAzB,OAAD,CAAP;AACH,KAJD,MAKK;AACDP,MAAAA,QAAQ,CAACmB,MAAT,CAAgBC,KAAhB,CAAsB,oCAAtB,EAA4DC,IAAI,CAACC,SAAL,CAAeX,QAAf,CAA5D;AACA,aAAO,EAAP;AACH;AACJ;;AACD,QAAMY,OAAO,GAAG,EAAhB;AACA,QAAMjB,EAAE,GAAGH,OAAO,CAACG,EAAnB;;AACA,OAAK,MAAMkB,CAAX,IAAgBb,QAAhB,EAA0B;AACtB,QAAIa,CAAC,CAACC,MAAN,EAAc;AACVnB,MAAAA,EAAE,CAACoB,aAAH,CAAiBhB,SAAjB,EAA4B,UAA5B,EAAwCc,CAAC,CAACC,MAA1C;AACA,YAAME,SAAS,GAAGrB,EAAE,CAACmB,MAAH,CAAUf,SAAV,EAAqB,UAArB,EAAiCc,CAAC,CAACC,MAAnC,CAAlB;;AACA,WAAK,MAAMG,CAAX,IAAgBD,SAAhB,EAA2B;AACvBJ,QAAAA,OAAO,CAACM,IAAR,CAAa;AAAEtB,UAAAA,QAAQ,EAAEqB,CAAZ;AAAepB,UAAAA,KAAK,EAAEgB,CAAC,CAAChB;AAAxB,SAAb;AACH;AACJ,KAND,MAOK,IAAIgB,CAAC,CAACjB,QAAN,EAAgB;AACjBgB,MAAAA,OAAO,CAACM,IAAR,CAAaL,CAAb;AACH,KAFI,MAGA;AACD,YAAM,IAAI1B,OAAO,CAACgC,aAAZ,CAA0B,8DAA1B,CAAN;AACH;AACJ;;AACD,SAAOP,OAAP;AACH;;AACD7B,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRulesConfig = exports.normalizeRulesConfig = void 0;\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nfunction normalizeRulesConfig(rulesConfig, options) {\n    const config = options.config;\n    return rulesConfig.map((rc) => {\n        return {\n            instance: rc.instance,\n            rules: config.path(rc.rules),\n        };\n    });\n}\nexports.normalizeRulesConfig = normalizeRulesConfig;\nfunction getRulesConfig(projectId, options) {\n    const dbConfig = options.config.src.database;\n    if (dbConfig === undefined) {\n        return [];\n    }\n    if (!Array.isArray(dbConfig)) {\n        if (dbConfig && dbConfig.rules) {\n            utils.assertIsStringOrUndefined(options.instance);\n            const instance = options.instance || `${options.project}-default-rtdb`;\n            return [{ rules: dbConfig.rules, instance }];\n        }\n        else {\n            logger_1.logger.debug(\"Possibly invalid database config: \", JSON.stringify(dbConfig));\n            return [];\n        }\n    }\n    const results = [];\n    const rc = options.rc;\n    for (const c of dbConfig) {\n        if (c.target) {\n            rc.requireTarget(projectId, \"database\", c.target);\n            const instances = rc.target(projectId, \"database\", c.target);\n            for (const i of instances) {\n                results.push({ instance: i, rules: c.rules });\n            }\n        }\n        else if (c.instance) {\n            results.push(c);\n        }\n        else {\n            throw new error_1.FirebaseError('Must supply either \"target\" or \"instance\" in database config');\n        }\n    }\n    return results;\n}\nexports.getRulesConfig = getRulesConfig;\n"]},"metadata":{},"sourceType":"script"}