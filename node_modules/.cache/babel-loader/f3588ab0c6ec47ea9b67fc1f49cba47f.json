{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deploy = void 0;\n\nconst uploader_1 = require(\"./uploader\");\n\nconst detectProjectRoot_1 = require(\"../../detectProjectRoot\");\n\nconst listFiles_1 = require(\"../../listFiles\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst track = require(\"../../track\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst clc = require(\"cli-color\");\n\nconst SPINNER = [\"⠋\", \"⠙\", \"⠹\", \"⠸\", \"⠼\", \"⠴\", \"⠦\", \"⠧\", \"⠇\", \"⠏\"];\nconst _ERASE_LINE = \"\\x1b[2K\";\n\nasync function deploy(context, options) {\n  var _a, _b;\n\n  if (!((_a = context.hosting) === null || _a === void 0 ? void 0 : _a.deploys)) {\n    return;\n  }\n\n  let spins = 0;\n\n  function updateSpinner(newMessage, debugging) {\n    if (debugging) {\n      utils_1.logLabeledBullet(\"hosting\", newMessage);\n    } else {\n      process.stdout.write(_ERASE_LINE + clc.move(-9999, 0));\n      process.stdout.write(clc.bold.cyan(SPINNER[spins % SPINNER.length] + \"  hosting: \") + newMessage);\n    }\n\n    spins++;\n  }\n\n  async function runDeploys(deploys, debugging) {\n    var _a;\n\n    const deploy = deploys.shift();\n\n    if (!deploy) {\n      return;\n    }\n\n    if (!((_a = deploy.config) === null || _a === void 0 ? void 0 : _a.public)) {\n      utils_1.logLabeledBullet(`hosting[${deploy.site}]`, 'no \"public\" directory to upload, continuing with release');\n      return runDeploys(deploys, debugging);\n    }\n\n    utils_1.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"beginning deploy...\");\n    const t0 = Date.now();\n    const publicDir = options.config.path(deploy.config.public);\n    const files = listFiles_1.listFiles(publicDir, deploy.config.ignore);\n    utils_1.logLabeledBullet(`hosting[${deploy.site}]`, `found ${files.length} files in ${clc.bold(deploy.config.public)}`);\n    const uploader = new uploader_1.Uploader({\n      version: deploy.version,\n      files: files,\n      public: publicDir,\n      cwd: options.cwd,\n      projectRoot: detectProjectRoot_1.detectProjectRoot(options)\n    });\n    const progressInterval = setInterval(() => updateSpinner(uploader.statusMessage(), debugging), debugging ? 2000 : 200);\n\n    try {\n      await uploader.start();\n    } catch (err) {\n      track(\"Hosting Deploy\", \"failure\");\n      throw err;\n    } finally {\n      clearInterval(progressInterval);\n    }\n\n    if (!debugging) {\n      process.stdout.write(_ERASE_LINE + clc.move(-9999, 0));\n    }\n\n    utils_1.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"file upload complete\");\n    const dt = Date.now() - t0;\n    logger_1.logger.debug(\"[hosting] deploy completed after \" + dt + \"ms\");\n    track(\"Hosting Deploy\", \"success\", dt);\n    return runDeploys(deploys, debugging);\n  }\n\n  const debugging = !!(options.debug || options.nonInteractive);\n  const deploys = [...(((_b = context.hosting) === null || _b === void 0 ? void 0 : _b.deploys) || [])];\n  return runDeploys(deploys, debugging);\n}\n\nexports.deploy = deploy;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/hosting/deploy.js"],"names":["Object","defineProperty","exports","value","deploy","uploader_1","require","detectProjectRoot_1","listFiles_1","logger_1","track","utils_1","clc","SPINNER","_ERASE_LINE","context","options","_a","_b","hosting","deploys","spins","updateSpinner","newMessage","debugging","logLabeledBullet","process","stdout","write","move","bold","cyan","length","runDeploys","shift","config","public","site","t0","Date","now","publicDir","path","files","listFiles","ignore","uploader","Uploader","version","cwd","projectRoot","detectProjectRoot","progressInterval","setInterval","statusMessage","start","err","clearInterval","logLabeledSuccess","dt","logger","debug","nonInteractive"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deploy = void 0;\nconst uploader_1 = require(\"./uploader\");\nconst detectProjectRoot_1 = require(\"../../detectProjectRoot\");\nconst listFiles_1 = require(\"../../listFiles\");\nconst logger_1 = require(\"../../logger\");\nconst track = require(\"../../track\");\nconst utils_1 = require(\"../../utils\");\nconst clc = require(\"cli-color\");\nconst SPINNER = [\"⠋\", \"⠙\", \"⠹\", \"⠸\", \"⠼\", \"⠴\", \"⠦\", \"⠧\", \"⠇\", \"⠏\"];\nconst _ERASE_LINE = \"\\x1b[2K\";\nasync function deploy(context, options) {\n    var _a, _b;\n    if (!((_a = context.hosting) === null || _a === void 0 ? void 0 : _a.deploys)) {\n        return;\n    }\n    let spins = 0;\n    function updateSpinner(newMessage, debugging) {\n        if (debugging) {\n            utils_1.logLabeledBullet(\"hosting\", newMessage);\n        }\n        else {\n            process.stdout.write(_ERASE_LINE + clc.move(-9999, 0));\n            process.stdout.write(clc.bold.cyan(SPINNER[spins % SPINNER.length] + \"  hosting: \") + newMessage);\n        }\n        spins++;\n    }\n    async function runDeploys(deploys, debugging) {\n        var _a;\n        const deploy = deploys.shift();\n        if (!deploy) {\n            return;\n        }\n        if (!((_a = deploy.config) === null || _a === void 0 ? void 0 : _a.public)) {\n            utils_1.logLabeledBullet(`hosting[${deploy.site}]`, 'no \"public\" directory to upload, continuing with release');\n            return runDeploys(deploys, debugging);\n        }\n        utils_1.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"beginning deploy...\");\n        const t0 = Date.now();\n        const publicDir = options.config.path(deploy.config.public);\n        const files = listFiles_1.listFiles(publicDir, deploy.config.ignore);\n        utils_1.logLabeledBullet(`hosting[${deploy.site}]`, `found ${files.length} files in ${clc.bold(deploy.config.public)}`);\n        const uploader = new uploader_1.Uploader({\n            version: deploy.version,\n            files: files,\n            public: publicDir,\n            cwd: options.cwd,\n            projectRoot: detectProjectRoot_1.detectProjectRoot(options),\n        });\n        const progressInterval = setInterval(() => updateSpinner(uploader.statusMessage(), debugging), debugging ? 2000 : 200);\n        try {\n            await uploader.start();\n        }\n        catch (err) {\n            track(\"Hosting Deploy\", \"failure\");\n            throw err;\n        }\n        finally {\n            clearInterval(progressInterval);\n        }\n        if (!debugging) {\n            process.stdout.write(_ERASE_LINE + clc.move(-9999, 0));\n        }\n        utils_1.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"file upload complete\");\n        const dt = Date.now() - t0;\n        logger_1.logger.debug(\"[hosting] deploy completed after \" + dt + \"ms\");\n        track(\"Hosting Deploy\", \"success\", dt);\n        return runDeploys(deploys, debugging);\n    }\n    const debugging = !!(options.debug || options.nonInteractive);\n    const deploys = [...(((_b = context.hosting) === null || _b === void 0 ? void 0 : _b.deploys) || [])];\n    return runDeploys(deploys, debugging);\n}\nexports.deploy = deploy;\n"]},"metadata":{},"sourceType":"script"}