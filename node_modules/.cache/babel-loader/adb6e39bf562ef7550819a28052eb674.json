{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionsEmulator = void 0;\n\nconst _ = require(\"lodash\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst express = require(\"express\");\n\nconst clc = require(\"cli-color\");\n\nconst http = require(\"http\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst api = require(\"../api\");\n\nconst logger_1 = require(\"../logger\");\n\nconst track = require(\"../track\");\n\nconst constants_1 = require(\"./constants\");\n\nconst types_1 = require(\"./types\");\n\nconst chokidar = require(\"chokidar\");\n\nconst spawn = require(\"cross-spawn\");\n\nconst child_process_1 = require(\"child_process\");\n\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\n\nconst registry_1 = require(\"./registry\");\n\nconst events_1 = require(\"events\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst functionsRuntimeWorker_1 = require(\"./functionsRuntimeWorker\");\n\nconst error_1 = require(\"../error\");\n\nconst workQueue_1 = require(\"./workQueue\");\n\nconst utils_1 = require(\"../utils\");\n\nconst defaultCredentials_1 = require(\"../defaultCredentials\");\n\nconst adminSdkConfig_1 = require(\"./adminSdkConfig\");\n\nconst EVENT_INVOKE = \"functions:invoke\";\nconst DATABASE_PATH_PATTERN = new RegExp(\"^projects/[^/]+/instances/([^/]+)/refs(/.*)$\");\n\nclass FunctionsEmulator {\n  constructor(args) {\n    this.args = args;\n    this.nodeBinary = \"\";\n    this.triggers = {};\n    this.triggerGeneration = 0;\n    this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS);\n    this.multicastTriggers = {};\n    emulatorLogger_1.EmulatorLogger.verbosity = this.args.quiet ? emulatorLogger_1.Verbosity.QUIET : emulatorLogger_1.Verbosity.DEBUG;\n\n    if (this.args.debugPort) {\n      this.args.disabledRuntimeFeatures = this.args.disabledRuntimeFeatures || {};\n      this.args.disabledRuntimeFeatures.timeout = true;\n    }\n\n    this.adminSdkConfig = {\n      projectId: this.args.projectId\n    };\n    const mode = this.args.debugPort ? types_1.FunctionsExecutionMode.SEQUENTIAL : types_1.FunctionsExecutionMode.AUTO;\n    this.workerPool = new functionsRuntimeWorker_1.RuntimeWorkerPool(mode);\n    this.workQueue = new workQueue_1.WorkQueue(mode);\n  }\n\n  static getHttpFunctionUrl(host, port, projectId, name, region) {\n    return `http://${host}:${port}/${projectId}/${region}/${name}`;\n  }\n\n  async getCredentialsEnvironment() {\n    const credentialEnv = {};\n\n    if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n      this.logger.logLabeled(\"WARN\", \"functions\", `Your GOOGLE_APPLICATION_CREDENTIALS environment variable points to ${process.env.GOOGLE_APPLICATION_CREDENTIALS}. Non-emulated services will access production using these credentials. Be careful!`);\n    } else if (this.args.account) {\n      const defaultCredPath = await defaultCredentials_1.getCredentialPathAsync(this.args.account);\n\n      if (defaultCredPath) {\n        this.logger.log(\"DEBUG\", `Setting GAC to ${defaultCredPath}`);\n        credentialEnv.GOOGLE_APPLICATION_CREDENTIALS = defaultCredPath;\n      }\n    } else {\n      this.logger.logLabeled(\"WARN\", \"functions\", \"You are not signed in to the Firebase CLI. If you have authorized this machine using gcloud application-default credentials those may be discovered and used to access production services.\");\n    }\n\n    return credentialEnv;\n  }\n\n  createHubServer() {\n    this.workQueue.start();\n    const hub = express();\n\n    const dataMiddleware = (req, res, next) => {\n      const chunks = [];\n      req.on(\"data\", chunk => {\n        chunks.push(chunk);\n      });\n      req.on(\"end\", () => {\n        req.rawBody = Buffer.concat(chunks);\n        next();\n      });\n    };\n\n    const backgroundFunctionRoute = `/functions/projects/:project_id/triggers/:trigger_name`;\n    const httpsFunctionRoute = `/${this.args.projectId}/:region/:trigger_name`;\n    const multicastFunctionRoute = `/functions/projects/:project_id/trigger_multicast`;\n    const httpsFunctionRoutes = [httpsFunctionRoute, `${httpsFunctionRoute}/*`];\n\n    const backgroundHandler = (req, res) => {\n      const region = req.params.region;\n      const triggerId = req.params.trigger_name;\n      const projectId = req.params.project_id;\n      const reqBody = req.rawBody;\n      const proto = JSON.parse(reqBody.toString());\n      this.workQueue.submit(() => {\n        this.logger.log(\"DEBUG\", `Accepted request ${req.method} ${req.url} --> ${triggerId}`);\n        return this.handleBackgroundTrigger(projectId, triggerId, proto).then(x => res.json(x)).catch(errorBundle => {\n          if (errorBundle.body) {\n            res.status(errorBundle.code).send(errorBundle.body);\n          } else {\n            res.sendStatus(errorBundle.code);\n          }\n        });\n      });\n    };\n\n    const httpsHandler = (req, res) => {\n      this.workQueue.submit(() => {\n        return this.handleHttpsTrigger(req, res);\n      });\n    };\n\n    const multicastHandler = (req, res) => {\n      const reqBody = req.rawBody;\n      const proto = JSON.parse(reqBody.toString());\n      const triggers = this.multicastTriggers[`${this.args.projectId}:${proto.eventType}`] || [];\n      const projectId = req.params.project_id;\n      triggers.forEach(triggerId => {\n        this.workQueue.submit(() => {\n          this.logger.log(\"DEBUG\", `Accepted multicast request ${req.method} ${req.url} --> ${triggerId}`);\n          return this.handleBackgroundTrigger(projectId, triggerId, proto);\n        });\n      });\n      res.json({\n        status: \"multicast_acknowledged\"\n      });\n    };\n\n    hub.post(backgroundFunctionRoute, dataMiddleware, backgroundHandler);\n    hub.post(multicastFunctionRoute, dataMiddleware, multicastHandler);\n    hub.all(httpsFunctionRoutes, dataMiddleware, httpsHandler);\n    hub.all(\"*\", dataMiddleware, (req, res) => {\n      logger_1.logger.debug(`Functions emulator received unknown request at path ${req.path}`);\n      res.sendStatus(404);\n    });\n    return hub;\n  }\n\n  startFunctionRuntime(triggerId, targetName, triggerType, proto, runtimeOpts) {\n    const bundleTemplate = this.getBaseBundle();\n    const runtimeBundle = Object.assign(Object.assign({}, bundleTemplate), {\n      emulators: {\n        firestore: this.getEmulatorInfo(types_1.Emulators.FIRESTORE),\n        database: this.getEmulatorInfo(types_1.Emulators.DATABASE),\n        pubsub: this.getEmulatorInfo(types_1.Emulators.PUBSUB),\n        auth: this.getEmulatorInfo(types_1.Emulators.AUTH),\n        storage: this.getEmulatorInfo(types_1.Emulators.STORAGE)\n      },\n      nodeMajorVersion: this.args.nodeMajorVersion,\n      proto,\n      triggerId,\n      targetName,\n      triggerType\n    });\n    const opts = runtimeOpts || {\n      nodeBinary: this.nodeBinary,\n      env: this.args.env,\n      extensionTriggers: this.args.predefinedTriggers\n    };\n    const worker = this.invokeRuntime(runtimeBundle, opts);\n    return worker;\n  }\n\n  async start() {\n    this.nodeBinary = this.askInstallNodeVersion(this.args.functionsDir, this.args.nodeMajorVersion);\n    const credentialEnv = await this.getCredentialsEnvironment();\n    this.args.env = Object.assign(Object.assign({}, credentialEnv), this.args.env);\n    const adminSdkConfig = await adminSdkConfig_1.getProjectAdminSdkConfigOrCached(this.args.projectId);\n\n    if (adminSdkConfig) {\n      this.adminSdkConfig = adminSdkConfig;\n    } else {\n      this.logger.logLabeled(\"WARN\", \"functions\", \"Unable to fetch project Admin SDK configuration, Admin SDK behavior in Cloud Functions emulator may be incorrect.\");\n      this.adminSdkConfig = adminSdkConfig_1.constructDefaultAdminSdkConfig(this.args.projectId);\n    }\n\n    const {\n      host,\n      port\n    } = this.getInfo();\n    this.workQueue.start();\n    const server = this.createHubServer().listen(port, host);\n    this.destroyServer = utils_1.createDestroyer(server);\n    return Promise.resolve();\n  }\n\n  async connect() {\n    this.logger.logLabeled(\"BULLET\", \"functions\", `Watching \"${this.args.functionsDir}\" for Cloud Functions...`);\n    const watcher = chokidar.watch(this.args.functionsDir, {\n      ignored: [/.+?[\\\\\\/]node_modules[\\\\\\/].+?/, /(^|[\\/\\\\])\\../, /.+\\.log/],\n      persistent: true\n    });\n\n    const debouncedLoadTriggers = _.debounce(() => this.loadTriggers(), 1000);\n\n    watcher.on(\"change\", filePath => {\n      this.logger.log(\"DEBUG\", `File ${filePath} changed, reloading triggers`);\n      return debouncedLoadTriggers();\n    });\n    return this.loadTriggers(true);\n  }\n\n  async stop() {\n    try {\n      await this.workQueue.flush();\n    } catch (e) {\n      this.logger.logLabeled(\"WARN\", \"functions\", \"Functions emulator work queue did not empty before stopping\");\n    }\n\n    this.workQueue.stop();\n    this.workerPool.exit();\n\n    if (this.destroyServer) {\n      await this.destroyServer();\n    }\n  }\n\n  async loadTriggers(force = false) {\n    this.workerPool.refresh();\n    const worker = this.invokeRuntime(this.getBaseBundle(), {\n      nodeBinary: this.nodeBinary,\n      env: this.args.env,\n      extensionTriggers: this.args.predefinedTriggers\n    });\n    const triggerParseEvent = await types_1.EmulatorLog.waitForLog(worker.runtime.events, \"SYSTEM\", \"triggers-parsed\");\n    const parsedDefinitions = triggerParseEvent.data.triggerDefinitions;\n    const triggerDefinitions = functionsEmulatorShared_1.emulatedFunctionsByRegion(parsedDefinitions);\n    const toSetup = triggerDefinitions.filter(definition => {\n      if (force) {\n        return true;\n      }\n\n      const anyEnabledMatch = Object.values(this.triggers).some(record => {\n        const sameEntryPoint = record.def.entryPoint === definition.entryPoint;\n        const sameEventTrigger = JSON.stringify(record.def.eventTrigger) === JSON.stringify(definition.eventTrigger);\n\n        if (sameEntryPoint && !sameEventTrigger) {\n          this.logger.log(\"DEBUG\", `Definition for trigger ${definition.entryPoint} changed from ${JSON.stringify(record.def.eventTrigger)} to ${JSON.stringify(definition.eventTrigger)}`);\n        }\n\n        return record.enabled && sameEntryPoint && sameEventTrigger;\n      });\n      return !anyEnabledMatch;\n    });\n\n    for (const definition of toSetup) {\n      let added = false;\n      let url = undefined;\n\n      if (definition.httpsTrigger) {\n        const {\n          host,\n          port\n        } = this.getInfo();\n        added = true;\n        url = FunctionsEmulator.getHttpFunctionUrl(host, port, this.args.projectId, definition.name, definition.region);\n      } else if (definition.eventTrigger) {\n        const service = functionsEmulatorShared_1.getFunctionService(definition);\n        const key = this.getTriggerKey(definition);\n\n        switch (service) {\n          case constants_1.Constants.SERVICE_FIRESTORE:\n            added = await this.addFirestoreTrigger(this.args.projectId, key, definition.eventTrigger);\n            break;\n\n          case constants_1.Constants.SERVICE_REALTIME_DATABASE:\n            added = await this.addRealtimeDatabaseTrigger(this.args.projectId, key, definition.eventTrigger);\n            break;\n\n          case constants_1.Constants.SERVICE_PUBSUB:\n            added = await this.addPubsubTrigger(definition.name, key, definition.eventTrigger, definition.schedule);\n            break;\n\n          case constants_1.Constants.SERVICE_AUTH:\n            added = this.addAuthTrigger(this.args.projectId, key, definition.eventTrigger);\n            break;\n\n          case constants_1.Constants.SERVICE_STORAGE:\n            added = this.addStorageTrigger(this.args.projectId, key, definition.eventTrigger);\n            break;\n\n          default:\n            this.logger.log(\"DEBUG\", `Unsupported trigger: ${JSON.stringify(definition)}`);\n            break;\n        }\n      } else {\n        this.logger.log(\"WARN\", `Trigger trigger \"${definition.name}\" has has neither \"httpsTrigger\" or \"eventTrigger\" member`);\n      }\n\n      const ignored = !added;\n      this.addTriggerRecord(definition, {\n        ignored,\n        url\n      });\n      const type = definition.httpsTrigger ? \"http\" : constants_1.Constants.getServiceName(functionsEmulatorShared_1.getFunctionService(definition));\n\n      if (ignored) {\n        const msg = `function ignored because the ${type} emulator does not exist or is not running.`;\n        this.logger.logLabeled(\"BULLET\", `functions[${definition.id}]`, msg);\n      } else {\n        const msg = url ? `${clc.bold(type)} function initialized (${url}).` : `${clc.bold(type)} function initialized.`;\n        this.logger.logLabeled(\"SUCCESS\", `functions[${definition.id}]`, msg);\n      }\n    }\n  }\n\n  addRealtimeDatabaseTrigger(projectId, key, eventTrigger) {\n    const databaseEmu = registry_1.EmulatorRegistry.get(types_1.Emulators.DATABASE);\n\n    if (!databaseEmu) {\n      return Promise.resolve(false);\n    }\n\n    const result = DATABASE_PATH_PATTERN.exec(eventTrigger.resource);\n\n    if (result === null || result.length !== 3) {\n      this.logger.log(\"WARN\", `Event trigger \"${key}\" has malformed \"resource\" member. ` + `${eventTrigger.resource}`);\n      return Promise.reject();\n    }\n\n    const instance = result[1];\n    const bundle = JSON.stringify({\n      name: `projects/${projectId}/locations/_/functions/${key}`,\n      path: result[2],\n      event: eventTrigger.eventType,\n      topic: `projects/${projectId}/topics/${key}`\n    });\n    logger_1.logger.debug(`addRealtimeDatabaseTrigger[${instance}]`, JSON.stringify(bundle));\n    let setTriggersPath = \"/.settings/functionTriggers.json\";\n\n    if (instance !== \"\") {\n      setTriggersPath += `?ns=${instance}`;\n    } else {\n      this.logger.log(\"WARN\", `No project in use. Registering function trigger for sentinel namespace '${constants_1.Constants.DEFAULT_DATABASE_EMULATOR_NAMESPACE}'`);\n    }\n\n    return api.request(\"POST\", setTriggersPath, {\n      origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(databaseEmu.getInfo())}`,\n      headers: {\n        Authorization: \"Bearer owner\"\n      },\n      data: bundle,\n      json: false\n    }).then(() => {\n      return true;\n    }).catch(err => {\n      this.logger.log(\"WARN\", \"Error adding trigger: \" + err);\n      throw err;\n    });\n  }\n\n  addFirestoreTrigger(projectId, key, eventTrigger) {\n    const firestoreEmu = registry_1.EmulatorRegistry.get(types_1.Emulators.FIRESTORE);\n\n    if (!firestoreEmu) {\n      return Promise.resolve(false);\n    }\n\n    const bundle = JSON.stringify({\n      eventTrigger\n    });\n    logger_1.logger.debug(`addFirestoreTrigger`, JSON.stringify(bundle));\n    return api.request(\"PUT\", `/emulator/v1/projects/${projectId}/triggers/${key}`, {\n      origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(firestoreEmu.getInfo())}`,\n      data: bundle,\n      json: false\n    }).then(() => {\n      return true;\n    }).catch(err => {\n      this.logger.log(\"WARN\", \"Error adding trigger: \" + err);\n      throw err;\n    });\n  }\n\n  async addPubsubTrigger(triggerName, key, eventTrigger, schedule) {\n    const pubsubPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB);\n\n    if (!pubsubPort) {\n      return false;\n    }\n\n    const pubsubEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.PUBSUB);\n    logger_1.logger.debug(`addPubsubTrigger`, JSON.stringify({\n      eventTrigger\n    }));\n    const resource = eventTrigger.resource;\n    let topic;\n\n    if (schedule) {\n      topic = \"firebase-schedule-\" + triggerName;\n    } else {\n      const resourceParts = resource.split(\"/\");\n      topic = resourceParts[resourceParts.length - 1];\n    }\n\n    try {\n      await pubsubEmulator.addTrigger(topic, key);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  addAuthTrigger(projectId, key, eventTrigger) {\n    logger_1.logger.debug(`addAuthTrigger`, JSON.stringify({\n      eventTrigger\n    }));\n    const eventTriggerId = `${projectId}:${eventTrigger.eventType}`;\n    const triggers = this.multicastTriggers[eventTriggerId] || [];\n    triggers.push(key);\n    this.multicastTriggers[eventTriggerId] = triggers;\n    return true;\n  }\n\n  addStorageTrigger(projectId, key, eventTrigger) {\n    logger_1.logger.debug(`addStorageTrigger`, JSON.stringify({\n      eventTrigger\n    }));\n    const eventTriggerId = `${projectId}:${eventTrigger.eventType}`;\n    const triggers = this.multicastTriggers[eventTriggerId] || [];\n    triggers.push(key);\n    this.multicastTriggers[eventTriggerId] = triggers;\n    return true;\n  }\n\n  getProjectId() {\n    return this.args.projectId;\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FUNCTIONS);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FUNCTIONS);\n    return {\n      name: this.getName(),\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.FUNCTIONS;\n  }\n\n  getTriggerDefinitions() {\n    return Object.values(this.triggers).map(record => record.def);\n  }\n\n  getTriggerDefinitionByKey(triggerKey) {\n    const record = this.triggers[triggerKey];\n\n    if (!record) {\n      logger_1.logger.debug(`Could not find key=${triggerKey} in ${JSON.stringify(this.triggers)}`);\n      throw new error_1.FirebaseError(`No trigger with key ${triggerKey}`);\n    }\n\n    return record.def;\n  }\n\n  getTriggerKey(def) {\n    return def.eventTrigger ? `${def.id}-${this.triggerGeneration}` : def.id;\n  }\n\n  addTriggerRecord(def, opts) {\n    const key = this.getTriggerKey(def);\n    this.triggers[key] = {\n      def,\n      enabled: true,\n      ignored: opts.ignored,\n      url: opts.url\n    };\n  }\n\n  setTriggersForTesting(triggers) {\n    triggers.forEach(def => this.addTriggerRecord(def, {\n      ignored: false\n    }));\n  }\n\n  getBaseBundle() {\n    return {\n      cwd: this.args.functionsDir,\n      projectId: this.args.projectId,\n      triggerId: \"\",\n      targetName: \"\",\n      triggerType: undefined,\n      emulators: {\n        firestore: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.FIRESTORE),\n        database: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.DATABASE),\n        pubsub: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.PUBSUB),\n        auth: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.AUTH),\n        storage: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE)\n      },\n      adminSdkConfig: {\n        databaseURL: this.adminSdkConfig.databaseURL,\n        storageBucket: this.adminSdkConfig.storageBucket\n      },\n      disabled_features: this.args.disabledRuntimeFeatures\n    };\n  }\n\n  getRequestedNodeRuntimeVersion(frb) {\n    const pkg = require(path.join(frb.cwd, \"package.json\"));\n\n    return frb.nodeMajorVersion || pkg.engines && pkg.engines.node;\n  }\n\n  askInstallNodeVersion(cwd, nodeMajorVersion) {\n    const pkg = require(path.join(cwd, \"package.json\"));\n\n    if ((!pkg.engines || !pkg.engines.node) && !nodeMajorVersion) {\n      this.logger.log(\"WARN\", \"Your functions directory does not specify a Node version.\\n   \" + \"- Learn more at https://firebase.google.com/docs/functions/manage-functions#set_runtime_options\");\n      return process.execPath;\n    }\n\n    const hostMajorVersion = process.versions.node.split(\".\")[0];\n    const requestedMajorVersion = nodeMajorVersion ? `${nodeMajorVersion}` : pkg.engines.node;\n    let localMajorVersion = \"0\";\n    const localNodePath = path.join(cwd, \"node_modules/.bin/node\");\n\n    try {\n      const localNodeOutput = child_process_1.spawnSync(localNodePath, [\"--version\"]).stdout.toString();\n      localMajorVersion = localNodeOutput.slice(1).split(\".\")[0];\n    } catch (err) {}\n\n    if (requestedMajorVersion === localMajorVersion) {\n      this.logger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from local cache.`);\n      return localNodePath;\n    }\n\n    if (requestedMajorVersion === hostMajorVersion) {\n      this.logger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from host.`);\n      return process.execPath;\n    }\n\n    this.logger.log(\"WARN\", `Your requested \"node\" version \"${requestedMajorVersion}\" doesn't match your global version \"${hostMajorVersion}\"`);\n    return process.execPath;\n  }\n\n  invokeRuntime(frb, opts) {\n    if (this.workerPool.readyForWork(frb.triggerId)) {\n      return this.workerPool.submitWork(frb.triggerId, frb, opts);\n    }\n\n    const emitter = new events_1.EventEmitter();\n    const args = [path.join(__dirname, \"functionsEmulatorRuntime\")];\n\n    if (opts.ignore_warnings) {\n      args.unshift(\"--no-warnings\");\n    }\n\n    if (this.args.debugPort) {\n      if (process.env.FIREPIT_VERSION && process.execPath == opts.nodeBinary) {\n        const requestedMajorNodeVersion = this.getRequestedNodeRuntimeVersion(frb);\n        this.logger.log(\"WARN\", `To enable function inspection, please run \"${process.execPath} is:npm i node@${requestedMajorNodeVersion} --save-dev\" in your functions directory`);\n      } else {\n        const {\n          host\n        } = this.getInfo();\n        args.unshift(`--inspect=${host}:${this.args.debugPort}`);\n      }\n    }\n\n    const pnpPath = path.join(frb.cwd, \".pnp.js\");\n\n    if (fs.existsSync(pnpPath)) {\n      emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS).logLabeled(\"WARN_ONCE\", \"functions\", \"Detected yarn@2 with PnP. \" + \"Cloud Functions for Firebase requires a node_modules folder to work correctly and is therefore incompatible with PnP. \" + \"See https://yarnpkg.com/getting-started/migration#step-by-step for more information.\");\n    }\n\n    const childProcess = spawn(opts.nodeBinary, args, {\n      env: Object.assign(Object.assign({\n        node: opts.nodeBinary\n      }, opts.env), process.env),\n      cwd: frb.cwd,\n      stdio: [\"pipe\", \"pipe\", \"pipe\", \"ipc\"]\n    });\n    const buffers = {\n      stderr: {\n        pipe: childProcess.stderr,\n        value: \"\"\n      },\n      stdout: {\n        pipe: childProcess.stdout,\n        value: \"\"\n      }\n    };\n    const ipcBuffer = {\n      value: \"\"\n    };\n    childProcess.on(\"message\", message => {\n      this.onData(childProcess, emitter, ipcBuffer, message);\n    });\n\n    for (const id in buffers) {\n      if (buffers.hasOwnProperty(id)) {\n        const buffer = buffers[id];\n        buffer.pipe.on(\"data\", buf => {\n          this.onData(childProcess, emitter, buffer, buf);\n        });\n      }\n    }\n\n    const runtime = {\n      pid: childProcess.pid,\n      exit: new Promise(resolve => {\n        childProcess.on(\"exit\", resolve);\n      }),\n      events: emitter,\n      shutdown: () => {\n        childProcess.kill();\n      },\n      kill: signal => {\n        childProcess.kill(signal);\n        emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n      },\n      send: args => {\n        return childProcess.send(JSON.stringify(args));\n      }\n    };\n    this.workerPool.addWorker(frb.triggerId, runtime);\n    return this.workerPool.submitWork(frb.triggerId, frb, opts);\n  }\n\n  async disableBackgroundTriggers() {\n    Object.values(this.triggers).forEach(record => {\n      if (record.def.eventTrigger && record.enabled) {\n        this.logger.logLabeled(\"BULLET\", `functions[${record.def.entryPoint}]`, \"function temporarily disabled.\");\n        record.enabled = false;\n      }\n    });\n    await this.workQueue.flush();\n  }\n\n  async reloadTriggers() {\n    this.triggerGeneration++;\n    return this.loadTriggers();\n  }\n\n  async handleBackgroundTrigger(projectId, triggerKey, proto) {\n    const record = this.triggers[triggerKey];\n\n    if (record && !record.enabled) {\n      return Promise.reject({\n        code: 204,\n        body: \"Background triggers are curently disabled.\"\n      });\n    }\n\n    const trigger = this.getTriggerDefinitionByKey(triggerKey);\n    const service = functionsEmulatorShared_1.getFunctionService(trigger);\n    const worker = this.startFunctionRuntime(trigger.id, trigger.name, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n    return new Promise((resolve, reject) => {\n      if (projectId !== this.args.projectId) {\n        if (service !== constants_1.Constants.SERVICE_REALTIME_DATABASE) {\n          logger_1.logger.debug(`Received functions trigger for service \"${service}\" for unknown project \"${projectId}\".`);\n          reject({\n            code: 404\n          });\n          return;\n        }\n\n        if (!trigger.eventTrigger.resource.startsWith(`projects/_/instances/${projectId}`)) {\n          logger_1.logger.debug(`Received functions trigger for function \"${trigger.name}\" of project \"${projectId}\" that did not match definition: ${JSON.stringify(trigger)}.`);\n          reject({\n            code: 404\n          });\n          return;\n        }\n      }\n\n      worker.onLogs(el => {\n        if (el.level === \"FATAL\") {\n          reject({\n            code: 500,\n            body: el.text\n          });\n        }\n      });\n      track(EVENT_INVOKE, functionsEmulatorShared_1.getFunctionService(trigger));\n      worker.waitForDone().then(() => {\n        resolve({\n          status: \"acknowledged\"\n        });\n      });\n    });\n  }\n\n  getEmulatorInfo(emulator) {\n    if (this.args.remoteEmulators) {\n      if (this.args.remoteEmulators[emulator]) {\n        return this.args.remoteEmulators[emulator];\n      }\n    }\n\n    return registry_1.EmulatorRegistry.getInfo(emulator);\n  }\n\n  tokenFromAuthHeader(authHeader) {\n    const match = authHeader.match(/^Bearer (.*)$/);\n\n    if (!match) {\n      return;\n    }\n\n    let idToken = match[1];\n    logger_1.logger.debug(`ID Token: ${idToken}`);\n\n    if (idToken && idToken.includes(\"=\")) {\n      idToken = idToken.replace(/[=]+?\\./g, \".\");\n      logger_1.logger.debug(`ID Token contained invalid padding, new value: ${idToken}`);\n    }\n\n    try {\n      const decoded = jwt.decode(idToken, {\n        complete: true\n      });\n\n      if (!decoded || typeof decoded !== \"object\") {\n        logger_1.logger.debug(`Failed to decode ID Token: ${decoded}`);\n        return;\n      }\n\n      const claims = decoded.payload;\n      claims.uid = claims.sub;\n      return claims;\n    } catch (e) {\n      return;\n    }\n  }\n\n  async handleHttpsTrigger(req, res) {\n    const method = req.method;\n    const region = req.params.region;\n    const triggerName = req.params.trigger_name;\n    const triggerId = `${region}-${triggerName}`;\n\n    if (!this.triggers[triggerId]) {\n      res.status(404).send(`Function ${triggerId} does not exist, valid triggers are: ${Object.keys(this.triggers).join(\", \")}`);\n      return;\n    }\n\n    const trigger = this.getTriggerDefinitionByKey(triggerId);\n    logger_1.logger.debug(`Accepted request ${method} ${req.url} --> ${triggerId}`);\n    const reqBody = req.rawBody;\n    const isCallable = trigger.labels && trigger.labels[\"deployment-callable\"] === \"true\";\n    const authHeader = req.header(\"Authorization\");\n\n    if (authHeader && isCallable) {\n      const token = this.tokenFromAuthHeader(authHeader);\n\n      if (token) {\n        const contextAuth = {\n          uid: token.uid,\n          token: token\n        };\n        req.headers[functionsEmulatorShared_1.HttpConstants.ORIGINAL_AUTH_HEADER] = req.headers[\"authorization\"];\n        delete req.headers[\"authorization\"];\n        req.headers[functionsEmulatorShared_1.HttpConstants.CALLABLE_AUTH_HEADER] = encodeURIComponent(JSON.stringify(contextAuth));\n      }\n    }\n\n    const worker = this.startFunctionRuntime(trigger.id, trigger.name, functionsEmulatorShared_1.EmulatedTriggerType.HTTPS, undefined);\n    worker.onLogs(el => {\n      if (el.level === \"FATAL\") {\n        res.status(500).send(el.text);\n      }\n    });\n    await worker.waitForSocketReady();\n    track(EVENT_INVOKE, \"https\");\n    this.logger.log(\"DEBUG\", `[functions] Runtime ready! Sending request!`);\n\n    if (!worker.lastArgs) {\n      throw new error_1.FirebaseError(\"Cannot execute on a worker with no arguments\");\n    }\n\n    if (!worker.lastArgs.frb.socketPath) {\n      throw new error_1.FirebaseError(`Cannot execute on a worker without a socketPath: ${JSON.stringify(worker.lastArgs)}`);\n    }\n\n    const url = new URL(`${req.protocol}://${req.hostname}${req.url}`);\n    const path = `${url.pathname}${url.search}`.replace(new RegExp(`\\/${this.args.projectId}\\/[^\\/]*\\/${triggerName}\\/?`), \"/\");\n    this.logger.log(\"DEBUG\", `[functions] Got req.url=${req.url}, mapping to path=${path}`);\n    const runtimeReq = http.request({\n      method,\n      path,\n      headers: req.headers,\n      socketPath: worker.lastArgs.frb.socketPath\n    }, runtimeRes => {\n      function forwardStatusAndHeaders() {\n        res.status(runtimeRes.statusCode || 200);\n\n        if (!res.headersSent) {\n          Object.keys(runtimeRes.headers).forEach(key => {\n            const val = runtimeRes.headers[key];\n\n            if (val) {\n              res.setHeader(key, val);\n            }\n          });\n        }\n      }\n\n      runtimeRes.on(\"data\", buf => {\n        forwardStatusAndHeaders();\n        res.write(buf);\n      });\n      runtimeRes.on(\"close\", () => {\n        forwardStatusAndHeaders();\n        res.end();\n      });\n      runtimeRes.on(\"end\", () => {\n        forwardStatusAndHeaders();\n        res.end();\n      });\n    });\n    runtimeReq.on(\"error\", () => {\n      res.end();\n    });\n\n    if (reqBody) {\n      runtimeReq.write(reqBody);\n      runtimeReq.end();\n    }\n\n    req.pipe(runtimeReq, {\n      end: true\n    }).on(\"error\", () => {\n      res.end();\n    });\n    await worker.waitForDone();\n  }\n\n  onData(runtime, emitter, buffer, buf) {\n    buffer.value += buf.toString();\n    const lines = buffer.value.split(\"\\n\");\n\n    if (lines.length > 1) {\n      lines.slice(0, -1).forEach(line => {\n        const log = types_1.EmulatorLog.fromJSON(line);\n        emitter.emit(\"log\", log);\n\n        if (log.level === \"FATAL\") {\n          emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n          runtime.kill();\n        }\n      });\n    }\n\n    buffer.value = lines[lines.length - 1];\n  }\n\n}\n\nexports.FunctionsEmulator = FunctionsEmulator;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/functionsEmulator.js"],"names":["Object","defineProperty","exports","value","FunctionsEmulator","_","require","fs","path","express","clc","http","jwt","api","logger_1","track","constants_1","types_1","chokidar","spawn","child_process_1","functionsEmulatorShared_1","registry_1","events_1","emulatorLogger_1","functionsRuntimeWorker_1","error_1","workQueue_1","utils_1","defaultCredentials_1","adminSdkConfig_1","EVENT_INVOKE","DATABASE_PATH_PATTERN","RegExp","constructor","args","nodeBinary","triggers","triggerGeneration","logger","EmulatorLogger","forEmulator","Emulators","FUNCTIONS","multicastTriggers","verbosity","quiet","Verbosity","QUIET","DEBUG","debugPort","disabledRuntimeFeatures","timeout","adminSdkConfig","projectId","mode","FunctionsExecutionMode","SEQUENTIAL","AUTO","workerPool","RuntimeWorkerPool","workQueue","WorkQueue","getHttpFunctionUrl","host","port","name","region","getCredentialsEnvironment","credentialEnv","process","env","GOOGLE_APPLICATION_CREDENTIALS","logLabeled","account","defaultCredPath","getCredentialPathAsync","log","createHubServer","start","hub","dataMiddleware","req","res","next","chunks","on","chunk","push","rawBody","Buffer","concat","backgroundFunctionRoute","httpsFunctionRoute","multicastFunctionRoute","httpsFunctionRoutes","backgroundHandler","params","triggerId","trigger_name","project_id","reqBody","proto","JSON","parse","toString","submit","method","url","handleBackgroundTrigger","then","x","json","catch","errorBundle","body","status","code","send","sendStatus","httpsHandler","handleHttpsTrigger","multicastHandler","eventType","forEach","post","all","debug","startFunctionRuntime","targetName","triggerType","runtimeOpts","bundleTemplate","getBaseBundle","runtimeBundle","assign","emulators","firestore","getEmulatorInfo","FIRESTORE","database","DATABASE","pubsub","PUBSUB","auth","AUTH","storage","STORAGE","nodeMajorVersion","opts","extensionTriggers","predefinedTriggers","worker","invokeRuntime","askInstallNodeVersion","functionsDir","getProjectAdminSdkConfigOrCached","constructDefaultAdminSdkConfig","getInfo","server","listen","destroyServer","createDestroyer","Promise","resolve","connect","watcher","watch","ignored","persistent","debouncedLoadTriggers","debounce","loadTriggers","filePath","stop","flush","e","exit","force","refresh","triggerParseEvent","EmulatorLog","waitForLog","runtime","events","parsedDefinitions","data","triggerDefinitions","emulatedFunctionsByRegion","toSetup","filter","definition","anyEnabledMatch","values","some","record","sameEntryPoint","def","entryPoint","sameEventTrigger","stringify","eventTrigger","enabled","added","undefined","httpsTrigger","service","getFunctionService","key","getTriggerKey","Constants","SERVICE_FIRESTORE","addFirestoreTrigger","SERVICE_REALTIME_DATABASE","addRealtimeDatabaseTrigger","SERVICE_PUBSUB","addPubsubTrigger","schedule","SERVICE_AUTH","addAuthTrigger","SERVICE_STORAGE","addStorageTrigger","addTriggerRecord","type","getServiceName","msg","id","bold","databaseEmu","EmulatorRegistry","get","result","exec","resource","length","reject","instance","bundle","event","topic","setTriggersPath","DEFAULT_DATABASE_EMULATOR_NAMESPACE","request","origin","getInfoHostString","headers","Authorization","err","firestoreEmu","triggerName","pubsubPort","getPort","pubsubEmulator","resourceParts","split","addTrigger","eventTriggerId","getProjectId","getDefaultHost","getDefaultPort","getName","getTriggerDefinitions","map","getTriggerDefinitionByKey","triggerKey","FirebaseError","setTriggersForTesting","cwd","databaseURL","storageBucket","disabled_features","getRequestedNodeRuntimeVersion","frb","pkg","join","engines","node","execPath","hostMajorVersion","versions","requestedMajorVersion","localMajorVersion","localNodePath","localNodeOutput","spawnSync","stdout","slice","readyForWork","submitWork","emitter","EventEmitter","__dirname","ignore_warnings","unshift","FIREPIT_VERSION","requestedMajorNodeVersion","pnpPath","existsSync","childProcess","stdio","buffers","stderr","pipe","ipcBuffer","message","onData","hasOwnProperty","buffer","buf","pid","shutdown","kill","signal","emit","addWorker","disableBackgroundTriggers","reloadTriggers","trigger","EmulatedTriggerType","BACKGROUND","startsWith","onLogs","el","level","text","waitForDone","emulator","remoteEmulators","tokenFromAuthHeader","authHeader","match","idToken","includes","replace","decoded","decode","complete","claims","payload","uid","sub","keys","isCallable","labels","header","token","contextAuth","HttpConstants","ORIGINAL_AUTH_HEADER","CALLABLE_AUTH_HEADER","encodeURIComponent","HTTPS","waitForSocketReady","lastArgs","socketPath","URL","protocol","hostname","pathname","search","runtimeReq","runtimeRes","forwardStatusAndHeaders","statusCode","headersSent","val","setHeader","write","end","lines","line","fromJSON"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionsEmulator = void 0;\nconst _ = require(\"lodash\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst clc = require(\"cli-color\");\nconst http = require(\"http\");\nconst jwt = require(\"jsonwebtoken\");\nconst api = require(\"../api\");\nconst logger_1 = require(\"../logger\");\nconst track = require(\"../track\");\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"./types\");\nconst chokidar = require(\"chokidar\");\nconst spawn = require(\"cross-spawn\");\nconst child_process_1 = require(\"child_process\");\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\nconst registry_1 = require(\"./registry\");\nconst events_1 = require(\"events\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst functionsRuntimeWorker_1 = require(\"./functionsRuntimeWorker\");\nconst error_1 = require(\"../error\");\nconst workQueue_1 = require(\"./workQueue\");\nconst utils_1 = require(\"../utils\");\nconst defaultCredentials_1 = require(\"../defaultCredentials\");\nconst adminSdkConfig_1 = require(\"./adminSdkConfig\");\nconst EVENT_INVOKE = \"functions:invoke\";\nconst DATABASE_PATH_PATTERN = new RegExp(\"^projects/[^/]+/instances/([^/]+)/refs(/.*)$\");\nclass FunctionsEmulator {\n    constructor(args) {\n        this.args = args;\n        this.nodeBinary = \"\";\n        this.triggers = {};\n        this.triggerGeneration = 0;\n        this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS);\n        this.multicastTriggers = {};\n        emulatorLogger_1.EmulatorLogger.verbosity = this.args.quiet ? emulatorLogger_1.Verbosity.QUIET : emulatorLogger_1.Verbosity.DEBUG;\n        if (this.args.debugPort) {\n            this.args.disabledRuntimeFeatures = this.args.disabledRuntimeFeatures || {};\n            this.args.disabledRuntimeFeatures.timeout = true;\n        }\n        this.adminSdkConfig = {\n            projectId: this.args.projectId,\n        };\n        const mode = this.args.debugPort\n            ? types_1.FunctionsExecutionMode.SEQUENTIAL\n            : types_1.FunctionsExecutionMode.AUTO;\n        this.workerPool = new functionsRuntimeWorker_1.RuntimeWorkerPool(mode);\n        this.workQueue = new workQueue_1.WorkQueue(mode);\n    }\n    static getHttpFunctionUrl(host, port, projectId, name, region) {\n        return `http://${host}:${port}/${projectId}/${region}/${name}`;\n    }\n    async getCredentialsEnvironment() {\n        const credentialEnv = {};\n        if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n            this.logger.logLabeled(\"WARN\", \"functions\", `Your GOOGLE_APPLICATION_CREDENTIALS environment variable points to ${process.env.GOOGLE_APPLICATION_CREDENTIALS}. Non-emulated services will access production using these credentials. Be careful!`);\n        }\n        else if (this.args.account) {\n            const defaultCredPath = await defaultCredentials_1.getCredentialPathAsync(this.args.account);\n            if (defaultCredPath) {\n                this.logger.log(\"DEBUG\", `Setting GAC to ${defaultCredPath}`);\n                credentialEnv.GOOGLE_APPLICATION_CREDENTIALS = defaultCredPath;\n            }\n        }\n        else {\n            this.logger.logLabeled(\"WARN\", \"functions\", \"You are not signed in to the Firebase CLI. If you have authorized this machine using gcloud application-default credentials those may be discovered and used to access production services.\");\n        }\n        return credentialEnv;\n    }\n    createHubServer() {\n        this.workQueue.start();\n        const hub = express();\n        const dataMiddleware = (req, res, next) => {\n            const chunks = [];\n            req.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            req.on(\"end\", () => {\n                req.rawBody = Buffer.concat(chunks);\n                next();\n            });\n        };\n        const backgroundFunctionRoute = `/functions/projects/:project_id/triggers/:trigger_name`;\n        const httpsFunctionRoute = `/${this.args.projectId}/:region/:trigger_name`;\n        const multicastFunctionRoute = `/functions/projects/:project_id/trigger_multicast`;\n        const httpsFunctionRoutes = [httpsFunctionRoute, `${httpsFunctionRoute}/*`];\n        const backgroundHandler = (req, res) => {\n            const region = req.params.region;\n            const triggerId = req.params.trigger_name;\n            const projectId = req.params.project_id;\n            const reqBody = req.rawBody;\n            const proto = JSON.parse(reqBody.toString());\n            this.workQueue.submit(() => {\n                this.logger.log(\"DEBUG\", `Accepted request ${req.method} ${req.url} --> ${triggerId}`);\n                return this.handleBackgroundTrigger(projectId, triggerId, proto)\n                    .then((x) => res.json(x))\n                    .catch((errorBundle) => {\n                    if (errorBundle.body) {\n                        res.status(errorBundle.code).send(errorBundle.body);\n                    }\n                    else {\n                        res.sendStatus(errorBundle.code);\n                    }\n                });\n            });\n        };\n        const httpsHandler = (req, res) => {\n            this.workQueue.submit(() => {\n                return this.handleHttpsTrigger(req, res);\n            });\n        };\n        const multicastHandler = (req, res) => {\n            const reqBody = req.rawBody;\n            const proto = JSON.parse(reqBody.toString());\n            const triggers = this.multicastTriggers[`${this.args.projectId}:${proto.eventType}`] || [];\n            const projectId = req.params.project_id;\n            triggers.forEach((triggerId) => {\n                this.workQueue.submit(() => {\n                    this.logger.log(\"DEBUG\", `Accepted multicast request ${req.method} ${req.url} --> ${triggerId}`);\n                    return this.handleBackgroundTrigger(projectId, triggerId, proto);\n                });\n            });\n            res.json({ status: \"multicast_acknowledged\" });\n        };\n        hub.post(backgroundFunctionRoute, dataMiddleware, backgroundHandler);\n        hub.post(multicastFunctionRoute, dataMiddleware, multicastHandler);\n        hub.all(httpsFunctionRoutes, dataMiddleware, httpsHandler);\n        hub.all(\"*\", dataMiddleware, (req, res) => {\n            logger_1.logger.debug(`Functions emulator received unknown request at path ${req.path}`);\n            res.sendStatus(404);\n        });\n        return hub;\n    }\n    startFunctionRuntime(triggerId, targetName, triggerType, proto, runtimeOpts) {\n        const bundleTemplate = this.getBaseBundle();\n        const runtimeBundle = Object.assign(Object.assign({}, bundleTemplate), { emulators: {\n                firestore: this.getEmulatorInfo(types_1.Emulators.FIRESTORE),\n                database: this.getEmulatorInfo(types_1.Emulators.DATABASE),\n                pubsub: this.getEmulatorInfo(types_1.Emulators.PUBSUB),\n                auth: this.getEmulatorInfo(types_1.Emulators.AUTH),\n                storage: this.getEmulatorInfo(types_1.Emulators.STORAGE),\n            }, nodeMajorVersion: this.args.nodeMajorVersion, proto,\n            triggerId,\n            targetName,\n            triggerType });\n        const opts = runtimeOpts || {\n            nodeBinary: this.nodeBinary,\n            env: this.args.env,\n            extensionTriggers: this.args.predefinedTriggers,\n        };\n        const worker = this.invokeRuntime(runtimeBundle, opts);\n        return worker;\n    }\n    async start() {\n        this.nodeBinary = this.askInstallNodeVersion(this.args.functionsDir, this.args.nodeMajorVersion);\n        const credentialEnv = await this.getCredentialsEnvironment();\n        this.args.env = Object.assign(Object.assign({}, credentialEnv), this.args.env);\n        const adminSdkConfig = await adminSdkConfig_1.getProjectAdminSdkConfigOrCached(this.args.projectId);\n        if (adminSdkConfig) {\n            this.adminSdkConfig = adminSdkConfig;\n        }\n        else {\n            this.logger.logLabeled(\"WARN\", \"functions\", \"Unable to fetch project Admin SDK configuration, Admin SDK behavior in Cloud Functions emulator may be incorrect.\");\n            this.adminSdkConfig = adminSdkConfig_1.constructDefaultAdminSdkConfig(this.args.projectId);\n        }\n        const { host, port } = this.getInfo();\n        this.workQueue.start();\n        const server = this.createHubServer().listen(port, host);\n        this.destroyServer = utils_1.createDestroyer(server);\n        return Promise.resolve();\n    }\n    async connect() {\n        this.logger.logLabeled(\"BULLET\", \"functions\", `Watching \"${this.args.functionsDir}\" for Cloud Functions...`);\n        const watcher = chokidar.watch(this.args.functionsDir, {\n            ignored: [\n                /.+?[\\\\\\/]node_modules[\\\\\\/].+?/,\n                /(^|[\\/\\\\])\\../,\n                /.+\\.log/,\n            ],\n            persistent: true,\n        });\n        const debouncedLoadTriggers = _.debounce(() => this.loadTriggers(), 1000);\n        watcher.on(\"change\", (filePath) => {\n            this.logger.log(\"DEBUG\", `File ${filePath} changed, reloading triggers`);\n            return debouncedLoadTriggers();\n        });\n        return this.loadTriggers(true);\n    }\n    async stop() {\n        try {\n            await this.workQueue.flush();\n        }\n        catch (e) {\n            this.logger.logLabeled(\"WARN\", \"functions\", \"Functions emulator work queue did not empty before stopping\");\n        }\n        this.workQueue.stop();\n        this.workerPool.exit();\n        if (this.destroyServer) {\n            await this.destroyServer();\n        }\n    }\n    async loadTriggers(force = false) {\n        this.workerPool.refresh();\n        const worker = this.invokeRuntime(this.getBaseBundle(), {\n            nodeBinary: this.nodeBinary,\n            env: this.args.env,\n            extensionTriggers: this.args.predefinedTriggers,\n        });\n        const triggerParseEvent = await types_1.EmulatorLog.waitForLog(worker.runtime.events, \"SYSTEM\", \"triggers-parsed\");\n        const parsedDefinitions = triggerParseEvent.data\n            .triggerDefinitions;\n        const triggerDefinitions = functionsEmulatorShared_1.emulatedFunctionsByRegion(parsedDefinitions);\n        const toSetup = triggerDefinitions.filter((definition) => {\n            if (force) {\n                return true;\n            }\n            const anyEnabledMatch = Object.values(this.triggers).some((record) => {\n                const sameEntryPoint = record.def.entryPoint === definition.entryPoint;\n                const sameEventTrigger = JSON.stringify(record.def.eventTrigger) === JSON.stringify(definition.eventTrigger);\n                if (sameEntryPoint && !sameEventTrigger) {\n                    this.logger.log(\"DEBUG\", `Definition for trigger ${definition.entryPoint} changed from ${JSON.stringify(record.def.eventTrigger)} to ${JSON.stringify(definition.eventTrigger)}`);\n                }\n                return record.enabled && sameEntryPoint && sameEventTrigger;\n            });\n            return !anyEnabledMatch;\n        });\n        for (const definition of toSetup) {\n            let added = false;\n            let url = undefined;\n            if (definition.httpsTrigger) {\n                const { host, port } = this.getInfo();\n                added = true;\n                url = FunctionsEmulator.getHttpFunctionUrl(host, port, this.args.projectId, definition.name, definition.region);\n            }\n            else if (definition.eventTrigger) {\n                const service = functionsEmulatorShared_1.getFunctionService(definition);\n                const key = this.getTriggerKey(definition);\n                switch (service) {\n                    case constants_1.Constants.SERVICE_FIRESTORE:\n                        added = await this.addFirestoreTrigger(this.args.projectId, key, definition.eventTrigger);\n                        break;\n                    case constants_1.Constants.SERVICE_REALTIME_DATABASE:\n                        added = await this.addRealtimeDatabaseTrigger(this.args.projectId, key, definition.eventTrigger);\n                        break;\n                    case constants_1.Constants.SERVICE_PUBSUB:\n                        added = await this.addPubsubTrigger(definition.name, key, definition.eventTrigger, definition.schedule);\n                        break;\n                    case constants_1.Constants.SERVICE_AUTH:\n                        added = this.addAuthTrigger(this.args.projectId, key, definition.eventTrigger);\n                        break;\n                    case constants_1.Constants.SERVICE_STORAGE:\n                        added = this.addStorageTrigger(this.args.projectId, key, definition.eventTrigger);\n                        break;\n                    default:\n                        this.logger.log(\"DEBUG\", `Unsupported trigger: ${JSON.stringify(definition)}`);\n                        break;\n                }\n            }\n            else {\n                this.logger.log(\"WARN\", `Trigger trigger \"${definition.name}\" has has neither \"httpsTrigger\" or \"eventTrigger\" member`);\n            }\n            const ignored = !added;\n            this.addTriggerRecord(definition, { ignored, url });\n            const type = definition.httpsTrigger\n                ? \"http\"\n                : constants_1.Constants.getServiceName(functionsEmulatorShared_1.getFunctionService(definition));\n            if (ignored) {\n                const msg = `function ignored because the ${type} emulator does not exist or is not running.`;\n                this.logger.logLabeled(\"BULLET\", `functions[${definition.id}]`, msg);\n            }\n            else {\n                const msg = url\n                    ? `${clc.bold(type)} function initialized (${url}).`\n                    : `${clc.bold(type)} function initialized.`;\n                this.logger.logLabeled(\"SUCCESS\", `functions[${definition.id}]`, msg);\n            }\n        }\n    }\n    addRealtimeDatabaseTrigger(projectId, key, eventTrigger) {\n        const databaseEmu = registry_1.EmulatorRegistry.get(types_1.Emulators.DATABASE);\n        if (!databaseEmu) {\n            return Promise.resolve(false);\n        }\n        const result = DATABASE_PATH_PATTERN.exec(eventTrigger.resource);\n        if (result === null || result.length !== 3) {\n            this.logger.log(\"WARN\", `Event trigger \"${key}\" has malformed \"resource\" member. ` + `${eventTrigger.resource}`);\n            return Promise.reject();\n        }\n        const instance = result[1];\n        const bundle = JSON.stringify({\n            name: `projects/${projectId}/locations/_/functions/${key}`,\n            path: result[2],\n            event: eventTrigger.eventType,\n            topic: `projects/${projectId}/topics/${key}`,\n        });\n        logger_1.logger.debug(`addRealtimeDatabaseTrigger[${instance}]`, JSON.stringify(bundle));\n        let setTriggersPath = \"/.settings/functionTriggers.json\";\n        if (instance !== \"\") {\n            setTriggersPath += `?ns=${instance}`;\n        }\n        else {\n            this.logger.log(\"WARN\", `No project in use. Registering function trigger for sentinel namespace '${constants_1.Constants.DEFAULT_DATABASE_EMULATOR_NAMESPACE}'`);\n        }\n        return api\n            .request(\"POST\", setTriggersPath, {\n            origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(databaseEmu.getInfo())}`,\n            headers: {\n                Authorization: \"Bearer owner\",\n            },\n            data: bundle,\n            json: false,\n        })\n            .then(() => {\n            return true;\n        })\n            .catch((err) => {\n            this.logger.log(\"WARN\", \"Error adding trigger: \" + err);\n            throw err;\n        });\n    }\n    addFirestoreTrigger(projectId, key, eventTrigger) {\n        const firestoreEmu = registry_1.EmulatorRegistry.get(types_1.Emulators.FIRESTORE);\n        if (!firestoreEmu) {\n            return Promise.resolve(false);\n        }\n        const bundle = JSON.stringify({ eventTrigger });\n        logger_1.logger.debug(`addFirestoreTrigger`, JSON.stringify(bundle));\n        return api\n            .request(\"PUT\", `/emulator/v1/projects/${projectId}/triggers/${key}`, {\n            origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(firestoreEmu.getInfo())}`,\n            data: bundle,\n            json: false,\n        })\n            .then(() => {\n            return true;\n        })\n            .catch((err) => {\n            this.logger.log(\"WARN\", \"Error adding trigger: \" + err);\n            throw err;\n        });\n    }\n    async addPubsubTrigger(triggerName, key, eventTrigger, schedule) {\n        const pubsubPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB);\n        if (!pubsubPort) {\n            return false;\n        }\n        const pubsubEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.PUBSUB);\n        logger_1.logger.debug(`addPubsubTrigger`, JSON.stringify({ eventTrigger }));\n        const resource = eventTrigger.resource;\n        let topic;\n        if (schedule) {\n            topic = \"firebase-schedule-\" + triggerName;\n        }\n        else {\n            const resourceParts = resource.split(\"/\");\n            topic = resourceParts[resourceParts.length - 1];\n        }\n        try {\n            await pubsubEmulator.addTrigger(topic, key);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    addAuthTrigger(projectId, key, eventTrigger) {\n        logger_1.logger.debug(`addAuthTrigger`, JSON.stringify({ eventTrigger }));\n        const eventTriggerId = `${projectId}:${eventTrigger.eventType}`;\n        const triggers = this.multicastTriggers[eventTriggerId] || [];\n        triggers.push(key);\n        this.multicastTriggers[eventTriggerId] = triggers;\n        return true;\n    }\n    addStorageTrigger(projectId, key, eventTrigger) {\n        logger_1.logger.debug(`addStorageTrigger`, JSON.stringify({ eventTrigger }));\n        const eventTriggerId = `${projectId}:${eventTrigger.eventType}`;\n        const triggers = this.multicastTriggers[eventTriggerId] || [];\n        triggers.push(key);\n        this.multicastTriggers[eventTriggerId] = triggers;\n        return true;\n    }\n    getProjectId() {\n        return this.args.projectId;\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FUNCTIONS);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FUNCTIONS);\n        return {\n            name: this.getName(),\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.FUNCTIONS;\n    }\n    getTriggerDefinitions() {\n        return Object.values(this.triggers).map((record) => record.def);\n    }\n    getTriggerDefinitionByKey(triggerKey) {\n        const record = this.triggers[triggerKey];\n        if (!record) {\n            logger_1.logger.debug(`Could not find key=${triggerKey} in ${JSON.stringify(this.triggers)}`);\n            throw new error_1.FirebaseError(`No trigger with key ${triggerKey}`);\n        }\n        return record.def;\n    }\n    getTriggerKey(def) {\n        return def.eventTrigger ? `${def.id}-${this.triggerGeneration}` : def.id;\n    }\n    addTriggerRecord(def, opts) {\n        const key = this.getTriggerKey(def);\n        this.triggers[key] = { def, enabled: true, ignored: opts.ignored, url: opts.url };\n    }\n    setTriggersForTesting(triggers) {\n        triggers.forEach((def) => this.addTriggerRecord(def, { ignored: false }));\n    }\n    getBaseBundle() {\n        return {\n            cwd: this.args.functionsDir,\n            projectId: this.args.projectId,\n            triggerId: \"\",\n            targetName: \"\",\n            triggerType: undefined,\n            emulators: {\n                firestore: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.FIRESTORE),\n                database: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.DATABASE),\n                pubsub: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.PUBSUB),\n                auth: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.AUTH),\n                storage: registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE),\n            },\n            adminSdkConfig: {\n                databaseURL: this.adminSdkConfig.databaseURL,\n                storageBucket: this.adminSdkConfig.storageBucket,\n            },\n            disabled_features: this.args.disabledRuntimeFeatures,\n        };\n    }\n    getRequestedNodeRuntimeVersion(frb) {\n        const pkg = require(path.join(frb.cwd, \"package.json\"));\n        return frb.nodeMajorVersion || (pkg.engines && pkg.engines.node);\n    }\n    askInstallNodeVersion(cwd, nodeMajorVersion) {\n        const pkg = require(path.join(cwd, \"package.json\"));\n        if ((!pkg.engines || !pkg.engines.node) && !nodeMajorVersion) {\n            this.logger.log(\"WARN\", \"Your functions directory does not specify a Node version.\\n   \" +\n                \"- Learn more at https://firebase.google.com/docs/functions/manage-functions#set_runtime_options\");\n            return process.execPath;\n        }\n        const hostMajorVersion = process.versions.node.split(\".\")[0];\n        const requestedMajorVersion = nodeMajorVersion\n            ? `${nodeMajorVersion}`\n            : pkg.engines.node;\n        let localMajorVersion = \"0\";\n        const localNodePath = path.join(cwd, \"node_modules/.bin/node\");\n        try {\n            const localNodeOutput = child_process_1.spawnSync(localNodePath, [\"--version\"]).stdout.toString();\n            localMajorVersion = localNodeOutput.slice(1).split(\".\")[0];\n        }\n        catch (err) {\n        }\n        if (requestedMajorVersion === localMajorVersion) {\n            this.logger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from local cache.`);\n            return localNodePath;\n        }\n        if (requestedMajorVersion === hostMajorVersion) {\n            this.logger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from host.`);\n            return process.execPath;\n        }\n        this.logger.log(\"WARN\", `Your requested \"node\" version \"${requestedMajorVersion}\" doesn't match your global version \"${hostMajorVersion}\"`);\n        return process.execPath;\n    }\n    invokeRuntime(frb, opts) {\n        if (this.workerPool.readyForWork(frb.triggerId)) {\n            return this.workerPool.submitWork(frb.triggerId, frb, opts);\n        }\n        const emitter = new events_1.EventEmitter();\n        const args = [path.join(__dirname, \"functionsEmulatorRuntime\")];\n        if (opts.ignore_warnings) {\n            args.unshift(\"--no-warnings\");\n        }\n        if (this.args.debugPort) {\n            if (process.env.FIREPIT_VERSION && process.execPath == opts.nodeBinary) {\n                const requestedMajorNodeVersion = this.getRequestedNodeRuntimeVersion(frb);\n                this.logger.log(\"WARN\", `To enable function inspection, please run \"${process.execPath} is:npm i node@${requestedMajorNodeVersion} --save-dev\" in your functions directory`);\n            }\n            else {\n                const { host } = this.getInfo();\n                args.unshift(`--inspect=${host}:${this.args.debugPort}`);\n            }\n        }\n        const pnpPath = path.join(frb.cwd, \".pnp.js\");\n        if (fs.existsSync(pnpPath)) {\n            emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS).logLabeled(\"WARN_ONCE\", \"functions\", \"Detected yarn@2 with PnP. \" +\n                \"Cloud Functions for Firebase requires a node_modules folder to work correctly and is therefore incompatible with PnP. \" +\n                \"See https://yarnpkg.com/getting-started/migration#step-by-step for more information.\");\n        }\n        const childProcess = spawn(opts.nodeBinary, args, {\n            env: Object.assign(Object.assign({ node: opts.nodeBinary }, opts.env), process.env),\n            cwd: frb.cwd,\n            stdio: [\"pipe\", \"pipe\", \"pipe\", \"ipc\"],\n        });\n        const buffers = {\n            stderr: { pipe: childProcess.stderr, value: \"\" },\n            stdout: { pipe: childProcess.stdout, value: \"\" },\n        };\n        const ipcBuffer = { value: \"\" };\n        childProcess.on(\"message\", (message) => {\n            this.onData(childProcess, emitter, ipcBuffer, message);\n        });\n        for (const id in buffers) {\n            if (buffers.hasOwnProperty(id)) {\n                const buffer = buffers[id];\n                buffer.pipe.on(\"data\", (buf) => {\n                    this.onData(childProcess, emitter, buffer, buf);\n                });\n            }\n        }\n        const runtime = {\n            pid: childProcess.pid,\n            exit: new Promise((resolve) => {\n                childProcess.on(\"exit\", resolve);\n            }),\n            events: emitter,\n            shutdown: () => {\n                childProcess.kill();\n            },\n            kill: (signal) => {\n                childProcess.kill(signal);\n                emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n            },\n            send: (args) => {\n                return childProcess.send(JSON.stringify(args));\n            },\n        };\n        this.workerPool.addWorker(frb.triggerId, runtime);\n        return this.workerPool.submitWork(frb.triggerId, frb, opts);\n    }\n    async disableBackgroundTriggers() {\n        Object.values(this.triggers).forEach((record) => {\n            if (record.def.eventTrigger && record.enabled) {\n                this.logger.logLabeled(\"BULLET\", `functions[${record.def.entryPoint}]`, \"function temporarily disabled.\");\n                record.enabled = false;\n            }\n        });\n        await this.workQueue.flush();\n    }\n    async reloadTriggers() {\n        this.triggerGeneration++;\n        return this.loadTriggers();\n    }\n    async handleBackgroundTrigger(projectId, triggerKey, proto) {\n        const record = this.triggers[triggerKey];\n        if (record && !record.enabled) {\n            return Promise.reject({ code: 204, body: \"Background triggers are curently disabled.\" });\n        }\n        const trigger = this.getTriggerDefinitionByKey(triggerKey);\n        const service = functionsEmulatorShared_1.getFunctionService(trigger);\n        const worker = this.startFunctionRuntime(trigger.id, trigger.name, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n        return new Promise((resolve, reject) => {\n            if (projectId !== this.args.projectId) {\n                if (service !== constants_1.Constants.SERVICE_REALTIME_DATABASE) {\n                    logger_1.logger.debug(`Received functions trigger for service \"${service}\" for unknown project \"${projectId}\".`);\n                    reject({ code: 404 });\n                    return;\n                }\n                if (!trigger.eventTrigger.resource.startsWith(`projects/_/instances/${projectId}`)) {\n                    logger_1.logger.debug(`Received functions trigger for function \"${trigger.name}\" of project \"${projectId}\" that did not match definition: ${JSON.stringify(trigger)}.`);\n                    reject({ code: 404 });\n                    return;\n                }\n            }\n            worker.onLogs((el) => {\n                if (el.level === \"FATAL\") {\n                    reject({ code: 500, body: el.text });\n                }\n            });\n            track(EVENT_INVOKE, functionsEmulatorShared_1.getFunctionService(trigger));\n            worker.waitForDone().then(() => {\n                resolve({ status: \"acknowledged\" });\n            });\n        });\n    }\n    getEmulatorInfo(emulator) {\n        if (this.args.remoteEmulators) {\n            if (this.args.remoteEmulators[emulator]) {\n                return this.args.remoteEmulators[emulator];\n            }\n        }\n        return registry_1.EmulatorRegistry.getInfo(emulator);\n    }\n    tokenFromAuthHeader(authHeader) {\n        const match = authHeader.match(/^Bearer (.*)$/);\n        if (!match) {\n            return;\n        }\n        let idToken = match[1];\n        logger_1.logger.debug(`ID Token: ${idToken}`);\n        if (idToken && idToken.includes(\"=\")) {\n            idToken = idToken.replace(/[=]+?\\./g, \".\");\n            logger_1.logger.debug(`ID Token contained invalid padding, new value: ${idToken}`);\n        }\n        try {\n            const decoded = jwt.decode(idToken, { complete: true });\n            if (!decoded || typeof decoded !== \"object\") {\n                logger_1.logger.debug(`Failed to decode ID Token: ${decoded}`);\n                return;\n            }\n            const claims = decoded.payload;\n            claims.uid = claims.sub;\n            return claims;\n        }\n        catch (e) {\n            return;\n        }\n    }\n    async handleHttpsTrigger(req, res) {\n        const method = req.method;\n        const region = req.params.region;\n        const triggerName = req.params.trigger_name;\n        const triggerId = `${region}-${triggerName}`;\n        if (!this.triggers[triggerId]) {\n            res\n                .status(404)\n                .send(`Function ${triggerId} does not exist, valid triggers are: ${Object.keys(this.triggers).join(\", \")}`);\n            return;\n        }\n        const trigger = this.getTriggerDefinitionByKey(triggerId);\n        logger_1.logger.debug(`Accepted request ${method} ${req.url} --> ${triggerId}`);\n        const reqBody = req.rawBody;\n        const isCallable = trigger.labels && trigger.labels[\"deployment-callable\"] === \"true\";\n        const authHeader = req.header(\"Authorization\");\n        if (authHeader && isCallable) {\n            const token = this.tokenFromAuthHeader(authHeader);\n            if (token) {\n                const contextAuth = {\n                    uid: token.uid,\n                    token: token,\n                };\n                req.headers[functionsEmulatorShared_1.HttpConstants.ORIGINAL_AUTH_HEADER] = req.headers[\"authorization\"];\n                delete req.headers[\"authorization\"];\n                req.headers[functionsEmulatorShared_1.HttpConstants.CALLABLE_AUTH_HEADER] = encodeURIComponent(JSON.stringify(contextAuth));\n            }\n        }\n        const worker = this.startFunctionRuntime(trigger.id, trigger.name, functionsEmulatorShared_1.EmulatedTriggerType.HTTPS, undefined);\n        worker.onLogs((el) => {\n            if (el.level === \"FATAL\") {\n                res.status(500).send(el.text);\n            }\n        });\n        await worker.waitForSocketReady();\n        track(EVENT_INVOKE, \"https\");\n        this.logger.log(\"DEBUG\", `[functions] Runtime ready! Sending request!`);\n        if (!worker.lastArgs) {\n            throw new error_1.FirebaseError(\"Cannot execute on a worker with no arguments\");\n        }\n        if (!worker.lastArgs.frb.socketPath) {\n            throw new error_1.FirebaseError(`Cannot execute on a worker without a socketPath: ${JSON.stringify(worker.lastArgs)}`);\n        }\n        const url = new URL(`${req.protocol}://${req.hostname}${req.url}`);\n        const path = `${url.pathname}${url.search}`.replace(new RegExp(`\\/${this.args.projectId}\\/[^\\/]*\\/${triggerName}\\/?`), \"/\");\n        this.logger.log(\"DEBUG\", `[functions] Got req.url=${req.url}, mapping to path=${path}`);\n        const runtimeReq = http.request({\n            method,\n            path,\n            headers: req.headers,\n            socketPath: worker.lastArgs.frb.socketPath,\n        }, (runtimeRes) => {\n            function forwardStatusAndHeaders() {\n                res.status(runtimeRes.statusCode || 200);\n                if (!res.headersSent) {\n                    Object.keys(runtimeRes.headers).forEach((key) => {\n                        const val = runtimeRes.headers[key];\n                        if (val) {\n                            res.setHeader(key, val);\n                        }\n                    });\n                }\n            }\n            runtimeRes.on(\"data\", (buf) => {\n                forwardStatusAndHeaders();\n                res.write(buf);\n            });\n            runtimeRes.on(\"close\", () => {\n                forwardStatusAndHeaders();\n                res.end();\n            });\n            runtimeRes.on(\"end\", () => {\n                forwardStatusAndHeaders();\n                res.end();\n            });\n        });\n        runtimeReq.on(\"error\", () => {\n            res.end();\n        });\n        if (reqBody) {\n            runtimeReq.write(reqBody);\n            runtimeReq.end();\n        }\n        req.pipe(runtimeReq, { end: true }).on(\"error\", () => {\n            res.end();\n        });\n        await worker.waitForDone();\n    }\n    onData(runtime, emitter, buffer, buf) {\n        buffer.value += buf.toString();\n        const lines = buffer.value.split(\"\\n\");\n        if (lines.length > 1) {\n            lines.slice(0, -1).forEach((line) => {\n                const log = types_1.EmulatorLog.fromJSON(line);\n                emitter.emit(\"log\", log);\n                if (log.level === \"FATAL\") {\n                    emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n                    runtime.kill();\n                }\n            });\n        }\n        buffer.value = lines[lines.length - 1];\n    }\n}\nexports.FunctionsEmulator = FunctionsEmulator;\n"]},"metadata":{},"sourceType":"script"}