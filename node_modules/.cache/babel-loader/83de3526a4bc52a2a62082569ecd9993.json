{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileOptions = void 0;\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nconst mime_1 = require(\"./utils/mime\");\n\nconst TextBodyParser_1 = __importDefault(require(\"./bodyParsers/TextBodyParser\"));\n\nconst JsonBodyParser_1 = __importDefault(require(\"./bodyParsers/JsonBodyParser\"));\n\nconst BodyParserWrapper_1 = __importDefault(require(\"./bodyParsers/BodyParserWrapper\"));\n\nconst loadControllers_1 = require(\"./controllers/loadControllers\");\n\nconst INT_32_MIN = -1 * Math.pow(2, 31);\nconst INT_32_MAX = Math.pow(2, 31) - 1; // Javascript can only safely support a range of -(2^53 - 1) to (2^53 - 1)\n//      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n\nconst INT_64_MIN = Number.MIN_SAFE_INTEGER;\nconst INT_64_MAX = Number.MAX_SAFE_INTEGER; // See the OAS 3.0 specification for full details about supported formats:\n//      https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md#data-types\n\nconst defaultValidators = {\n  // string:date is taken care of for us:\n  //      https://github.com/epoberezkin/ajv/blob/797dfc8c2b0f51aaa405342916cccb5962dd5f21/lib/compile/formats.js#L34\n  // string:date-time is from:\n  //      https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-7.3.1.\n  // number:int32 and number:int64 are defined as non-fractional integers\n  //      https://tools.ietf.org/html/draft-wright-json-schema-00#section-5.3\n  int32: {\n    type: 'number',\n    validate: value => value >= INT_32_MIN && value <= INT_32_MAX\n  },\n  int64: {\n    type: 'number',\n    validate: value => value >= INT_64_MIN && value <= INT_64_MAX\n  },\n  double: {\n    type: 'number',\n    validate: () => true\n  },\n  float: {\n    type: 'number',\n    validate: () => true\n  },\n  // Nothing to do for 'password'; this is just a hint for docs.\n  password: () => true,\n  // Impossible to validate \"binary\".\n  binary: () => true,\n  // `byte` is base64 encoded data.  We *could* validate it here, but if the\n  // string is long, we might take a while to do it, and the application will\n  // figure it out quickly enough when it tries to decode it, so we just\n  // pass it along.\n  byte: () => true,\n  // Not defined by OAS 3, but it's used throughout OAS 3.0.1, so we put it\n  // here as an alias for 'byte' just in case.\n  base64: () => true\n};\n\nfunction compileOptions(options = {}) {\n  const maxBodySize = options.defaultMaxBodySize || 100000;\n  const mimeTypeParsers = Object.assign({\n    'text/*': new TextBodyParser_1.default(maxBodySize),\n    'application/json': new JsonBodyParser_1.default(maxBodySize)\n  }, options.mimeTypeParsers || {});\n  const wrappedBodyParsers = lodash_1.default.mapValues(mimeTypeParsers, p => {\n    if ('parseReq' in p) {\n      return p;\n    } else if ('parseString' in p) {\n      return new BodyParserWrapper_1.default(p, maxBodySize);\n    } else {\n      return undefined;\n    }\n  });\n  const bodyParsers = new mime_1.MimeTypeRegistry(wrappedBodyParsers);\n  const parameterParsers = new mime_1.MimeTypeRegistry(lodash_1.default.pickBy(mimeTypeParsers, p => !!p.parseString));\n  const customFormats = Object.assign({}, defaultValidators, options.customFormats || {});\n  const contollersPattern = options.controllersPattern || '**/*.js';\n  const controllers = typeof options.controllers === 'string' ? loadControllers_1.loadControllersSync(options.controllers, contollersPattern) : options.controllers || {};\n  const allowMissingControllers = 'allowMissingControllers' in options ? !!options.allowMissingControllers : true;\n  const authenticators = options.authenticators || {};\n  let autoHandleHttpErrors = true;\n\n  if (options.autoHandleHttpErrors !== undefined) {\n    if (options.autoHandleHttpErrors instanceof Function) {\n      autoHandleHttpErrors = options.autoHandleHttpErrors;\n    } else {\n      autoHandleHttpErrors = !!options.autoHandleHttpErrors;\n    }\n  }\n\n  const validateDefaultResponses = 'validateDefaultResponses' in options ? !!options.validateDefaultResponses : true;\n  return {\n    bodyParsers,\n    controllers,\n    authenticators,\n    customFormats,\n    parameterParsers,\n    defaultMaxBodySize: maxBodySize,\n    ignoreServers: options.ignoreServers || false,\n    allowMissingControllers,\n    autoHandleHttpErrors,\n    onResponseValidationError: options.onResponseValidationError || (() => void 0),\n    validateDefaultResponses,\n    allErrors: options.allErrors || false,\n    treatReturnedJsonAsPure: options.treatReturnedJsonAsPure || false\n  };\n}\n\nexports.compileOptions = compileOptions;","map":{"version":3,"sources":["../src/options.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compileOptions = void 0;\nconst lodash_1 = __importDefault(require(\"lodash\"));\nconst mime_1 = require(\"./utils/mime\");\nconst TextBodyParser_1 = __importDefault(require(\"./bodyParsers/TextBodyParser\"));\nconst JsonBodyParser_1 = __importDefault(require(\"./bodyParsers/JsonBodyParser\"));\nconst BodyParserWrapper_1 = __importDefault(require(\"./bodyParsers/BodyParserWrapper\"));\nconst loadControllers_1 = require(\"./controllers/loadControllers\");\nconst INT_32_MIN = -1 * Math.pow(2, 31);\nconst INT_32_MAX = Math.pow(2, 31) - 1;\n// Javascript can only safely support a range of -(2^53 - 1) to (2^53 - 1)\n//      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\nconst INT_64_MIN = Number.MIN_SAFE_INTEGER;\nconst INT_64_MAX = Number.MAX_SAFE_INTEGER;\n// See the OAS 3.0 specification for full details about supported formats:\n//      https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md#data-types\nconst defaultValidators = {\n    // string:date is taken care of for us:\n    //      https://github.com/epoberezkin/ajv/blob/797dfc8c2b0f51aaa405342916cccb5962dd5f21/lib/compile/formats.js#L34\n    // string:date-time is from:\n    //      https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-7.3.1.\n    // number:int32 and number:int64 are defined as non-fractional integers\n    //      https://tools.ietf.org/html/draft-wright-json-schema-00#section-5.3\n    int32: {\n        type: 'number',\n        validate: (value) => value >= INT_32_MIN && value <= INT_32_MAX,\n    },\n    int64: {\n        type: 'number',\n        validate: (value) => value >= INT_64_MIN && value <= INT_64_MAX,\n    },\n    double: {\n        type: 'number',\n        validate: () => true,\n    },\n    float: {\n        type: 'number',\n        validate: () => true,\n    },\n    // Nothing to do for 'password'; this is just a hint for docs.\n    password: () => true,\n    // Impossible to validate \"binary\".\n    binary: () => true,\n    // `byte` is base64 encoded data.  We *could* validate it here, but if the\n    // string is long, we might take a while to do it, and the application will\n    // figure it out quickly enough when it tries to decode it, so we just\n    // pass it along.\n    byte: () => true,\n    // Not defined by OAS 3, but it's used throughout OAS 3.0.1, so we put it\n    // here as an alias for 'byte' just in case.\n    base64: () => true,\n};\nfunction compileOptions(options = {}) {\n    const maxBodySize = options.defaultMaxBodySize || 100000;\n    const mimeTypeParsers = Object.assign({\n        'text/*': new TextBodyParser_1.default(maxBodySize),\n        'application/json': new JsonBodyParser_1.default(maxBodySize),\n    }, options.mimeTypeParsers || {});\n    const wrappedBodyParsers = lodash_1.default.mapValues(mimeTypeParsers, (p) => {\n        if ('parseReq' in p) {\n            return p;\n        }\n        else if ('parseString' in p) {\n            return new BodyParserWrapper_1.default(p, maxBodySize);\n        }\n        else {\n            return undefined;\n        }\n    });\n    const bodyParsers = new mime_1.MimeTypeRegistry(wrappedBodyParsers);\n    const parameterParsers = new mime_1.MimeTypeRegistry(lodash_1.default.pickBy(mimeTypeParsers, (p) => !!p.parseString));\n    const customFormats = Object.assign({}, defaultValidators, options.customFormats || {});\n    const contollersPattern = options.controllersPattern || '**/*.js';\n    const controllers = typeof options.controllers === 'string'\n        ? loadControllers_1.loadControllersSync(options.controllers, contollersPattern)\n        : options.controllers || {};\n    const allowMissingControllers = 'allowMissingControllers' in options ? !!options.allowMissingControllers : true;\n    const authenticators = options.authenticators || {};\n    let autoHandleHttpErrors = true;\n    if (options.autoHandleHttpErrors !== undefined) {\n        if (options.autoHandleHttpErrors instanceof Function) {\n            autoHandleHttpErrors = options.autoHandleHttpErrors;\n        }\n        else {\n            autoHandleHttpErrors = !!options.autoHandleHttpErrors;\n        }\n    }\n    const validateDefaultResponses = 'validateDefaultResponses' in options ? !!options.validateDefaultResponses : true;\n    return {\n        bodyParsers,\n        controllers,\n        authenticators,\n        customFormats,\n        parameterParsers,\n        defaultMaxBodySize: maxBodySize,\n        ignoreServers: options.ignoreServers || false,\n        allowMissingControllers,\n        autoHandleHttpErrors,\n        onResponseValidationError: options.onResponseValidationError || (() => void 0),\n        validateDefaultResponses,\n        allErrors: options.allErrors || false,\n        treatReturnedJsonAsPure: options.treatReturnedJsonAsPure || false,\n    };\n}\nexports.compileOptions = compileOptions;\n//# sourceMappingURL=options.js.map"]},"metadata":{},"sourceType":"script"}