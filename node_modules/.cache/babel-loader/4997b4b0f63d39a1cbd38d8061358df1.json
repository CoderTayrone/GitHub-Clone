{"ast":null,"code":"'use strict';\n\nconst chalk = require('chalk');\n\nconst cliCursor = require('cli-cursor');\n\nconst cliSpinners = require('cli-spinners');\n\nconst logSymbols = require('log-symbols');\n\nconst stripAnsi = require('strip-ansi');\n\nconst wcwidth = require('wcwidth');\n\nconst TEXT = Symbol('text');\nconst PREFIX_TEXT = Symbol('prefixText');\n\nclass Ora {\n  constructor(options) {\n    if (typeof options === 'string') {\n      options = {\n        text: options\n      };\n    }\n\n    this.options = Object.assign({\n      text: '',\n      color: 'cyan',\n      stream: process.stderr\n    }, options);\n    this.spinner = this.options.spinner;\n    this.color = this.options.color;\n    this.hideCursor = this.options.hideCursor !== false;\n    this.interval = this.options.interval || this.spinner.interval || 100;\n    this.stream = this.options.stream;\n    this.id = null;\n    this.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : this.stream && this.stream.isTTY && !process.env.CI; // Set *after* `this.stream`\n\n    this.text = this.options.text;\n    this.prefixText = this.options.prefixText;\n    this.linesToClear = 0;\n    this.indent = this.options.indent;\n  }\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent = 0) {\n    if (!(indent >= 0 && Number.isInteger(indent))) {\n      throw new Error('The `indent` option must be an integer from 0 and up');\n    }\n\n    this._indent = indent;\n  }\n\n  get spinner() {\n    return this._spinner;\n  }\n\n  set spinner(spinner) {\n    this.frameIndex = 0;\n\n    if (typeof spinner === 'object') {\n      if (spinner.frames === undefined) {\n        throw new Error('The given spinner must have a `frames` property');\n      }\n\n      this._spinner = spinner;\n    } else if (process.platform === 'win32') {\n      this._spinner = cliSpinners.line;\n    } else if (spinner === undefined) {\n      // Set default spinner\n      this._spinner = cliSpinners.dots;\n    } else if (cliSpinners[spinner]) {\n      this._spinner = cliSpinners[spinner];\n    } else {\n      throw new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/master/spinners.json for a full list.`);\n    }\n  }\n\n  get text() {\n    return this[TEXT];\n  }\n\n  get prefixText() {\n    return this[PREFIX_TEXT];\n  }\n\n  get isSpinning() {\n    return this.id !== null;\n  }\n\n  updateLineCount() {\n    const columns = this.stream.columns || 80;\n    const fullPrefixText = typeof this[PREFIX_TEXT] === 'string' ? this[PREFIX_TEXT] + '-' : '';\n    this.lineCount = stripAnsi(fullPrefixText + '--' + this[TEXT]).split('\\n').reduce((count, line) => {\n      return count + Math.max(1, Math.ceil(wcwidth(line) / columns));\n    }, 0);\n  }\n\n  set text(value) {\n    this[TEXT] = value;\n    this.updateLineCount();\n  }\n\n  set prefixText(value) {\n    this[PREFIX_TEXT] = value;\n    this.updateLineCount();\n  }\n\n  frame() {\n    const {\n      frames\n    } = this.spinner;\n    let frame = frames[this.frameIndex];\n\n    if (this.color) {\n      frame = chalk[this.color](frame);\n    }\n\n    this.frameIndex = ++this.frameIndex % frames.length;\n    const fullPrefixText = typeof this.prefixText === 'string' ? this.prefixText + ' ' : '';\n    const fullText = typeof this.text === 'string' ? ' ' + this.text : '';\n    return fullPrefixText + frame + fullText;\n  }\n\n  clear() {\n    if (!this.isEnabled || !this.stream.isTTY) {\n      return this;\n    }\n\n    for (let i = 0; i < this.linesToClear; i++) {\n      if (i > 0) {\n        this.stream.moveCursor(0, -1);\n      }\n\n      this.stream.clearLine();\n      this.stream.cursorTo(this.indent);\n    }\n\n    this.linesToClear = 0;\n    return this;\n  }\n\n  render() {\n    this.clear();\n    this.stream.write(this.frame());\n    this.linesToClear = this.lineCount;\n    return this;\n  }\n\n  start(text) {\n    if (text) {\n      this.text = text;\n    }\n\n    if (!this.isEnabled) {\n      this.stream.write(`- ${this.text}\\n`);\n      return this;\n    }\n\n    if (this.isSpinning) {\n      return this;\n    }\n\n    if (this.hideCursor) {\n      cliCursor.hide(this.stream);\n    }\n\n    this.render();\n    this.id = setInterval(this.render.bind(this), this.interval);\n    return this;\n  }\n\n  stop() {\n    if (!this.isEnabled) {\n      return this;\n    }\n\n    clearInterval(this.id);\n    this.id = null;\n    this.frameIndex = 0;\n    this.clear();\n\n    if (this.hideCursor) {\n      cliCursor.show(this.stream);\n    }\n\n    return this;\n  }\n\n  succeed(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.success,\n      text\n    });\n  }\n\n  fail(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.error,\n      text\n    });\n  }\n\n  warn(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.warning,\n      text\n    });\n  }\n\n  info(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.info,\n      text\n    });\n  }\n\n  stopAndPersist(options = {}) {\n    const prefixText = options.prefixText || this.prefixText;\n    const fullPrefixText = typeof prefixText === 'string' ? prefixText + ' ' : '';\n    const text = options.text || this.text;\n    const fullText = typeof text === 'string' ? ' ' + text : '';\n    this.stop();\n    this.stream.write(`${fullPrefixText}${options.symbol || ' '}${fullText}\\n`);\n    return this;\n  }\n\n}\n\nconst oraFactory = function (opts) {\n  return new Ora(opts);\n};\n\nmodule.exports = oraFactory; // TODO: Remove this for the next major release\n\nmodule.exports.default = oraFactory;\n\nmodule.exports.promise = (action, options) => {\n  if (typeof action.then !== 'function') {\n    throw new TypeError('Parameter `action` must be a Promise');\n  }\n\n  const spinner = new Ora(options);\n  spinner.start();\n  action.then(() => {\n    spinner.succeed();\n  }, () => {\n    spinner.fail();\n  });\n  return spinner;\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/ora/index.js"],"names":["chalk","require","cliCursor","cliSpinners","logSymbols","stripAnsi","wcwidth","TEXT","Symbol","PREFIX_TEXT","Ora","constructor","options","text","Object","assign","color","stream","process","stderr","spinner","hideCursor","interval","id","isEnabled","isTTY","env","CI","prefixText","linesToClear","indent","_indent","Number","isInteger","Error","_spinner","frameIndex","frames","undefined","platform","line","dots","isSpinning","updateLineCount","columns","fullPrefixText","lineCount","split","reduce","count","Math","max","ceil","value","frame","length","fullText","clear","i","moveCursor","clearLine","cursorTo","render","write","start","hide","setInterval","bind","stop","clearInterval","show","succeed","stopAndPersist","symbol","success","fail","error","warn","warning","info","oraFactory","opts","module","exports","default","promise","action","then","TypeError"],"mappings":"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","sourcesContent":["'use strict';\nconst chalk = require('chalk');\nconst cliCursor = require('cli-cursor');\nconst cliSpinners = require('cli-spinners');\nconst logSymbols = require('log-symbols');\nconst stripAnsi = require('strip-ansi');\nconst wcwidth = require('wcwidth');\n\nconst TEXT = Symbol('text');\nconst PREFIX_TEXT = Symbol('prefixText');\n\nclass Ora {\n\tconstructor(options) {\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\ttext: options\n\t\t\t};\n\t\t}\n\n\t\tthis.options = Object.assign({\n\t\t\ttext: '',\n\t\t\tcolor: 'cyan',\n\t\t\tstream: process.stderr\n\t\t}, options);\n\n\t\tthis.spinner = this.options.spinner;\n\n\t\tthis.color = this.options.color;\n\t\tthis.hideCursor = this.options.hideCursor !== false;\n\t\tthis.interval = this.options.interval || this.spinner.interval || 100;\n\t\tthis.stream = this.options.stream;\n\t\tthis.id = null;\n\t\tthis.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : ((this.stream && this.stream.isTTY) && !process.env.CI);\n\n\t\t// Set *after* `this.stream`\n\t\tthis.text = this.options.text;\n\t\tthis.prefixText = this.options.prefixText;\n\t\tthis.linesToClear = 0;\n\t\tthis.indent = this.options.indent;\n\t}\n\n\tget indent() {\n\t\treturn this._indent;\n\t}\n\n\tset indent(indent = 0) {\n\t\tif (!(indent >= 0 && Number.isInteger(indent))) {\n\t\t\tthrow new Error('The `indent` option must be an integer from 0 and up');\n\t\t}\n\n\t\tthis._indent = indent;\n\t}\n\n\tget spinner() {\n\t\treturn this._spinner;\n\t}\n\n\tset spinner(spinner) {\n\t\tthis.frameIndex = 0;\n\n\t\tif (typeof spinner === 'object') {\n\t\t\tif (spinner.frames === undefined) {\n\t\t\t\tthrow new Error('The given spinner must have a `frames` property');\n\t\t\t}\n\n\t\t\tthis._spinner = spinner;\n\t\t} else if (process.platform === 'win32') {\n\t\t\tthis._spinner = cliSpinners.line;\n\t\t} else if (spinner === undefined) {\n\t\t\t// Set default spinner\n\t\t\tthis._spinner = cliSpinners.dots;\n\t\t} else if (cliSpinners[spinner]) {\n\t\t\tthis._spinner = cliSpinners[spinner];\n\t\t} else {\n\t\t\tthrow new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/master/spinners.json for a full list.`);\n\t\t}\n\t}\n\n\tget text() {\n\t\treturn this[TEXT];\n\t}\n\n\tget prefixText() {\n\t\treturn this[PREFIX_TEXT];\n\t}\n\n\tget isSpinning() {\n\t\treturn this.id !== null;\n\t}\n\n\tupdateLineCount() {\n\t\tconst columns = this.stream.columns || 80;\n\t\tconst fullPrefixText = (typeof this[PREFIX_TEXT] === 'string') ? this[PREFIX_TEXT] + '-' : '';\n\t\tthis.lineCount = stripAnsi(fullPrefixText + '--' + this[TEXT]).split('\\n').reduce((count, line) => {\n\t\t\treturn count + Math.max(1, Math.ceil(wcwidth(line) / columns));\n\t\t}, 0);\n\t}\n\n\tset text(value) {\n\t\tthis[TEXT] = value;\n\t\tthis.updateLineCount();\n\t}\n\n\tset prefixText(value) {\n\t\tthis[PREFIX_TEXT] = value;\n\t\tthis.updateLineCount();\n\t}\n\n\tframe() {\n\t\tconst {frames} = this.spinner;\n\t\tlet frame = frames[this.frameIndex];\n\n\t\tif (this.color) {\n\t\t\tframe = chalk[this.color](frame);\n\t\t}\n\n\t\tthis.frameIndex = ++this.frameIndex % frames.length;\n\t\tconst fullPrefixText = typeof this.prefixText === 'string' ? this.prefixText + ' ' : '';\n\t\tconst fullText = typeof this.text === 'string' ? ' ' + this.text : '';\n\n\t\treturn fullPrefixText + frame + fullText;\n\t}\n\n\tclear() {\n\t\tif (!this.isEnabled || !this.stream.isTTY) {\n\t\t\treturn this;\n\t\t}\n\n\t\tfor (let i = 0; i < this.linesToClear; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tthis.stream.moveCursor(0, -1);\n\t\t\t}\n\n\t\t\tthis.stream.clearLine();\n\t\t\tthis.stream.cursorTo(this.indent);\n\t\t}\n\n\t\tthis.linesToClear = 0;\n\n\t\treturn this;\n\t}\n\n\trender() {\n\t\tthis.clear();\n\t\tthis.stream.write(this.frame());\n\t\tthis.linesToClear = this.lineCount;\n\n\t\treturn this;\n\t}\n\n\tstart(text) {\n\t\tif (text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\tif (!this.isEnabled) {\n\t\t\tthis.stream.write(`- ${this.text}\\n`);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.isSpinning) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.hideCursor) {\n\t\t\tcliCursor.hide(this.stream);\n\t\t}\n\n\t\tthis.render();\n\t\tthis.id = setInterval(this.render.bind(this), this.interval);\n\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\tif (!this.isEnabled) {\n\t\t\treturn this;\n\t\t}\n\n\t\tclearInterval(this.id);\n\t\tthis.id = null;\n\t\tthis.frameIndex = 0;\n\t\tthis.clear();\n\t\tif (this.hideCursor) {\n\t\t\tcliCursor.show(this.stream);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsucceed(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.success, text});\n\t}\n\n\tfail(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.error, text});\n\t}\n\n\twarn(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.warning, text});\n\t}\n\n\tinfo(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.info, text});\n\t}\n\n\tstopAndPersist(options = {}) {\n\t\tconst prefixText = options.prefixText || this.prefixText;\n\t\tconst fullPrefixText = (typeof prefixText === 'string') ? prefixText + ' ' : '';\n\t\tconst text = options.text || this.text;\n\t\tconst fullText = (typeof text === 'string') ? ' ' + text : '';\n\n\t\tthis.stop();\n\t\tthis.stream.write(`${fullPrefixText}${options.symbol || ' '}${fullText}\\n`);\n\n\t\treturn this;\n\t}\n}\n\nconst oraFactory = function (opts) {\n\treturn new Ora(opts);\n};\n\nmodule.exports = oraFactory;\n// TODO: Remove this for the next major release\nmodule.exports.default = oraFactory;\n\nmodule.exports.promise = (action, options) => {\n\tif (typeof action.then !== 'function') {\n\t\tthrow new TypeError('Parameter `action` must be a Promise');\n\t}\n\n\tconst spinner = new Ora(options);\n\tspinner.start();\n\n\taction.then(\n\t\t() => {\n\t\t\tspinner.succeed();\n\t\t},\n\t\t() => {\n\t\t\tspinner.fail();\n\t\t}\n\t);\n\n\treturn spinner;\n};\n"]},"metadata":{},"sourceType":"script"}