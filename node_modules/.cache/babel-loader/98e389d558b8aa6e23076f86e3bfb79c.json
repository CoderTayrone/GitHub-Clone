{"ast":null,"code":"var pSlice = Array.prototype.slice;\nvar Object_keys = typeof Object.keys === 'function' ? Object.keys : function (obj) {\n  var keys = [];\n\n  for (var key in obj) keys.push(key);\n\n  return keys;\n};\n\nvar deepEqual = module.exports = function (actual, expected) {\n  // enforce Object.is +0 !== -0\n  if (actual === 0 && expected === 0) {\n    return areZerosEqual(actual, expected); // 7.1. All identical values are equivalent, as determined by ===.\n  } else if (actual === expected) {\n    return true;\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n  } else if (isNumberNaN(actual)) {\n    return isNumberNaN(expected); // 7.3. Other pairs that do not both pass typeof value == 'object',\n    // equivalence is determined by ==.\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return actual == expected; // 7.4. For all other Object pairs, including Array objects, equivalence is\n    // determined by having the same number of owned properties (as verified\n    // with Object.prototype.hasOwnProperty.call), the same set of keys\n    // (although not necessarily the same order), equivalent values for every\n    // corresponding key, and an identical 'prototype' property. Note: this\n    // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected);\n  }\n};\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction isNumberNaN(value) {\n  // NaN === NaN -> false\n  return typeof value == 'number' && value !== value;\n}\n\nfunction areZerosEqual(zeroA, zeroB) {\n  // (1 / +0|0) -> Infinity, but (1 / -0) -> -Infinity and (Infinity !== -Infinity)\n  return 1 / zeroA === 1 / zeroB;\n}\n\nfunction objEquiv(a, b) {\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false; // an identical 'prototype' property.\n\n  if (a.prototype !== b.prototype) return false; //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b);\n  }\n\n  try {\n    var ka = Object_keys(a),\n        kb = Object_keys(b),\n        key,\n        i;\n  } catch (e) {\n    //happens when one is a string literal and the other isn't\n    return false;\n  } // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n\n\n  if (ka.length != kb.length) return false; //the same set of keys (although not necessarily the same order),\n\n  ka.sort();\n  kb.sort(); //~~~cheap key test\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i]) return false;\n  } //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key])) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/deep-is/index.js"],"names":["pSlice","Array","prototype","slice","Object_keys","Object","keys","obj","key","push","deepEqual","module","exports","actual","expected","areZerosEqual","Date","getTime","isNumberNaN","objEquiv","isUndefinedOrNull","value","undefined","isArguments","object","toString","call","zeroA","zeroB","a","b","ka","kb","i","e","length","sort"],"mappings":"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","sourcesContent":["var pSlice = Array.prototype.slice;\nvar Object_keys = typeof Object.keys === 'function'\n    ? Object.keys\n    : function (obj) {\n        var keys = [];\n        for (var key in obj) keys.push(key);\n        return keys;\n    }\n;\n\nvar deepEqual = module.exports = function (actual, expected) {\n  // enforce Object.is +0 !== -0\n  if (actual === 0 && expected === 0) {\n    return areZerosEqual(actual, expected);\n\n  // 7.1. All identical values are equivalent, as determined by ===.\n  } else if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  } else if (isNumberNaN(actual)) {\n    return isNumberNaN(expected);\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected);\n  }\n};\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction isNumberNaN(value) {\n  // NaN === NaN -> false\n  return typeof value == 'number' && value !== value;\n}\n\nfunction areZerosEqual(zeroA, zeroB) {\n  // (1 / +0|0) -> Infinity, but (1 / -0) -> -Infinity and (Infinity !== -Infinity)\n  return (1 / zeroA) === (1 / zeroB);\n}\n\nfunction objEquiv(a, b) {\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b);\n  }\n  try {\n    var ka = Object_keys(a),\n        kb = Object_keys(b),\n        key, i;\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key])) return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}