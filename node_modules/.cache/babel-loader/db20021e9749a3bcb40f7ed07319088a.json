{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst loadCJSON = require(\"../../loadCJSON\");\n\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\n\nconst utils = require(\"../../utils\");\n\nasync function prepareRules(context, options) {\n  var _a;\n\n  const rulesFile = (_a = options.config.src.firestore) === null || _a === void 0 ? void 0 : _a.rules;\n\n  if (context.firestoreRules && rulesFile) {\n    const rulesDeploy = new rulesDeploy_1.RulesDeploy(options, rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n\n    _.set(context, \"firestore.rulesDeploy\", rulesDeploy);\n\n    rulesDeploy.addFile(rulesFile);\n    await rulesDeploy.compile();\n  }\n}\n\nfunction prepareIndexes(context, options) {\n  var _a;\n\n  if (!context.firestoreIndexes || !((_a = options.config.src.firestore) === null || _a === void 0 ? void 0 : _a.indexes)) {\n    return;\n  }\n\n  const indexesFileName = options.config.src.firestore.indexes;\n  const indexesPath = options.config.path(indexesFileName);\n  const parsedSrc = loadCJSON(indexesPath);\n  utils.logBullet(`${clc.bold.cyan(\"firestore:\")} reading indexes from ${clc.bold(indexesFileName)}...`);\n  context.firestore = context.firestore || {};\n  context.firestore.indexes = {\n    name: indexesFileName,\n    content: parsedSrc\n  };\n}\n\nasync function default_1(context, options) {\n  if (options.only) {\n    const targets = options.only.split(\",\");\n    const onlyIndexes = targets.indexOf(\"firestore:indexes\") >= 0;\n    const onlyRules = targets.indexOf(\"firestore:rules\") >= 0;\n    const onlyFirestore = targets.indexOf(\"firestore\") >= 0;\n    context.firestoreIndexes = onlyIndexes || onlyFirestore;\n    context.firestoreRules = onlyRules || onlyFirestore;\n  } else {\n    context.firestoreIndexes = true;\n    context.firestoreRules = true;\n  }\n\n  prepareIndexes(context, options);\n  await prepareRules(context, options);\n}\n\nexports.default = default_1;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/firestore/prepare.js"],"names":["Object","defineProperty","exports","value","_","require","clc","loadCJSON","rulesDeploy_1","utils","prepareRules","context","options","_a","rulesFile","config","src","firestore","rules","firestoreRules","rulesDeploy","RulesDeploy","RulesetServiceType","CLOUD_FIRESTORE","set","addFile","compile","prepareIndexes","firestoreIndexes","indexes","indexesFileName","indexesPath","path","parsedSrc","logBullet","bold","cyan","name","content","default_1","only","targets","split","onlyIndexes","indexOf","onlyRules","onlyFirestore","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst loadCJSON = require(\"../../loadCJSON\");\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\nconst utils = require(\"../../utils\");\nasync function prepareRules(context, options) {\n    var _a;\n    const rulesFile = (_a = options.config.src.firestore) === null || _a === void 0 ? void 0 : _a.rules;\n    if (context.firestoreRules && rulesFile) {\n        const rulesDeploy = new rulesDeploy_1.RulesDeploy(options, rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n        _.set(context, \"firestore.rulesDeploy\", rulesDeploy);\n        rulesDeploy.addFile(rulesFile);\n        await rulesDeploy.compile();\n    }\n}\nfunction prepareIndexes(context, options) {\n    var _a;\n    if (!context.firestoreIndexes || !((_a = options.config.src.firestore) === null || _a === void 0 ? void 0 : _a.indexes)) {\n        return;\n    }\n    const indexesFileName = options.config.src.firestore.indexes;\n    const indexesPath = options.config.path(indexesFileName);\n    const parsedSrc = loadCJSON(indexesPath);\n    utils.logBullet(`${clc.bold.cyan(\"firestore:\")} reading indexes from ${clc.bold(indexesFileName)}...`);\n    context.firestore = context.firestore || {};\n    context.firestore.indexes = {\n        name: indexesFileName,\n        content: parsedSrc,\n    };\n}\nasync function default_1(context, options) {\n    if (options.only) {\n        const targets = options.only.split(\",\");\n        const onlyIndexes = targets.indexOf(\"firestore:indexes\") >= 0;\n        const onlyRules = targets.indexOf(\"firestore:rules\") >= 0;\n        const onlyFirestore = targets.indexOf(\"firestore\") >= 0;\n        context.firestoreIndexes = onlyIndexes || onlyFirestore;\n        context.firestoreRules = onlyRules || onlyFirestore;\n    }\n    else {\n        context.firestoreIndexes = true;\n        context.firestoreRules = true;\n    }\n    prepareIndexes(context, options);\n    await prepareRules(context, options);\n}\nexports.default = default_1;\n"]},"metadata":{},"sourceType":"script"}