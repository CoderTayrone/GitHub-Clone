{"ast":null,"code":"'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n\nvar runAsync = require('run-async');\n\nvar {\n  filter,\n  flatMap,\n  share,\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Choices = require('../objects/choices');\n\nvar ScreenManager = require('../utils/screen-manager');\n\nclass Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    _.assign(this, {\n      answers: answers,\n      status: 'pending'\n    }); // Set defaults prompt options\n\n\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      filter: val => val,\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?')\n    }); // Make sure name is present\n\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    } // Set default message if no message defined\n\n\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    } // Normalize choices\n\n\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n\n  run() {\n    return new Promise(resolve => {\n      this._run(value => resolve(value));\n    });\n  } // Default noop (this one should be overwritten in prompts)\n\n\n  _run(cb) {\n    cb();\n  }\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n\n\n  close() {\n    this.screen.releaseCursor();\n  }\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n\n\n  handleSubmitEvents(submit) {\n    var self = this;\n    var validate = runAsync(this.opt.validate);\n    var asyncFilter = runAsync(this.opt.filter);\n    var validation = submit.pipe(flatMap(value => asyncFilter(value, self.answers).then(filteredValue => validate(filteredValue, self.answers).then(isValid => ({\n      isValid: isValid,\n      value: filteredValue\n    }), err => ({\n      isValid: err\n    })), err => ({\n      isValid: err\n    }))), share());\n    var success = validation.pipe(filter(state => state.isValid === true), take(1));\n    var error = validation.pipe(filter(state => state.isValid !== true), takeUntil(success));\n    return {\n      success: success,\n      error: error\n    };\n  }\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n\n\n  getQuestion() {\n    var message = this.opt.prefix + ' ' + chalk.bold(this.opt.message) + this.opt.suffix + chalk.reset(' '); // Append the default if available, and if question isn't answered\n\n    if (this.opt.default != null && this.status !== 'answered') {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n\n}\n\nmodule.exports = Prompt;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/prompts/base.js"],"names":["_","require","chalk","runAsync","filter","flatMap","share","take","takeUntil","Choices","ScreenManager","Prompt","constructor","question","rl","answers","assign","status","opt","defaults","clone","validate","val","when","suffix","prefix","green","name","throwParamError","message","Array","isArray","choices","screen","run","Promise","resolve","_run","value","cb","Error","close","releaseCursor","handleSubmitEvents","submit","self","asyncFilter","validation","pipe","then","filteredValue","isValid","err","success","state","error","getQuestion","bold","reset","default","type","italic","dim","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\n\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar runAsync = require('run-async');\nvar { filter, flatMap, share, take, takeUntil } = require('rxjs/operators');\nvar Choices = require('../objects/choices');\nvar ScreenManager = require('../utils/screen-manager');\n\nclass Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    _.assign(this, {\n      answers: answers,\n      status: 'pending'\n    });\n\n    // Set defaults prompt options\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      filter: val => val,\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?')\n    });\n\n    // Make sure name is present\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    }\n\n    // Set default message if no message defined\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    }\n\n    // Normalize choices\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n  run() {\n    return new Promise(resolve => {\n      this._run(value => resolve(value));\n    });\n  }\n\n  // Default noop (this one should be overwritten in prompts)\n  _run(cb) {\n    cb();\n  }\n\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n  close() {\n    this.screen.releaseCursor();\n  }\n\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n  handleSubmitEvents(submit) {\n    var self = this;\n    var validate = runAsync(this.opt.validate);\n    var asyncFilter = runAsync(this.opt.filter);\n    var validation = submit.pipe(\n      flatMap(value =>\n        asyncFilter(value, self.answers).then(\n          filteredValue =>\n            validate(filteredValue, self.answers).then(\n              isValid => ({ isValid: isValid, value: filteredValue }),\n              err => ({ isValid: err })\n            ),\n          err => ({ isValid: err })\n        )\n      ),\n      share()\n    );\n\n    var success = validation.pipe(\n      filter(state => state.isValid === true),\n      take(1)\n    );\n    var error = validation.pipe(\n      filter(state => state.isValid !== true),\n      takeUntil(success)\n    );\n\n    return {\n      success: success,\n      error: error\n    };\n  }\n\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n\n  getQuestion() {\n    var message =\n      this.opt.prefix +\n      ' ' +\n      chalk.bold(this.opt.message) +\n      this.opt.suffix +\n      chalk.reset(' ');\n\n    // Append the default if available, and if question isn't answered\n    if (this.opt.default != null && this.status !== 'answered') {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n}\n\nmodule.exports = Prompt;\n"]},"metadata":{},"sourceType":"script"}