{"ast":null,"code":"const nonJsonTypes = [\"function\", \"symbol\", \"undefined\"];\nconst protectedProps = [\"constructor\", \"prototype\", \"__proto__\"];\nconst objectPrototype = Object.getPrototypeOf({});\n/**\n * Custom JSON serializer for Error objects.\n * Returns all built-in error properties, as well as extended properties.\n */\n\nexport function toJSON() {\n  // HACK: We have to cast the objects to `any` so we can use symbol indexers.\n  // see https://github.com/Microsoft/TypeScript/issues/1863\n  let pojo = {};\n  let error = this;\n\n  for (let key of getDeepKeys(error)) {\n    if (typeof key === \"string\") {\n      let value = error[key];\n      let type = typeof value;\n\n      if (!nonJsonTypes.includes(type)) {\n        pojo[key] = value;\n      }\n    }\n  }\n\n  return pojo;\n}\n/**\n * Returns own, inherited, enumerable, non-enumerable, string, and symbol keys of `obj`.\n * Does NOT return members of the base Object prototype, or the specified omitted keys.\n */\n\nexport function getDeepKeys(obj, omit = []) {\n  let keys = []; // Crawl the prototype chain, finding all the string and symbol keys\n\n  while (obj && obj !== objectPrototype) {\n    keys = keys.concat(Object.getOwnPropertyNames(obj), Object.getOwnPropertySymbols(obj));\n    obj = Object.getPrototypeOf(obj);\n  } // De-duplicate the list of keys\n\n\n  let uniqueKeys = new Set(keys); // Remove any omitted keys\n\n  for (let key of omit.concat(protectedProps)) {\n    uniqueKeys.delete(key);\n  }\n\n  return uniqueKeys;\n}","map":{"version":3,"sources":["../src/to-json.ts"],"names":[],"mappings":"AAEA,MAAM,YAAY,GAAG,CAAC,UAAD,EAAa,QAAb,EAAuB,WAAvB,CAArB;AACA,MAAM,cAAc,GAAG,CAAC,aAAD,EAAgB,WAAhB,EAA6B,WAA7B,CAAvB;AACA,MAAM,eAAe,GAAG,MAAM,CAAC,cAAP,CAAsB,EAAtB,CAAxB;AAEA;;;AAGG;;AACH,OAAM,SAAU,MAAV,GAAgB;AACpB;AACA;AACA,MAAI,IAAI,GAAQ,EAAhB;AACA,MAAI,KAAK,GAAG,IAAZ;;AAEA,OAAK,IAAI,GAAT,IAAgB,WAAW,CAAC,KAAD,CAA3B,EAAoC;AAClC,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAI,KAAK,GAAG,KAAK,CAAC,GAAD,CAAjB;AACA,UAAI,IAAI,GAAG,OAAO,KAAlB;;AAEA,UAAI,CAAC,YAAY,CAAC,QAAb,CAAsB,IAAtB,CAAL,EAAkC;AAChC,QAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,KAAZ;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;AAGD;;;AAGG;;AACH,OAAM,SAAU,WAAV,CAAsB,GAAtB,EAAmC,IAAA,GAA+B,EAAlE,EAAoE;AACxE,MAAI,IAAI,GAA2B,EAAnC,CADwE,CAGxE;;AACA,SAAO,GAAG,IAAI,GAAG,KAAK,eAAtB,EAAuC;AACrC,IAAA,IAAI,GAAG,IAAI,CAAC,MAAL,CACL,MAAM,CAAC,mBAAP,CAA2B,GAA3B,CADK,EAEL,MAAM,CAAC,qBAAP,CAA6B,GAA7B,CAFK,CAAP;AAIA,IAAA,GAAG,GAAG,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAAN;AACD,GAVuE,CAYxE;;;AACA,MAAI,UAAU,GAAG,IAAI,GAAJ,CAAQ,IAAR,CAAjB,CAbwE,CAexE;;AACA,OAAK,IAAI,GAAT,IAAgB,IAAI,CAAC,MAAL,CAAY,cAAZ,CAAhB,EAA6C;AAC3C,IAAA,UAAU,CAAC,MAAX,CAAkB,GAAlB;AACD;;AAED,SAAO,UAAP;AACD","sourceRoot":"","sourcesContent":["const nonJsonTypes = [\"function\", \"symbol\", \"undefined\"];\nconst protectedProps = [\"constructor\", \"prototype\", \"__proto__\"];\nconst objectPrototype = Object.getPrototypeOf({});\n/**\n * Custom JSON serializer for Error objects.\n * Returns all built-in error properties, as well as extended properties.\n */\nexport function toJSON() {\n    // HACK: We have to cast the objects to `any` so we can use symbol indexers.\n    // see https://github.com/Microsoft/TypeScript/issues/1863\n    let pojo = {};\n    let error = this;\n    for (let key of getDeepKeys(error)) {\n        if (typeof key === \"string\") {\n            let value = error[key];\n            let type = typeof value;\n            if (!nonJsonTypes.includes(type)) {\n                pojo[key] = value;\n            }\n        }\n    }\n    return pojo;\n}\n/**\n * Returns own, inherited, enumerable, non-enumerable, string, and symbol keys of `obj`.\n * Does NOT return members of the base Object prototype, or the specified omitted keys.\n */\nexport function getDeepKeys(obj, omit = []) {\n    let keys = [];\n    // Crawl the prototype chain, finding all the string and symbol keys\n    while (obj && obj !== objectPrototype) {\n        keys = keys.concat(Object.getOwnPropertyNames(obj), Object.getOwnPropertySymbols(obj));\n        obj = Object.getPrototypeOf(obj);\n    }\n    // De-duplicate the list of keys\n    let uniqueKeys = new Set(keys);\n    // Remove any omitted keys\n    for (let key of omit.concat(protectedProps)) {\n        uniqueKeys.delete(key);\n    }\n    return uniqueKeys;\n}\n//# sourceMappingURL=to-json.js.map"]},"metadata":{},"sourceType":"module"}