{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.testIamPermissions = exports.testResourceIamPermissions = exports.getRole = exports.deleteServiceAccount = exports.createServiceAccountKey = exports.getServiceAccount = exports.createServiceAccount = void 0;\n\nconst api = require(\"../api\");\n\nconst utils_1 = require(\"../utils\");\n\nconst lodash_1 = require(\"lodash\");\n\nconst logger_1 = require(\"../logger\");\n\nconst API_VERSION = \"v1\";\n\nasync function createServiceAccount(projectId, accountId, description, displayName) {\n  const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}/serviceAccounts`, {\n    auth: true,\n    origin: api.iamOrigin,\n    data: {\n      accountId,\n      serviceAccount: {\n        displayName,\n        description\n      }\n    }\n  });\n  return response.body;\n}\n\nexports.createServiceAccount = createServiceAccount;\n\nasync function getServiceAccount(projectId, serviceAccountName) {\n  const response = await api.request(\"GET\", `/${API_VERSION}/projects/${projectId}/serviceAccounts/${serviceAccountName}@${projectId}.iam.gserviceaccount.com`, {\n    auth: true,\n    origin: api.iamOrigin\n  });\n  return response.body;\n}\n\nexports.getServiceAccount = getServiceAccount;\n\nasync function createServiceAccountKey(projectId, serviceAccountName) {\n  const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}/serviceAccounts/${serviceAccountName}@${projectId}.iam.gserviceaccount.com/keys`, {\n    auth: true,\n    origin: api.iamOrigin,\n    data: {\n      keyAlgorithm: \"KEY_ALG_UNSPECIFIED\",\n      privateKeyType: \"TYPE_GOOGLE_CREDENTIALS_FILE\"\n    }\n  });\n  return response.body;\n}\n\nexports.createServiceAccountKey = createServiceAccountKey;\n\nfunction deleteServiceAccount(projectId, accountEmail) {\n  return api.request(\"DELETE\", `/${API_VERSION}/projects/${projectId}/serviceAccounts/${accountEmail}`, {\n    auth: true,\n    origin: api.iamOrigin,\n    resolveOnHTTPError: true\n  });\n}\n\nexports.deleteServiceAccount = deleteServiceAccount;\n\nasync function getRole(role) {\n  const response = await api.request(\"GET\", utils_1.endpoint([API_VERSION, \"roles\", role]), {\n    auth: true,\n    origin: api.iamOrigin,\n    retryCodes: [500, 503]\n  });\n  return response.body;\n}\n\nexports.getRole = getRole;\n\nasync function testResourceIamPermissions(origin, apiVersion, resourceName, permissions) {\n  if (process.env.FIREBASE_SKIP_INFORMATIONAL_IAM) {\n    logger_1.logger.debug(\"[iam] skipping informational check of permissions\", JSON.stringify(permissions), \"on resource\", resourceName);\n    return {\n      allowed: permissions,\n      missing: [],\n      passed: true\n    };\n  }\n\n  const response = await api.request(\"POST\", `/${apiVersion}/${resourceName}:testIamPermissions`, {\n    auth: true,\n    data: {\n      permissions\n    },\n    origin\n  });\n  const allowed = (response.body.permissions || []).sort();\n  const missing = lodash_1.difference(permissions, allowed);\n  return {\n    allowed,\n    missing,\n    passed: missing.length === 0\n  };\n}\n\nexports.testResourceIamPermissions = testResourceIamPermissions;\n\nasync function testIamPermissions(projectId, permissions) {\n  return testResourceIamPermissions(api.resourceManagerOrigin, \"v1\", `projects/${projectId}`, permissions);\n}\n\nexports.testIamPermissions = testIamPermissions;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/gcp/iam.js"],"names":["Object","defineProperty","exports","value","testIamPermissions","testResourceIamPermissions","getRole","deleteServiceAccount","createServiceAccountKey","getServiceAccount","createServiceAccount","api","require","utils_1","lodash_1","logger_1","API_VERSION","projectId","accountId","description","displayName","response","request","auth","origin","iamOrigin","data","serviceAccount","body","serviceAccountName","keyAlgorithm","privateKeyType","accountEmail","resolveOnHTTPError","role","endpoint","retryCodes","apiVersion","resourceName","permissions","process","env","FIREBASE_SKIP_INFORMATIONAL_IAM","logger","debug","JSON","stringify","allowed","missing","passed","sort","difference","length","resourceManagerOrigin"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.testIamPermissions = exports.testResourceIamPermissions = exports.getRole = exports.deleteServiceAccount = exports.createServiceAccountKey = exports.getServiceAccount = exports.createServiceAccount = void 0;\nconst api = require(\"../api\");\nconst utils_1 = require(\"../utils\");\nconst lodash_1 = require(\"lodash\");\nconst logger_1 = require(\"../logger\");\nconst API_VERSION = \"v1\";\nasync function createServiceAccount(projectId, accountId, description, displayName) {\n    const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}/serviceAccounts`, {\n        auth: true,\n        origin: api.iamOrigin,\n        data: {\n            accountId,\n            serviceAccount: {\n                displayName,\n                description,\n            },\n        },\n    });\n    return response.body;\n}\nexports.createServiceAccount = createServiceAccount;\nasync function getServiceAccount(projectId, serviceAccountName) {\n    const response = await api.request(\"GET\", `/${API_VERSION}/projects/${projectId}/serviceAccounts/${serviceAccountName}@${projectId}.iam.gserviceaccount.com`, {\n        auth: true,\n        origin: api.iamOrigin,\n    });\n    return response.body;\n}\nexports.getServiceAccount = getServiceAccount;\nasync function createServiceAccountKey(projectId, serviceAccountName) {\n    const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}/serviceAccounts/${serviceAccountName}@${projectId}.iam.gserviceaccount.com/keys`, {\n        auth: true,\n        origin: api.iamOrigin,\n        data: {\n            keyAlgorithm: \"KEY_ALG_UNSPECIFIED\",\n            privateKeyType: \"TYPE_GOOGLE_CREDENTIALS_FILE\",\n        },\n    });\n    return response.body;\n}\nexports.createServiceAccountKey = createServiceAccountKey;\nfunction deleteServiceAccount(projectId, accountEmail) {\n    return api.request(\"DELETE\", `/${API_VERSION}/projects/${projectId}/serviceAccounts/${accountEmail}`, {\n        auth: true,\n        origin: api.iamOrigin,\n        resolveOnHTTPError: true,\n    });\n}\nexports.deleteServiceAccount = deleteServiceAccount;\nasync function getRole(role) {\n    const response = await api.request(\"GET\", utils_1.endpoint([API_VERSION, \"roles\", role]), {\n        auth: true,\n        origin: api.iamOrigin,\n        retryCodes: [500, 503],\n    });\n    return response.body;\n}\nexports.getRole = getRole;\nasync function testResourceIamPermissions(origin, apiVersion, resourceName, permissions) {\n    if (process.env.FIREBASE_SKIP_INFORMATIONAL_IAM) {\n        logger_1.logger.debug(\"[iam] skipping informational check of permissions\", JSON.stringify(permissions), \"on resource\", resourceName);\n        return { allowed: permissions, missing: [], passed: true };\n    }\n    const response = await api.request(\"POST\", `/${apiVersion}/${resourceName}:testIamPermissions`, {\n        auth: true,\n        data: { permissions },\n        origin,\n    });\n    const allowed = (response.body.permissions || []).sort();\n    const missing = lodash_1.difference(permissions, allowed);\n    return {\n        allowed,\n        missing,\n        passed: missing.length === 0,\n    };\n}\nexports.testResourceIamPermissions = testResourceIamPermissions;\nasync function testIamPermissions(projectId, permissions) {\n    return testResourceIamPermissions(api.resourceManagerOrigin, \"v1\", `projects/${projectId}`, permissions);\n}\nexports.testIamPermissions = testIamPermissions;\n"]},"metadata":{},"sourceType":"script"}