{"ast":null,"code":"/**\n * node-compress-commons\n *\n * Copyright (c) 2014 Chris Talkington, contributors.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\n */\nvar inherits = require('util').inherits;\n\nvar normalizePath = require('normalize-path');\n\nvar ArchiveEntry = require('../archive-entry');\n\nvar GeneralPurposeBit = require('./general-purpose-bit');\n\nvar UnixStat = require('./unix-stat');\n\nvar constants = require('./constants');\n\nvar zipUtil = require('./util');\n\nvar ZipArchiveEntry = module.exports = function (name) {\n  if (!(this instanceof ZipArchiveEntry)) {\n    return new ZipArchiveEntry(name);\n  }\n\n  ArchiveEntry.call(this);\n  this.platform = constants.PLATFORM_FAT;\n  this.method = -1;\n  this.name = null;\n  this.size = 0;\n  this.csize = 0;\n  this.gpb = new GeneralPurposeBit();\n  this.crc = 0;\n  this.time = -1;\n  this.minver = constants.MIN_VERSION_INITIAL;\n  this.mode = -1;\n  this.extra = null;\n  this.exattr = 0;\n  this.inattr = 0;\n  this.comment = null;\n\n  if (name) {\n    this.setName(name);\n  }\n};\n\ninherits(ZipArchiveEntry, ArchiveEntry);\n/**\n * Returns the extra fields related to the entry.\n *\n * @returns {Buffer}\n */\n\nZipArchiveEntry.prototype.getCentralDirectoryExtra = function () {\n  return this.getExtra();\n};\n/**\n * Returns the comment set for the entry.\n *\n * @returns {string}\n */\n\n\nZipArchiveEntry.prototype.getComment = function () {\n  return this.comment !== null ? this.comment : '';\n};\n/**\n * Returns the compressed size of the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getCompressedSize = function () {\n  return this.csize;\n};\n/**\n * Returns the CRC32 digest for the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getCrc = function () {\n  return this.crc;\n};\n/**\n * Returns the external file attributes for the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getExternalAttributes = function () {\n  return this.exattr;\n};\n/**\n * Returns the extra fields related to the entry.\n *\n * @returns {Buffer}\n */\n\n\nZipArchiveEntry.prototype.getExtra = function () {\n  return this.extra !== null ? this.extra : constants.EMPTY;\n};\n/**\n * Returns the general purpose bits related to the entry.\n *\n * @returns {GeneralPurposeBit}\n */\n\n\nZipArchiveEntry.prototype.getGeneralPurposeBit = function () {\n  return this.gpb;\n};\n/**\n * Returns the internal file attributes for the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getInternalAttributes = function () {\n  return this.inattr;\n};\n/**\n * Returns the last modified date of the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getLastModifiedDate = function () {\n  return this.getTime();\n};\n/**\n * Returns the extra fields related to the entry.\n *\n * @returns {Buffer}\n */\n\n\nZipArchiveEntry.prototype.getLocalFileDataExtra = function () {\n  return this.getExtra();\n};\n/**\n * Returns the compression method used on the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getMethod = function () {\n  return this.method;\n};\n/**\n * Returns the filename of the entry.\n *\n * @returns {string}\n */\n\n\nZipArchiveEntry.prototype.getName = function () {\n  return this.name;\n};\n/**\n * Returns the platform on which the entry was made.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getPlatform = function () {\n  return this.platform;\n};\n/**\n * Returns the size of the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getSize = function () {\n  return this.size;\n};\n/**\n * Returns a date object representing the last modified date of the entry.\n *\n * @returns {number|Date}\n */\n\n\nZipArchiveEntry.prototype.getTime = function () {\n  return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;\n};\n/**\n * Returns the DOS timestamp for the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getTimeDos = function () {\n  return this.time !== -1 ? this.time : 0;\n};\n/**\n * Returns the UNIX file permissions for the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getUnixMode = function () {\n  return this.platform !== constants.PLATFORM_UNIX ? 0 : this.getExternalAttributes() >> constants.SHORT_SHIFT & constants.SHORT_MASK;\n};\n/**\n * Returns the version of ZIP needed to extract the entry.\n *\n * @returns {number}\n */\n\n\nZipArchiveEntry.prototype.getVersionNeededToExtract = function () {\n  return this.minver;\n};\n/**\n * Sets the comment of the entry.\n *\n * @param comment\n */\n\n\nZipArchiveEntry.prototype.setComment = function (comment) {\n  if (Buffer.byteLength(comment) !== comment.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.comment = comment;\n};\n/**\n * Sets the compressed size of the entry.\n *\n * @param size\n */\n\n\nZipArchiveEntry.prototype.setCompressedSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry compressed size');\n  }\n\n  this.csize = size;\n};\n/**\n * Sets the checksum of the entry.\n *\n * @param crc\n */\n\n\nZipArchiveEntry.prototype.setCrc = function (crc) {\n  if (crc < 0) {\n    throw new Error('invalid entry crc32');\n  }\n\n  this.crc = crc;\n};\n/**\n * Sets the external file attributes of the entry.\n *\n * @param attr\n */\n\n\nZipArchiveEntry.prototype.setExternalAttributes = function (attr) {\n  this.exattr = attr >>> 0;\n};\n/**\n * Sets the extra fields related to the entry.\n *\n * @param extra\n */\n\n\nZipArchiveEntry.prototype.setExtra = function (extra) {\n  this.extra = extra;\n};\n/**\n * Sets the general purpose bits related to the entry.\n *\n * @param gpb\n */\n\n\nZipArchiveEntry.prototype.setGeneralPurposeBit = function (gpb) {\n  if (!(gpb instanceof GeneralPurposeBit)) {\n    throw new Error('invalid entry GeneralPurposeBit');\n  }\n\n  this.gpb = gpb;\n};\n/**\n * Sets the internal file attributes of the entry.\n *\n * @param attr\n */\n\n\nZipArchiveEntry.prototype.setInternalAttributes = function (attr) {\n  this.inattr = attr;\n};\n/**\n * Sets the compression method of the entry.\n *\n * @param method\n */\n\n\nZipArchiveEntry.prototype.setMethod = function (method) {\n  if (method < 0) {\n    throw new Error('invalid entry compression method');\n  }\n\n  this.method = method;\n};\n/**\n * Sets the name of the entry.\n *\n * @param name\n * @param prependSlash\n */\n\n\nZipArchiveEntry.prototype.setName = function (name, prependSlash = false) {\n  name = normalizePath(name, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\n\n  if (prependSlash) {\n    name = `/${name}`;\n  }\n\n  if (Buffer.byteLength(name) !== name.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.name = name;\n};\n/**\n * Sets the platform on which the entry was made.\n *\n * @param platform\n */\n\n\nZipArchiveEntry.prototype.setPlatform = function (platform) {\n  this.platform = platform;\n};\n/**\n * Sets the size of the entry.\n *\n * @param size\n */\n\n\nZipArchiveEntry.prototype.setSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry size');\n  }\n\n  this.size = size;\n};\n/**\n * Sets the time of the entry.\n *\n * @param time\n * @param forceLocalTime\n */\n\n\nZipArchiveEntry.prototype.setTime = function (time, forceLocalTime) {\n  if (!(time instanceof Date)) {\n    throw new Error('invalid entry time');\n  }\n\n  this.time = zipUtil.dateToDos(time, forceLocalTime);\n};\n/**\n * Sets the UNIX file permissions for the entry.\n *\n * @param mode\n */\n\n\nZipArchiveEntry.prototype.setUnixMode = function (mode) {\n  mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;\n  var extattr = 0;\n  extattr |= mode << constants.SHORT_SHIFT | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);\n  this.setExternalAttributes(extattr);\n  this.mode = mode & constants.MODE_MASK;\n  this.platform = constants.PLATFORM_UNIX;\n};\n/**\n * Sets the version of ZIP needed to extract this entry.\n *\n * @param minver\n */\n\n\nZipArchiveEntry.prototype.setVersionNeededToExtract = function (minver) {\n  this.minver = minver;\n};\n/**\n * Returns true if this entry represents a directory.\n *\n * @returns {boolean}\n */\n\n\nZipArchiveEntry.prototype.isDirectory = function () {\n  return this.getName().slice(-1) === '/';\n};\n/**\n * Returns true if this entry represents a unix symlink,\n * in which case the entry's content contains the target path\n * for the symlink.\n *\n * @returns {boolean}\n */\n\n\nZipArchiveEntry.prototype.isUnixSymlink = function () {\n  return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;\n};\n/**\n * Returns true if this entry is using the ZIP64 extension of ZIP.\n *\n * @returns {boolean}\n */\n\n\nZipArchiveEntry.prototype.isZip64 = function () {\n  return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/compress-commons/lib/archivers/zip/zip-archive-entry.js"],"names":["inherits","require","normalizePath","ArchiveEntry","GeneralPurposeBit","UnixStat","constants","zipUtil","ZipArchiveEntry","module","exports","name","call","platform","PLATFORM_FAT","method","size","csize","gpb","crc","time","minver","MIN_VERSION_INITIAL","mode","extra","exattr","inattr","comment","setName","prototype","getCentralDirectoryExtra","getExtra","getComment","getCompressedSize","getCrc","getExternalAttributes","EMPTY","getGeneralPurposeBit","getInternalAttributes","getLastModifiedDate","getTime","getLocalFileDataExtra","getMethod","getName","getPlatform","getSize","dosToDate","getTimeDos","getUnixMode","PLATFORM_UNIX","SHORT_SHIFT","SHORT_MASK","getVersionNeededToExtract","setComment","Buffer","byteLength","length","useUTF8ForNames","setCompressedSize","Error","setCrc","setExternalAttributes","attr","setExtra","setGeneralPurposeBit","setInternalAttributes","setMethod","prependSlash","replace","setPlatform","setSize","setTime","forceLocalTime","Date","dateToDos","setUnixMode","isDirectory","S_IFDIR","S_IFREG","extattr","S_DOS_D","S_DOS_A","MODE_MASK","setVersionNeededToExtract","slice","isUnixSymlink","FILE_TYPE_FLAG","LINK_FLAG","isZip64","ZIP64_MAGIC"],"mappings":"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","sourcesContent":["/**\n * node-compress-commons\n *\n * Copyright (c) 2014 Chris Talkington, contributors.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\n */\nvar inherits = require('util').inherits;\nvar normalizePath = require('normalize-path');\n\nvar ArchiveEntry = require('../archive-entry');\nvar GeneralPurposeBit = require('./general-purpose-bit');\nvar UnixStat = require('./unix-stat');\n\nvar constants = require('./constants');\nvar zipUtil = require('./util');\n\nvar ZipArchiveEntry = module.exports = function(name) {\n  if (!(this instanceof ZipArchiveEntry)) {\n    return new ZipArchiveEntry(name);\n  }\n\n  ArchiveEntry.call(this);\n\n  this.platform = constants.PLATFORM_FAT;\n  this.method = -1;\n\n  this.name = null;\n  this.size = 0;\n  this.csize = 0;\n  this.gpb = new GeneralPurposeBit();\n  this.crc = 0;\n  this.time = -1;\n\n  this.minver = constants.MIN_VERSION_INITIAL;\n  this.mode = -1;\n  this.extra = null;\n  this.exattr = 0;\n  this.inattr = 0;\n  this.comment = null;\n\n  if (name) {\n    this.setName(name);\n  }\n};\n\ninherits(ZipArchiveEntry, ArchiveEntry);\n\n/**\n * Returns the extra fields related to the entry.\n *\n * @returns {Buffer}\n */\nZipArchiveEntry.prototype.getCentralDirectoryExtra = function() {\n  return this.getExtra();\n};\n\n/**\n * Returns the comment set for the entry.\n *\n * @returns {string}\n */\nZipArchiveEntry.prototype.getComment = function() {\n  return this.comment !== null ? this.comment : '';\n};\n\n/**\n * Returns the compressed size of the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getCompressedSize = function() {\n  return this.csize;\n};\n\n/**\n * Returns the CRC32 digest for the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getCrc = function() {\n  return this.crc;\n};\n\n/**\n * Returns the external file attributes for the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getExternalAttributes = function() {\n  return this.exattr;\n};\n\n/**\n * Returns the extra fields related to the entry.\n *\n * @returns {Buffer}\n */\nZipArchiveEntry.prototype.getExtra = function() {\n  return this.extra !== null ? this.extra : constants.EMPTY;\n};\n\n/**\n * Returns the general purpose bits related to the entry.\n *\n * @returns {GeneralPurposeBit}\n */\nZipArchiveEntry.prototype.getGeneralPurposeBit = function() {\n  return this.gpb;\n};\n\n/**\n * Returns the internal file attributes for the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getInternalAttributes = function() {\n  return this.inattr;\n};\n\n/**\n * Returns the last modified date of the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getLastModifiedDate = function() {\n  return this.getTime();\n};\n\n/**\n * Returns the extra fields related to the entry.\n *\n * @returns {Buffer}\n */\nZipArchiveEntry.prototype.getLocalFileDataExtra = function() {\n  return this.getExtra();\n};\n\n/**\n * Returns the compression method used on the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getMethod = function() {\n  return this.method;\n};\n\n/**\n * Returns the filename of the entry.\n *\n * @returns {string}\n */\nZipArchiveEntry.prototype.getName = function() {\n  return this.name;\n};\n\n/**\n * Returns the platform on which the entry was made.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getPlatform = function() {\n  return this.platform;\n};\n\n/**\n * Returns the size of the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getSize = function() {\n  return this.size;\n};\n\n/**\n * Returns a date object representing the last modified date of the entry.\n *\n * @returns {number|Date}\n */\nZipArchiveEntry.prototype.getTime = function() {\n  return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;\n};\n\n/**\n * Returns the DOS timestamp for the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getTimeDos = function() {\n  return this.time !== -1 ? this.time : 0;\n};\n\n/**\n * Returns the UNIX file permissions for the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getUnixMode = function() {\n  return this.platform !== constants.PLATFORM_UNIX ? 0 : ((this.getExternalAttributes() >> constants.SHORT_SHIFT) & constants.SHORT_MASK);\n};\n\n/**\n * Returns the version of ZIP needed to extract the entry.\n *\n * @returns {number}\n */\nZipArchiveEntry.prototype.getVersionNeededToExtract = function() {\n  return this.minver;\n};\n\n/**\n * Sets the comment of the entry.\n *\n * @param comment\n */\nZipArchiveEntry.prototype.setComment = function(comment) {\n  if (Buffer.byteLength(comment) !== comment.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.comment = comment;\n};\n\n/**\n * Sets the compressed size of the entry.\n *\n * @param size\n */\nZipArchiveEntry.prototype.setCompressedSize = function(size) {\n  if (size < 0) {\n    throw new Error('invalid entry compressed size');\n  }\n\n  this.csize = size;\n};\n\n/**\n * Sets the checksum of the entry.\n *\n * @param crc\n */\nZipArchiveEntry.prototype.setCrc = function(crc) {\n  if (crc < 0) {\n    throw new Error('invalid entry crc32');\n  }\n\n  this.crc = crc;\n};\n\n/**\n * Sets the external file attributes of the entry.\n *\n * @param attr\n */\nZipArchiveEntry.prototype.setExternalAttributes = function(attr) {\n  this.exattr = attr >>> 0;\n};\n\n/**\n * Sets the extra fields related to the entry.\n *\n * @param extra\n */\nZipArchiveEntry.prototype.setExtra = function(extra) {\n  this.extra = extra;\n};\n\n/**\n * Sets the general purpose bits related to the entry.\n *\n * @param gpb\n */\nZipArchiveEntry.prototype.setGeneralPurposeBit = function(gpb) {\n  if (!(gpb instanceof GeneralPurposeBit)) {\n    throw new Error('invalid entry GeneralPurposeBit');\n  }\n\n  this.gpb = gpb;\n};\n\n/**\n * Sets the internal file attributes of the entry.\n *\n * @param attr\n */\nZipArchiveEntry.prototype.setInternalAttributes = function(attr) {\n  this.inattr = attr;\n};\n\n/**\n * Sets the compression method of the entry.\n *\n * @param method\n */\nZipArchiveEntry.prototype.setMethod = function(method) {\n  if (method < 0) {\n    throw new Error('invalid entry compression method');\n  }\n\n  this.method = method;\n};\n\n/**\n * Sets the name of the entry.\n *\n * @param name\n * @param prependSlash\n */\nZipArchiveEntry.prototype.setName = function(name, prependSlash = false) {\n  name = normalizePath(name, false)\n    .replace(/^\\w+:/, '')\n    .replace(/^(\\.\\.\\/|\\/)+/, '');\n\n  if (prependSlash) {\n    name = `/${name}`;\n  }\n\n  if (Buffer.byteLength(name) !== name.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.name = name;\n};\n\n/**\n * Sets the platform on which the entry was made.\n *\n * @param platform\n */\nZipArchiveEntry.prototype.setPlatform = function(platform) {\n  this.platform = platform;\n};\n\n/**\n * Sets the size of the entry.\n *\n * @param size\n */\nZipArchiveEntry.prototype.setSize = function(size) {\n  if (size < 0) {\n    throw new Error('invalid entry size');\n  }\n\n  this.size = size;\n};\n\n/**\n * Sets the time of the entry.\n *\n * @param time\n * @param forceLocalTime\n */\nZipArchiveEntry.prototype.setTime = function(time, forceLocalTime) {\n  if (!(time instanceof Date)) {\n    throw new Error('invalid entry time');\n  }\n\n  this.time = zipUtil.dateToDos(time, forceLocalTime);\n};\n\n/**\n * Sets the UNIX file permissions for the entry.\n *\n * @param mode\n */\nZipArchiveEntry.prototype.setUnixMode = function(mode) {\n  mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;\n\n  var extattr = 0;\n  extattr |= (mode << constants.SHORT_SHIFT) | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);\n\n  this.setExternalAttributes(extattr);\n  this.mode = mode & constants.MODE_MASK;\n  this.platform = constants.PLATFORM_UNIX;\n};\n\n/**\n * Sets the version of ZIP needed to extract this entry.\n *\n * @param minver\n */\nZipArchiveEntry.prototype.setVersionNeededToExtract = function(minver) {\n  this.minver = minver;\n};\n\n/**\n * Returns true if this entry represents a directory.\n *\n * @returns {boolean}\n */\nZipArchiveEntry.prototype.isDirectory = function() {\n  return this.getName().slice(-1) === '/';\n};\n\n/**\n * Returns true if this entry represents a unix symlink,\n * in which case the entry's content contains the target path\n * for the symlink.\n *\n * @returns {boolean}\n */\nZipArchiveEntry.prototype.isUnixSymlink = function() {\n  return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;\n};\n\n/**\n * Returns true if this entry is using the ZIP64 extension of ZIP.\n *\n * @returns {boolean}\n */\nZipArchiveEntry.prototype.isZip64 = function() {\n  return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;\n};\n"]},"metadata":{},"sourceType":"script"}