{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Delegate = exports.tryCreateDelegate = exports.FUNCTIONS_RUNTIME = exports.FUNCTIONS_CODEGEN = exports.FUNCTIONS_SDK = exports.ADMIN_SDK = void 0;\n\nconst util_1 = require(\"util\");\n\nconst node_fetch_1 = require(\"node-fetch\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst portfinder = require(\"portfinder\");\n\nconst spawn = require(\"cross-spawn\");\n\nconst error_1 = require(\"../../../../error\");\n\nconst logger_1 = require(\"../../../../logger\");\n\nconst discovery = require(\"../discovery\");\n\nconst projectUtils_1 = require(\"../../../../projectUtils\");\n\nconst gomod = require(\"./gomod\");\n\nconst VERSION_TO_RUNTIME = {\n  \"1.13\": \"go113\"\n};\nexports.ADMIN_SDK = \"firebase.google.com/go/v4\";\nexports.FUNCTIONS_SDK = \"github.com/FirebaseExtended/firebase-functions-go\";\nexports.FUNCTIONS_CODEGEN = exports.FUNCTIONS_SDK + \"/support/codegen\";\nexports.FUNCTIONS_RUNTIME = exports.FUNCTIONS_SDK + \"/support/runtime\";\n\nasync function tryCreateDelegate(context, options) {\n  const relativeSourceDir = options.config.get(\"functions.source\");\n  const sourceDir = options.config.path(relativeSourceDir);\n  const goModPath = path.join(sourceDir, \"go.mod\");\n  const projectId = projectUtils_1.needProjectId(options);\n  let module;\n\n  try {\n    const modBuffer = await util_1.promisify(fs.readFile)(goModPath);\n    module = gomod.parseModule(modBuffer.toString(\"utf8\"));\n  } catch (err) {\n    logger_1.logger.debug(\"Customer code is not Golang code (or they aren't using gomod)\");\n    return;\n  }\n\n  let runtime = options.config.get(\"functions.runtime\");\n\n  if (!runtime) {\n    if (!module.version) {\n      throw new error_1.FirebaseError(\"Could not detect Golang version from go.mod\");\n    }\n\n    if (!VERSION_TO_RUNTIME[module.version]) {\n      throw new error_1.FirebaseError(`go.mod specifies Golang version ${module.version} which is unsupported by Google Cloud Functions. Valid values are ${Object.keys(VERSION_TO_RUNTIME).join(\", \")}`);\n    }\n\n    runtime = VERSION_TO_RUNTIME[module.version];\n  }\n\n  return new Delegate(projectId, sourceDir, runtime, module);\n}\n\nexports.tryCreateDelegate = tryCreateDelegate;\n\nclass Delegate {\n  constructor(projectId, sourceDir, runtime, module) {\n    this.projectId = projectId;\n    this.sourceDir = sourceDir;\n    this.runtime = runtime;\n    this.module = module;\n    this.name = \"golang\";\n  }\n\n  validate() {\n    return Promise.resolve();\n  }\n\n  async build() {\n    try {\n      await util_1.promisify(fs.mkdir)(path.join(this.sourceDir, \"autogen\"));\n    } catch (err) {\n      if ((err === null || err === void 0 ? void 0 : err.code) !== \"EEXIST\") {\n        throw new error_1.FirebaseError(\"Failed to create codegen directory\", {\n          children: [err]\n        });\n      }\n    }\n\n    const genBinary = spawn.sync(\"go\", [\"run\", exports.FUNCTIONS_CODEGEN, this.module.module], {\n      cwd: this.sourceDir,\n      env: {\n        HOME: process.env.HOME,\n        PATH: process.env.PATH,\n        GOPATH: process.env.GOPATH\n      },\n      stdio: [\"ignore\", \"pipe\", \"pipe\"]\n    });\n\n    if (genBinary.status != 0) {\n      throw new error_1.FirebaseError(\"Failed to run codegen\", {\n        children: [new Error(genBinary.stderr.toString())]\n      });\n    }\n\n    await util_1.promisify(fs.writeFile)(path.join(this.sourceDir, \"autogen\", \"main.go\"), genBinary.stdout);\n  }\n\n  watch() {\n    return Promise.resolve(() => Promise.resolve());\n  }\n\n  serve(port, adminPort, envs) {\n    const childProcess = spawn(\"go\", [\"run\", \"./autogen\"], {\n      env: Object.assign(Object.assign({}, envs), {\n        PORT: port.toString(),\n        ADMIN_PORT: adminPort.toString(),\n        HOME: process.env.HOME,\n        PATH: process.env.PATH,\n        GOPATH: process.env.GOPATH\n      }),\n      cwd: this.sourceDir,\n      stdio: [\"ignore\", \"pipe\", \"inherit\"]\n    });\n    childProcess.stdout.on(\"data\", chunk => {\n      logger_1.logger.debug(chunk.toString());\n    });\n    return Promise.resolve(async () => {\n      const p = new Promise((resolve, reject) => {\n        childProcess.once(\"exit\", resolve);\n        childProcess.once(\"error\", reject);\n      });\n      await node_fetch_1.default(`http://localhost:${adminPort}/quitquitquit`);\n      setTimeout(() => {\n        if (!childProcess.killed) {\n          childProcess.kill(\"SIGKILL\");\n        }\n      }, 10000);\n      return p;\n    });\n  }\n\n  async discoverSpec(configValues, envs) {\n    let discovered = await discovery.detectFromYaml(this.sourceDir, this.projectId, this.runtime);\n\n    if (!discovered) {\n      const getPort = util_1.promisify(portfinder.getPort);\n      const port = await getPort();\n      portfinder.basePort = port + 1;\n      const adminPort = await getPort();\n      const kill = await this.serve(port, adminPort, envs);\n\n      try {\n        discovered = await discovery.detectFromPort(adminPort, this.projectId, this.runtime);\n      } finally {\n        await kill();\n      }\n    }\n\n    discovered.environmentVariables = envs;\n    return discovered;\n  }\n\n}\n\nexports.Delegate = Delegate;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/runtimes/golang/index.js"],"names":["Object","defineProperty","exports","value","Delegate","tryCreateDelegate","FUNCTIONS_RUNTIME","FUNCTIONS_CODEGEN","FUNCTIONS_SDK","ADMIN_SDK","util_1","require","node_fetch_1","fs","path","portfinder","spawn","error_1","logger_1","discovery","projectUtils_1","gomod","VERSION_TO_RUNTIME","context","options","relativeSourceDir","config","get","sourceDir","goModPath","join","projectId","needProjectId","module","modBuffer","promisify","readFile","parseModule","toString","err","logger","debug","runtime","version","FirebaseError","keys","constructor","name","validate","Promise","resolve","build","mkdir","code","children","genBinary","sync","cwd","env","HOME","process","PATH","GOPATH","stdio","status","Error","stderr","writeFile","stdout","watch","serve","port","adminPort","envs","childProcess","assign","PORT","ADMIN_PORT","on","chunk","p","reject","once","default","setTimeout","killed","kill","discoverSpec","configValues","discovered","detectFromYaml","getPort","basePort","detectFromPort","environmentVariables"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Delegate = exports.tryCreateDelegate = exports.FUNCTIONS_RUNTIME = exports.FUNCTIONS_CODEGEN = exports.FUNCTIONS_SDK = exports.ADMIN_SDK = void 0;\nconst util_1 = require(\"util\");\nconst node_fetch_1 = require(\"node-fetch\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst portfinder = require(\"portfinder\");\nconst spawn = require(\"cross-spawn\");\nconst error_1 = require(\"../../../../error\");\nconst logger_1 = require(\"../../../../logger\");\nconst discovery = require(\"../discovery\");\nconst projectUtils_1 = require(\"../../../../projectUtils\");\nconst gomod = require(\"./gomod\");\nconst VERSION_TO_RUNTIME = {\n    \"1.13\": \"go113\",\n};\nexports.ADMIN_SDK = \"firebase.google.com/go/v4\";\nexports.FUNCTIONS_SDK = \"github.com/FirebaseExtended/firebase-functions-go\";\nexports.FUNCTIONS_CODEGEN = exports.FUNCTIONS_SDK + \"/support/codegen\";\nexports.FUNCTIONS_RUNTIME = exports.FUNCTIONS_SDK + \"/support/runtime\";\nasync function tryCreateDelegate(context, options) {\n    const relativeSourceDir = options.config.get(\"functions.source\");\n    const sourceDir = options.config.path(relativeSourceDir);\n    const goModPath = path.join(sourceDir, \"go.mod\");\n    const projectId = projectUtils_1.needProjectId(options);\n    let module;\n    try {\n        const modBuffer = await util_1.promisify(fs.readFile)(goModPath);\n        module = gomod.parseModule(modBuffer.toString(\"utf8\"));\n    }\n    catch (err) {\n        logger_1.logger.debug(\"Customer code is not Golang code (or they aren't using gomod)\");\n        return;\n    }\n    let runtime = options.config.get(\"functions.runtime\");\n    if (!runtime) {\n        if (!module.version) {\n            throw new error_1.FirebaseError(\"Could not detect Golang version from go.mod\");\n        }\n        if (!VERSION_TO_RUNTIME[module.version]) {\n            throw new error_1.FirebaseError(`go.mod specifies Golang version ${module.version} which is unsupported by Google Cloud Functions. Valid values are ${Object.keys(VERSION_TO_RUNTIME).join(\", \")}`);\n        }\n        runtime = VERSION_TO_RUNTIME[module.version];\n    }\n    return new Delegate(projectId, sourceDir, runtime, module);\n}\nexports.tryCreateDelegate = tryCreateDelegate;\nclass Delegate {\n    constructor(projectId, sourceDir, runtime, module) {\n        this.projectId = projectId;\n        this.sourceDir = sourceDir;\n        this.runtime = runtime;\n        this.module = module;\n        this.name = \"golang\";\n    }\n    validate() {\n        return Promise.resolve();\n    }\n    async build() {\n        try {\n            await util_1.promisify(fs.mkdir)(path.join(this.sourceDir, \"autogen\"));\n        }\n        catch (err) {\n            if ((err === null || err === void 0 ? void 0 : err.code) !== \"EEXIST\") {\n                throw new error_1.FirebaseError(\"Failed to create codegen directory\", { children: [err] });\n            }\n        }\n        const genBinary = spawn.sync(\"go\", [\"run\", exports.FUNCTIONS_CODEGEN, this.module.module], {\n            cwd: this.sourceDir,\n            env: {\n                HOME: process.env.HOME,\n                PATH: process.env.PATH,\n                GOPATH: process.env.GOPATH,\n            },\n            stdio: [\"ignore\", \"pipe\", \"pipe\"],\n        });\n        if (genBinary.status != 0) {\n            throw new error_1.FirebaseError(\"Failed to run codegen\", {\n                children: [new Error(genBinary.stderr.toString())],\n            });\n        }\n        await util_1.promisify(fs.writeFile)(path.join(this.sourceDir, \"autogen\", \"main.go\"), genBinary.stdout);\n    }\n    watch() {\n        return Promise.resolve(() => Promise.resolve());\n    }\n    serve(port, adminPort, envs) {\n        const childProcess = spawn(\"go\", [\"run\", \"./autogen\"], {\n            env: Object.assign(Object.assign({}, envs), { PORT: port.toString(), ADMIN_PORT: adminPort.toString(), HOME: process.env.HOME, PATH: process.env.PATH, GOPATH: process.env.GOPATH }),\n            cwd: this.sourceDir,\n            stdio: [\"ignore\", \"pipe\", \"inherit\"],\n        });\n        childProcess.stdout.on(\"data\", (chunk) => {\n            logger_1.logger.debug(chunk.toString());\n        });\n        return Promise.resolve(async () => {\n            const p = new Promise((resolve, reject) => {\n                childProcess.once(\"exit\", resolve);\n                childProcess.once(\"error\", reject);\n            });\n            await node_fetch_1.default(`http://localhost:${adminPort}/quitquitquit`);\n            setTimeout(() => {\n                if (!childProcess.killed) {\n                    childProcess.kill(\"SIGKILL\");\n                }\n            }, 10000);\n            return p;\n        });\n    }\n    async discoverSpec(configValues, envs) {\n        let discovered = await discovery.detectFromYaml(this.sourceDir, this.projectId, this.runtime);\n        if (!discovered) {\n            const getPort = util_1.promisify(portfinder.getPort);\n            const port = await getPort();\n            portfinder.basePort = port + 1;\n            const adminPort = await getPort();\n            const kill = await this.serve(port, adminPort, envs);\n            try {\n                discovered = await discovery.detectFromPort(adminPort, this.projectId, this.runtime);\n            }\n            finally {\n                await kill();\n            }\n        }\n        discovered.environmentVariables = envs;\n        return discovered;\n    }\n}\nexports.Delegate = Delegate;\n"]},"metadata":{},"sourceType":"script"}