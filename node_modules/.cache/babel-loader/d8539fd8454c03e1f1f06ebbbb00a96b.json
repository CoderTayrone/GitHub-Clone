{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nconst url_1 = require(\"url\");\n\nconst degenerator_1 = require(\"degenerator\");\n/**\n * Built-in PAC functions.\n */\n\n\nconst dateRange_1 = __importDefault(require(\"./dateRange\"));\n\nconst dnsDomainIs_1 = __importDefault(require(\"./dnsDomainIs\"));\n\nconst dnsDomainLevels_1 = __importDefault(require(\"./dnsDomainLevels\"));\n\nconst dnsResolve_1 = __importDefault(require(\"./dnsResolve\"));\n\nconst isInNet_1 = __importDefault(require(\"./isInNet\"));\n\nconst isPlainHostName_1 = __importDefault(require(\"./isPlainHostName\"));\n\nconst isResolvable_1 = __importDefault(require(\"./isResolvable\"));\n\nconst localHostOrDomainIs_1 = __importDefault(require(\"./localHostOrDomainIs\"));\n\nconst myIpAddress_1 = __importDefault(require(\"./myIpAddress\"));\n\nconst shExpMatch_1 = __importDefault(require(\"./shExpMatch\"));\n\nconst timeRange_1 = __importDefault(require(\"./timeRange\"));\n\nconst weekdayRange_1 = __importDefault(require(\"./weekdayRange\"));\n/**\n * Returns an asynchronous `FindProxyForURL()` function\n * from the given JS string (from a PAC file).\n *\n * @param {String} str JS string\n * @param {Object} opts optional \"options\" object\n * @return {Function} async resolver function\n */\n\n\nfunction createPacResolver(_str, _opts = {}) {\n  const str = Buffer.isBuffer(_str) ? _str.toString('utf8') : _str; // The sandbox to use for the `vm` context.\n\n  const sandbox = Object.assign(Object.assign({}, createPacResolver.sandbox), _opts.sandbox);\n  const opts = Object.assign(Object.assign({\n    filename: 'proxy.pac'\n  }, _opts), {\n    sandbox\n  }); // Construct the array of async function names to add `await` calls to.\n\n  const names = Object.keys(sandbox).filter(k => isAsyncFunction(sandbox[k])); // Compile the JS `FindProxyForURL()` function into an async function.\n\n  const resolver = degenerator_1.compile(str, 'FindProxyForURL', names, opts);\n\n  function FindProxyForURL(url, _host, _callback) {\n    let host = null;\n    let callback = null;\n\n    if (typeof _callback === 'function') {\n      callback = _callback;\n    }\n\n    if (typeof _host === 'string') {\n      host = _host;\n    } else if (typeof _host === 'function') {\n      callback = _host;\n    }\n\n    if (!host) {\n      host = url_1.parse(url).hostname;\n    }\n\n    if (!host) {\n      throw new TypeError('Could not determine `host`');\n    }\n\n    const promise = resolver(url, host);\n\n    if (typeof callback === 'function') {\n      toCallback(promise, callback);\n    } else {\n      return promise;\n    }\n  }\n\n  Object.defineProperty(FindProxyForURL, 'toString', {\n    value: () => resolver.toString(),\n    enumerable: false\n  });\n  return FindProxyForURL;\n}\n\n(function (createPacResolver) {\n  createPacResolver.sandbox = Object.freeze({\n    alert: (message = '') => console.log('%s', message),\n    dateRange: dateRange_1.default,\n    dnsDomainIs: dnsDomainIs_1.default,\n    dnsDomainLevels: dnsDomainLevels_1.default,\n    dnsResolve: dnsResolve_1.default,\n    isInNet: isInNet_1.default,\n    isPlainHostName: isPlainHostName_1.default,\n    isResolvable: isResolvable_1.default,\n    localHostOrDomainIs: localHostOrDomainIs_1.default,\n    myIpAddress: myIpAddress_1.default,\n    shExpMatch: shExpMatch_1.default,\n    timeRange: timeRange_1.default,\n    weekdayRange: weekdayRange_1.default\n  });\n})(createPacResolver || (createPacResolver = {}));\n\nfunction toCallback(promise, callback) {\n  promise.then(rtn => callback(null, rtn), callback);\n}\n\nfunction isAsyncFunction(v) {\n  if (typeof v !== 'function') return false; // Native `AsyncFunction`\n\n  if (v.constructor.name === 'AsyncFunction') return true; // TypeScript compiled\n\n  if (String(v).indexOf('__awaiter(') !== -1) return true; // Legacy behavior - set `async` property on the function\n\n  return Boolean(v.async);\n}\n\nmodule.exports = createPacResolver;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst url_1 = require(\"url\");\nconst degenerator_1 = require(\"degenerator\");\n/**\n * Built-in PAC functions.\n */\nconst dateRange_1 = __importDefault(require(\"./dateRange\"));\nconst dnsDomainIs_1 = __importDefault(require(\"./dnsDomainIs\"));\nconst dnsDomainLevels_1 = __importDefault(require(\"./dnsDomainLevels\"));\nconst dnsResolve_1 = __importDefault(require(\"./dnsResolve\"));\nconst isInNet_1 = __importDefault(require(\"./isInNet\"));\nconst isPlainHostName_1 = __importDefault(require(\"./isPlainHostName\"));\nconst isResolvable_1 = __importDefault(require(\"./isResolvable\"));\nconst localHostOrDomainIs_1 = __importDefault(require(\"./localHostOrDomainIs\"));\nconst myIpAddress_1 = __importDefault(require(\"./myIpAddress\"));\nconst shExpMatch_1 = __importDefault(require(\"./shExpMatch\"));\nconst timeRange_1 = __importDefault(require(\"./timeRange\"));\nconst weekdayRange_1 = __importDefault(require(\"./weekdayRange\"));\n/**\n * Returns an asynchronous `FindProxyForURL()` function\n * from the given JS string (from a PAC file).\n *\n * @param {String} str JS string\n * @param {Object} opts optional \"options\" object\n * @return {Function} async resolver function\n */\nfunction createPacResolver(_str, _opts = {}) {\n    const str = Buffer.isBuffer(_str) ? _str.toString('utf8') : _str;\n    // The sandbox to use for the `vm` context.\n    const sandbox = Object.assign(Object.assign({}, createPacResolver.sandbox), _opts.sandbox);\n    const opts = Object.assign(Object.assign({ filename: 'proxy.pac' }, _opts), { sandbox });\n    // Construct the array of async function names to add `await` calls to.\n    const names = Object.keys(sandbox).filter(k => isAsyncFunction(sandbox[k]));\n    // Compile the JS `FindProxyForURL()` function into an async function.\n    const resolver = degenerator_1.compile(str, 'FindProxyForURL', names, opts);\n    function FindProxyForURL(url, _host, _callback) {\n        let host = null;\n        let callback = null;\n        if (typeof _callback === 'function') {\n            callback = _callback;\n        }\n        if (typeof _host === 'string') {\n            host = _host;\n        }\n        else if (typeof _host === 'function') {\n            callback = _host;\n        }\n        if (!host) {\n            host = url_1.parse(url).hostname;\n        }\n        if (!host) {\n            throw new TypeError('Could not determine `host`');\n        }\n        const promise = resolver(url, host);\n        if (typeof callback === 'function') {\n            toCallback(promise, callback);\n        }\n        else {\n            return promise;\n        }\n    }\n    Object.defineProperty(FindProxyForURL, 'toString', {\n        value: () => resolver.toString(),\n        enumerable: false\n    });\n    return FindProxyForURL;\n}\n(function (createPacResolver) {\n    createPacResolver.sandbox = Object.freeze({\n        alert: (message = '') => console.log('%s', message),\n        dateRange: dateRange_1.default,\n        dnsDomainIs: dnsDomainIs_1.default,\n        dnsDomainLevels: dnsDomainLevels_1.default,\n        dnsResolve: dnsResolve_1.default,\n        isInNet: isInNet_1.default,\n        isPlainHostName: isPlainHostName_1.default,\n        isResolvable: isResolvable_1.default,\n        localHostOrDomainIs: localHostOrDomainIs_1.default,\n        myIpAddress: myIpAddress_1.default,\n        shExpMatch: shExpMatch_1.default,\n        timeRange: timeRange_1.default,\n        weekdayRange: weekdayRange_1.default\n    });\n})(createPacResolver || (createPacResolver = {}));\nfunction toCallback(promise, callback) {\n    promise.then(rtn => callback(null, rtn), callback);\n}\nfunction isAsyncFunction(v) {\n    if (typeof v !== 'function')\n        return false;\n    // Native `AsyncFunction`\n    if (v.constructor.name === 'AsyncFunction')\n        return true;\n    // TypeScript compiled\n    if (String(v).indexOf('__awaiter(') !== -1)\n        return true;\n    // Legacy behavior - set `async` property on the function\n    return Boolean(v.async);\n}\nmodule.exports = createPacResolver;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}