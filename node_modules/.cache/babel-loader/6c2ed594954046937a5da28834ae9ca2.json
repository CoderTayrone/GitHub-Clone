{"ast":null,"code":"var tokenize = require('./parse').tokenize;\n\nmodule.exports.analyze = function analyzeJSON(input, options) {\n  if (options == null) options = {};\n\n  if (!Array.isArray(input)) {\n    input = tokenize(input, options);\n  }\n\n  var result = {\n    has_whitespace: false,\n    has_comments: false,\n    has_newlines: false,\n    has_trailing_comma: false,\n    indent: '',\n    newline: '\\n',\n    quote: '\"',\n    quote_keys: true\n  };\n  var stats = {\n    indent: {},\n    newline: {},\n    quote: {}\n  };\n\n  for (var i = 0; i < input.length; i++) {\n    if (input[i].type === 'newline') {\n      if (input[i + 1] && input[i + 1].type === 'whitespace') {\n        if (input[i + 1].raw[0] === '\\t') {\n          // if first is tab, then indent is tab\n          stats.indent['\\t'] = (stats.indent['\\t'] || 0) + 1;\n        }\n\n        if (input[i + 1].raw.match(/^\\x20+$/)) {\n          // if all are spaces, then indent is space\n          // this can fail with mixed indent (4, 2 would display 3)\n          var ws_len = input[i + 1].raw.length;\n          var indent_len = input[i + 1].stack.length + 1;\n\n          if (ws_len % indent_len === 0) {\n            var t = Array(ws_len / indent_len + 1).join(' ');\n            stats.indent[t] = (stats.indent[t] || 0) + 1;\n          }\n        }\n      }\n\n      stats.newline[input[i].raw] = (stats.newline[input[i].raw] || 0) + 1;\n    }\n\n    if (input[i].type === 'newline') {\n      result.has_newlines = true;\n    }\n\n    if (input[i].type === 'whitespace') {\n      result.has_whitespace = true;\n    }\n\n    if (input[i].type === 'comment') {\n      result.has_comments = true;\n    }\n\n    if (input[i].type === 'key') {\n      if (input[i].raw[0] !== '\"' && input[i].raw[0] !== \"'\") result.quote_keys = false;\n    }\n\n    if (input[i].type === 'key' || input[i].type === 'literal') {\n      if (input[i].raw[0] === '\"' || input[i].raw[0] === \"'\") {\n        stats.quote[input[i].raw[0]] = (stats.quote[input[i].raw[0]] || 0) + 1;\n      }\n    }\n\n    if (input[i].type === 'separator' && input[i].raw === ',') {\n      for (var j = i + 1; j < input.length; j++) {\n        if (input[j].type === 'literal' || input[j].type === 'key') break;\n        if (input[j].type === 'separator') result.has_trailing_comma = true;\n      }\n    }\n  }\n\n  for (var k in stats) {\n    if (Object.keys(stats[k]).length) {\n      result[k] = Object.keys(stats[k]).reduce(function (a, b) {\n        return stats[k][a] > stats[k][b] ? a : b;\n      });\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/jju/lib/analyze.js"],"names":["tokenize","require","module","exports","analyze","analyzeJSON","input","options","Array","isArray","result","has_whitespace","has_comments","has_newlines","has_trailing_comma","indent","newline","quote","quote_keys","stats","i","length","type","raw","match","ws_len","indent_len","stack","t","join","j","k","Object","keys","reduce","a","b"],"mappings":"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","sourcesContent":["\nvar tokenize = require('./parse').tokenize\n\nmodule.exports.analyze = function analyzeJSON(input, options) {\n  if (options == null) options = {}\n\n  if (!Array.isArray(input)) {\n    input = tokenize(input, options)\n  }\n\n  var result = {\n    has_whitespace: false,\n    has_comments: false,\n    has_newlines: false,\n    has_trailing_comma: false,\n    indent: '',\n    newline: '\\n',\n    quote: '\"',\n    quote_keys: true,\n  }\n\n  var stats = {\n    indent: {},\n    newline: {},\n    quote: {},\n  }\n\n  for (var i=0; i<input.length; i++) {\n    if (input[i].type === 'newline') {\n      if (input[i+1] && input[i+1].type === 'whitespace') {\n        if (input[i+1].raw[0] === '\\t') {\n          // if first is tab, then indent is tab\n          stats.indent['\\t'] = (stats.indent['\\t'] || 0) + 1\n        }\n        if (input[i+1].raw.match(/^\\x20+$/)) {\n          // if all are spaces, then indent is space\n          // this can fail with mixed indent (4, 2 would display 3)\n          var ws_len = input[i+1].raw.length\n          var indent_len = input[i+1].stack.length + 1\n          if (ws_len % indent_len === 0) {\n            var t = Array(ws_len / indent_len + 1).join(' ')\n            stats.indent[t] = (stats.indent[t] || 0) + 1\n          }\n        }\n      }\n\n      stats.newline[input[i].raw] = (stats.newline[input[i].raw] || 0) + 1\n    }\n\n    if (input[i].type === 'newline') {\n      result.has_newlines = true\n    }\n    if (input[i].type === 'whitespace') {\n      result.has_whitespace = true\n    }\n    if (input[i].type === 'comment') {\n      result.has_comments = true\n    }\n    if (input[i].type === 'key') {\n      if (input[i].raw[0] !== '\"' && input[i].raw[0] !== \"'\") result.quote_keys = false\n    }\n\n    if (input[i].type === 'key' || input[i].type === 'literal') {\n      if (input[i].raw[0] === '\"' || input[i].raw[0] === \"'\") {\n        stats.quote[input[i].raw[0]] = (stats.quote[input[i].raw[0]] || 0) + 1\n      }\n    }\n\n    if (input[i].type === 'separator' && input[i].raw === ',') {\n      for (var j=i+1; j<input.length; j++) {\n        if (input[j].type === 'literal' || input[j].type === 'key') break\n        if (input[j].type === 'separator') result.has_trailing_comma = true\n      }\n    }\n  }\n\n  for (var k in stats) {\n    if (Object.keys(stats[k]).length) {\n      result[k] = Object.keys(stats[k]).reduce(function(a, b) {\n        return stats[k][a] > stats[k][b] ? a : b\n      })\n    }\n  }\n\n  return result\n}\n\n"]},"metadata":{},"sourceType":"script"}