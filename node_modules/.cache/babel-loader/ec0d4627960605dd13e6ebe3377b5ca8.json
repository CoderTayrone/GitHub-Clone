{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"./util\");\n\nconst weekdays = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n/**\n * Only the first parameter is mandatory. Either the second, the third, or both\n * may be left out.\n *\n * If only one parameter is present, the function yeilds a true value on the\n * weekday that the parameter represents. If the string \"GMT\" is specified as\n * a second parameter, times are taken to be in GMT, otherwise in local timezone.\n *\n * If both wd1 and wd1 are defined, the condition is true if the current weekday\n * is in between those two weekdays. Bounds are inclusive. If the \"GMT\" parameter\n * is specified, times are taken to be in GMT, otherwise the local timezone is\n * used.\n *\n * Valid \"weekday strings\" are:\n *\n *     SUN MON TUE WED THU FRI SAT\n *\n * Examples:\n *\n * ``` js\n * weekdayRange(\"MON\", \"FRI\")\n * true Monday trhough Friday (local timezone).\n *\n * weekdayRange(\"MON\", \"FRI\", \"GMT\")\n * same as above, but GMT timezone.\n *\n * weekdayRange(\"SAT\")\n * true on Saturdays local time.\n *\n * weekdayRange(\"SAT\", \"GMT\")\n * true on Saturdays GMT time.\n *\n * weekdayRange(\"FRI\", \"MON\")\n * true Friday through Monday (note, order does matter!).\n * ```\n *\n *\n * @param {String} wd1 one of the weekday strings.\n * @param {String} wd2 one of the weekday strings.\n * @param {String} gmt is either the string: GMT or is left out.\n * @return {Boolean}\n */\n\nfunction weekdayRange(wd1, wd2, gmt) {\n  let useGMTzone = false;\n  let wd1Index = -1;\n  let wd2Index = -1;\n  let wd2IsGmt = false;\n\n  if (util_1.isGMT(gmt)) {\n    useGMTzone = true;\n  } else if (util_1.isGMT(wd2)) {\n    useGMTzone = true;\n    wd2IsGmt = true;\n  }\n\n  wd1Index = weekdays.indexOf(wd1);\n\n  if (!wd2IsGmt && isWeekday(wd2)) {\n    wd2Index = weekdays.indexOf(wd2);\n  }\n\n  let todaysDay = getTodaysDay(useGMTzone);\n  let result = false;\n\n  if (wd2Index < 0) {\n    result = todaysDay == wd1Index;\n  } else {\n    if (wd1Index <= wd2Index) {\n      result = valueInRange(wd1Index, todaysDay, wd2Index);\n    } else {\n      result = valueInRange(wd1Index, todaysDay, 6) || valueInRange(0, todaysDay, wd2Index);\n    }\n  }\n\n  return result;\n}\n\nexports.default = weekdayRange;\n\nfunction getTodaysDay(gmt) {\n  return gmt ? new Date().getUTCDay() : new Date().getDay();\n} // start <= value <= finish\n\n\nfunction valueInRange(start, value, finish) {\n  return start <= value && value <= finish;\n}\n\nfunction isWeekday(v) {\n  return weekdays.indexOf(v) !== -1;\n}","map":{"version":3,"sources":["../src/weekdayRange.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAGA,MAAM,QAAQ,GAAc,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCG;;AAEH,SAAwB,YAAxB,CACC,GADD,EAEC,GAFD,EAGC,GAHD,EAGU;AAET,MAAI,UAAU,GAAG,KAAjB;AACA,MAAI,QAAQ,GAAG,CAAC,CAAhB;AACA,MAAI,QAAQ,GAAG,CAAC,CAAhB;AACA,MAAI,QAAQ,GAAG,KAAf;;AAEA,MAAI,MAAA,CAAA,KAAA,CAAM,GAAN,CAAJ,EAAgB;AACf,IAAA,UAAU,GAAG,IAAb;AACA,GAFD,MAEO,IAAI,MAAA,CAAA,KAAA,CAAM,GAAN,CAAJ,EAAgB;AACtB,IAAA,UAAU,GAAG,IAAb;AACA,IAAA,QAAQ,GAAG,IAAX;AACA;;AAED,EAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAX;;AAEA,MAAI,CAAC,QAAD,IAAa,SAAS,CAAC,GAAD,CAA1B,EAAiC;AAChC,IAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAX;AACA;;AAED,MAAI,SAAS,GAAG,YAAY,CAAC,UAAD,CAA5B;AACA,MAAI,MAAM,GAAG,KAAb;;AAEA,MAAI,QAAQ,GAAG,CAAf,EAAkB;AACjB,IAAA,MAAM,GAAG,SAAS,IAAI,QAAtB;AACA,GAFD,MAEO;AACN,QAAI,QAAQ,IAAI,QAAhB,EAA0B;AACzB,MAAA,MAAM,GAAG,YAAY,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,CAArB;AACA,KAFD,MAEO;AACN,MAAA,MAAM,GACL,YAAY,CAAC,QAAD,EAAW,SAAX,EAAsB,CAAtB,CAAZ,IACA,YAAY,CAAC,CAAD,EAAI,SAAJ,EAAe,QAAf,CAFb;AAGA;AACD;;AACD,SAAO,MAAP;AACA;;AAtCD,OAAA,CAAA,OAAA,GAAA,YAAA;;AAwCA,SAAS,YAAT,CAAsB,GAAtB,EAAkC;AACjC,SAAO,GAAG,GAAG,IAAI,IAAJ,GAAW,SAAX,EAAH,GAA4B,IAAI,IAAJ,GAAW,MAAX,EAAtC;AACA,C,CAED;;;AACA,SAAS,YAAT,CAAsB,KAAtB,EAAqC,KAArC,EAAoD,MAApD,EAAkE;AACjE,SAAO,KAAK,IAAI,KAAT,IAAkB,KAAK,IAAI,MAAlC;AACA;;AAED,SAAS,SAAT,CAAmB,CAAnB,EAAyB;AACxB,SAAO,QAAQ,CAAC,OAAT,CAAiB,CAAjB,MAAwB,CAAC,CAAhC;AACA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"./util\");\nconst weekdays = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n/**\n * Only the first parameter is mandatory. Either the second, the third, or both\n * may be left out.\n *\n * If only one parameter is present, the function yeilds a true value on the\n * weekday that the parameter represents. If the string \"GMT\" is specified as\n * a second parameter, times are taken to be in GMT, otherwise in local timezone.\n *\n * If both wd1 and wd1 are defined, the condition is true if the current weekday\n * is in between those two weekdays. Bounds are inclusive. If the \"GMT\" parameter\n * is specified, times are taken to be in GMT, otherwise the local timezone is\n * used.\n *\n * Valid \"weekday strings\" are:\n *\n *     SUN MON TUE WED THU FRI SAT\n *\n * Examples:\n *\n * ``` js\n * weekdayRange(\"MON\", \"FRI\")\n * true Monday trhough Friday (local timezone).\n *\n * weekdayRange(\"MON\", \"FRI\", \"GMT\")\n * same as above, but GMT timezone.\n *\n * weekdayRange(\"SAT\")\n * true on Saturdays local time.\n *\n * weekdayRange(\"SAT\", \"GMT\")\n * true on Saturdays GMT time.\n *\n * weekdayRange(\"FRI\", \"MON\")\n * true Friday through Monday (note, order does matter!).\n * ```\n *\n *\n * @param {String} wd1 one of the weekday strings.\n * @param {String} wd2 one of the weekday strings.\n * @param {String} gmt is either the string: GMT or is left out.\n * @return {Boolean}\n */\nfunction weekdayRange(wd1, wd2, gmt) {\n    let useGMTzone = false;\n    let wd1Index = -1;\n    let wd2Index = -1;\n    let wd2IsGmt = false;\n    if (util_1.isGMT(gmt)) {\n        useGMTzone = true;\n    }\n    else if (util_1.isGMT(wd2)) {\n        useGMTzone = true;\n        wd2IsGmt = true;\n    }\n    wd1Index = weekdays.indexOf(wd1);\n    if (!wd2IsGmt && isWeekday(wd2)) {\n        wd2Index = weekdays.indexOf(wd2);\n    }\n    let todaysDay = getTodaysDay(useGMTzone);\n    let result = false;\n    if (wd2Index < 0) {\n        result = todaysDay == wd1Index;\n    }\n    else {\n        if (wd1Index <= wd2Index) {\n            result = valueInRange(wd1Index, todaysDay, wd2Index);\n        }\n        else {\n            result =\n                valueInRange(wd1Index, todaysDay, 6) ||\n                    valueInRange(0, todaysDay, wd2Index);\n        }\n    }\n    return result;\n}\nexports.default = weekdayRange;\nfunction getTodaysDay(gmt) {\n    return gmt ? new Date().getUTCDay() : new Date().getDay();\n}\n// start <= value <= finish\nfunction valueInRange(start, value, finish) {\n    return start <= value && value <= finish;\n}\nfunction isWeekday(v) {\n    return weekdays.indexOf(v) !== -1;\n}\n//# sourceMappingURL=weekdayRange.js.map"]},"metadata":{},"sourceType":"script"}