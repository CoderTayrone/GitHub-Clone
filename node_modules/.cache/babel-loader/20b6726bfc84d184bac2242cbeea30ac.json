{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nvar needProjectId = require(\"../projectUtils\").needProjectId;\n\nconst {\n  logger\n} = require(\"../logger\");\n\nvar {\n  requirePermissions\n} = require(\"../requirePermissions\");\n\nvar functionsConfig = require(\"../functionsConfig\");\n\nfunction _materialize(projectId, path) {\n  if (_.isUndefined(path)) {\n    return functionsConfig.materializeAll(projectId);\n  }\n\n  var parts = path.split(\".\");\n  var configId = parts[0];\n\n  var configName = _.join([\"projects\", projectId, \"configs\", configId], \"/\");\n\n  return functionsConfig.materializeConfig(configName, {}).then(function (result) {\n    var query = _.chain(parts).join(\".\").value();\n\n    return query ? _.get(result, query) : result;\n  });\n}\n\nmodule.exports = new Command(\"functions:config:get [path]\").description(\"fetch environment config stored at the given path\").before(requirePermissions, [\"runtimeconfig.configs.list\", \"runtimeconfig.configs.get\", \"runtimeconfig.variables.list\", \"runtimeconfig.variables.get\"]).before(functionsConfig.ensureApi).action(function (path, options) {\n  return _materialize(needProjectId(options), path).then(function (result) {\n    logger.info(JSON.stringify(result, null, 2));\n    return result;\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/functions-config-get.js"],"names":["_","require","Command","needProjectId","logger","requirePermissions","functionsConfig","_materialize","projectId","path","isUndefined","materializeAll","parts","split","configId","configName","join","materializeConfig","then","result","query","chain","value","get","module","exports","description","before","ensureApi","action","options","info","JSON","stringify"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BE,aAA/C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaH,OAAO,CAAC,WAAD,CAA1B;;AACA,IAAI;AAAEI,EAAAA;AAAF,IAAyBJ,OAAO,CAAC,uBAAD,CAApC;;AACA,IAAIK,eAAe,GAAGL,OAAO,CAAC,oBAAD,CAA7B;;AACA,SAASM,YAAT,CAAsBC,SAAtB,EAAiCC,IAAjC,EAAuC;AACnC,MAAIT,CAAC,CAACU,WAAF,CAAcD,IAAd,CAAJ,EAAyB;AACrB,WAAOH,eAAe,CAACK,cAAhB,CAA+BH,SAA/B,CAAP;AACH;;AACD,MAAII,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAZ;AACA,MAAIC,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAApB;;AACA,MAAIG,UAAU,GAAGf,CAAC,CAACgB,IAAF,CAAO,CAAC,UAAD,EAAaR,SAAb,EAAwB,SAAxB,EAAmCM,QAAnC,CAAP,EAAqD,GAArD,CAAjB;;AACA,SAAOR,eAAe,CAACW,iBAAhB,CAAkCF,UAAlC,EAA8C,EAA9C,EAAkDG,IAAlD,CAAuD,UAAUC,MAAV,EAAkB;AAC5E,QAAIC,KAAK,GAAGpB,CAAC,CAACqB,KAAF,CAAQT,KAAR,EAAeI,IAAf,CAAoB,GAApB,EAAyBM,KAAzB,EAAZ;;AACA,WAAOF,KAAK,GAAGpB,CAAC,CAACuB,GAAF,CAAMJ,MAAN,EAAcC,KAAd,CAAH,GAA0BD,MAAtC;AACH,GAHM,CAAP;AAIH;;AACDK,MAAM,CAACC,OAAP,GAAiB,IAAIvB,OAAJ,CAAY,6BAAZ,EACZwB,WADY,CACA,mDADA,EAEZC,MAFY,CAELtB,kBAFK,EAEe,CAC5B,4BAD4B,EAE5B,2BAF4B,EAG5B,8BAH4B,EAI5B,6BAJ4B,CAFf,EAQZsB,MARY,CAQLrB,eAAe,CAACsB,SARX,EASZC,MATY,CASL,UAAUpB,IAAV,EAAgBqB,OAAhB,EAAyB;AACjC,SAAOvB,YAAY,CAACJ,aAAa,CAAC2B,OAAD,CAAd,EAAyBrB,IAAzB,CAAZ,CAA2CS,IAA3C,CAAgD,UAAUC,MAAV,EAAkB;AACrEf,IAAAA,MAAM,CAAC2B,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAed,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ;AACA,WAAOA,MAAP;AACH,GAHM,CAAP;AAIH,CAdgB,CAAjB","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar { Command } = require(\"../command\");\nvar needProjectId = require(\"../projectUtils\").needProjectId;\nconst { logger } = require(\"../logger\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar functionsConfig = require(\"../functionsConfig\");\nfunction _materialize(projectId, path) {\n    if (_.isUndefined(path)) {\n        return functionsConfig.materializeAll(projectId);\n    }\n    var parts = path.split(\".\");\n    var configId = parts[0];\n    var configName = _.join([\"projects\", projectId, \"configs\", configId], \"/\");\n    return functionsConfig.materializeConfig(configName, {}).then(function (result) {\n        var query = _.chain(parts).join(\".\").value();\n        return query ? _.get(result, query) : result;\n    });\n}\nmodule.exports = new Command(\"functions:config:get [path]\")\n    .description(\"fetch environment config stored at the given path\")\n    .before(requirePermissions, [\n    \"runtimeconfig.configs.list\",\n    \"runtimeconfig.configs.get\",\n    \"runtimeconfig.variables.list\",\n    \"runtimeconfig.variables.get\",\n])\n    .before(functionsConfig.ensureApi)\n    .action(function (path, options) {\n    return _materialize(needProjectId(options), path).then(function (result) {\n        logger.info(JSON.stringify(result, null, 2));\n        return result;\n    });\n});\n"]},"metadata":{},"sourceType":"script"}