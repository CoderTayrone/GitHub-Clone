{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst url = require(\"url\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst command_1 = require(\"../command\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst error_1 = require(\"../error\");\n\nconst database_1 = require(\"../management/database\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst api_1 = require(\"../database/api\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst responseToError = require(\"../responseToError\");\n\nconst utils = require(\"../utils\");\n\nfunction applyStringOpts(dest, src, keys, jsonKeys) {\n  for (const key of keys) {\n    if (src[key]) {\n      dest[key] = src[key];\n    }\n  }\n\n  for (const key of jsonKeys) {\n    let jsonVal;\n\n    try {\n      jsonVal = JSON.parse(src[key]);\n    } catch (_) {\n      jsonVal = src[key];\n    }\n\n    if (src[key]) {\n      dest[key] = JSON.stringify(jsonVal);\n    }\n  }\n}\n\nexports.default = new command_1.Command(\"database:get <path>\").description(\"fetch and print JSON data at the specified path\").option(\"-o, --output <filename>\", \"save output to the specified file\").option(\"--pretty\", \"pretty print response\").option(\"--shallow\", \"return shallow response\").option(\"--export\", \"include priorities in the output response\").option(\"--order-by <key>\", \"select a child key by which to order results\").option(\"--order-by-key\", \"order by key name\").option(\"--order-by-value\", \"order by primitive value\").option(\"--limit-to-first <num>\", \"limit to the first <num> results\").option(\"--limit-to-last <num>\", \"limit to the last <num> results\").option(\"--start-at <val>\", \"start results at <val> (based on specified ordering)\").option(\"--end-at <val>\", \"end results at <val> (based on specified ordering)\").option(\"--equal-to <val>\", \"restrict results to <val> (based on specified ordering)\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(database_1.populateInstanceDetails).before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE).action(async (path, options) => {\n  if (!path.startsWith(\"/\")) {\n    return utils.reject(\"Path must begin with /\", {\n      exit: 1\n    });\n  }\n\n  const dbHost = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n  const dbUrl = utils.getDatabaseUrl(dbHost, options.instance, path + \".json\");\n  const query = {};\n\n  if (options.shallow) {\n    query.shallow = \"true\";\n  }\n\n  if (options.pretty) {\n    query.print = \"pretty\";\n  }\n\n  if (options.export) {\n    query.format = \"export\";\n  }\n\n  if (options.orderByKey) {\n    options.orderBy = \"$key\";\n  }\n\n  if (options.orderByValue) {\n    options.orderBy = \"$value\";\n  }\n\n  applyStringOpts(query, options, [\"limitToFirst\", \"limitToLast\"], [\"orderBy\", \"startAt\", \"endAt\", \"equalTo\"]);\n  const urlObj = new url.URL(dbUrl);\n  const client = new apiv2_1.Client({\n    urlPrefix: urlObj.origin,\n    auth: true\n  });\n  const res = await client.request({\n    method: \"GET\",\n    path: urlObj.pathname,\n    queryParams: query,\n    responseType: \"stream\",\n    resolveOnHTTPError: true\n  });\n  const fileOut = !!options.output;\n  const outStream = fileOut ? fs.createWriteStream(options.output) : process.stdout;\n\n  if (res.status >= 400) {\n    const r = await res.response.text();\n    let d;\n\n    try {\n      d = JSON.parse(r);\n    } catch (e) {\n      throw new error_1.FirebaseError(\"Malformed JSON response\", {\n        original: e,\n        exit: 2\n      });\n    }\n\n    throw responseToError({\n      statusCode: res.status\n    }, d);\n  }\n\n  res.body.pipe(outStream, {\n    end: false\n  });\n  return new Promise(resolve => {\n    res.body.once(\"end\", () => {\n      if (outStream === process.stdout) {\n        outStream.write(\"\\n\");\n        resolve();\n      } else if (outStream instanceof fs.WriteStream) {\n        outStream.write(\"\\n\");\n        outStream.on(\"close\", () => resolve());\n        outStream.close();\n      } else {\n        logger_1.logger.debug(\"[database:get] Could not write line break to outStream\");\n        resolve();\n      }\n    });\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-get.js"],"names":["Object","defineProperty","exports","value","fs","require","url","apiv2_1","command_1","types_1","error_1","database_1","commandUtils_1","api_1","requirePermissions_1","logger_1","requireDatabaseInstance_1","responseToError","utils","applyStringOpts","dest","src","keys","jsonKeys","key","jsonVal","JSON","parse","_","stringify","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","populateInstanceDetails","printNoticeIfEmulated","Emulators","DATABASE","action","path","options","startsWith","reject","exit","dbHost","realtimeOriginOrEmulatorOrCustomUrl","instanceDetails","databaseUrl","dbUrl","getDatabaseUrl","instance","query","shallow","pretty","print","export","format","orderByKey","orderBy","orderByValue","urlObj","URL","client","Client","urlPrefix","origin","auth","res","request","method","pathname","queryParams","responseType","resolveOnHTTPError","fileOut","output","outStream","createWriteStream","process","stdout","status","r","response","text","d","e","FirebaseError","original","statusCode","body","pipe","end","Promise","resolve","once","write","WriteStream","on","close","logger","debug"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst url = require(\"url\");\nconst apiv2_1 = require(\"../apiv2\");\nconst command_1 = require(\"../command\");\nconst types_1 = require(\"../emulator/types\");\nconst error_1 = require(\"../error\");\nconst database_1 = require(\"../management/database\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst api_1 = require(\"../database/api\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst logger_1 = require(\"../logger\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst responseToError = require(\"../responseToError\");\nconst utils = require(\"../utils\");\nfunction applyStringOpts(dest, src, keys, jsonKeys) {\n    for (const key of keys) {\n        if (src[key]) {\n            dest[key] = src[key];\n        }\n    }\n    for (const key of jsonKeys) {\n        let jsonVal;\n        try {\n            jsonVal = JSON.parse(src[key]);\n        }\n        catch (_) {\n            jsonVal = src[key];\n        }\n        if (src[key]) {\n            dest[key] = JSON.stringify(jsonVal);\n        }\n    }\n}\nexports.default = new command_1.Command(\"database:get <path>\")\n    .description(\"fetch and print JSON data at the specified path\")\n    .option(\"-o, --output <filename>\", \"save output to the specified file\")\n    .option(\"--pretty\", \"pretty print response\")\n    .option(\"--shallow\", \"return shallow response\")\n    .option(\"--export\", \"include priorities in the output response\")\n    .option(\"--order-by <key>\", \"select a child key by which to order results\")\n    .option(\"--order-by-key\", \"order by key name\")\n    .option(\"--order-by-value\", \"order by primitive value\")\n    .option(\"--limit-to-first <num>\", \"limit to the first <num> results\")\n    .option(\"--limit-to-last <num>\", \"limit to the last <num> results\")\n    .option(\"--start-at <val>\", \"start results at <val> (based on specified ordering)\")\n    .option(\"--end-at <val>\", \"end results at <val> (based on specified ordering)\")\n    .option(\"--equal-to <val>\", \"restrict results to <val> (based on specified ordering)\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(database_1.populateInstanceDetails)\n    .before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE)\n    .action(async (path, options) => {\n    if (!path.startsWith(\"/\")) {\n        return utils.reject(\"Path must begin with /\", { exit: 1 });\n    }\n    const dbHost = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n    const dbUrl = utils.getDatabaseUrl(dbHost, options.instance, path + \".json\");\n    const query = {};\n    if (options.shallow) {\n        query.shallow = \"true\";\n    }\n    if (options.pretty) {\n        query.print = \"pretty\";\n    }\n    if (options.export) {\n        query.format = \"export\";\n    }\n    if (options.orderByKey) {\n        options.orderBy = \"$key\";\n    }\n    if (options.orderByValue) {\n        options.orderBy = \"$value\";\n    }\n    applyStringOpts(query, options, [\"limitToFirst\", \"limitToLast\"], [\"orderBy\", \"startAt\", \"endAt\", \"equalTo\"]);\n    const urlObj = new url.URL(dbUrl);\n    const client = new apiv2_1.Client({\n        urlPrefix: urlObj.origin,\n        auth: true,\n    });\n    const res = await client.request({\n        method: \"GET\",\n        path: urlObj.pathname,\n        queryParams: query,\n        responseType: \"stream\",\n        resolveOnHTTPError: true,\n    });\n    const fileOut = !!options.output;\n    const outStream = fileOut ? fs.createWriteStream(options.output) : process.stdout;\n    if (res.status >= 400) {\n        const r = await res.response.text();\n        let d;\n        try {\n            d = JSON.parse(r);\n        }\n        catch (e) {\n            throw new error_1.FirebaseError(\"Malformed JSON response\", { original: e, exit: 2 });\n        }\n        throw responseToError({ statusCode: res.status }, d);\n    }\n    res.body.pipe(outStream, { end: false });\n    return new Promise((resolve) => {\n        res.body.once(\"end\", () => {\n            if (outStream === process.stdout) {\n                outStream.write(\"\\n\");\n                resolve();\n            }\n            else if (outStream instanceof fs.WriteStream) {\n                outStream.write(\"\\n\");\n                outStream.on(\"close\", () => resolve());\n                outStream.close();\n            }\n            else {\n                logger_1.logger.debug(\"[database:get] Could not write line break to outStream\");\n                resolve();\n            }\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}