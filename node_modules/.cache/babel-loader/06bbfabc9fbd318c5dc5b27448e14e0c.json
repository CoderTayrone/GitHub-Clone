{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar clc = require(\"cli-color\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nvar {\n  getFirebaseProject,\n  listFirebaseProjects\n} = require(\"../management/projects\");\n\nvar {\n  prompt\n} = require(\"../prompt\");\n\nvar {\n  requireAuth\n} = require(\"../requireAuth\");\n\nvar {\n  validateProjectId\n} = require(\"../command\");\n\nconst {\n  logger\n} = require(\"../logger\");\n\nvar utils = require(\"../utils\");\n\nvar listAliases = function (options) {\n  if (options.rc.hasProjects) {\n    logger.info(\"Project aliases for\", clc.bold(options.projectRoot) + \":\");\n    logger.info();\n\n    _.forEach(options.rc.projects, function (projectId, alias) {\n      var listing = alias + \" (\" + projectId + \")\";\n\n      if (options.project === projectId || options.projectAlias === alias) {\n        logger.info(clc.cyan.bold(\"* \" + listing));\n      } else {\n        logger.info(\"  \" + listing);\n      }\n    });\n\n    logger.info();\n  }\n\n  logger.info(\"Run\", clc.bold(\"firebase use --add\"), \"to define a new project alias.\");\n};\n\nvar verifyMessage = function (name) {\n  return \"please verify project \" + clc.bold(name) + \" exists and you have access.\";\n};\n\nmodule.exports = new Command(\"use [alias_or_project_id]\").description(\"set an active Firebase project for your working directory\").option(\"--add\", \"create a new project alias interactively\").option(\"--alias <name>\", \"create a new alias for the provided project id\").option(\"--unalias <name>\", \"remove an already created project alias\").option(\"--clear\", \"clear the active project selection\").before(requireAuth).action(function (newActive, options) {\n  var aliasOpt;\n  var i = process.argv.indexOf(\"--alias\");\n\n  if (i >= 0 && process.argv.length > i + 1) {\n    aliasOpt = process.argv[i + 1];\n  }\n\n  if (!options.projectRoot) {\n    return utils.reject(clc.bold(\"firebase use\") + \" must be run from a Firebase project directory.\\n\\nRun \" + clc.bold(\"firebase init\") + \" to start a project directory in the current folder.\");\n  }\n\n  if (newActive) {\n    var project = null;\n    const hasAlias = options.rc.hasProjectAlias(newActive);\n    const resolvedProject = options.rc.resolveAlias(newActive);\n    validateProjectId(resolvedProject);\n    return getFirebaseProject(resolvedProject).then(foundProject => {\n      project = foundProject;\n    }).catch(() => {\n      return utils.reject(\"Invalid project selection, \" + verifyMessage(newActive));\n    }).then(() => {\n      if (aliasOpt) {\n        if (!project) {\n          return utils.reject(\"Cannot create alias \" + clc.bold(aliasOpt) + \", \" + verifyMessage(newActive));\n        }\n\n        options.rc.addProjectAlias(aliasOpt, newActive);\n        logger.info(\"Created alias\", clc.bold(aliasOpt), \"for\", resolvedProject + \".\");\n      }\n\n      if (hasAlias) {\n        if (!project) {\n          return utils.reject(\"Unable to use alias \" + clc.bold(newActive) + \", \" + verifyMessage(resolvedProject));\n        }\n\n        utils.makeActiveProject(options.projectRoot, newActive);\n        logger.info(\"Now using alias\", clc.bold(newActive), \"(\" + resolvedProject + \")\");\n      } else if (project) {\n        utils.makeActiveProject(options.projectRoot, newActive);\n        logger.info(\"Now using project\", clc.bold(newActive));\n      } else {\n        return utils.reject(\"Invalid project selection, \" + verifyMessage(newActive));\n      }\n    });\n  } else if (options.unalias) {\n    if (options.rc.hasProjectAlias(options.unalias)) {\n      options.rc.removeProjectAlias(options.unalias);\n      logger.info(\"Removed alias\", clc.bold(options.unalias));\n      logger.info();\n      listAliases(options);\n    }\n  } else if (options.add) {\n    if (options.nonInteractive) {\n      return utils.reject(\"Cannot run \" + clc.bold(\"firebase use --add\") + \" in non-interactive mode. Use \" + clc.bold(\"firebase use <project_id> --alias <alias>\") + \" instead.\");\n    }\n\n    return listFirebaseProjects().then(function (projects) {\n      var results = {};\n      return prompt(results, [{\n        type: \"list\",\n        name: \"project\",\n        message: \"Which project do you want to add?\",\n        choices: projects.map(p => p.projectId).sort()\n      }, {\n        type: \"input\",\n        name: \"alias\",\n        message: \"What alias do you want to use for this project? (e.g. staging)\",\n        validate: function (input) {\n          return input && input.length > 0;\n        }\n      }]).then(function () {\n        options.rc.addProjectAlias(results.alias, results.project);\n        utils.makeActiveProject(options.projectRoot, results.alias);\n        logger.info();\n        logger.info(\"Created alias\", clc.bold(results.alias), \"for\", results.project + \".\");\n        logger.info(\"Now using alias\", clc.bold(results.alias) + \" (\" + results.project + \")\");\n      });\n    });\n  } else if (options.clear) {\n    utils.makeActiveProject(options.projectRoot, null);\n    options.projectAlias = null;\n    options.project = null;\n    logger.info(\"Cleared active project.\");\n    logger.info();\n    listAliases(options);\n  } else {\n    if (options.nonInteractive || !process.stdout.isTTY) {\n      if (options.project) {\n        logger.info(options.project);\n        return options.project;\n      }\n\n      return utils.reject(\"No active project\", {\n        exit: 1\n      });\n    }\n\n    if (options.projectAlias) {\n      logger.info(\"Active Project:\", clc.bold.cyan(options.projectAlias + \" (\" + options.project + \")\"));\n    } else if (options.project) {\n      logger.info(\"Active Project:\", clc.bold.cyan(options.project));\n    } else {\n      var msg = \"No project is currently active\";\n\n      if (options.rc.hasProjects) {\n        msg += \", and no aliases have been created.\";\n      }\n\n      logger.info(msg + \".\");\n    }\n\n    logger.info();\n    listAliases(options);\n    return options.project;\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/use.js"],"names":["_","require","clc","Command","getFirebaseProject","listFirebaseProjects","prompt","requireAuth","validateProjectId","logger","utils","listAliases","options","rc","hasProjects","info","bold","projectRoot","forEach","projects","projectId","alias","listing","project","projectAlias","cyan","verifyMessage","name","module","exports","description","option","before","action","newActive","aliasOpt","i","process","argv","indexOf","length","reject","hasAlias","hasProjectAlias","resolvedProject","resolveAlias","then","foundProject","catch","addProjectAlias","makeActiveProject","unalias","removeProjectAlias","add","nonInteractive","results","type","message","choices","map","p","sort","validate","input","clear","stdout","isTTY","exit","msg"],"mappings":"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","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar clc = require(\"cli-color\");\nvar { Command } = require(\"../command\");\nvar { getFirebaseProject, listFirebaseProjects } = require(\"../management/projects\");\nvar { prompt } = require(\"../prompt\");\nvar { requireAuth } = require(\"../requireAuth\");\nvar { validateProjectId } = require(\"../command\");\nconst { logger } = require(\"../logger\");\nvar utils = require(\"../utils\");\nvar listAliases = function (options) {\n    if (options.rc.hasProjects) {\n        logger.info(\"Project aliases for\", clc.bold(options.projectRoot) + \":\");\n        logger.info();\n        _.forEach(options.rc.projects, function (projectId, alias) {\n            var listing = alias + \" (\" + projectId + \")\";\n            if (options.project === projectId || options.projectAlias === alias) {\n                logger.info(clc.cyan.bold(\"* \" + listing));\n            }\n            else {\n                logger.info(\"  \" + listing);\n            }\n        });\n        logger.info();\n    }\n    logger.info(\"Run\", clc.bold(\"firebase use --add\"), \"to define a new project alias.\");\n};\nvar verifyMessage = function (name) {\n    return \"please verify project \" + clc.bold(name) + \" exists and you have access.\";\n};\nmodule.exports = new Command(\"use [alias_or_project_id]\")\n    .description(\"set an active Firebase project for your working directory\")\n    .option(\"--add\", \"create a new project alias interactively\")\n    .option(\"--alias <name>\", \"create a new alias for the provided project id\")\n    .option(\"--unalias <name>\", \"remove an already created project alias\")\n    .option(\"--clear\", \"clear the active project selection\")\n    .before(requireAuth)\n    .action(function (newActive, options) {\n    var aliasOpt;\n    var i = process.argv.indexOf(\"--alias\");\n    if (i >= 0 && process.argv.length > i + 1) {\n        aliasOpt = process.argv[i + 1];\n    }\n    if (!options.projectRoot) {\n        return utils.reject(clc.bold(\"firebase use\") +\n            \" must be run from a Firebase project directory.\\n\\nRun \" +\n            clc.bold(\"firebase init\") +\n            \" to start a project directory in the current folder.\");\n    }\n    if (newActive) {\n        var project = null;\n        const hasAlias = options.rc.hasProjectAlias(newActive);\n        const resolvedProject = options.rc.resolveAlias(newActive);\n        validateProjectId(resolvedProject);\n        return getFirebaseProject(resolvedProject)\n            .then((foundProject) => {\n            project = foundProject;\n        })\n            .catch(() => {\n            return utils.reject(\"Invalid project selection, \" + verifyMessage(newActive));\n        })\n            .then(() => {\n            if (aliasOpt) {\n                if (!project) {\n                    return utils.reject(\"Cannot create alias \" + clc.bold(aliasOpt) + \", \" + verifyMessage(newActive));\n                }\n                options.rc.addProjectAlias(aliasOpt, newActive);\n                logger.info(\"Created alias\", clc.bold(aliasOpt), \"for\", resolvedProject + \".\");\n            }\n            if (hasAlias) {\n                if (!project) {\n                    return utils.reject(\"Unable to use alias \" + clc.bold(newActive) + \", \" + verifyMessage(resolvedProject));\n                }\n                utils.makeActiveProject(options.projectRoot, newActive);\n                logger.info(\"Now using alias\", clc.bold(newActive), \"(\" + resolvedProject + \")\");\n            }\n            else if (project) {\n                utils.makeActiveProject(options.projectRoot, newActive);\n                logger.info(\"Now using project\", clc.bold(newActive));\n            }\n            else {\n                return utils.reject(\"Invalid project selection, \" + verifyMessage(newActive));\n            }\n        });\n    }\n    else if (options.unalias) {\n        if (options.rc.hasProjectAlias(options.unalias)) {\n            options.rc.removeProjectAlias(options.unalias);\n            logger.info(\"Removed alias\", clc.bold(options.unalias));\n            logger.info();\n            listAliases(options);\n        }\n    }\n    else if (options.add) {\n        if (options.nonInteractive) {\n            return utils.reject(\"Cannot run \" +\n                clc.bold(\"firebase use --add\") +\n                \" in non-interactive mode. Use \" +\n                clc.bold(\"firebase use <project_id> --alias <alias>\") +\n                \" instead.\");\n        }\n        return listFirebaseProjects().then(function (projects) {\n            var results = {};\n            return prompt(results, [\n                {\n                    type: \"list\",\n                    name: \"project\",\n                    message: \"Which project do you want to add?\",\n                    choices: projects.map((p) => p.projectId).sort(),\n                },\n                {\n                    type: \"input\",\n                    name: \"alias\",\n                    message: \"What alias do you want to use for this project? (e.g. staging)\",\n                    validate: function (input) {\n                        return input && input.length > 0;\n                    },\n                },\n            ]).then(function () {\n                options.rc.addProjectAlias(results.alias, results.project);\n                utils.makeActiveProject(options.projectRoot, results.alias);\n                logger.info();\n                logger.info(\"Created alias\", clc.bold(results.alias), \"for\", results.project + \".\");\n                logger.info(\"Now using alias\", clc.bold(results.alias) + \" (\" + results.project + \")\");\n            });\n        });\n    }\n    else if (options.clear) {\n        utils.makeActiveProject(options.projectRoot, null);\n        options.projectAlias = null;\n        options.project = null;\n        logger.info(\"Cleared active project.\");\n        logger.info();\n        listAliases(options);\n    }\n    else {\n        if (options.nonInteractive || !process.stdout.isTTY) {\n            if (options.project) {\n                logger.info(options.project);\n                return options.project;\n            }\n            return utils.reject(\"No active project\", { exit: 1 });\n        }\n        if (options.projectAlias) {\n            logger.info(\"Active Project:\", clc.bold.cyan(options.projectAlias + \" (\" + options.project + \")\"));\n        }\n        else if (options.project) {\n            logger.info(\"Active Project:\", clc.bold.cyan(options.project));\n        }\n        else {\n            var msg = \"No project is currently active\";\n            if (options.rc.hasProjects) {\n                msg += \", and no aliases have been created.\";\n            }\n            logger.info(msg + \".\");\n        }\n        logger.info();\n        listAliases(options);\n        return options.project;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}