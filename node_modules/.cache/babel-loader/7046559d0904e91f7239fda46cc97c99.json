{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst ora = require(\"ora\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst api_1 = require(\"../hosting/api\");\n\nconst utils = require(\"../utils\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst marked = require(\"marked\");\n\nconst logger_1 = require(\"../logger\");\n\nexports.default = new command_1.Command(\"hosting:clone <source> <targetChannel>\").description(\"clone a version from one site to another\").before(requireAuth_1.requireAuth).action(async (source = \"\", targetChannel = \"\") => {\n  var _a, _b, _c, _d;\n\n  let sourceVersionName;\n  let sourceVersion;\n  let [sourceSiteId, sourceChannelId] = source.split(\":\");\n  let [targetSiteId, targetChannelId] = targetChannel.split(\":\");\n\n  if (!sourceSiteId || !sourceChannelId) {\n    [sourceSiteId, sourceVersion] = source.split(\"@\");\n\n    if (!sourceSiteId || !sourceVersion) {\n      throw new error_1.FirebaseError(`\"${source}\" is not a valid source. Must be in the form \"<site>:<channel>\" or \"<site>@<version>\"`);\n    }\n\n    sourceVersionName = `sites/${sourceSiteId}/versions/${sourceVersion}`;\n  }\n\n  if (!targetSiteId || !targetChannelId) {\n    throw new error_1.FirebaseError(`\"${targetChannel}\" is not a valid target channel. Must be in the form \"<site>:<channel>\" (to clone to the active website, use \"live\" as the channel).`);\n  }\n\n  targetChannelId = api_1.normalizeName(targetChannelId);\n\n  if (sourceChannelId) {\n    sourceChannelId = api_1.normalizeName(sourceChannelId);\n  }\n\n  const equalSiteIds = sourceSiteId == targetSiteId;\n  const equalChannelIds = sourceChannelId == targetChannelId;\n\n  if (equalSiteIds && equalChannelIds) {\n    throw new error_1.FirebaseError(`Source and destination cannot be equal. Please pick a different source or desination.`);\n  }\n\n  if (!sourceVersionName) {\n    const sChannel = await api_1.getChannel(\"-\", sourceSiteId, sourceChannelId);\n\n    if (!sChannel) {\n      throw new error_1.FirebaseError(`Could not find the channel ${cli_color_1.bold(sourceChannelId)} for site ${cli_color_1.bold(sourceSiteId)}.`);\n    }\n\n    sourceVersionName = (_b = (_a = sChannel.release) === null || _a === void 0 ? void 0 : _a.version) === null || _b === void 0 ? void 0 : _b.name;\n\n    if (!sourceVersionName) {\n      throw new error_1.FirebaseError(`Could not find a version on the channel ${cli_color_1.bold(sourceChannelId)} for site ${cli_color_1.bold(sourceSiteId)}.`);\n    }\n  }\n\n  let tChannel = await api_1.getChannel(\"-\", targetSiteId, targetChannelId);\n\n  if (!tChannel) {\n    utils.logBullet(`could not find channel ${cli_color_1.bold(targetChannelId)} in site ${cli_color_1.bold(targetSiteId)}, creating it...`);\n\n    try {\n      tChannel = await api_1.createChannel(\"-\", targetSiteId, targetChannelId);\n    } catch (e) {\n      throw new error_1.FirebaseError(`Could not create the channel ${cli_color_1.bold(targetChannelId)} for site ${cli_color_1.bold(targetSiteId)}.`, {\n        original: e\n      });\n    }\n\n    utils.logSuccess(`Created new channel ${targetChannelId}`);\n\n    try {\n      const tProjectId = parseProjectId(tChannel.name);\n      await api_1.addAuthDomains(tProjectId, [tChannel.url]);\n    } catch (e) {\n      utils.logLabeledWarning(\"hosting:clone\", marked(`Unable to add channel domain to Firebase Auth. Visit the Firebase Console at ${utils.consoleUrl(targetSiteId, \"/authentication/providers\")}`));\n      logger_1.logger.debug(\"[hosting] unable to add auth domain\", e);\n    }\n  }\n\n  const currentTargetVersionName = (_d = (_c = tChannel.release) === null || _c === void 0 ? void 0 : _c.version) === null || _d === void 0 ? void 0 : _d.name;\n\n  if (equalSiteIds && sourceVersionName == currentTargetVersionName) {\n    utils.logSuccess(`Channels ${cli_color_1.bold(sourceChannelId)} and ${cli_color_1.bold(targetChannel)} are serving identical versions. No need to clone.`);\n    return;\n  }\n\n  let targetVersionName = sourceVersionName;\n  const spinner = ora(\"Cloning site content...\").start();\n\n  try {\n    if (!equalSiteIds) {\n      const targetVersion = await api_1.cloneVersion(targetSiteId, sourceVersionName, true);\n\n      if (!targetVersion) {\n        throw new error_1.FirebaseError(`Could not clone the version ${cli_color_1.bold(sourceVersion)} for site ${cli_color_1.bold(targetSiteId)}.`);\n      }\n\n      targetVersionName = targetVersion.name;\n    }\n\n    await api_1.createRelease(targetSiteId, targetChannelId, targetVersionName);\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n\n  spinner.succeed();\n  utils.logSuccess(`Site ${cli_color_1.bold(sourceSiteId)} ${sourceChannelId ? \"channel\" : \"version\"} ${cli_color_1.bold(sourceChannelId || sourceVersion)} has been cloned to site ${cli_color_1.bold(targetSiteId)} channel ${cli_color_1.bold(targetChannelId)}.`);\n  utils.logSuccess(`Channel URL (${targetChannelId}): ${tChannel.url}`);\n});\n\nfunction parseProjectId(name) {\n  const matches = name.match(`^projects/([^/]+)`);\n  return matches ? matches[1] || \"\" : \"\";\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/hosting-clone.js"],"names":["Object","defineProperty","exports","value","cli_color_1","require","ora","command_1","error_1","api_1","utils","requireAuth_1","marked","logger_1","default","Command","description","before","requireAuth","action","source","targetChannel","_a","_b","_c","_d","sourceVersionName","sourceVersion","sourceSiteId","sourceChannelId","split","targetSiteId","targetChannelId","FirebaseError","normalizeName","equalSiteIds","equalChannelIds","sChannel","getChannel","bold","release","version","name","tChannel","logBullet","createChannel","e","original","logSuccess","tProjectId","parseProjectId","addAuthDomains","url","logLabeledWarning","consoleUrl","logger","debug","currentTargetVersionName","targetVersionName","spinner","start","targetVersion","cloneVersion","createRelease","err","fail","succeed","matches","match"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cli_color_1 = require(\"cli-color\");\nconst ora = require(\"ora\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst api_1 = require(\"../hosting/api\");\nconst utils = require(\"../utils\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst marked = require(\"marked\");\nconst logger_1 = require(\"../logger\");\nexports.default = new command_1.Command(\"hosting:clone <source> <targetChannel>\")\n    .description(\"clone a version from one site to another\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (source = \"\", targetChannel = \"\") => {\n    var _a, _b, _c, _d;\n    let sourceVersionName;\n    let sourceVersion;\n    let [sourceSiteId, sourceChannelId] = source.split(\":\");\n    let [targetSiteId, targetChannelId] = targetChannel.split(\":\");\n    if (!sourceSiteId || !sourceChannelId) {\n        [sourceSiteId, sourceVersion] = source.split(\"@\");\n        if (!sourceSiteId || !sourceVersion) {\n            throw new error_1.FirebaseError(`\"${source}\" is not a valid source. Must be in the form \"<site>:<channel>\" or \"<site>@<version>\"`);\n        }\n        sourceVersionName = `sites/${sourceSiteId}/versions/${sourceVersion}`;\n    }\n    if (!targetSiteId || !targetChannelId) {\n        throw new error_1.FirebaseError(`\"${targetChannel}\" is not a valid target channel. Must be in the form \"<site>:<channel>\" (to clone to the active website, use \"live\" as the channel).`);\n    }\n    targetChannelId = api_1.normalizeName(targetChannelId);\n    if (sourceChannelId) {\n        sourceChannelId = api_1.normalizeName(sourceChannelId);\n    }\n    const equalSiteIds = sourceSiteId == targetSiteId;\n    const equalChannelIds = sourceChannelId == targetChannelId;\n    if (equalSiteIds && equalChannelIds) {\n        throw new error_1.FirebaseError(`Source and destination cannot be equal. Please pick a different source or desination.`);\n    }\n    if (!sourceVersionName) {\n        const sChannel = await api_1.getChannel(\"-\", sourceSiteId, sourceChannelId);\n        if (!sChannel) {\n            throw new error_1.FirebaseError(`Could not find the channel ${cli_color_1.bold(sourceChannelId)} for site ${cli_color_1.bold(sourceSiteId)}.`);\n        }\n        sourceVersionName = (_b = (_a = sChannel.release) === null || _a === void 0 ? void 0 : _a.version) === null || _b === void 0 ? void 0 : _b.name;\n        if (!sourceVersionName) {\n            throw new error_1.FirebaseError(`Could not find a version on the channel ${cli_color_1.bold(sourceChannelId)} for site ${cli_color_1.bold(sourceSiteId)}.`);\n        }\n    }\n    let tChannel = await api_1.getChannel(\"-\", targetSiteId, targetChannelId);\n    if (!tChannel) {\n        utils.logBullet(`could not find channel ${cli_color_1.bold(targetChannelId)} in site ${cli_color_1.bold(targetSiteId)}, creating it...`);\n        try {\n            tChannel = await api_1.createChannel(\"-\", targetSiteId, targetChannelId);\n        }\n        catch (e) {\n            throw new error_1.FirebaseError(`Could not create the channel ${cli_color_1.bold(targetChannelId)} for site ${cli_color_1.bold(targetSiteId)}.`, { original: e });\n        }\n        utils.logSuccess(`Created new channel ${targetChannelId}`);\n        try {\n            const tProjectId = parseProjectId(tChannel.name);\n            await api_1.addAuthDomains(tProjectId, [tChannel.url]);\n        }\n        catch (e) {\n            utils.logLabeledWarning(\"hosting:clone\", marked(`Unable to add channel domain to Firebase Auth. Visit the Firebase Console at ${utils.consoleUrl(targetSiteId, \"/authentication/providers\")}`));\n            logger_1.logger.debug(\"[hosting] unable to add auth domain\", e);\n        }\n    }\n    const currentTargetVersionName = (_d = (_c = tChannel.release) === null || _c === void 0 ? void 0 : _c.version) === null || _d === void 0 ? void 0 : _d.name;\n    if (equalSiteIds && sourceVersionName == currentTargetVersionName) {\n        utils.logSuccess(`Channels ${cli_color_1.bold(sourceChannelId)} and ${cli_color_1.bold(targetChannel)} are serving identical versions. No need to clone.`);\n        return;\n    }\n    let targetVersionName = sourceVersionName;\n    const spinner = ora(\"Cloning site content...\").start();\n    try {\n        if (!equalSiteIds) {\n            const targetVersion = await api_1.cloneVersion(targetSiteId, sourceVersionName, true);\n            if (!targetVersion) {\n                throw new error_1.FirebaseError(`Could not clone the version ${cli_color_1.bold(sourceVersion)} for site ${cli_color_1.bold(targetSiteId)}.`);\n            }\n            targetVersionName = targetVersion.name;\n        }\n        await api_1.createRelease(targetSiteId, targetChannelId, targetVersionName);\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n    spinner.succeed();\n    utils.logSuccess(`Site ${cli_color_1.bold(sourceSiteId)} ${sourceChannelId ? \"channel\" : \"version\"} ${cli_color_1.bold(sourceChannelId || sourceVersion)} has been cloned to site ${cli_color_1.bold(targetSiteId)} channel ${cli_color_1.bold(targetChannelId)}.`);\n    utils.logSuccess(`Channel URL (${targetChannelId}): ${tChannel.url}`);\n});\nfunction parseProjectId(name) {\n    const matches = name.match(`^projects/([^/]+)`);\n    return matches ? matches[1] || \"\" : \"\";\n}\n"]},"metadata":{},"sourceType":"script"}