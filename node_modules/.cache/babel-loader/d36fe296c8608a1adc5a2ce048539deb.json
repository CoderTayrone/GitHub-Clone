{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initRules = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst gcp = require(\"../../../gcp\");\n\nconst fsutils = require(\"../../../fsutils\");\n\nconst prompt_1 = require(\"../../../prompt\");\n\nconst logger_1 = require(\"../../../logger\");\n\nconst utils = require(\"../../../utils\");\n\nconst DEFAULT_RULES_FILE = \"firestore.rules\";\nconst RULES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.rules\", \"utf8\");\n\nfunction initRules(setup, config) {\n  logger_1.logger.info();\n  logger_1.logger.info(\"Firestore Security Rules allow you to define how and when to allow\");\n  logger_1.logger.info(\"requests. You can keep these rules in your project directory\");\n  logger_1.logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n  logger_1.logger.info();\n  return prompt_1.prompt(setup.config.firestore, [{\n    type: \"input\",\n    name: \"rules\",\n    message: \"What file should be used for Firestore Rules?\",\n    default: DEFAULT_RULES_FILE\n  }]).then(() => {\n    const filename = setup.config.firestore.rules;\n\n    if (fsutils.fileExistsSync(filename)) {\n      const msg = \"File \" + clc.bold(filename) + \" already exists.\" + \" Do you want to overwrite it with the Firestore Rules from the Firebase Console?\";\n      return prompt_1.promptOnce({\n        type: \"confirm\",\n        message: msg,\n        default: false\n      });\n    }\n\n    return Promise.resolve(true);\n  }).then(overwrite => {\n    if (!overwrite) {\n      return Promise.resolve();\n    }\n\n    if (!setup.projectId) {\n      return config.writeProjectFile(setup.config.firestore.rules, getDefaultRules());\n    }\n\n    return getRulesFromConsole(setup.projectId).then(contents => {\n      return config.writeProjectFile(setup.config.firestore.rules, contents);\n    });\n  });\n}\n\nexports.initRules = initRules;\n\nfunction getDefaultRules() {\n  const date = utils.thirtyDaysFromNow();\n  const formattedForRules = `${date.getFullYear()}, ${date.getMonth() + 1}, ${date.getDate()}`;\n  return RULES_TEMPLATE.replace(/{{IN_30_DAYS}}/g, formattedForRules);\n}\n\nfunction getRulesFromConsole(projectId) {\n  return gcp.rules.getLatestRulesetName(projectId, \"cloud.firestore\").then(name => {\n    if (!name) {\n      logger_1.logger.debug(\"No rulesets found, using default.\");\n      return [{\n        name: DEFAULT_RULES_FILE,\n        content: getDefaultRules()\n      }];\n    }\n\n    logger_1.logger.debug(\"Found ruleset: \" + name);\n    return gcp.rules.getRulesetContent(name);\n  }).then(rules => {\n    if (rules.length <= 0) {\n      return utils.reject(\"Ruleset has no files\", {\n        exit: 1\n      });\n    }\n\n    if (rules.length > 1) {\n      return utils.reject(\"Ruleset has too many files: \" + rules.length, {\n        exit: 1\n      });\n    }\n\n    return rules[0].content;\n  });\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/firestore/rules.js"],"names":["Object","defineProperty","exports","value","initRules","clc","require","fs","gcp","fsutils","prompt_1","logger_1","utils","DEFAULT_RULES_FILE","RULES_TEMPLATE","readFileSync","__dirname","setup","config","logger","info","bold","prompt","firestore","type","name","message","default","then","filename","rules","fileExistsSync","msg","promptOnce","Promise","resolve","overwrite","projectId","writeProjectFile","getDefaultRules","getRulesFromConsole","contents","date","thirtyDaysFromNow","formattedForRules","getFullYear","getMonth","getDate","replace","getLatestRulesetName","debug","content","getRulesetContent","length","reject","exit"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initRules = void 0;\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst gcp = require(\"../../../gcp\");\nconst fsutils = require(\"../../../fsutils\");\nconst prompt_1 = require(\"../../../prompt\");\nconst logger_1 = require(\"../../../logger\");\nconst utils = require(\"../../../utils\");\nconst DEFAULT_RULES_FILE = \"firestore.rules\";\nconst RULES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.rules\", \"utf8\");\nfunction initRules(setup, config) {\n    logger_1.logger.info();\n    logger_1.logger.info(\"Firestore Security Rules allow you to define how and when to allow\");\n    logger_1.logger.info(\"requests. You can keep these rules in your project directory\");\n    logger_1.logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n    logger_1.logger.info();\n    return prompt_1.prompt(setup.config.firestore, [\n        {\n            type: \"input\",\n            name: \"rules\",\n            message: \"What file should be used for Firestore Rules?\",\n            default: DEFAULT_RULES_FILE,\n        },\n    ])\n        .then(() => {\n        const filename = setup.config.firestore.rules;\n        if (fsutils.fileExistsSync(filename)) {\n            const msg = \"File \" +\n                clc.bold(filename) +\n                \" already exists.\" +\n                \" Do you want to overwrite it with the Firestore Rules from the Firebase Console?\";\n            return prompt_1.promptOnce({\n                type: \"confirm\",\n                message: msg,\n                default: false,\n            });\n        }\n        return Promise.resolve(true);\n    })\n        .then((overwrite) => {\n        if (!overwrite) {\n            return Promise.resolve();\n        }\n        if (!setup.projectId) {\n            return config.writeProjectFile(setup.config.firestore.rules, getDefaultRules());\n        }\n        return getRulesFromConsole(setup.projectId).then((contents) => {\n            return config.writeProjectFile(setup.config.firestore.rules, contents);\n        });\n    });\n}\nexports.initRules = initRules;\nfunction getDefaultRules() {\n    const date = utils.thirtyDaysFromNow();\n    const formattedForRules = `${date.getFullYear()}, ${date.getMonth() + 1}, ${date.getDate()}`;\n    return RULES_TEMPLATE.replace(/{{IN_30_DAYS}}/g, formattedForRules);\n}\nfunction getRulesFromConsole(projectId) {\n    return gcp.rules\n        .getLatestRulesetName(projectId, \"cloud.firestore\")\n        .then((name) => {\n        if (!name) {\n            logger_1.logger.debug(\"No rulesets found, using default.\");\n            return [{ name: DEFAULT_RULES_FILE, content: getDefaultRules() }];\n        }\n        logger_1.logger.debug(\"Found ruleset: \" + name);\n        return gcp.rules.getRulesetContent(name);\n    })\n        .then((rules) => {\n        if (rules.length <= 0) {\n            return utils.reject(\"Ruleset has no files\", { exit: 1 });\n        }\n        if (rules.length > 1) {\n            return utils.reject(\"Ruleset has too many files: \" + rules.length, { exit: 1 });\n        }\n        return rules[0].content;\n    });\n}\n"]},"metadata":{},"sourceType":"script"}