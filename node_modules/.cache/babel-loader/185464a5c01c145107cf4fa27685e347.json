{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.backendFromV1Alpha1 = void 0;\n\nconst backend = require(\"../../backend\");\n\nconst parsing_1 = require(\"./parsing\");\n\nfunction backendFromV1Alpha1(yaml, project, region, runtime) {\n  const bkend = JSON.parse(JSON.stringify(yaml));\n  delete bkend.specVersion;\n  tryValidate(bkend);\n  fillDefaults(bkend, project, region, runtime);\n  return bkend;\n}\n\nexports.backendFromV1Alpha1 = backendFromV1Alpha1;\n\nfunction tryValidate(typed) {\n  var _a, _b;\n\n  parsing_1.assertKeyTypes(\"\", typed, {\n    requiredAPIs: \"object\",\n    cloudFunctions: \"array\",\n    topics: \"array\",\n    schedules: \"array\",\n    environmentVariables: \"object\"\n  });\n  parsing_1.requireKeys(\"\", typed, \"cloudFunctions\");\n\n  for (let ndx = 0; ndx < typed.cloudFunctions.length; ndx++) {\n    const prefix = `cloudFunctions[${ndx}]`;\n    const func = typed.cloudFunctions[ndx];\n    parsing_1.requireKeys(prefix, func, \"platform\", \"id\", \"entryPoint\", \"trigger\");\n    parsing_1.assertKeyTypes(prefix, func, {\n      platform: \"string\",\n      id: \"string\",\n      region: \"string\",\n      project: \"string\",\n      runtime: \"string\",\n      entryPoint: \"string\",\n      availableMemoryMb: \"number\",\n      maxInstances: \"number\",\n      minInstances: \"number\",\n      concurrency: \"number\",\n      serviceAccountEmail: \"string\",\n      timeout: \"string\",\n      trigger: \"object\",\n      vpcConnector: \"string\",\n      vpcConnectorEgressSettings: \"string\",\n      labels: \"object\",\n      ingressSettings: \"string\",\n      environmentVariables: \"omit\",\n      uri: \"omit\",\n      sourceUploadUrl: \"omit\"\n    });\n\n    if (backend.isEventTrigger(func.trigger)) {\n      parsing_1.requireKeys(prefix + \".trigger\", func.trigger, \"eventType\", \"eventFilters\");\n      parsing_1.assertKeyTypes(prefix + \".trigger\", func.trigger, {\n        eventFilters: \"object\",\n        eventType: \"string\",\n        retry: \"boolean\",\n        region: \"string\",\n        serviceAccountEmail: \"string\"\n      });\n    } else {\n      parsing_1.assertKeyTypes(prefix + \".trigger\", func.trigger, {\n        allowInsecure: \"boolean\",\n        invoker: \"array\"\n      });\n    }\n  }\n\n  for (let ndx = 0; ndx < ((_a = typed.topics) === null || _a === void 0 ? void 0 : _a.length); ndx++) {\n    let prefix = `topics[${ndx}]`;\n    const topic = typed.topics[ndx];\n    parsing_1.requireKeys(prefix, topic, \"id\", \"targetService\");\n    parsing_1.assertKeyTypes(prefix, topic, {\n      id: \"string\",\n      labels: \"object\",\n      project: \"string\",\n      targetService: \"object\"\n    });\n    prefix += \".targetService\";\n    parsing_1.requireKeys(prefix, topic.targetService, \"id\");\n    parsing_1.assertKeyTypes(prefix, topic.targetService, {\n      id: \"string\",\n      project: \"string\",\n      region: \"string\"\n    });\n  }\n\n  for (let ndx = 0; ndx < ((_b = typed.schedules) === null || _b === void 0 ? void 0 : _b.length); ndx++) {\n    let prefix = `schedules[${ndx}]`;\n    const schedule = typed.schedules[ndx];\n    parsing_1.requireKeys(prefix, schedule, \"id\", \"schedule\", \"transport\", \"targetService\");\n    parsing_1.assertKeyTypes(prefix, schedule, {\n      id: \"string\",\n      project: \"string\",\n      retryConfig: \"object\",\n      schedule: \"string\",\n      timeZone: \"string\",\n      transport: \"string\",\n      targetService: \"object\"\n    });\n    parsing_1.assertKeyTypes(prefix + \".retryConfig\", schedule.retryConfig, {\n      maxBackoffDuration: \"string\",\n      minBackoffDuration: \"string\",\n      maxDoublings: \"number\",\n      maxRetryDuration: \"string\",\n      retryCount: \"number\"\n    });\n    parsing_1.requireKeys(prefix = \".targetService\", schedule.targetService, \"id\");\n    parsing_1.assertKeyTypes(prefix + \".targetService\", schedule.targetService, {\n      id: \"string\",\n      project: \"string\",\n      region: \"string\"\n    });\n  }\n}\n\nfunction fillDefaults(want, project, region, runtime) {\n  want.requiredAPIs = want.requiredAPIs || {};\n  want.environmentVariables = want.environmentVariables || {};\n  want.schedules = want.schedules || [];\n  want.topics = want.topics || [];\n\n  for (const cloudFunction of want.cloudFunctions) {\n    if (!cloudFunction.project) {\n      cloudFunction.project = project;\n    }\n\n    if (!cloudFunction.region) {\n      cloudFunction.region = region;\n    }\n\n    if (!cloudFunction.runtime) {\n      cloudFunction.runtime = runtime;\n    }\n  }\n\n  for (const topic of want.topics) {\n    if (!topic.project) {\n      topic.project = project;\n    }\n\n    if (!topic.targetService.project) {\n      topic.targetService.project = project;\n    }\n\n    if (!topic.targetService.region) {\n      topic.targetService.region = region;\n    }\n  }\n\n  for (const schedule of want.schedules) {\n    if (!schedule.project) {\n      schedule.project = project;\n    }\n\n    if (!schedule.targetService.project) {\n      schedule.targetService.project = project;\n    }\n\n    if (!schedule.targetService.region) {\n      schedule.targetService.region = region;\n    }\n  }\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/runtimes/discovery/v1alpha1.js"],"names":["Object","defineProperty","exports","value","backendFromV1Alpha1","backend","require","parsing_1","yaml","project","region","runtime","bkend","JSON","parse","stringify","specVersion","tryValidate","fillDefaults","typed","_a","_b","assertKeyTypes","requiredAPIs","cloudFunctions","topics","schedules","environmentVariables","requireKeys","ndx","length","prefix","func","platform","id","entryPoint","availableMemoryMb","maxInstances","minInstances","concurrency","serviceAccountEmail","timeout","trigger","vpcConnector","vpcConnectorEgressSettings","labels","ingressSettings","uri","sourceUploadUrl","isEventTrigger","eventFilters","eventType","retry","allowInsecure","invoker","topic","targetService","schedule","retryConfig","timeZone","transport","maxBackoffDuration","minBackoffDuration","maxDoublings","maxRetryDuration","retryCount","want","cloudFunction"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,SAASF,mBAAT,CAA6BI,IAA7B,EAAmCC,OAAnC,EAA4CC,MAA5C,EAAoDC,OAApD,EAA6D;AACzD,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,IAAf,CAAX,CAAd;AACA,SAAOI,KAAK,CAACI,WAAb;AACAC,EAAAA,WAAW,CAACL,KAAD,CAAX;AACAM,EAAAA,YAAY,CAACN,KAAD,EAAQH,OAAR,EAAiBC,MAAjB,EAAyBC,OAAzB,CAAZ;AACA,SAAOC,KAAP;AACH;;AACDV,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AACA,SAASa,WAAT,CAAqBE,KAArB,EAA4B;AACxB,MAAIC,EAAJ,EAAQC,EAAR;;AACAd,EAAAA,SAAS,CAACe,cAAV,CAAyB,EAAzB,EAA6BH,KAA7B,EAAoC;AAChCI,IAAAA,YAAY,EAAE,QADkB;AAEhCC,IAAAA,cAAc,EAAE,OAFgB;AAGhCC,IAAAA,MAAM,EAAE,OAHwB;AAIhCC,IAAAA,SAAS,EAAE,OAJqB;AAKhCC,IAAAA,oBAAoB,EAAE;AALU,GAApC;AAOApB,EAAAA,SAAS,CAACqB,WAAV,CAAsB,EAAtB,EAA0BT,KAA1B,EAAiC,gBAAjC;;AACA,OAAK,IAAIU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,KAAK,CAACK,cAAN,CAAqBM,MAA7C,EAAqDD,GAAG,EAAxD,EAA4D;AACxD,UAAME,MAAM,GAAI,kBAAiBF,GAAI,GAArC;AACA,UAAMG,IAAI,GAAGb,KAAK,CAACK,cAAN,CAAqBK,GAArB,CAAb;AACAtB,IAAAA,SAAS,CAACqB,WAAV,CAAsBG,MAAtB,EAA8BC,IAA9B,EAAoC,UAApC,EAAgD,IAAhD,EAAsD,YAAtD,EAAoE,SAApE;AACAzB,IAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAzB,EAAiCC,IAAjC,EAAuC;AACnCC,MAAAA,QAAQ,EAAE,QADyB;AAEnCC,MAAAA,EAAE,EAAE,QAF+B;AAGnCxB,MAAAA,MAAM,EAAE,QAH2B;AAInCD,MAAAA,OAAO,EAAE,QAJ0B;AAKnCE,MAAAA,OAAO,EAAE,QAL0B;AAMnCwB,MAAAA,UAAU,EAAE,QANuB;AAOnCC,MAAAA,iBAAiB,EAAE,QAPgB;AAQnCC,MAAAA,YAAY,EAAE,QARqB;AASnCC,MAAAA,YAAY,EAAE,QATqB;AAUnCC,MAAAA,WAAW,EAAE,QAVsB;AAWnCC,MAAAA,mBAAmB,EAAE,QAXc;AAYnCC,MAAAA,OAAO,EAAE,QAZ0B;AAanCC,MAAAA,OAAO,EAAE,QAb0B;AAcnCC,MAAAA,YAAY,EAAE,QAdqB;AAenCC,MAAAA,0BAA0B,EAAE,QAfO;AAgBnCC,MAAAA,MAAM,EAAE,QAhB2B;AAiBnCC,MAAAA,eAAe,EAAE,QAjBkB;AAkBnCnB,MAAAA,oBAAoB,EAAE,MAlBa;AAmBnCoB,MAAAA,GAAG,EAAE,MAnB8B;AAoBnCC,MAAAA,eAAe,EAAE;AApBkB,KAAvC;;AAsBA,QAAI3C,OAAO,CAAC4C,cAAR,CAAuBjB,IAAI,CAACU,OAA5B,CAAJ,EAA0C;AACtCnC,MAAAA,SAAS,CAACqB,WAAV,CAAsBG,MAAM,GAAG,UAA/B,EAA2CC,IAAI,CAACU,OAAhD,EAAyD,WAAzD,EAAsE,cAAtE;AACAnC,MAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAM,GAAG,UAAlC,EAA8CC,IAAI,CAACU,OAAnD,EAA4D;AACxDQ,QAAAA,YAAY,EAAE,QAD0C;AAExDC,QAAAA,SAAS,EAAE,QAF6C;AAGxDC,QAAAA,KAAK,EAAE,SAHiD;AAIxD1C,QAAAA,MAAM,EAAE,QAJgD;AAKxD8B,QAAAA,mBAAmB,EAAE;AALmC,OAA5D;AAOH,KATD,MAUK;AACDjC,MAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAM,GAAG,UAAlC,EAA8CC,IAAI,CAACU,OAAnD,EAA4D;AACxDW,QAAAA,aAAa,EAAE,SADyC;AAExDC,QAAAA,OAAO,EAAE;AAF+C,OAA5D;AAIH;AACJ;;AACD,OAAK,IAAIzB,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAI,CAACT,EAAE,GAAGD,KAAK,CAACM,MAAZ,MAAwB,IAAxB,IAAgCL,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACU,MAAhE,CAArB,EAA8FD,GAAG,EAAjG,EAAqG;AACjG,QAAIE,MAAM,GAAI,UAASF,GAAI,GAA3B;AACA,UAAM0B,KAAK,GAAGpC,KAAK,CAACM,MAAN,CAAaI,GAAb,CAAd;AACAtB,IAAAA,SAAS,CAACqB,WAAV,CAAsBG,MAAtB,EAA8BwB,KAA9B,EAAqC,IAArC,EAA2C,eAA3C;AACAhD,IAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAzB,EAAiCwB,KAAjC,EAAwC;AACpCrB,MAAAA,EAAE,EAAE,QADgC;AAEpCW,MAAAA,MAAM,EAAE,QAF4B;AAGpCpC,MAAAA,OAAO,EAAE,QAH2B;AAIpC+C,MAAAA,aAAa,EAAE;AAJqB,KAAxC;AAMAzB,IAAAA,MAAM,IAAI,gBAAV;AACAxB,IAAAA,SAAS,CAACqB,WAAV,CAAsBG,MAAtB,EAA8BwB,KAAK,CAACC,aAApC,EAAmD,IAAnD;AACAjD,IAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAzB,EAAiCwB,KAAK,CAACC,aAAvC,EAAsD;AAClDtB,MAAAA,EAAE,EAAE,QAD8C;AAElDzB,MAAAA,OAAO,EAAE,QAFyC;AAGlDC,MAAAA,MAAM,EAAE;AAH0C,KAAtD;AAKH;;AACD,OAAK,IAAImB,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAI,CAACR,EAAE,GAAGF,KAAK,CAACO,SAAZ,MAA2B,IAA3B,IAAmCL,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACS,MAAnE,CAArB,EAAiGD,GAAG,EAApG,EAAwG;AACpG,QAAIE,MAAM,GAAI,aAAYF,GAAI,GAA9B;AACA,UAAM4B,QAAQ,GAAGtC,KAAK,CAACO,SAAN,CAAgBG,GAAhB,CAAjB;AACAtB,IAAAA,SAAS,CAACqB,WAAV,CAAsBG,MAAtB,EAA8B0B,QAA9B,EAAwC,IAAxC,EAA8C,UAA9C,EAA0D,WAA1D,EAAuE,eAAvE;AACAlD,IAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAzB,EAAiC0B,QAAjC,EAA2C;AACvCvB,MAAAA,EAAE,EAAE,QADmC;AAEvCzB,MAAAA,OAAO,EAAE,QAF8B;AAGvCiD,MAAAA,WAAW,EAAE,QAH0B;AAIvCD,MAAAA,QAAQ,EAAE,QAJ6B;AAKvCE,MAAAA,QAAQ,EAAE,QAL6B;AAMvCC,MAAAA,SAAS,EAAE,QAN4B;AAOvCJ,MAAAA,aAAa,EAAE;AAPwB,KAA3C;AASAjD,IAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAM,GAAG,cAAlC,EAAkD0B,QAAQ,CAACC,WAA3D,EAAwE;AACpEG,MAAAA,kBAAkB,EAAE,QADgD;AAEpEC,MAAAA,kBAAkB,EAAE,QAFgD;AAGpEC,MAAAA,YAAY,EAAE,QAHsD;AAIpEC,MAAAA,gBAAgB,EAAE,QAJkD;AAKpEC,MAAAA,UAAU,EAAE;AALwD,KAAxE;AAOA1D,IAAAA,SAAS,CAACqB,WAAV,CAAuBG,MAAM,GAAG,gBAAhC,EAAmD0B,QAAQ,CAACD,aAA5D,EAA2E,IAA3E;AACAjD,IAAAA,SAAS,CAACe,cAAV,CAAyBS,MAAM,GAAG,gBAAlC,EAAoD0B,QAAQ,CAACD,aAA7D,EAA4E;AACxEtB,MAAAA,EAAE,EAAE,QADoE;AAExEzB,MAAAA,OAAO,EAAE,QAF+D;AAGxEC,MAAAA,MAAM,EAAE;AAHgE,KAA5E;AAKH;AACJ;;AACD,SAASQ,YAAT,CAAsBgD,IAAtB,EAA4BzD,OAA5B,EAAqCC,MAArC,EAA6CC,OAA7C,EAAsD;AAClDuD,EAAAA,IAAI,CAAC3C,YAAL,GAAoB2C,IAAI,CAAC3C,YAAL,IAAqB,EAAzC;AACA2C,EAAAA,IAAI,CAACvC,oBAAL,GAA4BuC,IAAI,CAACvC,oBAAL,IAA6B,EAAzD;AACAuC,EAAAA,IAAI,CAACxC,SAAL,GAAiBwC,IAAI,CAACxC,SAAL,IAAkB,EAAnC;AACAwC,EAAAA,IAAI,CAACzC,MAAL,GAAcyC,IAAI,CAACzC,MAAL,IAAe,EAA7B;;AACA,OAAK,MAAM0C,aAAX,IAA4BD,IAAI,CAAC1C,cAAjC,EAAiD;AAC7C,QAAI,CAAC2C,aAAa,CAAC1D,OAAnB,EAA4B;AACxB0D,MAAAA,aAAa,CAAC1D,OAAd,GAAwBA,OAAxB;AACH;;AACD,QAAI,CAAC0D,aAAa,CAACzD,MAAnB,EAA2B;AACvByD,MAAAA,aAAa,CAACzD,MAAd,GAAuBA,MAAvB;AACH;;AACD,QAAI,CAACyD,aAAa,CAACxD,OAAnB,EAA4B;AACxBwD,MAAAA,aAAa,CAACxD,OAAd,GAAwBA,OAAxB;AACH;AACJ;;AACD,OAAK,MAAM4C,KAAX,IAAoBW,IAAI,CAACzC,MAAzB,EAAiC;AAC7B,QAAI,CAAC8B,KAAK,CAAC9C,OAAX,EAAoB;AAChB8C,MAAAA,KAAK,CAAC9C,OAAN,GAAgBA,OAAhB;AACH;;AACD,QAAI,CAAC8C,KAAK,CAACC,aAAN,CAAoB/C,OAAzB,EAAkC;AAC9B8C,MAAAA,KAAK,CAACC,aAAN,CAAoB/C,OAApB,GAA8BA,OAA9B;AACH;;AACD,QAAI,CAAC8C,KAAK,CAACC,aAAN,CAAoB9C,MAAzB,EAAiC;AAC7B6C,MAAAA,KAAK,CAACC,aAAN,CAAoB9C,MAApB,GAA6BA,MAA7B;AACH;AACJ;;AACD,OAAK,MAAM+C,QAAX,IAAuBS,IAAI,CAACxC,SAA5B,EAAuC;AACnC,QAAI,CAAC+B,QAAQ,CAAChD,OAAd,EAAuB;AACnBgD,MAAAA,QAAQ,CAAChD,OAAT,GAAmBA,OAAnB;AACH;;AACD,QAAI,CAACgD,QAAQ,CAACD,aAAT,CAAuB/C,OAA5B,EAAqC;AACjCgD,MAAAA,QAAQ,CAACD,aAAT,CAAuB/C,OAAvB,GAAiCA,OAAjC;AACH;;AACD,QAAI,CAACgD,QAAQ,CAACD,aAAT,CAAuB9C,MAA5B,EAAoC;AAChC+C,MAAAA,QAAQ,CAACD,aAAT,CAAuB9C,MAAvB,GAAgCA,MAAhC;AACH;AACJ;AACJ","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.backendFromV1Alpha1 = void 0;\nconst backend = require(\"../../backend\");\nconst parsing_1 = require(\"./parsing\");\nfunction backendFromV1Alpha1(yaml, project, region, runtime) {\n    const bkend = JSON.parse(JSON.stringify(yaml));\n    delete bkend.specVersion;\n    tryValidate(bkend);\n    fillDefaults(bkend, project, region, runtime);\n    return bkend;\n}\nexports.backendFromV1Alpha1 = backendFromV1Alpha1;\nfunction tryValidate(typed) {\n    var _a, _b;\n    parsing_1.assertKeyTypes(\"\", typed, {\n        requiredAPIs: \"object\",\n        cloudFunctions: \"array\",\n        topics: \"array\",\n        schedules: \"array\",\n        environmentVariables: \"object\",\n    });\n    parsing_1.requireKeys(\"\", typed, \"cloudFunctions\");\n    for (let ndx = 0; ndx < typed.cloudFunctions.length; ndx++) {\n        const prefix = `cloudFunctions[${ndx}]`;\n        const func = typed.cloudFunctions[ndx];\n        parsing_1.requireKeys(prefix, func, \"platform\", \"id\", \"entryPoint\", \"trigger\");\n        parsing_1.assertKeyTypes(prefix, func, {\n            platform: \"string\",\n            id: \"string\",\n            region: \"string\",\n            project: \"string\",\n            runtime: \"string\",\n            entryPoint: \"string\",\n            availableMemoryMb: \"number\",\n            maxInstances: \"number\",\n            minInstances: \"number\",\n            concurrency: \"number\",\n            serviceAccountEmail: \"string\",\n            timeout: \"string\",\n            trigger: \"object\",\n            vpcConnector: \"string\",\n            vpcConnectorEgressSettings: \"string\",\n            labels: \"object\",\n            ingressSettings: \"string\",\n            environmentVariables: \"omit\",\n            uri: \"omit\",\n            sourceUploadUrl: \"omit\",\n        });\n        if (backend.isEventTrigger(func.trigger)) {\n            parsing_1.requireKeys(prefix + \".trigger\", func.trigger, \"eventType\", \"eventFilters\");\n            parsing_1.assertKeyTypes(prefix + \".trigger\", func.trigger, {\n                eventFilters: \"object\",\n                eventType: \"string\",\n                retry: \"boolean\",\n                region: \"string\",\n                serviceAccountEmail: \"string\",\n            });\n        }\n        else {\n            parsing_1.assertKeyTypes(prefix + \".trigger\", func.trigger, {\n                allowInsecure: \"boolean\",\n                invoker: \"array\",\n            });\n        }\n    }\n    for (let ndx = 0; ndx < ((_a = typed.topics) === null || _a === void 0 ? void 0 : _a.length); ndx++) {\n        let prefix = `topics[${ndx}]`;\n        const topic = typed.topics[ndx];\n        parsing_1.requireKeys(prefix, topic, \"id\", \"targetService\");\n        parsing_1.assertKeyTypes(prefix, topic, {\n            id: \"string\",\n            labels: \"object\",\n            project: \"string\",\n            targetService: \"object\",\n        });\n        prefix += \".targetService\";\n        parsing_1.requireKeys(prefix, topic.targetService, \"id\");\n        parsing_1.assertKeyTypes(prefix, topic.targetService, {\n            id: \"string\",\n            project: \"string\",\n            region: \"string\",\n        });\n    }\n    for (let ndx = 0; ndx < ((_b = typed.schedules) === null || _b === void 0 ? void 0 : _b.length); ndx++) {\n        let prefix = `schedules[${ndx}]`;\n        const schedule = typed.schedules[ndx];\n        parsing_1.requireKeys(prefix, schedule, \"id\", \"schedule\", \"transport\", \"targetService\");\n        parsing_1.assertKeyTypes(prefix, schedule, {\n            id: \"string\",\n            project: \"string\",\n            retryConfig: \"object\",\n            schedule: \"string\",\n            timeZone: \"string\",\n            transport: \"string\",\n            targetService: \"object\",\n        });\n        parsing_1.assertKeyTypes(prefix + \".retryConfig\", schedule.retryConfig, {\n            maxBackoffDuration: \"string\",\n            minBackoffDuration: \"string\",\n            maxDoublings: \"number\",\n            maxRetryDuration: \"string\",\n            retryCount: \"number\",\n        });\n        parsing_1.requireKeys((prefix = \".targetService\"), schedule.targetService, \"id\");\n        parsing_1.assertKeyTypes(prefix + \".targetService\", schedule.targetService, {\n            id: \"string\",\n            project: \"string\",\n            region: \"string\",\n        });\n    }\n}\nfunction fillDefaults(want, project, region, runtime) {\n    want.requiredAPIs = want.requiredAPIs || {};\n    want.environmentVariables = want.environmentVariables || {};\n    want.schedules = want.schedules || [];\n    want.topics = want.topics || [];\n    for (const cloudFunction of want.cloudFunctions) {\n        if (!cloudFunction.project) {\n            cloudFunction.project = project;\n        }\n        if (!cloudFunction.region) {\n            cloudFunction.region = region;\n        }\n        if (!cloudFunction.runtime) {\n            cloudFunction.runtime = runtime;\n        }\n    }\n    for (const topic of want.topics) {\n        if (!topic.project) {\n            topic.project = project;\n        }\n        if (!topic.targetService.project) {\n            topic.targetService.project = project;\n        }\n        if (!topic.targetService.region) {\n            topic.targetService.region = region;\n        }\n    }\n    for (const schedule of want.schedules) {\n        if (!schedule.project) {\n            schedule.project = project;\n        }\n        if (!schedule.targetService.project) {\n            schedule.targetService.project = project;\n        }\n        if (!schedule.targetService.region) {\n            schedule.targetService.region = region;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}