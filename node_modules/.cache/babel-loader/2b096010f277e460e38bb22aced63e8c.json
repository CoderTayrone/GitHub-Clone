{"ast":null,"code":"\"use strict\";\n\nvar isValue = require(\"../../object/is-value\"),\n    callable = require(\"../../object/valid-callable\"),\n    aFrom = require(\"../../array/from\");\n\nvar apply = Function.prototype.apply,\n    call = Function.prototype.call,\n    callFn = function (arg, fn) {\n  return call.call(fn, this, arg);\n};\n\nmodule.exports = function (fnIgnored\n/*, …fnn*/\n) {\n  var fns, first;\n  var args = aFrom(arguments);\n  fns = isValue(this) ? [this].concat(args) : args;\n  fns.forEach(callable);\n  fns = fns.reverse();\n  first = fns[0];\n  fns = fns.slice(1);\n  return function (argIgnored) {\n    return fns.reduce(callFn, apply.call(first, this, arguments));\n  };\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/es5-ext/function/#/compose.js"],"names":["isValue","require","callable","aFrom","apply","Function","prototype","call","callFn","arg","fn","module","exports","fnIgnored","fns","first","args","arguments","concat","forEach","reverse","slice","argIgnored","reduce"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAIC,OAAO,CAAC,uBAAD,CAAtB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,6BAAD,CADtB;AAAA,IAEIE,KAAK,GAAMF,OAAO,CAAC,kBAAD,CAFtB;;AAIA,IAAIG,KAAK,GAAGC,QAAQ,CAACC,SAAT,CAAmBF,KAA/B;AAAA,IACIG,IAAI,GAAGF,QAAQ,CAACC,SAAT,CAAmBC,IAD9B;AAAA,IAEIC,MAAM,GAAG,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AAAE,SAAOH,IAAI,CAACA,IAAL,CAAUG,EAAV,EAAc,IAAd,EAAoBD,GAApB,CAAP;AAAkC,CAFpE;;AAIAE,MAAM,CAACC,OAAP,GAAiB,UAAUC;AAAS;AAAnB,EAA+B;AAC/C,MAAIC,GAAJ,EAASC,KAAT;AACA,MAAIC,IAAI,GAAGb,KAAK,CAACc,SAAD,CAAhB;AACAH,EAAAA,GAAG,GAAGd,OAAO,CAAC,IAAD,CAAP,GAAgB,CAAC,IAAD,EAAOkB,MAAP,CAAcF,IAAd,CAAhB,GAAsCA,IAA5C;AACAF,EAAAA,GAAG,CAACK,OAAJ,CAAYjB,QAAZ;AACAY,EAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,EAAN;AACAL,EAAAA,KAAK,GAAGD,GAAG,CAAC,CAAD,CAAX;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACO,KAAJ,CAAU,CAAV,CAAN;AACA,SAAO,UAAUC,UAAV,EAAsB;AAAE,WAAOR,GAAG,CAACS,MAAJ,CAAWf,MAAX,EAAmBJ,KAAK,CAACG,IAAN,CAAWQ,KAAX,EAAkB,IAAlB,EAAwBE,SAAxB,CAAnB,CAAP;AAAgE,GAA/F;AACA,CATD","sourcesContent":["\"use strict\";\n\nvar isValue  = require(\"../../object/is-value\")\n  , callable = require(\"../../object/valid-callable\")\n  , aFrom    = require(\"../../array/from\");\n\nvar apply = Function.prototype.apply\n  , call = Function.prototype.call\n  , callFn = function (arg, fn) { return call.call(fn, this, arg); };\n\nmodule.exports = function (fnIgnored/*, …fnn*/) {\n\tvar fns, first;\n\tvar args = aFrom(arguments);\n\tfns = isValue(this) ? [this].concat(args) : args;\n\tfns.forEach(callable);\n\tfns = fns.reverse();\n\tfirst = fns[0];\n\tfns = fns.slice(1);\n\treturn function (argIgnored) { return fns.reduce(callFn, apply.call(first, this, arguments)); };\n};\n"]},"metadata":{},"sourceType":"script"}