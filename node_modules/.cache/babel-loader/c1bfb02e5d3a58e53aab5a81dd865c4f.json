{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst ora = require(\"ora\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst paramHelper = require(\"../extensions/paramHelper\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\nexports.default = new command_1.Command(\"ext:configure <extensionInstanceId>\").description(\"configure an existing extension instance\").option(\"--params <paramsFile>\", \"path of params file with .env format.\").before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.update\", \"firebaseextensions.instances.get\"]).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").action(async (instanceId, options) => {\n  const spinner = ora.default(`Configuring ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n\n  try {\n    const projectId = projectUtils_1.needProjectId(options);\n    let existingInstance;\n\n    try {\n      existingInstance = await extensionsApi.getInstance(projectId, instanceId);\n    } catch (err) {\n      if (err.status === 404) {\n        return utils.reject(`No extension instance ${instanceId} found in project ${projectId}.`, {\n          exit: 1\n        });\n      }\n\n      throw err;\n    }\n\n    const paramSpecWithNewDefaults = paramHelper.getParamsWithCurrentValuesAsDefaults(existingInstance);\n\n    const immutableParams = _.remove(paramSpecWithNewDefaults, param => {\n      return param.immutable || param.param === \"LOCATION\";\n    });\n\n    const params = await paramHelper.getParams(projectId, paramSpecWithNewDefaults, options.params);\n\n    if (immutableParams.length) {\n      const plural = immutableParams.length > 1;\n      logger_1.logger.info(`The following param${plural ? \"s are\" : \" is\"} immutable:`);\n\n      for (const {\n        param\n      } of immutableParams) {\n        const value = _.get(existingInstance, `config.params.${param}`);\n\n        logger_1.logger.info(`param: ${param}, value: ${value}`);\n        params[param] = value;\n      }\n\n      logger_1.logger.info((plural ? \"To set different values for these params\" : \"To set a different value for this param\") + \", uninstall the extension, then install a new instance of this extension.\");\n    }\n\n    spinner.start();\n    const res = await extensionsApi.configureInstance(projectId, instanceId, params);\n    spinner.stop();\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully configured ${clc.bold(instanceId)}.`);\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your reconfigured instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=config`)}`));\n    return res;\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred while configuring the instance: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-configure.js"],"names":["Object","defineProperty","exports","value","_","require","clc","marked","ora","TerminalRenderer","checkMinRequiredVersion_1","command_1","error_1","projectUtils_1","extensionsApi","extensionsHelper_1","paramHelper","requirePermissions_1","utils","logger_1","setOptions","renderer","default","Command","description","option","before","requirePermissions","checkMinRequiredVersion","action","instanceId","options","spinner","bold","projectId","needProjectId","existingInstance","getInstance","err","status","reject","exit","paramSpecWithNewDefaults","getParamsWithCurrentValuesAsDefaults","immutableParams","remove","param","immutable","params","getParams","length","plural","logger","info","get","start","res","configureInstance","stop","logLabeledSuccess","logPrefix","logLabeledBullet","consoleUrl","isSpinning","fail","FirebaseError","message","original"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst ora = require(\"ora\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst paramHelper = require(\"../extensions/paramHelper\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nexports.default = new command_1.Command(\"ext:configure <extensionInstanceId>\")\n    .description(\"configure an existing extension instance\")\n    .option(\"--params <paramsFile>\", \"path of params file with .env format.\")\n    .before(requirePermissions_1.requirePermissions, [\n    \"firebaseextensions.instances.update\",\n    \"firebaseextensions.instances.get\",\n])\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .action(async (instanceId, options) => {\n    const spinner = ora.default(`Configuring ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n    try {\n        const projectId = projectUtils_1.needProjectId(options);\n        let existingInstance;\n        try {\n            existingInstance = await extensionsApi.getInstance(projectId, instanceId);\n        }\n        catch (err) {\n            if (err.status === 404) {\n                return utils.reject(`No extension instance ${instanceId} found in project ${projectId}.`, {\n                    exit: 1,\n                });\n            }\n            throw err;\n        }\n        const paramSpecWithNewDefaults = paramHelper.getParamsWithCurrentValuesAsDefaults(existingInstance);\n        const immutableParams = _.remove(paramSpecWithNewDefaults, (param) => {\n            return param.immutable || param.param === \"LOCATION\";\n        });\n        const params = await paramHelper.getParams(projectId, paramSpecWithNewDefaults, options.params);\n        if (immutableParams.length) {\n            const plural = immutableParams.length > 1;\n            logger_1.logger.info(`The following param${plural ? \"s are\" : \" is\"} immutable:`);\n            for (const { param } of immutableParams) {\n                const value = _.get(existingInstance, `config.params.${param}`);\n                logger_1.logger.info(`param: ${param}, value: ${value}`);\n                params[param] = value;\n            }\n            logger_1.logger.info((plural\n                ? \"To set different values for these params\"\n                : \"To set a different value for this param\") +\n                \", uninstall the extension, then install a new instance of this extension.\");\n        }\n        spinner.start();\n        const res = await extensionsApi.configureInstance(projectId, instanceId, params);\n        spinner.stop();\n        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully configured ${clc.bold(instanceId)}.`);\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your reconfigured instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=config`)}`));\n        return res;\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred while configuring the instance: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}