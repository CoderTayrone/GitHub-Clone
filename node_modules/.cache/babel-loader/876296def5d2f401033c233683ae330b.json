{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst apps_1 = require(\"../management/apps\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst utils_1 = require(\"../utils\");\n\nfunction getCertHashType(shaHash) {\n  shaHash = shaHash.replace(/:/g, \"\");\n  const shaHashCount = shaHash.length;\n  if (shaHashCount == 40) return apps_1.ShaCertificateType.SHA_1.toString();\n  if (shaHashCount == 64) return apps_1.ShaCertificateType.SHA_256.toString();\n  return apps_1.ShaCertificateType.SHA_CERTIFICATE_TYPE_UNSPECIFIED.toString();\n}\n\nmodule.exports = new command_1.Command(\"apps:android:sha:create <appId> <shaHash>\").description(\"add a SHA certificate hash for a given app id.\").before(requireAuth_1.requireAuth).action(async (appId = \"\", shaHash = \"\", options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const shaCertificate = await utils_1.promiseWithSpinner(async () => await apps_1.createAppAndroidSha(projectId, appId, {\n    shaHash: shaHash,\n    certType: getCertHashType(shaHash)\n  }), `Creating Android SHA certificate ${clc.bold(options.shaHash)}with Android app Id ${clc.bold(appId)}`);\n  return shaCertificate;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/apps-android-sha-create.js"],"names":["Object","defineProperty","exports","value","clc","require","command_1","projectUtils_1","apps_1","requireAuth_1","utils_1","getCertHashType","shaHash","replace","shaHashCount","length","ShaCertificateType","SHA_1","toString","SHA_256","SHA_CERTIFICATE_TYPE_UNSPECIFIED","module","Command","description","before","requireAuth","action","appId","options","projectId","needProjectId","shaCertificate","promiseWithSpinner","createAppAndroidSha","certType","bold"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,SAASM,eAAT,CAAyBC,OAAzB,EAAkC;AAC9BA,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAV;AACA,QAAMC,YAAY,GAAGF,OAAO,CAACG,MAA7B;AACA,MAAID,YAAY,IAAI,EAApB,EACI,OAAON,MAAM,CAACQ,kBAAP,CAA0BC,KAA1B,CAAgCC,QAAhC,EAAP;AACJ,MAAIJ,YAAY,IAAI,EAApB,EACI,OAAON,MAAM,CAACQ,kBAAP,CAA0BG,OAA1B,CAAkCD,QAAlC,EAAP;AACJ,SAAOV,MAAM,CAACQ,kBAAP,CAA0BI,gCAA1B,CAA2DF,QAA3D,EAAP;AACH;;AACDG,MAAM,CAACnB,OAAP,GAAiB,IAAII,SAAS,CAACgB,OAAd,CAAsB,2CAAtB,EACZC,WADY,CACA,gDADA,EAEZC,MAFY,CAELf,aAAa,CAACgB,WAFT,EAGZC,MAHY,CAGL,OAAOC,KAAK,GAAG,EAAf,EAAmBf,OAAO,GAAG,EAA7B,EAAiCgB,OAAjC,KAA6C;AACrD,QAAMC,SAAS,GAAGtB,cAAc,CAACuB,aAAf,CAA6BF,OAA7B,CAAlB;AACA,QAAMG,cAAc,GAAG,MAAMrB,OAAO,CAACsB,kBAAR,CAA2B,YAAY,MAAMxB,MAAM,CAACyB,mBAAP,CAA2BJ,SAA3B,EAAsCF,KAAtC,EAA6C;AACnHf,IAAAA,OAAO,EAAEA,OAD0G;AAEnHsB,IAAAA,QAAQ,EAAEvB,eAAe,CAACC,OAAD;AAF0F,GAA7C,CAA7C,EAGxB,oCAAmCR,GAAG,CAAC+B,IAAJ,CAASP,OAAO,CAAChB,OAAjB,CAA0B,uBAAsBR,GAAG,CAAC+B,IAAJ,CAASR,KAAT,CAAgB,EAH3E,CAA7B;AAIA,SAAOI,cAAP;AACH,CAVgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst apps_1 = require(\"../management/apps\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst utils_1 = require(\"../utils\");\nfunction getCertHashType(shaHash) {\n    shaHash = shaHash.replace(/:/g, \"\");\n    const shaHashCount = shaHash.length;\n    if (shaHashCount == 40)\n        return apps_1.ShaCertificateType.SHA_1.toString();\n    if (shaHashCount == 64)\n        return apps_1.ShaCertificateType.SHA_256.toString();\n    return apps_1.ShaCertificateType.SHA_CERTIFICATE_TYPE_UNSPECIFIED.toString();\n}\nmodule.exports = new command_1.Command(\"apps:android:sha:create <appId> <shaHash>\")\n    .description(\"add a SHA certificate hash for a given app id.\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (appId = \"\", shaHash = \"\", options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const shaCertificate = await utils_1.promiseWithSpinner(async () => await apps_1.createAppAndroidSha(projectId, appId, {\n        shaHash: shaHash,\n        certType: getCertHashType(shaHash),\n    }), `Creating Android SHA certificate ${clc.bold(options.shaHash)}with Android app Id ${clc.bold(appId)}`);\n    return shaCertificate;\n});\n"]},"metadata":{},"sourceType":"script"}