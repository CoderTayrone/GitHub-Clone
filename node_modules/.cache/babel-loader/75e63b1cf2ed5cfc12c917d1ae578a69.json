{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst command_1 = require(\"../command\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst error_1 = require(\"../error\");\n\nconst database_1 = require(\"../management/database\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst api_1 = require(\"../database/api\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst utils = require(\"../utils\");\n\nexports.default = new command_1.Command(\"database:update <path> [infile]\").description(\"update some of the keys for the defined path in your Firebase\").option(\"-d, --data <data>\", \"specify escaped JSON directly\").option(\"-y, --confirm\", \"pass this option to bypass confirmation prompt\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(database_1.populateInstanceDetails).before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE).action(async (path, infile, options) => {\n  if (!path.startsWith(\"/\")) {\n    throw new error_1.FirebaseError(\"Path must begin with /\");\n  }\n\n  const origin = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n  const url = utils.getDatabaseUrl(origin, options.instance, path);\n  const confirmed = await prompt_1.promptOnce({\n    type: \"confirm\",\n    name: \"confirm\",\n    default: false,\n    message: `You are about to modify data at ${clc.cyan(url)}. Are you sure?`\n  }, options);\n\n  if (!confirmed) {\n    throw new error_1.FirebaseError(\"Command aborted.\");\n  }\n\n  const inStream = utils.stringToStream(options.data) || infile && fs.createReadStream(infile) || process.stdin;\n  const jsonUrl = new url_1.URL(utils.getDatabaseUrl(origin, options.instance, path + \".json\"));\n\n  if (!infile && !options.data) {\n    utils.explainStdin();\n  }\n\n  const c = new apiv2_1.Client({\n    urlPrefix: jsonUrl.origin,\n    auth: true\n  });\n\n  try {\n    await c.request({\n      method: \"PATCH\",\n      path: jsonUrl.pathname,\n      body: inStream\n    });\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Unexpected error while setting data\");\n  }\n\n  utils.logSuccess(\"Data updated successfully\");\n  logger_1.logger.info();\n  logger_1.logger.info(clc.bold(\"View data at:\"), utils.getDatabaseViewDataUrl(origin, options.project, options.instance, path));\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-update.js"],"names":["Object","defineProperty","exports","value","url_1","require","clc","fs","apiv2_1","command_1","types_1","error_1","database_1","commandUtils_1","prompt_1","api_1","requirePermissions_1","logger_1","requireDatabaseInstance_1","utils","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","populateInstanceDetails","printNoticeIfEmulated","Emulators","DATABASE","action","path","infile","options","startsWith","FirebaseError","origin","realtimeOriginOrEmulatorOrCustomUrl","instanceDetails","databaseUrl","url","getDatabaseUrl","instance","confirmed","promptOnce","type","name","message","cyan","inStream","stringToStream","data","createReadStream","process","stdin","jsonUrl","URL","explainStdin","c","Client","urlPrefix","auth","request","method","pathname","body","err","logSuccess","logger","info","bold","getDatabaseViewDataUrl","project"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst apiv2_1 = require(\"../apiv2\");\nconst command_1 = require(\"../command\");\nconst types_1 = require(\"../emulator/types\");\nconst error_1 = require(\"../error\");\nconst database_1 = require(\"../management/database\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst prompt_1 = require(\"../prompt\");\nconst api_1 = require(\"../database/api\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst logger_1 = require(\"../logger\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst utils = require(\"../utils\");\nexports.default = new command_1.Command(\"database:update <path> [infile]\")\n    .description(\"update some of the keys for the defined path in your Firebase\")\n    .option(\"-d, --data <data>\", \"specify escaped JSON directly\")\n    .option(\"-y, --confirm\", \"pass this option to bypass confirmation prompt\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(database_1.populateInstanceDetails)\n    .before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE)\n    .action(async (path, infile, options) => {\n    if (!path.startsWith(\"/\")) {\n        throw new error_1.FirebaseError(\"Path must begin with /\");\n    }\n    const origin = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n    const url = utils.getDatabaseUrl(origin, options.instance, path);\n    const confirmed = await prompt_1.promptOnce({\n        type: \"confirm\",\n        name: \"confirm\",\n        default: false,\n        message: `You are about to modify data at ${clc.cyan(url)}. Are you sure?`,\n    }, options);\n    if (!confirmed) {\n        throw new error_1.FirebaseError(\"Command aborted.\");\n    }\n    const inStream = utils.stringToStream(options.data) ||\n        (infile && fs.createReadStream(infile)) ||\n        process.stdin;\n    const jsonUrl = new url_1.URL(utils.getDatabaseUrl(origin, options.instance, path + \".json\"));\n    if (!infile && !options.data) {\n        utils.explainStdin();\n    }\n    const c = new apiv2_1.Client({ urlPrefix: jsonUrl.origin, auth: true });\n    try {\n        await c.request({\n            method: \"PATCH\",\n            path: jsonUrl.pathname,\n            body: inStream,\n        });\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Unexpected error while setting data\");\n    }\n    utils.logSuccess(\"Data updated successfully\");\n    logger_1.logger.info();\n    logger_1.logger.info(clc.bold(\"View data at:\"), utils.getDatabaseViewDataUrl(origin, options.project, options.instance, path));\n});\n"]},"metadata":{},"sourceType":"script"}