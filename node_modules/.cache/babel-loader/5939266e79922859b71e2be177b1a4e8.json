{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTDBRemoveRemote = void 0;\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst url_1 = require(\"url\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nclass RTDBRemoveRemote {\n  constructor(instance, host) {\n    this.instance = instance;\n    this.host = host;\n    const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, \"/\"));\n    this.apiClient = new apiv2_1.Client({\n      urlPrefix: url.origin,\n      auth: true\n    });\n  }\n\n  deletePath(path) {\n    return this.patch(path, null, \"all data\");\n  }\n\n  deleteSubPath(path, subPaths) {\n    const body = {};\n\n    for (const c of subPaths) {\n      body[c] = null;\n    }\n\n    return this.patch(path, body, `${subPaths.length} subpaths`);\n  }\n\n  async patch(path, body, note) {\n    const t0 = Date.now();\n    const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, path + \".json\"));\n    const queryParams = {\n      print: \"silent\",\n      writeSizeLimit: \"tiny\"\n    };\n    const res = await this.apiClient.request({\n      method: \"PATCH\",\n      path: url.pathname,\n      body,\n      queryParams,\n      responseType: \"stream\",\n      resolveOnHTTPError: true\n    });\n    const dt = Date.now() - t0;\n\n    if (res.status >= 400) {\n      logger_1.logger.debug(`[database] Failed to remove ${note} at ${path} time: ${dt}ms, will try recursively chunked deletes.`);\n      return false;\n    }\n\n    logger_1.logger.debug(`[database] Sucessfully removed ${note} at ${path} time: ${dt}ms`);\n    return true;\n  }\n\n}\n\nexports.RTDBRemoveRemote = RTDBRemoveRemote;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/database/removeRemote.js"],"names":["Object","defineProperty","exports","value","RTDBRemoveRemote","apiv2_1","require","url_1","logger_1","utils","constructor","instance","host","url","URL","getDatabaseUrl","apiClient","Client","urlPrefix","origin","auth","deletePath","path","patch","deleteSubPath","subPaths","body","c","length","note","t0","Date","now","queryParams","print","writeSizeLimit","res","request","method","pathname","responseType","resolveOnHTTPError","dt","status","logger","debug"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,KAAD,CAArB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMF,gBAAN,CAAuB;AACnBM,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACxB,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,UAAMC,GAAG,GAAG,IAAIN,KAAK,CAACO,GAAV,CAAcL,KAAK,CAACM,cAAN,CAAqB,KAAKH,IAA1B,EAAgC,KAAKD,QAArC,EAA+C,GAA/C,CAAd,CAAZ;AACA,SAAKK,SAAL,GAAiB,IAAIX,OAAO,CAACY,MAAZ,CAAmB;AAAEC,MAAAA,SAAS,EAAEL,GAAG,CAACM,MAAjB;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAAnB,CAAjB;AACH;;AACDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiB,IAAjB,EAAuB,UAAvB,CAAP;AACH;;AACDE,EAAAA,aAAa,CAACF,IAAD,EAAOG,QAAP,EAAiB;AAC1B,UAAMC,IAAI,GAAG,EAAb;;AACA,SAAK,MAAMC,CAAX,IAAgBF,QAAhB,EAA0B;AACtBC,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAU,IAAV;AACH;;AACD,WAAO,KAAKJ,KAAL,CAAWD,IAAX,EAAiBI,IAAjB,EAAwB,GAAED,QAAQ,CAACG,MAAO,WAA1C,CAAP;AACH;;AACU,QAALL,KAAK,CAACD,IAAD,EAAOI,IAAP,EAAaG,IAAb,EAAmB;AAC1B,UAAMC,EAAE,GAAGC,IAAI,CAACC,GAAL,EAAX;AACA,UAAMnB,GAAG,GAAG,IAAIN,KAAK,CAACO,GAAV,CAAcL,KAAK,CAACM,cAAN,CAAqB,KAAKH,IAA1B,EAAgC,KAAKD,QAArC,EAA+CW,IAAI,GAAG,OAAtD,CAAd,CAAZ;AACA,UAAMW,WAAW,GAAG;AAAEC,MAAAA,KAAK,EAAE,QAAT;AAAmBC,MAAAA,cAAc,EAAE;AAAnC,KAApB;AACA,UAAMC,GAAG,GAAG,MAAM,KAAKpB,SAAL,CAAeqB,OAAf,CAAuB;AACrCC,MAAAA,MAAM,EAAE,OAD6B;AAErChB,MAAAA,IAAI,EAAET,GAAG,CAAC0B,QAF2B;AAGrCb,MAAAA,IAHqC;AAIrCO,MAAAA,WAJqC;AAKrCO,MAAAA,YAAY,EAAE,QALuB;AAMrCC,MAAAA,kBAAkB,EAAE;AANiB,KAAvB,CAAlB;AAQA,UAAMC,EAAE,GAAGX,IAAI,CAACC,GAAL,KAAaF,EAAxB;;AACA,QAAIM,GAAG,CAACO,MAAJ,IAAc,GAAlB,EAAuB;AACnBnC,MAAAA,QAAQ,CAACoC,MAAT,CAAgBC,KAAhB,CAAuB,+BAA8BhB,IAAK,OAAMP,IAAK,UAASoB,EAAG,2CAAjF;AACA,aAAO,KAAP;AACH;;AACDlC,IAAAA,QAAQ,CAACoC,MAAT,CAAgBC,KAAhB,CAAuB,kCAAiChB,IAAK,OAAMP,IAAK,UAASoB,EAAG,IAApF;AACA,WAAO,IAAP;AACH;;AApCkB;;AAsCvBxC,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RTDBRemoveRemote = void 0;\nconst apiv2_1 = require(\"../apiv2\");\nconst url_1 = require(\"url\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nclass RTDBRemoveRemote {\n    constructor(instance, host) {\n        this.instance = instance;\n        this.host = host;\n        const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, \"/\"));\n        this.apiClient = new apiv2_1.Client({ urlPrefix: url.origin, auth: true });\n    }\n    deletePath(path) {\n        return this.patch(path, null, \"all data\");\n    }\n    deleteSubPath(path, subPaths) {\n        const body = {};\n        for (const c of subPaths) {\n            body[c] = null;\n        }\n        return this.patch(path, body, `${subPaths.length} subpaths`);\n    }\n    async patch(path, body, note) {\n        const t0 = Date.now();\n        const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, path + \".json\"));\n        const queryParams = { print: \"silent\", writeSizeLimit: \"tiny\" };\n        const res = await this.apiClient.request({\n            method: \"PATCH\",\n            path: url.pathname,\n            body,\n            queryParams,\n            responseType: \"stream\",\n            resolveOnHTTPError: true,\n        });\n        const dt = Date.now() - t0;\n        if (res.status >= 400) {\n            logger_1.logger.debug(`[database] Failed to remove ${note} at ${path} time: ${dt}ms, will try recursively chunked deletes.`);\n            return false;\n        }\n        logger_1.logger.debug(`[database] Sucessfully removed ${note} at ${path} time: ${dt}ms`);\n        return true;\n    }\n}\nexports.RTDBRemoveRemote = RTDBRemoveRemote;\n"]},"metadata":{},"sourceType":"script"}