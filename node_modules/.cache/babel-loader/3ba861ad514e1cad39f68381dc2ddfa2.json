{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RC = exports.loadRC = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst cjson = require(\"cjson\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst detectProjectRoot_1 = require(\"./detectProjectRoot\");\n\nconst error_1 = require(\"./error\");\n\nconst fsutils = require(\"./fsutils\");\n\nconst utils = require(\"./utils\");\n\nconst TARGET_TYPES = {\n  storage: {\n    resource: \"bucket\",\n    exclusive: true\n  },\n  database: {\n    resource: \"instance\",\n    exclusive: true\n  },\n  hosting: {\n    resource: \"site\",\n    exclusive: true\n  }\n};\n\nfunction loadRC(options) {\n  const cwd = options.cwd || process.cwd();\n  const dir = detectProjectRoot_1.detectProjectRoot(options);\n  const potential = path.resolve(dir || cwd, \"./.firebaserc\");\n  return RC.loadFile(potential);\n}\n\nexports.loadRC = loadRC;\n\nclass RC {\n  constructor(rcpath, data) {\n    this.path = rcpath;\n    this.data = Object.assign({\n      projects: {},\n      targets: {}\n    }, data);\n  }\n\n  static loadFile(rcpath) {\n    let data = {};\n\n    if (fsutils.fileExistsSync(rcpath)) {\n      try {\n        data = cjson.load(rcpath);\n      } catch (e) {\n        utils.logWarning(\"JSON error trying to load \" + clc.bold(rcpath));\n      }\n    }\n\n    return new RC(rcpath, data);\n  }\n\n  set(key, value) {\n    _.set(this.data, key, value);\n\n    return;\n  }\n\n  unset(key) {\n    return _.unset(this.data, key);\n  }\n\n  resolveAlias(alias) {\n    return this.data.projects[alias] || alias;\n  }\n\n  hasProjectAlias(alias) {\n    return !!this.data.projects[alias];\n  }\n\n  addProjectAlias(alias, project) {\n    this.set([\"projects\", alias], project);\n    return this.save();\n  }\n\n  removeProjectAlias(alias) {\n    this.unset([\"projects\", alias]);\n    return this.save();\n  }\n\n  get hasProjects() {\n    return Object.keys(this.data.projects).length > 0;\n  }\n\n  get projects() {\n    return this.data.projects;\n  }\n\n  allTargets(project) {\n    return this.data.targets[project] || {};\n  }\n\n  targets(project, type) {\n    var _a;\n\n    return ((_a = this.data.targets[project]) === null || _a === void 0 ? void 0 : _a[type]) || {};\n  }\n\n  target(project, type, name) {\n    var _a, _b;\n\n    return ((_b = (_a = this.data.targets[project]) === null || _a === void 0 ? void 0 : _a[type]) === null || _b === void 0 ? void 0 : _b[name]) || [];\n  }\n\n  applyTarget(project, type, targetName, resources) {\n    if (!TARGET_TYPES[type]) {\n      throw new error_1.FirebaseError(`Unrecognized target type ${clc.bold(type)}. Must be one of ${Object.keys(TARGET_TYPES).join(\", \")}`);\n    }\n\n    if (typeof resources === \"string\") {\n      resources = [resources];\n    }\n\n    const changed = [];\n\n    for (const resource of resources) {\n      const cur = this.findTarget(project, type, resource);\n\n      if (cur && cur !== targetName) {\n        this.unsetTargetResource(project, type, cur, resource);\n        changed.push({\n          resource: resource,\n          target: cur\n        });\n      }\n    }\n\n    const existing = this.target(project, type, targetName);\n\n    const list = _.uniq(existing.concat(resources)).sort();\n\n    this.set([\"targets\", project, type, targetName], list);\n    this.save();\n    return changed;\n  }\n\n  removeTarget(project, type, resource) {\n    const name = this.findTarget(project, type, resource);\n\n    if (!name) {\n      return null;\n    }\n\n    this.unsetTargetResource(project, type, name, resource);\n    this.save();\n    return name;\n  }\n\n  clearTarget(project, type, name) {\n    if (!this.target(project, type, name).length) {\n      return false;\n    }\n\n    this.unset([\"targets\", project, type, name]);\n    this.save();\n    return true;\n  }\n\n  findTarget(project, type, resource) {\n    const targets = this.targets(project, type);\n\n    for (const targetName in targets) {\n      if ((targets[targetName] || []).includes(resource)) {\n        return targetName;\n      }\n    }\n\n    return null;\n  }\n\n  unsetTargetResource(project, type, name, resource) {\n    const updatedResources = this.target(project, type, name).filter(r => r !== resource);\n\n    if (updatedResources.length) {\n      this.set([\"targets\", project, type, name], updatedResources);\n    } else {\n      this.unset([\"targets\", project, type, name]);\n    }\n  }\n\n  requireTarget(project, type, name) {\n    const target = this.target(project, type, name);\n\n    if (!target.length) {\n      throw new error_1.FirebaseError(\"Deploy target \" + clc.bold(name) + \" not configured for project \" + clc.bold(project) + \". Configure with:\\n\\n  firebase target:apply \" + type + \" \" + name + \" <resources...>\");\n    }\n\n    return target;\n  }\n\n  save() {\n    if (this.path) {\n      fs.writeFileSync(this.path, JSON.stringify(this.data, null, 2), {\n        encoding: \"utf8\"\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.RC = RC;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/rc.js"],"names":["Object","defineProperty","exports","value","RC","loadRC","_","require","clc","cjson","fs","path","detectProjectRoot_1","error_1","fsutils","utils","TARGET_TYPES","storage","resource","exclusive","database","hosting","options","cwd","process","dir","detectProjectRoot","potential","resolve","loadFile","constructor","rcpath","data","assign","projects","targets","fileExistsSync","load","e","logWarning","bold","set","key","unset","resolveAlias","alias","hasProjectAlias","addProjectAlias","project","save","removeProjectAlias","hasProjects","keys","length","allTargets","type","_a","target","name","_b","applyTarget","targetName","resources","FirebaseError","join","changed","cur","findTarget","unsetTargetResource","push","existing","list","uniq","concat","sort","removeTarget","clearTarget","includes","updatedResources","filter","r","requireTarget","writeFileSync","JSON","stringify","encoding"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RC = exports.loadRC = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst cjson = require(\"cjson\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst detectProjectRoot_1 = require(\"./detectProjectRoot\");\nconst error_1 = require(\"./error\");\nconst fsutils = require(\"./fsutils\");\nconst utils = require(\"./utils\");\nconst TARGET_TYPES = {\n    storage: { resource: \"bucket\", exclusive: true },\n    database: { resource: \"instance\", exclusive: true },\n    hosting: { resource: \"site\", exclusive: true },\n};\nfunction loadRC(options) {\n    const cwd = options.cwd || process.cwd();\n    const dir = detectProjectRoot_1.detectProjectRoot(options);\n    const potential = path.resolve(dir || cwd, \"./.firebaserc\");\n    return RC.loadFile(potential);\n}\nexports.loadRC = loadRC;\nclass RC {\n    constructor(rcpath, data) {\n        this.path = rcpath;\n        this.data = Object.assign({ projects: {}, targets: {} }, data);\n    }\n    static loadFile(rcpath) {\n        let data = {};\n        if (fsutils.fileExistsSync(rcpath)) {\n            try {\n                data = cjson.load(rcpath);\n            }\n            catch (e) {\n                utils.logWarning(\"JSON error trying to load \" + clc.bold(rcpath));\n            }\n        }\n        return new RC(rcpath, data);\n    }\n    set(key, value) {\n        _.set(this.data, key, value);\n        return;\n    }\n    unset(key) {\n        return _.unset(this.data, key);\n    }\n    resolveAlias(alias) {\n        return this.data.projects[alias] || alias;\n    }\n    hasProjectAlias(alias) {\n        return !!this.data.projects[alias];\n    }\n    addProjectAlias(alias, project) {\n        this.set([\"projects\", alias], project);\n        return this.save();\n    }\n    removeProjectAlias(alias) {\n        this.unset([\"projects\", alias]);\n        return this.save();\n    }\n    get hasProjects() {\n        return Object.keys(this.data.projects).length > 0;\n    }\n    get projects() {\n        return this.data.projects;\n    }\n    allTargets(project) {\n        return this.data.targets[project] || {};\n    }\n    targets(project, type) {\n        var _a;\n        return ((_a = this.data.targets[project]) === null || _a === void 0 ? void 0 : _a[type]) || {};\n    }\n    target(project, type, name) {\n        var _a, _b;\n        return ((_b = (_a = this.data.targets[project]) === null || _a === void 0 ? void 0 : _a[type]) === null || _b === void 0 ? void 0 : _b[name]) || [];\n    }\n    applyTarget(project, type, targetName, resources) {\n        if (!TARGET_TYPES[type]) {\n            throw new error_1.FirebaseError(`Unrecognized target type ${clc.bold(type)}. Must be one of ${Object.keys(TARGET_TYPES).join(\", \")}`);\n        }\n        if (typeof resources === \"string\") {\n            resources = [resources];\n        }\n        const changed = [];\n        for (const resource of resources) {\n            const cur = this.findTarget(project, type, resource);\n            if (cur && cur !== targetName) {\n                this.unsetTargetResource(project, type, cur, resource);\n                changed.push({ resource: resource, target: cur });\n            }\n        }\n        const existing = this.target(project, type, targetName);\n        const list = _.uniq(existing.concat(resources)).sort();\n        this.set([\"targets\", project, type, targetName], list);\n        this.save();\n        return changed;\n    }\n    removeTarget(project, type, resource) {\n        const name = this.findTarget(project, type, resource);\n        if (!name) {\n            return null;\n        }\n        this.unsetTargetResource(project, type, name, resource);\n        this.save();\n        return name;\n    }\n    clearTarget(project, type, name) {\n        if (!this.target(project, type, name).length) {\n            return false;\n        }\n        this.unset([\"targets\", project, type, name]);\n        this.save();\n        return true;\n    }\n    findTarget(project, type, resource) {\n        const targets = this.targets(project, type);\n        for (const targetName in targets) {\n            if ((targets[targetName] || []).includes(resource)) {\n                return targetName;\n            }\n        }\n        return null;\n    }\n    unsetTargetResource(project, type, name, resource) {\n        const updatedResources = this.target(project, type, name).filter((r) => r !== resource);\n        if (updatedResources.length) {\n            this.set([\"targets\", project, type, name], updatedResources);\n        }\n        else {\n            this.unset([\"targets\", project, type, name]);\n        }\n    }\n    requireTarget(project, type, name) {\n        const target = this.target(project, type, name);\n        if (!target.length) {\n            throw new error_1.FirebaseError(\"Deploy target \" +\n                clc.bold(name) +\n                \" not configured for project \" +\n                clc.bold(project) +\n                \". Configure with:\\n\\n  firebase target:apply \" +\n                type +\n                \" \" +\n                name +\n                \" <resources...>\");\n        }\n        return target;\n    }\n    save() {\n        if (this.path) {\n            fs.writeFileSync(this.path, JSON.stringify(this.data, null, 2), {\n                encoding: \"utf8\",\n            });\n            return true;\n        }\n        return false;\n    }\n}\nexports.RC = RC;\n"]},"metadata":{},"sourceType":"script"}