{"ast":null,"code":"/**\n * ZipStream\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE}\n * @copyright (c) 2014 Chris Talkington, contributors.\n */\nvar inherits = require('util').inherits;\n\nvar ZipArchiveOutputStream = require('compress-commons').ZipArchiveOutputStream;\n\nvar ZipArchiveEntry = require('compress-commons').ZipArchiveEntry;\n\nvar util = require('archiver-utils');\n/**\n * @constructor\n * @extends external:ZipArchiveOutputStream\n * @param {Object} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n */\n\n\nvar ZipStream = module.exports = function (options) {\n  if (!(this instanceof ZipStream)) {\n    return new ZipStream(options);\n  }\n\n  options = this.options = options || {};\n  options.zlib = options.zlib || {};\n  ZipArchiveOutputStream.call(this, options);\n\n  if (typeof options.level === 'number' && options.level >= 0) {\n    options.zlib.level = options.level;\n    delete options.level;\n  }\n\n  if (!options.forceZip64 && typeof options.zlib.level === 'number' && options.zlib.level === 0) {\n    options.store = true;\n  }\n\n  options.namePrependSlash = options.namePrependSlash || false;\n\n  if (options.comment && options.comment.length > 0) {\n    this.setComment(options.comment);\n  }\n};\n\ninherits(ZipStream, ZipArchiveOutputStream);\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @return {Object}\n */\n\nZipStream.prototype._normalizeFileData = function (data) {\n  data = util.defaults(data, {\n    type: 'file',\n    name: null,\n    namePrependSlash: this.options.namePrependSlash,\n    linkname: null,\n    date: null,\n    mode: null,\n    store: this.options.store,\n    comment: ''\n  });\n  var isDir = data.type === 'directory';\n  var isSymlink = data.type === 'symlink';\n\n  if (data.name) {\n    data.name = util.sanitizePath(data.name);\n\n    if (!isSymlink && data.name.slice(-1) === '/') {\n      isDir = true;\n      data.type = 'directory';\n    } else if (isDir) {\n      data.name += '/';\n    }\n  }\n\n  if (isDir || isSymlink) {\n    data.store = true;\n  }\n\n  data.date = util.dateify(data.date);\n  return data;\n};\n/**\n * Appends an entry given an input source (text string, buffer, or stream).\n *\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {Object} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {String} [data.comment] Sets the entry comment.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {Boolean} [data.store=options.store] Sets the compression method to STORE.\n * @param  {String} [data.type=file] Sets the entry type. Defaults to `directory`\n * if name ends with trailing slash.\n * @param  {Function} callback\n * @return this\n */\n\n\nZipStream.prototype.entry = function (source, data, callback) {\n  if (typeof callback !== 'function') {\n    callback = this._emitErrorCallback.bind(this);\n  }\n\n  data = this._normalizeFileData(data);\n\n  if (data.type !== 'file' && data.type !== 'directory' && data.type !== 'symlink') {\n    callback(new Error(data.type + ' entries not currently supported'));\n    return;\n  }\n\n  if (typeof data.name !== 'string' || data.name.length === 0) {\n    callback(new Error('entry name must be a non-empty string value'));\n    return;\n  }\n\n  if (data.type === 'symlink' && typeof data.linkname !== 'string') {\n    callback(new Error('entry linkname must be a non-empty string value when type equals symlink'));\n    return;\n  }\n\n  var entry = new ZipArchiveEntry(data.name);\n  entry.setTime(data.date, this.options.forceLocalTime);\n\n  if (data.namePrependSlash) {\n    entry.setName(data.name, true);\n  }\n\n  if (data.store) {\n    entry.setMethod(0);\n  }\n\n  if (data.comment.length > 0) {\n    entry.setComment(data.comment);\n  }\n\n  if (data.type === 'symlink' && typeof data.mode !== 'number') {\n    data.mode = 40960; // 0120000\n  }\n\n  if (typeof data.mode === 'number') {\n    if (data.type === 'symlink') {\n      data.mode |= 40960;\n    }\n\n    entry.setUnixMode(data.mode);\n  }\n\n  if (data.type === 'symlink' && typeof data.linkname === 'string') {\n    source = Buffer.from(data.linkname);\n  }\n\n  return ZipArchiveOutputStream.prototype.entry.call(this, entry, source, callback);\n};\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * @return void\n */\n\n\nZipStream.prototype.finalize = function () {\n  this.finish();\n};\n/**\n * Returns the current number of bytes written to this stream.\n * @function ZipStream#getBytesWritten\n * @returns {Number}\n */\n\n/**\n * Compress Commons ZipArchiveOutputStream\n * @external ZipArchiveOutputStream\n * @see {@link https://github.com/archiverjs/node-compress-commons}\n */","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/zip-stream/index.js"],"names":["inherits","require","ZipArchiveOutputStream","ZipArchiveEntry","util","ZipStream","module","exports","options","zlib","call","level","forceZip64","store","namePrependSlash","comment","length","setComment","prototype","_normalizeFileData","data","defaults","type","name","linkname","date","mode","isDir","isSymlink","sanitizePath","slice","dateify","entry","source","callback","_emitErrorCallback","bind","Error","setTime","forceLocalTime","setName","setMethod","setUnixMode","Buffer","from","finalize","finish"],"mappings":"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","sourcesContent":["/**\n * ZipStream\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE}\n * @copyright (c) 2014 Chris Talkington, contributors.\n */\nvar inherits = require('util').inherits;\n\nvar ZipArchiveOutputStream = require('compress-commons').ZipArchiveOutputStream;\nvar ZipArchiveEntry = require('compress-commons').ZipArchiveEntry;\n\nvar util = require('archiver-utils');\n\n/**\n * @constructor\n * @extends external:ZipArchiveOutputStream\n * @param {Object} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n */\nvar ZipStream = module.exports = function(options) {\n  if (!(this instanceof ZipStream)) {\n    return new ZipStream(options);\n  }\n\n  options = this.options = options || {};\n  options.zlib = options.zlib || {};\n\n  ZipArchiveOutputStream.call(this, options);\n\n  if (typeof options.level === 'number' && options.level >= 0) {\n    options.zlib.level = options.level;\n    delete options.level;\n  }\n\n  if (!options.forceZip64 && typeof options.zlib.level === 'number' && options.zlib.level === 0) {\n    options.store = true;\n  }\n\n  options.namePrependSlash = options.namePrependSlash || false;\n\n  if (options.comment && options.comment.length > 0) {\n    this.setComment(options.comment);\n  }\n};\n\ninherits(ZipStream, ZipArchiveOutputStream);\n\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @return {Object}\n */\nZipStream.prototype._normalizeFileData = function(data) {\n  data = util.defaults(data, {\n    type: 'file',\n    name: null,\n    namePrependSlash: this.options.namePrependSlash,\n    linkname: null,\n    date: null,\n    mode: null,\n    store: this.options.store,\n    comment: ''\n  });\n\n  var isDir = data.type === 'directory';\n  var isSymlink = data.type === 'symlink';\n\n  if (data.name) {\n    data.name = util.sanitizePath(data.name);\n\n    if (!isSymlink && data.name.slice(-1) === '/') {\n      isDir = true;\n      data.type = 'directory';\n    } else if (isDir) {\n      data.name += '/';\n    }\n  }\n\n  if (isDir || isSymlink) {\n    data.store = true;\n  }\n\n  data.date = util.dateify(data.date);\n\n  return data;\n};\n\n/**\n * Appends an entry given an input source (text string, buffer, or stream).\n *\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {Object} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {String} [data.comment] Sets the entry comment.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {Boolean} [data.store=options.store] Sets the compression method to STORE.\n * @param  {String} [data.type=file] Sets the entry type. Defaults to `directory`\n * if name ends with trailing slash.\n * @param  {Function} callback\n * @return this\n */\nZipStream.prototype.entry = function(source, data, callback) {\n  if (typeof callback !== 'function') {\n    callback = this._emitErrorCallback.bind(this);\n  }\n\n  data = this._normalizeFileData(data);\n\n  if (data.type !== 'file' && data.type !== 'directory' && data.type !== 'symlink') {\n    callback(new Error(data.type + ' entries not currently supported'));\n    return;\n  }\n\n  if (typeof data.name !== 'string' || data.name.length === 0) {\n    callback(new Error('entry name must be a non-empty string value'));\n    return;\n  }\n\n  if (data.type === 'symlink' && typeof data.linkname !== 'string') {\n    callback(new Error('entry linkname must be a non-empty string value when type equals symlink'));\n    return;\n  }\n\n  var entry = new ZipArchiveEntry(data.name);\n  entry.setTime(data.date, this.options.forceLocalTime);\n\n  if (data.namePrependSlash) {\n    entry.setName(data.name, true);\n  }\n\n  if (data.store) {\n    entry.setMethod(0);\n  }\n\n  if (data.comment.length > 0) {\n    entry.setComment(data.comment);\n  }\n\n  if (data.type === 'symlink' && typeof data.mode !== 'number') {\n    data.mode = 40960; // 0120000\n  }\n\n  if (typeof data.mode === 'number') {\n    if (data.type === 'symlink') {\n      data.mode |= 40960;\n    }\n\n    entry.setUnixMode(data.mode);\n  }\n\n  if (data.type === 'symlink' && typeof data.linkname === 'string') {\n    source = Buffer.from(data.linkname);\n  }\n\n  return ZipArchiveOutputStream.prototype.entry.call(this, entry, source, callback);\n};\n\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * @return void\n */\nZipStream.prototype.finalize = function() {\n  this.finish();\n};\n\n/**\n * Returns the current number of bytes written to this stream.\n * @function ZipStream#getBytesWritten\n * @returns {Number}\n */\n\n/**\n * Compress Commons ZipArchiveOutputStream\n * @external ZipArchiveOutputStream\n * @see {@link https://github.com/archiverjs/node-compress-commons}\n */\n"]},"metadata":{},"sourceType":"script"}