{"ast":null,"code":"'use strict';\n/**\n * `list` type prompt\n */\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n\nvar figures = require('figures');\n\nvar cliCursor = require('cli-cursor');\n\nvar runAsync = require('run-async');\n\nvar {\n  flatMap,\n  map,\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nvar Paginator = require('../utils/paginator');\n\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.firstRender = true;\n    this.selected = 0;\n    var def = this.opt.default; // If def is a Number, then use as index. Otherwise, check for value.\n\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (!_.isNumber(def) && def != null) {\n      let index = _.findIndex(this.opt.choices.realChoices, ({\n        value\n      }) => value === def);\n\n      this.selected = Math.max(index, 0);\n    } // Make sure no default is set (so it won't be printed)\n\n\n    this.opt.default = null;\n    this.paginator = new Paginator(this.screen);\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb;\n    var self = this;\n    var events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey.pipe(takeUntil(events.line)).forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line.pipe(take(1), map(this.getCurrentValue.bind(this)), flatMap(value => runAsync(self.opt.filter)(value).catch(err => err))).forEach(this.onSubmit.bind(this)); // Init the prompt\n\n    cliCursor.hide();\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n\n  render() {\n    // Render question\n    var message = this.getQuestion();\n\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    } // Render choices or answer depending on the state\n\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      var choicesStr = listRender(this.opt.choices, this.selected);\n      var indexPosition = this.opt.choices.indexOf(this.opt.choices.getChoice(this.selected));\n      message += '\\n' + this.paginator.paginate(choicesStr, indexPosition, this.opt.pageSize);\n    }\n\n    this.firstRender = false;\n    this.screen.render(message);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onSubmit(value) {\n    this.status = 'answered'; // Rerender prompt\n\n    this.render();\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onUpKey() {\n    var len = this.opt.choices.realLength;\n    this.selected = this.selected > 0 ? this.selected - 1 : len - 1;\n    this.render();\n  }\n\n  onDownKey() {\n    var len = this.opt.choices.realLength;\n    this.selected = this.selected < len - 1 ? this.selected + 1 : 0;\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n\n    this.render();\n  }\n\n}\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction listRender(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n      output += '\\n';\n      return;\n    }\n\n    var isSelected = i - separatorOffset === pointer;\n    var line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/prompts/list.js"],"names":["_","require","chalk","figures","cliCursor","runAsync","flatMap","map","take","takeUntil","Base","observe","Paginator","ListPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","firstRender","selected","def","default","isNumber","realLength","index","findIndex","realChoices","value","Math","max","paginator","screen","_run","cb","done","self","events","normalizedUpKey","pipe","line","forEach","onUpKey","bind","normalizedDownKey","onDownKey","numberKey","onNumberKey","getCurrentValue","filter","catch","err","onSubmit","hide","render","message","getQuestion","dim","status","cyan","getChoice","short","choicesStr","listRender","indexPosition","indexOf","paginate","pageSize","show","len","input","pointer","output","separatorOffset","choice","i","type","disabled","name","isString","isSelected","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `list` type prompt\n */\n\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar figures = require('figures');\nvar cliCursor = require('cli-cursor');\nvar runAsync = require('run-async');\nvar { flatMap, map, take, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\nvar Paginator = require('../utils/paginator');\n\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.firstRender = true;\n    this.selected = 0;\n\n    var def = this.opt.default;\n\n    // If def is a Number, then use as index. Otherwise, check for value.\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (!_.isNumber(def) && def != null) {\n      let index = _.findIndex(this.opt.choices.realChoices, ({ value }) => value === def);\n      this.selected = Math.max(index, 0);\n    }\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    this.paginator = new Paginator(this.screen);\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    var self = this;\n\n    var events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(events.line))\n      .forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line\n      .pipe(\n        take(1),\n        map(this.getCurrentValue.bind(this)),\n        flatMap(value => runAsync(self.opt.filter)(value).catch(err => err))\n      )\n      .forEach(this.onSubmit.bind(this));\n\n    // Init the prompt\n    cliCursor.hide();\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n  render() {\n    // Render question\n    var message = this.getQuestion();\n\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    }\n\n    // Render choices or answer depending on the state\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      var choicesStr = listRender(this.opt.choices, this.selected);\n      var indexPosition = this.opt.choices.indexOf(\n        this.opt.choices.getChoice(this.selected)\n      );\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, indexPosition, this.opt.pageSize);\n    }\n\n    this.firstRender = false;\n\n    this.screen.render(message);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(value) {\n    this.status = 'answered';\n\n    // Rerender prompt\n    this.render();\n\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n\n  /**\n   * When user press a key\n   */\n  onUpKey() {\n    var len = this.opt.choices.realLength;\n    this.selected = this.selected > 0 ? this.selected - 1 : len - 1;\n    this.render();\n  }\n\n  onDownKey() {\n    var len = this.opt.choices.realLength;\n    this.selected = this.selected < len - 1 ? this.selected + 1 : 0;\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n\n    this.render();\n  }\n}\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\nfunction listRender(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n      output += '\\n';\n      return;\n    }\n\n    var isSelected = i - separatorOffset === pointer;\n    var line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;\n"]},"metadata":{},"sourceType":"script"}