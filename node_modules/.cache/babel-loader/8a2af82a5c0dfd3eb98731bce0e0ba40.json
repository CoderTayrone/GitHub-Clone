{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initIndexes = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst error_1 = require(\"../../../error\");\n\nconst iv2 = require(\"../../../firestore/indexes\");\n\nconst fsutils = require(\"../../../fsutils\");\n\nconst prompt_1 = require(\"../../../prompt\");\n\nconst logger_1 = require(\"../../../logger\");\n\nconst indexes = new iv2.FirestoreIndexes();\nconst INDEXES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.indexes.json\", \"utf8\");\n\nfunction initIndexes(setup, config) {\n  logger_1.logger.info();\n  logger_1.logger.info(\"Firestore indexes allow you to perform complex queries while\");\n  logger_1.logger.info(\"maintaining performance that scales with the size of the result\");\n  logger_1.logger.info(\"set. You can keep index definitions in your project directory\");\n  logger_1.logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n  logger_1.logger.info();\n  return prompt_1.prompt(setup.config.firestore, [{\n    type: \"input\",\n    name: \"indexes\",\n    message: \"What file should be used for Firestore indexes?\",\n    default: \"firestore.indexes.json\"\n  }]).then(() => {\n    const filename = setup.config.firestore.indexes;\n\n    if (fsutils.fileExistsSync(filename)) {\n      const msg = \"File \" + clc.bold(filename) + \" already exists.\" + \" Do you want to overwrite it with the Firestore Indexes from the Firebase Console?\";\n      return prompt_1.promptOnce({\n        type: \"confirm\",\n        message: msg,\n        default: false\n      });\n    }\n\n    return Promise.resolve(true);\n  }).then(overwrite => {\n    if (!overwrite) {\n      return Promise.resolve();\n    }\n\n    if (!setup.projectId) {\n      return config.writeProjectFile(setup.config.firestore.indexes, INDEXES_TEMPLATE);\n    }\n\n    return getIndexesFromConsole(setup.projectId).then(contents => {\n      return config.writeProjectFile(setup.config.firestore.indexes, contents);\n    });\n  });\n}\n\nexports.initIndexes = initIndexes;\n\nfunction getIndexesFromConsole(projectId) {\n  const indexesPromise = indexes.listIndexes(projectId);\n  const fieldOverridesPromise = indexes.listFieldOverrides(projectId);\n  return Promise.all([indexesPromise, fieldOverridesPromise]).then(res => {\n    return indexes.makeIndexSpec(res[0], res[1]);\n  }).catch(e => {\n    if (e.message.indexOf(\"is not a Cloud Firestore enabled project\") >= 0) {\n      return INDEXES_TEMPLATE;\n    }\n\n    throw new error_1.FirebaseError(\"Error fetching Firestore indexes\", {\n      original: e\n    });\n  });\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/firestore/indexes.js"],"names":["Object","defineProperty","exports","value","initIndexes","clc","require","fs","error_1","iv2","fsutils","prompt_1","logger_1","indexes","FirestoreIndexes","INDEXES_TEMPLATE","readFileSync","__dirname","setup","config","logger","info","bold","prompt","firestore","type","name","message","default","then","filename","fileExistsSync","msg","promptOnce","Promise","resolve","overwrite","projectId","writeProjectFile","getIndexesFromConsole","contents","indexesPromise","listIndexes","fieldOverridesPromise","listFieldOverrides","all","res","makeIndexSpec","catch","e","indexOf","FirebaseError","original"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initIndexes = void 0;\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst error_1 = require(\"../../../error\");\nconst iv2 = require(\"../../../firestore/indexes\");\nconst fsutils = require(\"../../../fsutils\");\nconst prompt_1 = require(\"../../../prompt\");\nconst logger_1 = require(\"../../../logger\");\nconst indexes = new iv2.FirestoreIndexes();\nconst INDEXES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.indexes.json\", \"utf8\");\nfunction initIndexes(setup, config) {\n    logger_1.logger.info();\n    logger_1.logger.info(\"Firestore indexes allow you to perform complex queries while\");\n    logger_1.logger.info(\"maintaining performance that scales with the size of the result\");\n    logger_1.logger.info(\"set. You can keep index definitions in your project directory\");\n    logger_1.logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n    logger_1.logger.info();\n    return prompt_1.prompt(setup.config.firestore, [\n        {\n            type: \"input\",\n            name: \"indexes\",\n            message: \"What file should be used for Firestore indexes?\",\n            default: \"firestore.indexes.json\",\n        },\n    ])\n        .then(() => {\n        const filename = setup.config.firestore.indexes;\n        if (fsutils.fileExistsSync(filename)) {\n            const msg = \"File \" +\n                clc.bold(filename) +\n                \" already exists.\" +\n                \" Do you want to overwrite it with the Firestore Indexes from the Firebase Console?\";\n            return prompt_1.promptOnce({\n                type: \"confirm\",\n                message: msg,\n                default: false,\n            });\n        }\n        return Promise.resolve(true);\n    })\n        .then((overwrite) => {\n        if (!overwrite) {\n            return Promise.resolve();\n        }\n        if (!setup.projectId) {\n            return config.writeProjectFile(setup.config.firestore.indexes, INDEXES_TEMPLATE);\n        }\n        return getIndexesFromConsole(setup.projectId).then((contents) => {\n            return config.writeProjectFile(setup.config.firestore.indexes, contents);\n        });\n    });\n}\nexports.initIndexes = initIndexes;\nfunction getIndexesFromConsole(projectId) {\n    const indexesPromise = indexes.listIndexes(projectId);\n    const fieldOverridesPromise = indexes.listFieldOverrides(projectId);\n    return Promise.all([indexesPromise, fieldOverridesPromise])\n        .then((res) => {\n        return indexes.makeIndexSpec(res[0], res[1]);\n    })\n        .catch((e) => {\n        if (e.message.indexOf(\"is not a Cloud Firestore enabled project\") >= 0) {\n            return INDEXES_TEMPLATE;\n        }\n        throw new error_1.FirebaseError(\"Error fetching Firestore indexes\", {\n            original: e,\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}