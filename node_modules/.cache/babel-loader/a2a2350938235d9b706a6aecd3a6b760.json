{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkForInvalidChangeOfTrigger = exports.functionIdsAreValid = exports.functionsDirectoryExists = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst error_1 = require(\"../../error\");\n\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\n\nconst backend = require(\"./backend\");\n\nconst fsutils = require(\"../../fsutils\");\n\nconst projectPath = require(\"../../projectPath\");\n\nfunction functionsDirectoryExists(options, sourceDirName) {\n  if (!fsutils.dirExistsSync(projectPath.resolveProjectPath(options, sourceDirName))) {\n    const msg = `could not deploy functions because the ${clc.bold('\"' + sourceDirName + '\"')} ` + `directory was not found. Please create it or specify a different source directory in firebase.json`;\n    throw new error_1.FirebaseError(msg);\n  }\n}\n\nexports.functionsDirectoryExists = functionsDirectoryExists;\n\nfunction functionIdsAreValid(functions) {\n  const v1FunctionName = /^[a-zA-Z][a-zA-Z0-9_-]{0,62}$/;\n  const invalidV1Ids = functions.filter(fn => {\n    return fn.platform === \"gcfv1\" && !v1FunctionName.test(fn.id);\n  });\n\n  if (invalidV1Ids.length !== 0) {\n    const msg = `${invalidV1Ids.map(f => f.id).join(\", \")} function name(s) can only contain letters, ` + `numbers, hyphens, and not exceed 62 characters in length`;\n    throw new error_1.FirebaseError(msg);\n  }\n\n  const v2FunctionName = /^[a-z][a-z0-9-]{0,62}$/;\n  const invalidV2Ids = functions.filter(fn => {\n    return fn.platform === \"gcfv2\" && !v2FunctionName.test(fn.id);\n  });\n\n  if (invalidV2Ids.length !== 0) {\n    const msg = `${invalidV2Ids.map(f => f.id).join(\", \")} v2 function name(s) can only contin lower ` + `case letters, numbers, hyphens, and not exceed 62 characters in length`;\n    throw new error_1.FirebaseError(msg);\n  }\n}\n\nexports.functionIdsAreValid = functionIdsAreValid;\n\nfunction checkForInvalidChangeOfTrigger(fn, exFn) {\n  var _a, _b;\n\n  const wantEventTrigger = backend.isEventTrigger(fn.trigger);\n  const haveEventTrigger = backend.isEventTrigger(exFn.trigger);\n\n  if (!wantEventTrigger && haveEventTrigger) {\n    throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Changing from a background triggered function to an HTTPS function is not allowed. Please delete your function and create a new one instead.`);\n  }\n\n  if (wantEventTrigger && !haveEventTrigger) {\n    throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Changing from an HTTPS function to an background triggered function is not allowed. Please delete your function and create a new one instead.`);\n  }\n\n  if (fn.platform == \"gcfv2\" && exFn.platform == \"gcfv1\") {\n    throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Upgrading from GCFv1 to GCFv2 is not yet supported. Please delete your old function or wait for this feature to be ready.`);\n  }\n\n  if (fn.platform == \"gcfv1\" && exFn.platform == \"gcfv2\") {\n    throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Functions cannot be downgraded from GCFv2 to GCFv1`);\n  }\n\n  if (((_a = exFn.labels) === null || _a === void 0 ? void 0 : _a[\"deployment-scheduled\"]) && !((_b = fn.labels) === null || _b === void 0 ? void 0 : _b[\"deployment-scheduled\"])) {\n    throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Scheduled functions cannot be changed to event handler or HTTP functions`);\n  }\n}\n\nexports.checkForInvalidChangeOfTrigger = checkForInvalidChangeOfTrigger;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/validate.js"],"names":["Object","defineProperty","exports","value","checkForInvalidChangeOfTrigger","functionIdsAreValid","functionsDirectoryExists","clc","require","error_1","functionsDeployHelper_1","backend","fsutils","projectPath","options","sourceDirName","dirExistsSync","resolveProjectPath","msg","bold","FirebaseError","functions","v1FunctionName","invalidV1Ids","filter","fn","platform","test","id","length","map","f","join","v2FunctionName","invalidV2Ids","exFn","_a","_b","wantEventTrigger","isEventTrigger","trigger","haveEventTrigger","getFunctionLabel","labels"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkForInvalidChangeOfTrigger = exports.functionIdsAreValid = exports.functionsDirectoryExists = void 0;\nconst clc = require(\"cli-color\");\nconst error_1 = require(\"../../error\");\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\nconst backend = require(\"./backend\");\nconst fsutils = require(\"../../fsutils\");\nconst projectPath = require(\"../../projectPath\");\nfunction functionsDirectoryExists(options, sourceDirName) {\n    if (!fsutils.dirExistsSync(projectPath.resolveProjectPath(options, sourceDirName))) {\n        const msg = `could not deploy functions because the ${clc.bold('\"' + sourceDirName + '\"')} ` +\n            `directory was not found. Please create it or specify a different source directory in firebase.json`;\n        throw new error_1.FirebaseError(msg);\n    }\n}\nexports.functionsDirectoryExists = functionsDirectoryExists;\nfunction functionIdsAreValid(functions) {\n    const v1FunctionName = /^[a-zA-Z][a-zA-Z0-9_-]{0,62}$/;\n    const invalidV1Ids = functions.filter((fn) => {\n        return fn.platform === \"gcfv1\" && !v1FunctionName.test(fn.id);\n    });\n    if (invalidV1Ids.length !== 0) {\n        const msg = `${invalidV1Ids.map((f) => f.id).join(\", \")} function name(s) can only contain letters, ` +\n            `numbers, hyphens, and not exceed 62 characters in length`;\n        throw new error_1.FirebaseError(msg);\n    }\n    const v2FunctionName = /^[a-z][a-z0-9-]{0,62}$/;\n    const invalidV2Ids = functions.filter((fn) => {\n        return fn.platform === \"gcfv2\" && !v2FunctionName.test(fn.id);\n    });\n    if (invalidV2Ids.length !== 0) {\n        const msg = `${invalidV2Ids.map((f) => f.id).join(\", \")} v2 function name(s) can only contin lower ` +\n            `case letters, numbers, hyphens, and not exceed 62 characters in length`;\n        throw new error_1.FirebaseError(msg);\n    }\n}\nexports.functionIdsAreValid = functionIdsAreValid;\nfunction checkForInvalidChangeOfTrigger(fn, exFn) {\n    var _a, _b;\n    const wantEventTrigger = backend.isEventTrigger(fn.trigger);\n    const haveEventTrigger = backend.isEventTrigger(exFn.trigger);\n    if (!wantEventTrigger && haveEventTrigger) {\n        throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Changing from a background triggered function to an HTTPS function is not allowed. Please delete your function and create a new one instead.`);\n    }\n    if (wantEventTrigger && !haveEventTrigger) {\n        throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Changing from an HTTPS function to an background triggered function is not allowed. Please delete your function and create a new one instead.`);\n    }\n    if (fn.platform == \"gcfv2\" && exFn.platform == \"gcfv1\") {\n        throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Upgrading from GCFv1 to GCFv2 is not yet supported. Please delete your old function or wait for this feature to be ready.`);\n    }\n    if (fn.platform == \"gcfv1\" && exFn.platform == \"gcfv2\") {\n        throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Functions cannot be downgraded from GCFv2 to GCFv1`);\n    }\n    if (((_a = exFn.labels) === null || _a === void 0 ? void 0 : _a[\"deployment-scheduled\"]) && !((_b = fn.labels) === null || _b === void 0 ? void 0 : _b[\"deployment-scheduled\"])) {\n        throw new error_1.FirebaseError(`[${functionsDeployHelper_1.getFunctionLabel(fn)}] Scheduled functions cannot be changed to event handler or HTTP functions`);\n    }\n}\nexports.checkForInvalidChangeOfTrigger = checkForInvalidChangeOfTrigger;\n"]},"metadata":{},"sourceType":"script"}