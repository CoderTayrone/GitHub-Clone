{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthCloudFunction = void 0;\n\nconst uuid = require(\"uuid\");\n\nconst apiv2_1 = require(\"../../apiv2\");\n\nconst types_1 = require(\"../types\");\n\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\n\nconst registry_1 = require(\"../registry\");\n\nclass AuthCloudFunction {\n  constructor(projectId) {\n    this.projectId = projectId;\n    this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.AUTH);\n    this.multicastOrigin = \"\";\n    this.multicastPath = \"\";\n    this.enabled = false;\n    const functionsEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n\n    if (functionsEmulator) {\n      this.enabled = true;\n      this.functionsEmulatorInfo = functionsEmulator.getInfo();\n      this.multicastOrigin = `http://${registry_1.EmulatorRegistry.getInfoHostString(this.functionsEmulatorInfo)}`;\n      this.multicastPath = `/functions/projects/${projectId}/trigger_multicast`;\n    }\n  }\n\n  async dispatch(action, user) {\n    if (!this.enabled) return;\n    const userInfoPayload = this.createUserInfoPayload(user);\n    const multicastEventBody = this.createEventRequestBody(action, userInfoPayload);\n    const c = new apiv2_1.Client({\n      urlPrefix: this.multicastOrigin,\n      auth: false\n    });\n    let res;\n    let err;\n\n    try {\n      res = await c.post(this.multicastPath, multicastEventBody);\n    } catch (e) {\n      err = e;\n    }\n\n    if (err || (res === null || res === void 0 ? void 0 : res.status) != 200) {\n      this.logger.logLabeled(\"WARN\", \"functions\", `Firebase Authentication function was not triggered due to emulation error. Please file a bug.`);\n    }\n  }\n\n  createEventRequestBody(action, userInfoPayload) {\n    return {\n      eventId: uuid.v4(),\n      eventType: `providers/firebase.auth/eventTypes/user.${action}`,\n      resource: {\n        name: `projects/${this.projectId}`,\n        service: \"firebaseauth.googleapis.com\"\n      },\n      params: {},\n      timestamp: new Date().toISOString(),\n      data: userInfoPayload\n    };\n  }\n\n  createUserInfoPayload(user) {\n    return {\n      uid: user.localId,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      displayName: user.displayName,\n      photoURL: user.photoUrl,\n      phoneNumber: user.phoneNumber,\n      disabled: user.disabled,\n      metadata: {\n        creationTime: user.createdAt,\n        lastSignInTime: user.lastLoginAt\n      },\n      customClaims: JSON.parse(user.customAttributes || \"{}\"),\n      providerData: user.providerUserInfo,\n      tenantId: user.tenantId,\n      mfaInfo: user.mfaInfo\n    };\n  }\n\n}\n\nexports.AuthCloudFunction = AuthCloudFunction;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/auth/cloudFunctions.js"],"names":["Object","defineProperty","exports","value","AuthCloudFunction","uuid","require","apiv2_1","types_1","emulatorLogger_1","registry_1","constructor","projectId","logger","EmulatorLogger","forEmulator","Emulators","AUTH","multicastOrigin","multicastPath","enabled","functionsEmulator","EmulatorRegistry","get","FUNCTIONS","functionsEmulatorInfo","getInfo","getInfoHostString","dispatch","action","user","userInfoPayload","createUserInfoPayload","multicastEventBody","createEventRequestBody","c","Client","urlPrefix","auth","res","err","post","e","status","logLabeled","eventId","v4","eventType","resource","name","service","params","timestamp","Date","toISOString","data","uid","localId","email","emailVerified","displayName","photoURL","photoUrl","phoneNumber","disabled","metadata","creationTime","createdAt","lastSignInTime","lastLoginAt","customClaims","JSON","parse","customAttributes","providerData","providerUserInfo","tenantId","mfaInfo"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthCloudFunction = void 0;\nconst uuid = require(\"uuid\");\nconst apiv2_1 = require(\"../../apiv2\");\nconst types_1 = require(\"../types\");\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\nconst registry_1 = require(\"../registry\");\nclass AuthCloudFunction {\n    constructor(projectId) {\n        this.projectId = projectId;\n        this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.AUTH);\n        this.multicastOrigin = \"\";\n        this.multicastPath = \"\";\n        this.enabled = false;\n        const functionsEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n        if (functionsEmulator) {\n            this.enabled = true;\n            this.functionsEmulatorInfo = functionsEmulator.getInfo();\n            this.multicastOrigin = `http://${registry_1.EmulatorRegistry.getInfoHostString(this.functionsEmulatorInfo)}`;\n            this.multicastPath = `/functions/projects/${projectId}/trigger_multicast`;\n        }\n    }\n    async dispatch(action, user) {\n        if (!this.enabled)\n            return;\n        const userInfoPayload = this.createUserInfoPayload(user);\n        const multicastEventBody = this.createEventRequestBody(action, userInfoPayload);\n        const c = new apiv2_1.Client({ urlPrefix: this.multicastOrigin, auth: false });\n        let res;\n        let err;\n        try {\n            res = await c.post(this.multicastPath, multicastEventBody);\n        }\n        catch (e) {\n            err = e;\n        }\n        if (err || (res === null || res === void 0 ? void 0 : res.status) != 200) {\n            this.logger.logLabeled(\"WARN\", \"functions\", `Firebase Authentication function was not triggered due to emulation error. Please file a bug.`);\n        }\n    }\n    createEventRequestBody(action, userInfoPayload) {\n        return {\n            eventId: uuid.v4(),\n            eventType: `providers/firebase.auth/eventTypes/user.${action}`,\n            resource: {\n                name: `projects/${this.projectId}`,\n                service: \"firebaseauth.googleapis.com\",\n            },\n            params: {},\n            timestamp: new Date().toISOString(),\n            data: userInfoPayload,\n        };\n    }\n    createUserInfoPayload(user) {\n        return {\n            uid: user.localId,\n            email: user.email,\n            emailVerified: user.emailVerified,\n            displayName: user.displayName,\n            photoURL: user.photoUrl,\n            phoneNumber: user.phoneNumber,\n            disabled: user.disabled,\n            metadata: {\n                creationTime: user.createdAt,\n                lastSignInTime: user.lastLoginAt,\n            },\n            customClaims: JSON.parse(user.customAttributes || \"{}\"),\n            providerData: user.providerUserInfo,\n            tenantId: user.tenantId,\n            mfaInfo: user.mfaInfo,\n        };\n    }\n}\nexports.AuthCloudFunction = AuthCloudFunction;\n"]},"metadata":{},"sourceType":"script"}