{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseUnsetArgs = exports.parseSetArgs = exports.materializeAll = exports.materializeConfig = exports.setVariablesRecursive = exports.getFirebaseConfig = exports.getAppEngineLocation = exports.idsToVarName = exports.varNameToIds = exports.ensureApi = exports.RESERVED_NAMESPACES = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst api = require(\"./api\");\n\nconst ensureApiEnabled_1 = require(\"./ensureApiEnabled\");\n\nconst error_1 = require(\"./error\");\n\nconst projectUtils_1 = require(\"./projectUtils\");\n\nconst runtimeconfig = require(\"./gcp/runtimeconfig\");\n\nexports.RESERVED_NAMESPACES = [\"firebase\"];\n\nfunction keyToIds(key) {\n  const keyParts = key.split(\".\");\n  const variable = keyParts.slice(1).join(\"/\");\n  return {\n    config: keyParts[0],\n    variable: variable\n  };\n}\n\nfunction setVariable(projectId, configId, varPath, val) {\n  if (configId === \"\" || varPath === \"\") {\n    const msg = \"Invalid argument, each config value must have a 2-part key (e.g. foo.bar).\";\n    throw new error_1.FirebaseError(msg);\n  }\n\n  return runtimeconfig.variables.set(projectId, configId, varPath, val);\n}\n\nfunction isReservedNamespace(id) {\n  return _.some(exports.RESERVED_NAMESPACES, reserved => {\n    return id.config.toLowerCase().startsWith(reserved);\n  });\n}\n\nasync function ensureApi(options) {\n  const projectId = projectUtils_1.needProjectId(options);\n  return ensureApiEnabled_1.ensure(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true);\n}\n\nexports.ensureApi = ensureApi;\n\nfunction varNameToIds(varName) {\n  return {\n    config: varName.match(new RegExp(\"/configs/(.+)/variables/\"))[1],\n    variable: varName.match(new RegExp(\"/variables/(.+)\"))[1]\n  };\n}\n\nexports.varNameToIds = varNameToIds;\n\nfunction idsToVarName(projectId, configId, varId) {\n  return _.join([\"projects\", projectId, \"configs\", configId, \"variables\", varId], \"/\");\n}\n\nexports.idsToVarName = idsToVarName;\n\nfunction getAppEngineLocation(config) {\n  let appEngineLocation = config.locationId;\n\n  if (appEngineLocation && appEngineLocation.match(/[^\\d]$/)) {\n    appEngineLocation = appEngineLocation + \"1\";\n  }\n\n  return appEngineLocation || \"us-central1\";\n}\n\nexports.getAppEngineLocation = getAppEngineLocation;\n\nasync function getFirebaseConfig(options) {\n  const projectId = projectUtils_1.needProjectId(options);\n  const response = await api.request(\"GET\", \"/v1beta1/projects/\" + projectId + \"/adminSdkConfig\", {\n    auth: true,\n    origin: api.firebaseApiOrigin\n  });\n  return response.body;\n}\n\nexports.getFirebaseConfig = getFirebaseConfig;\n\nasync function setVariablesRecursive(projectId, configId, varPath, val) {\n  let parsed = val;\n\n  if (_.isString(val)) {\n    try {\n      parsed = JSON.parse(val);\n    } catch (e) {}\n  }\n\n  if (_.isPlainObject(parsed)) {\n    return Promise.all(_.map(parsed, (item, key) => {\n      const newVarPath = varPath ? _.join([varPath, key], \"/\") : key;\n      return setVariablesRecursive(projectId, configId, newVarPath, item);\n    }));\n  }\n\n  return setVariable(projectId, configId, varPath, val);\n}\n\nexports.setVariablesRecursive = setVariablesRecursive;\n\nasync function materializeConfig(configName, output) {\n  const materializeVariable = async function (varName) {\n    const variable = await runtimeconfig.variables.get(varName);\n    const id = exports.varNameToIds(variable.name);\n    const key = id.config + \".\" + id.variable.split(\"/\").join(\".\");\n\n    _.set(output, key, variable.text);\n  };\n\n  const traverseVariables = async function (variables) {\n    return Promise.all(_.map(variables, variable => {\n      return materializeVariable(variable.name);\n    }));\n  };\n\n  const variables = await runtimeconfig.variables.list(configName);\n  await traverseVariables(variables);\n  return output;\n}\n\nexports.materializeConfig = materializeConfig;\n\nasync function materializeAll(projectId) {\n  const output = {};\n  const configs = await runtimeconfig.configs.list(projectId);\n  await Promise.all(_.map(configs, config => {\n    if (config.name.match(new RegExp(\"configs/firebase\"))) {\n      return;\n    }\n\n    return exports.materializeConfig(config.name, output);\n  }));\n  return output;\n}\n\nexports.materializeAll = materializeAll;\n\nfunction parseSetArgs(args) {\n  const parsed = [];\n\n  _.forEach(args, arg => {\n    const parts = arg.split(\"=\");\n    const key = parts[0];\n\n    if (parts.length < 2) {\n      throw new error_1.FirebaseError(\"Invalid argument \" + clc.bold(arg) + \", must be in key=val format\");\n    }\n\n    if (/[A-Z]/.test(key)) {\n      throw new error_1.FirebaseError(\"Invalid config name \" + clc.bold(key) + \", cannot use upper case.\");\n    }\n\n    const id = keyToIds(key);\n\n    if (isReservedNamespace(id)) {\n      throw new error_1.FirebaseError(\"Cannot set to reserved namespace \" + clc.bold(id.config));\n    }\n\n    const val = parts.slice(1).join(\"=\");\n    parsed.push({\n      configId: id.config,\n      varId: id.variable,\n      val: val\n    });\n  });\n\n  return parsed;\n}\n\nexports.parseSetArgs = parseSetArgs;\n\nfunction parseUnsetArgs(args) {\n  const parsed = [];\n  let splitArgs = [];\n\n  _.forEach(args, arg => {\n    splitArgs = _.union(splitArgs, arg.split(\",\"));\n  });\n\n  _.forEach(splitArgs, key => {\n    const id = keyToIds(key);\n\n    if (isReservedNamespace(id)) {\n      throw new error_1.FirebaseError(\"Cannot unset reserved namespace \" + clc.bold(id.config));\n    }\n\n    parsed.push({\n      configId: id.config,\n      varId: id.variable\n    });\n  });\n\n  return parsed;\n}\n\nexports.parseUnsetArgs = parseUnsetArgs;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/functionsConfig.js"],"names":["Object","defineProperty","exports","value","parseUnsetArgs","parseSetArgs","materializeAll","materializeConfig","setVariablesRecursive","getFirebaseConfig","getAppEngineLocation","idsToVarName","varNameToIds","ensureApi","RESERVED_NAMESPACES","_","require","clc","api","ensureApiEnabled_1","error_1","projectUtils_1","runtimeconfig","keyToIds","key","keyParts","split","variable","slice","join","config","setVariable","projectId","configId","varPath","val","msg","FirebaseError","variables","set","isReservedNamespace","id","some","reserved","toLowerCase","startsWith","options","needProjectId","ensure","varName","match","RegExp","varId","appEngineLocation","locationId","response","request","auth","origin","firebaseApiOrigin","body","parsed","isString","JSON","parse","e","isPlainObject","Promise","all","map","item","newVarPath","configName","output","materializeVariable","get","name","text","traverseVariables","list","configs","args","forEach","arg","parts","length","bold","test","push","splitArgs","union"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseUnsetArgs = exports.parseSetArgs = exports.materializeAll = exports.materializeConfig = exports.setVariablesRecursive = exports.getFirebaseConfig = exports.getAppEngineLocation = exports.idsToVarName = exports.varNameToIds = exports.ensureApi = exports.RESERVED_NAMESPACES = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst api = require(\"./api\");\nconst ensureApiEnabled_1 = require(\"./ensureApiEnabled\");\nconst error_1 = require(\"./error\");\nconst projectUtils_1 = require(\"./projectUtils\");\nconst runtimeconfig = require(\"./gcp/runtimeconfig\");\nexports.RESERVED_NAMESPACES = [\"firebase\"];\nfunction keyToIds(key) {\n    const keyParts = key.split(\".\");\n    const variable = keyParts.slice(1).join(\"/\");\n    return {\n        config: keyParts[0],\n        variable: variable,\n    };\n}\nfunction setVariable(projectId, configId, varPath, val) {\n    if (configId === \"\" || varPath === \"\") {\n        const msg = \"Invalid argument, each config value must have a 2-part key (e.g. foo.bar).\";\n        throw new error_1.FirebaseError(msg);\n    }\n    return runtimeconfig.variables.set(projectId, configId, varPath, val);\n}\nfunction isReservedNamespace(id) {\n    return _.some(exports.RESERVED_NAMESPACES, (reserved) => {\n        return id.config.toLowerCase().startsWith(reserved);\n    });\n}\nasync function ensureApi(options) {\n    const projectId = projectUtils_1.needProjectId(options);\n    return ensureApiEnabled_1.ensure(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true);\n}\nexports.ensureApi = ensureApi;\nfunction varNameToIds(varName) {\n    return {\n        config: varName.match(new RegExp(\"/configs/(.+)/variables/\"))[1],\n        variable: varName.match(new RegExp(\"/variables/(.+)\"))[1],\n    };\n}\nexports.varNameToIds = varNameToIds;\nfunction idsToVarName(projectId, configId, varId) {\n    return _.join([\"projects\", projectId, \"configs\", configId, \"variables\", varId], \"/\");\n}\nexports.idsToVarName = idsToVarName;\nfunction getAppEngineLocation(config) {\n    let appEngineLocation = config.locationId;\n    if (appEngineLocation && appEngineLocation.match(/[^\\d]$/)) {\n        appEngineLocation = appEngineLocation + \"1\";\n    }\n    return appEngineLocation || \"us-central1\";\n}\nexports.getAppEngineLocation = getAppEngineLocation;\nasync function getFirebaseConfig(options) {\n    const projectId = projectUtils_1.needProjectId(options);\n    const response = await api.request(\"GET\", \"/v1beta1/projects/\" + projectId + \"/adminSdkConfig\", {\n        auth: true,\n        origin: api.firebaseApiOrigin,\n    });\n    return response.body;\n}\nexports.getFirebaseConfig = getFirebaseConfig;\nasync function setVariablesRecursive(projectId, configId, varPath, val) {\n    let parsed = val;\n    if (_.isString(val)) {\n        try {\n            parsed = JSON.parse(val);\n        }\n        catch (e) {\n        }\n    }\n    if (_.isPlainObject(parsed)) {\n        return Promise.all(_.map(parsed, (item, key) => {\n            const newVarPath = varPath ? _.join([varPath, key], \"/\") : key;\n            return setVariablesRecursive(projectId, configId, newVarPath, item);\n        }));\n    }\n    return setVariable(projectId, configId, varPath, val);\n}\nexports.setVariablesRecursive = setVariablesRecursive;\nasync function materializeConfig(configName, output) {\n    const materializeVariable = async function (varName) {\n        const variable = await runtimeconfig.variables.get(varName);\n        const id = exports.varNameToIds(variable.name);\n        const key = id.config + \".\" + id.variable.split(\"/\").join(\".\");\n        _.set(output, key, variable.text);\n    };\n    const traverseVariables = async function (variables) {\n        return Promise.all(_.map(variables, (variable) => {\n            return materializeVariable(variable.name);\n        }));\n    };\n    const variables = await runtimeconfig.variables.list(configName);\n    await traverseVariables(variables);\n    return output;\n}\nexports.materializeConfig = materializeConfig;\nasync function materializeAll(projectId) {\n    const output = {};\n    const configs = await runtimeconfig.configs.list(projectId);\n    await Promise.all(_.map(configs, (config) => {\n        if (config.name.match(new RegExp(\"configs/firebase\"))) {\n            return;\n        }\n        return exports.materializeConfig(config.name, output);\n    }));\n    return output;\n}\nexports.materializeAll = materializeAll;\nfunction parseSetArgs(args) {\n    const parsed = [];\n    _.forEach(args, (arg) => {\n        const parts = arg.split(\"=\");\n        const key = parts[0];\n        if (parts.length < 2) {\n            throw new error_1.FirebaseError(\"Invalid argument \" + clc.bold(arg) + \", must be in key=val format\");\n        }\n        if (/[A-Z]/.test(key)) {\n            throw new error_1.FirebaseError(\"Invalid config name \" + clc.bold(key) + \", cannot use upper case.\");\n        }\n        const id = keyToIds(key);\n        if (isReservedNamespace(id)) {\n            throw new error_1.FirebaseError(\"Cannot set to reserved namespace \" + clc.bold(id.config));\n        }\n        const val = parts.slice(1).join(\"=\");\n        parsed.push({\n            configId: id.config,\n            varId: id.variable,\n            val: val,\n        });\n    });\n    return parsed;\n}\nexports.parseSetArgs = parseSetArgs;\nfunction parseUnsetArgs(args) {\n    const parsed = [];\n    let splitArgs = [];\n    _.forEach(args, (arg) => {\n        splitArgs = _.union(splitArgs, arg.split(\",\"));\n    });\n    _.forEach(splitArgs, (key) => {\n        const id = keyToIds(key);\n        if (isReservedNamespace(id)) {\n            throw new error_1.FirebaseError(\"Cannot unset reserved namespace \" + clc.bold(id.config));\n        }\n        parsed.push({\n            configId: id.config,\n            varId: id.variable,\n        });\n    });\n    return parsed;\n}\nexports.parseUnsetArgs = parseUnsetArgs;\n"]},"metadata":{},"sourceType":"script"}