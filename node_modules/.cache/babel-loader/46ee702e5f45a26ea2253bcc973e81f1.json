{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doSetup = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst api = require(\"../../api\");\n\nconst prompt_1 = require(\"../../prompt\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst utils = require(\"../../utils\");\n\nconst fsutils = require(\"../../fsutils\");\n\nconst database_1 = require(\"../../management/database\");\n\nconst ora = require(\"ora\");\n\nconst ensureApiEnabled_1 = require(\"../../ensureApiEnabled\");\n\nconst getDefaultDatabaseInstance_1 = require(\"../../getDefaultDatabaseInstance\");\n\nconst error_1 = require(\"../../error\");\n\nconst DEFAULT_RULES = JSON.stringify({\n  rules: {\n    \".read\": \"auth != null\",\n    \".write\": \"auth != null\"\n  }\n}, null, 2);\n\nasync function getDBRules(instanceDetails) {\n  if (!instanceDetails || !instanceDetails.name) {\n    return DEFAULT_RULES;\n  }\n\n  const response = await api.request(\"GET\", \"/.settings/rules.json\", {\n    auth: true,\n    origin: instanceDetails.databaseUrl\n  });\n  return response.body;\n}\n\nfunction writeDBRules(rules, logMessagePrefix, filename, config) {\n  config.writeProjectFile(filename, rules);\n  utils.logSuccess(`${logMessagePrefix} have been written to ${clc.bold(filename)}.`);\n  logger_1.logger.info(`Future modifications to ${clc.bold(filename)} will update Realtime Database Security Rules when you run`);\n  logger_1.logger.info(clc.bold(\"firebase deploy\") + \".\");\n}\n\nasync function createDefaultDatabaseInstance(project) {\n  const selectedLocation = await prompt_1.promptOnce({\n    type: \"list\",\n    message: \"Please choose the location for your default Realtime Database instance:\",\n    choices: [{\n      name: \"us-central1\",\n      value: database_1.DatabaseLocation.US_CENTRAL1\n    }, {\n      name: \"europe-west1\",\n      value: database_1.DatabaseLocation.EUROPE_WEST1\n    }, {\n      name: \"asia-southeast1\",\n      value: database_1.DatabaseLocation.ASIA_SOUTHEAST1\n    }]\n  });\n  let instanceName = `${project}-default-rtdb`;\n  const checkOutput = await database_1.checkInstanceNameAvailable(project, instanceName, database_1.DatabaseInstanceType.DEFAULT_DATABASE, selectedLocation);\n\n  if (!checkOutput.available) {\n    if (!checkOutput.suggestedIds || checkOutput.suggestedIds.length === 0) {\n      logger_1.logger.debug(`No instance names were suggested instead of conventional instance name: ${instanceName}`);\n      throw new error_1.FirebaseError(\"Failed to create default RTDB instance\");\n    }\n\n    instanceName = checkOutput.suggestedIds[0];\n    logger_1.logger.info(`${clc.yellow(\"WARNING:\")} your project ID has the legacy name format, so your default Realtime Database instance will be named differently: ${instanceName}`);\n  }\n\n  const spinner = ora(`Creating your default Realtime Database instance: ${instanceName}`).start();\n\n  try {\n    const createdInstance = await database_1.createInstance(project, instanceName, selectedLocation, database_1.DatabaseInstanceType.DEFAULT_DATABASE);\n    spinner.succeed();\n    return createdInstance;\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n}\n\nasync function doSetup(setup, config) {\n  setup.config = setup.config || {};\n  let instanceDetails;\n\n  if (setup.projectId) {\n    await ensureApiEnabled_1.ensure(setup.projectId, \"firebasedatabase.googleapis.com\", \"database\", false);\n    logger_1.logger.info();\n    setup.instance = setup.instance || (await getDefaultDatabaseInstance_1.getDefaultDatabaseInstance({\n      project: setup.projectId\n    }));\n\n    if (setup.instance !== \"\") {\n      instanceDetails = await database_1.getDatabaseInstanceDetails(setup.projectId, setup.instance);\n    } else {\n      const confirm = await prompt_1.promptOnce({\n        type: \"confirm\",\n        name: \"confirm\",\n        default: true,\n        message: \"It seems like you havenâ€™t initialized Realtime Database in your project yet. Do you want to set it up?\"\n      });\n\n      if (confirm) {\n        instanceDetails = await createDefaultDatabaseInstance(setup.projectId);\n      }\n    }\n  }\n\n  setup.config.database = setup.config.database || {};\n  logger_1.logger.info();\n  logger_1.logger.info(\"Firebase Realtime Database Security Rules allow you to define how your data should be\");\n  logger_1.logger.info(\"structured and when your data can be read from and written to.\");\n  logger_1.logger.info();\n  await prompt_1.prompt(setup.config.database, [{\n    type: \"input\",\n    name: \"rules\",\n    message: \"What file should be used for Realtime Database Security Rules?\",\n    default: \"database.rules.json\"\n  }]);\n  const filename = setup.config.database.rules;\n\n  if (!filename) {\n    throw new error_1.FirebaseError(\"Must specify location for Realtime Database rules file.\");\n  }\n\n  let writeRules = true;\n\n  if (fsutils.fileExistsSync(filename)) {\n    const rulesDescription = instanceDetails ? `the Realtime Database Security Rules for ${clc.bold(instanceDetails.name)} from the Firebase console` : \"default rules\";\n    const msg = `File ${clc.bold(filename)} already exists. Do you want to overwrite it with ${rulesDescription}?`;\n    writeRules = await prompt_1.promptOnce({\n      type: \"confirm\",\n      message: msg,\n      default: false\n    });\n  }\n\n  if (writeRules) {\n    if (instanceDetails) {\n      writeDBRules(await getDBRules(instanceDetails), `Database Rules for ${instanceDetails.name}`, filename, config);\n      return;\n    }\n\n    writeDBRules(DEFAULT_RULES, \"Default rules\", filename, config);\n    return;\n  }\n\n  logger_1.logger.info(\"Skipping overwrite of Realtime Database Security Rules.\");\n  logger_1.logger.info(`The security rules defined in ${clc.bold(filename)} will be published when you run ${clc.bold(\"firebase deploy\")}.`);\n  return;\n}\n\nexports.doSetup = doSetup;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/database.js"],"names":["Object","defineProperty","exports","value","doSetup","clc","require","api","prompt_1","logger_1","utils","fsutils","database_1","ora","ensureApiEnabled_1","getDefaultDatabaseInstance_1","error_1","DEFAULT_RULES","JSON","stringify","rules","getDBRules","instanceDetails","name","response","request","auth","origin","databaseUrl","body","writeDBRules","logMessagePrefix","filename","config","writeProjectFile","logSuccess","bold","logger","info","createDefaultDatabaseInstance","project","selectedLocation","promptOnce","type","message","choices","DatabaseLocation","US_CENTRAL1","EUROPE_WEST1","ASIA_SOUTHEAST1","instanceName","checkOutput","checkInstanceNameAvailable","DatabaseInstanceType","DEFAULT_DATABASE","available","suggestedIds","length","debug","FirebaseError","yellow","spinner","start","createdInstance","createInstance","succeed","err","fail","setup","projectId","ensure","instance","getDefaultDatabaseInstance","getDatabaseInstanceDetails","confirm","default","database","prompt","writeRules","fileExistsSync","rulesDescription","msg"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doSetup = void 0;\nconst clc = require(\"cli-color\");\nconst api = require(\"../../api\");\nconst prompt_1 = require(\"../../prompt\");\nconst logger_1 = require(\"../../logger\");\nconst utils = require(\"../../utils\");\nconst fsutils = require(\"../../fsutils\");\nconst database_1 = require(\"../../management/database\");\nconst ora = require(\"ora\");\nconst ensureApiEnabled_1 = require(\"../../ensureApiEnabled\");\nconst getDefaultDatabaseInstance_1 = require(\"../../getDefaultDatabaseInstance\");\nconst error_1 = require(\"../../error\");\nconst DEFAULT_RULES = JSON.stringify({ rules: { \".read\": \"auth != null\", \".write\": \"auth != null\" } }, null, 2);\nasync function getDBRules(instanceDetails) {\n    if (!instanceDetails || !instanceDetails.name) {\n        return DEFAULT_RULES;\n    }\n    const response = await api.request(\"GET\", \"/.settings/rules.json\", {\n        auth: true,\n        origin: instanceDetails.databaseUrl,\n    });\n    return response.body;\n}\nfunction writeDBRules(rules, logMessagePrefix, filename, config) {\n    config.writeProjectFile(filename, rules);\n    utils.logSuccess(`${logMessagePrefix} have been written to ${clc.bold(filename)}.`);\n    logger_1.logger.info(`Future modifications to ${clc.bold(filename)} will update Realtime Database Security Rules when you run`);\n    logger_1.logger.info(clc.bold(\"firebase deploy\") + \".\");\n}\nasync function createDefaultDatabaseInstance(project) {\n    const selectedLocation = await prompt_1.promptOnce({\n        type: \"list\",\n        message: \"Please choose the location for your default Realtime Database instance:\",\n        choices: [\n            { name: \"us-central1\", value: database_1.DatabaseLocation.US_CENTRAL1 },\n            { name: \"europe-west1\", value: database_1.DatabaseLocation.EUROPE_WEST1 },\n            { name: \"asia-southeast1\", value: database_1.DatabaseLocation.ASIA_SOUTHEAST1 },\n        ],\n    });\n    let instanceName = `${project}-default-rtdb`;\n    const checkOutput = await database_1.checkInstanceNameAvailable(project, instanceName, database_1.DatabaseInstanceType.DEFAULT_DATABASE, selectedLocation);\n    if (!checkOutput.available) {\n        if (!checkOutput.suggestedIds || checkOutput.suggestedIds.length === 0) {\n            logger_1.logger.debug(`No instance names were suggested instead of conventional instance name: ${instanceName}`);\n            throw new error_1.FirebaseError(\"Failed to create default RTDB instance\");\n        }\n        instanceName = checkOutput.suggestedIds[0];\n        logger_1.logger.info(`${clc.yellow(\"WARNING:\")} your project ID has the legacy name format, so your default Realtime Database instance will be named differently: ${instanceName}`);\n    }\n    const spinner = ora(`Creating your default Realtime Database instance: ${instanceName}`).start();\n    try {\n        const createdInstance = await database_1.createInstance(project, instanceName, selectedLocation, database_1.DatabaseInstanceType.DEFAULT_DATABASE);\n        spinner.succeed();\n        return createdInstance;\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n}\nasync function doSetup(setup, config) {\n    setup.config = setup.config || {};\n    let instanceDetails;\n    if (setup.projectId) {\n        await ensureApiEnabled_1.ensure(setup.projectId, \"firebasedatabase.googleapis.com\", \"database\", false);\n        logger_1.logger.info();\n        setup.instance =\n            setup.instance || (await getDefaultDatabaseInstance_1.getDefaultDatabaseInstance({ project: setup.projectId }));\n        if (setup.instance !== \"\") {\n            instanceDetails = await database_1.getDatabaseInstanceDetails(setup.projectId, setup.instance);\n        }\n        else {\n            const confirm = await prompt_1.promptOnce({\n                type: \"confirm\",\n                name: \"confirm\",\n                default: true,\n                message: \"It seems like you havenâ€™t initialized Realtime Database in your project yet. Do you want to set it up?\",\n            });\n            if (confirm) {\n                instanceDetails = await createDefaultDatabaseInstance(setup.projectId);\n            }\n        }\n    }\n    setup.config.database = setup.config.database || {};\n    logger_1.logger.info();\n    logger_1.logger.info(\"Firebase Realtime Database Security Rules allow you to define how your data should be\");\n    logger_1.logger.info(\"structured and when your data can be read from and written to.\");\n    logger_1.logger.info();\n    await prompt_1.prompt(setup.config.database, [\n        {\n            type: \"input\",\n            name: \"rules\",\n            message: \"What file should be used for Realtime Database Security Rules?\",\n            default: \"database.rules.json\",\n        },\n    ]);\n    const filename = setup.config.database.rules;\n    if (!filename) {\n        throw new error_1.FirebaseError(\"Must specify location for Realtime Database rules file.\");\n    }\n    let writeRules = true;\n    if (fsutils.fileExistsSync(filename)) {\n        const rulesDescription = instanceDetails\n            ? `the Realtime Database Security Rules for ${clc.bold(instanceDetails.name)} from the Firebase console`\n            : \"default rules\";\n        const msg = `File ${clc.bold(filename)} already exists. Do you want to overwrite it with ${rulesDescription}?`;\n        writeRules = await prompt_1.promptOnce({\n            type: \"confirm\",\n            message: msg,\n            default: false,\n        });\n    }\n    if (writeRules) {\n        if (instanceDetails) {\n            writeDBRules(await getDBRules(instanceDetails), `Database Rules for ${instanceDetails.name}`, filename, config);\n            return;\n        }\n        writeDBRules(DEFAULT_RULES, \"Default rules\", filename, config);\n        return;\n    }\n    logger_1.logger.info(\"Skipping overwrite of Realtime Database Security Rules.\");\n    logger_1.logger.info(`The security rules defined in ${clc.bold(filename)} will be published when you run ${clc.bold(\"firebase deploy\")}.`);\n    return;\n}\nexports.doSetup = doSetup;\n"]},"metadata":{},"sourceType":"script"}