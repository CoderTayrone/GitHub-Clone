{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ask = exports.getInquirerDefault = exports.askForParam = exports.checkResponse = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst extensionsApi_1 = require(\"./extensionsApi\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst utils_1 = require(\"./utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst utils = require(\"../utils\");\n\nfunction checkResponse(response, spec) {\n  let valid = true;\n  let responses;\n\n  if (spec.required && (response == \"\" || response == undefined)) {\n    utils.logWarning(`Param ${spec.param} is required, but no value was provided.`);\n    return false;\n  }\n\n  if (spec.type === extensionsApi_1.ParamType.MULTISELECT) {\n    responses = response.split(\",\");\n  } else {\n    responses = [response];\n  }\n\n  if (spec.validationRegex && !!response) {\n    const re = new RegExp(spec.validationRegex);\n\n    _.forEach(responses, resp => {\n      if ((spec.required || resp !== \"\") && !re.test(resp)) {\n        const genericWarn = `${resp} is not a valid value for ${spec.param} since it` + ` does not meet the requirements of the regex validation: \"${spec.validationRegex}\"`;\n        utils.logWarning(spec.validationErrorMessage || genericWarn);\n        valid = false;\n      }\n    });\n  }\n\n  if (spec.type && (spec.type === extensionsApi_1.ParamType.MULTISELECT || spec.type === extensionsApi_1.ParamType.SELECT)) {\n    _.forEach(responses, r => {\n      const validChoice = _.some(spec.options, option => {\n        return r === option.value;\n      });\n\n      if (!validChoice) {\n        utils.logWarning(`${r} is not a valid option for ${spec.param}.`);\n        valid = false;\n      }\n    });\n  }\n\n  return valid;\n}\n\nexports.checkResponse = checkResponse;\n\nasync function askForParam(paramSpec) {\n  let valid = false;\n  let response = \"\";\n  const description = paramSpec.description || \"\";\n  const label = paramSpec.label.trim();\n  logger_1.logger.info(`\\n${clc.bold(label)}${clc.bold(paramSpec.required ? \"\" : \" (Optional)\")}: ${marked(description).trim()}`);\n\n  while (!valid) {\n    switch (paramSpec.type) {\n      case extensionsApi_1.ParamType.SELECT:\n        response = await prompt_1.promptOnce({\n          name: \"input\",\n          type: \"list\",\n          default: () => {\n            if (paramSpec.default) {\n              return getInquirerDefault(_.get(paramSpec, \"options\", []), paramSpec.default);\n            }\n          },\n          message: \"Which option do you want enabled for this parameter? \" + \"Select an option with the arrow keys, and use Enter to confirm your choice. \" + \"You may only select one option.\",\n          choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options)\n        });\n        break;\n\n      case extensionsApi_1.ParamType.MULTISELECT:\n        response = await utils_1.onceWithJoin({\n          name: \"input\",\n          type: \"checkbox\",\n          default: () => {\n            if (paramSpec.default) {\n              const defaults = paramSpec.default.split(\",\");\n              return defaults.map(def => {\n                return getInquirerDefault(_.get(paramSpec, \"options\", []), def);\n              });\n            }\n          },\n          message: \"Which options do you want enabled for this parameter? \" + \"Press Space to select, then Enter to confirm your choices. \" + \"You may select multiple options.\",\n          choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options)\n        });\n        break;\n\n      default:\n        response = await prompt_1.promptOnce({\n          name: paramSpec.param,\n          type: \"input\",\n          default: paramSpec.default,\n          message: `Enter a value for ${label}:`\n        });\n    }\n\n    valid = checkResponse(response, paramSpec);\n  }\n\n  return response;\n}\n\nexports.askForParam = askForParam;\n\nfunction getInquirerDefault(options, def) {\n  const defaultOption = _.find(options, option => {\n    return option.value === def;\n  });\n\n  return defaultOption ? defaultOption.label || defaultOption.value : \"\";\n}\n\nexports.getInquirerDefault = getInquirerDefault;\n\nasync function ask(paramSpecs, firebaseProjectParams) {\n  if (_.isEmpty(paramSpecs)) {\n    logger_1.logger.debug(\"No params were specified for this extension.\");\n    return {};\n  }\n\n  utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"answer the questions below to configure your extension:\");\n  const substituted = extensionsHelper_1.substituteParams(paramSpecs, firebaseProjectParams);\n  const result = {};\n\n  const promises = _.map(substituted, paramSpec => {\n    return async () => {\n      result[paramSpec.param] = await askForParam(paramSpec);\n    };\n  });\n\n  await promises.reduce((prev, cur) => prev.then(cur), Promise.resolve());\n  logger_1.logger.info();\n  return result;\n}\n\nexports.ask = ask;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/askUserForParam.js"],"names":["Object","defineProperty","exports","value","ask","getInquirerDefault","askForParam","checkResponse","_","require","clc","marked","extensionsApi_1","extensionsHelper_1","utils_1","logger_1","prompt_1","utils","response","spec","valid","responses","required","undefined","logWarning","param","type","ParamType","MULTISELECT","split","validationRegex","re","RegExp","forEach","resp","test","genericWarn","validationErrorMessage","SELECT","r","validChoice","some","options","option","paramSpec","description","label","trim","logger","info","bold","promptOnce","name","default","get","message","choices","convertExtensionOptionToLabeledList","onceWithJoin","defaults","map","def","defaultOption","find","paramSpecs","firebaseProjectParams","isEmpty","debug","logLabeledBullet","logPrefix","substituted","substituteParams","result","promises","reduce","prev","cur","then","Promise","resolve"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACG,kBAAR,GAA6BH,OAAO,CAACI,WAAR,GAAsBJ,OAAO,CAACK,aAAR,GAAwB,KAAK,CAA9F;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMO,QAAQ,GAAGP,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMQ,KAAK,GAAGR,OAAO,CAAC,UAAD,CAArB;;AACA,SAASF,aAAT,CAAuBW,QAAvB,EAAiCC,IAAjC,EAAuC;AACnC,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAJ;;AACA,MAAIF,IAAI,CAACG,QAAL,KAAkBJ,QAAQ,IAAI,EAAZ,IAAkBA,QAAQ,IAAIK,SAAhD,CAAJ,EAAgE;AAC5DN,IAAAA,KAAK,CAACO,UAAN,CAAkB,SAAQL,IAAI,CAACM,KAAM,0CAArC;AACA,WAAO,KAAP;AACH;;AACD,MAAIN,IAAI,CAACO,IAAL,KAAcd,eAAe,CAACe,SAAhB,CAA0BC,WAA5C,EAAyD;AACrDP,IAAAA,SAAS,GAAGH,QAAQ,CAACW,KAAT,CAAe,GAAf,CAAZ;AACH,GAFD,MAGK;AACDR,IAAAA,SAAS,GAAG,CAACH,QAAD,CAAZ;AACH;;AACD,MAAIC,IAAI,CAACW,eAAL,IAAwB,CAAC,CAACZ,QAA9B,EAAwC;AACpC,UAAMa,EAAE,GAAG,IAAIC,MAAJ,CAAWb,IAAI,CAACW,eAAhB,CAAX;;AACAtB,IAAAA,CAAC,CAACyB,OAAF,CAAUZ,SAAV,EAAsBa,IAAD,IAAU;AAC3B,UAAI,CAACf,IAAI,CAACG,QAAL,IAAiBY,IAAI,KAAK,EAA3B,KAAkC,CAACH,EAAE,CAACI,IAAH,CAAQD,IAAR,CAAvC,EAAsD;AAClD,cAAME,WAAW,GAAI,GAAEF,IAAK,6BAA4Bf,IAAI,CAACM,KAAM,WAA/C,GACf,6DAA4DN,IAAI,CAACW,eAAgB,GADtF;AAEAb,QAAAA,KAAK,CAACO,UAAN,CAAiBL,IAAI,CAACkB,sBAAL,IAA+BD,WAAhD;AACAhB,QAAAA,KAAK,GAAG,KAAR;AACH;AACJ,KAPD;AAQH;;AACD,MAAID,IAAI,CAACO,IAAL,KAAcP,IAAI,CAACO,IAAL,KAAcd,eAAe,CAACe,SAAhB,CAA0BC,WAAxC,IAAuDT,IAAI,CAACO,IAAL,KAAcd,eAAe,CAACe,SAAhB,CAA0BW,MAA7G,CAAJ,EAA0H;AACtH9B,IAAAA,CAAC,CAACyB,OAAF,CAAUZ,SAAV,EAAsBkB,CAAD,IAAO;AACxB,YAAMC,WAAW,GAAGhC,CAAC,CAACiC,IAAF,CAAOtB,IAAI,CAACuB,OAAZ,EAAsBC,MAAD,IAAY;AACjD,eAAOJ,CAAC,KAAKI,MAAM,CAACxC,KAApB;AACH,OAFmB,CAApB;;AAGA,UAAI,CAACqC,WAAL,EAAkB;AACdvB,QAAAA,KAAK,CAACO,UAAN,CAAkB,GAAEe,CAAE,8BAA6BpB,IAAI,CAACM,KAAM,GAA9D;AACAL,QAAAA,KAAK,GAAG,KAAR;AACH;AACJ,KARD;AASH;;AACD,SAAOA,KAAP;AACH;;AACDlB,OAAO,CAACK,aAAR,GAAwBA,aAAxB;;AACA,eAAeD,WAAf,CAA2BsC,SAA3B,EAAsC;AAClC,MAAIxB,KAAK,GAAG,KAAZ;AACA,MAAIF,QAAQ,GAAG,EAAf;AACA,QAAM2B,WAAW,GAAGD,SAAS,CAACC,WAAV,IAAyB,EAA7C;AACA,QAAMC,KAAK,GAAGF,SAAS,CAACE,KAAV,CAAgBC,IAAhB,EAAd;AACAhC,EAAAA,QAAQ,CAACiC,MAAT,CAAgBC,IAAhB,CAAsB,KAAIvC,GAAG,CAACwC,IAAJ,CAASJ,KAAT,CAAgB,GAAEpC,GAAG,CAACwC,IAAJ,CAASN,SAAS,CAACtB,QAAV,GAAqB,EAArB,GAA0B,aAAnC,CAAkD,KAAIX,MAAM,CAACkC,WAAD,CAAN,CAAoBE,IAApB,EAA2B,EAA7H;;AACA,SAAO,CAAC3B,KAAR,EAAe;AACX,YAAQwB,SAAS,CAAClB,IAAlB;AACI,WAAKd,eAAe,CAACe,SAAhB,CAA0BW,MAA/B;AACIpB,QAAAA,QAAQ,GAAG,MAAMF,QAAQ,CAACmC,UAAT,CAAoB;AACjCC,UAAAA,IAAI,EAAE,OAD2B;AAEjC1B,UAAAA,IAAI,EAAE,MAF2B;AAGjC2B,UAAAA,OAAO,EAAE,MAAM;AACX,gBAAIT,SAAS,CAACS,OAAd,EAAuB;AACnB,qBAAOhD,kBAAkB,CAACG,CAAC,CAAC8C,GAAF,CAAMV,SAAN,EAAiB,SAAjB,EAA4B,EAA5B,CAAD,EAAkCA,SAAS,CAACS,OAA5C,CAAzB;AACH;AACJ,WAPgC;AAQjCE,UAAAA,OAAO,EAAE,0DACL,8EADK,GAEL,iCAV6B;AAWjCC,UAAAA,OAAO,EAAE1C,OAAO,CAAC2C,mCAAR,CAA4Cb,SAAS,CAACF,OAAtD;AAXwB,SAApB,CAAjB;AAaA;;AACJ,WAAK9B,eAAe,CAACe,SAAhB,CAA0BC,WAA/B;AACIV,QAAAA,QAAQ,GAAG,MAAMJ,OAAO,CAAC4C,YAAR,CAAqB;AAClCN,UAAAA,IAAI,EAAE,OAD4B;AAElC1B,UAAAA,IAAI,EAAE,UAF4B;AAGlC2B,UAAAA,OAAO,EAAE,MAAM;AACX,gBAAIT,SAAS,CAACS,OAAd,EAAuB;AACnB,oBAAMM,QAAQ,GAAGf,SAAS,CAACS,OAAV,CAAkBxB,KAAlB,CAAwB,GAAxB,CAAjB;AACA,qBAAO8B,QAAQ,CAACC,GAAT,CAAcC,GAAD,IAAS;AACzB,uBAAOxD,kBAAkB,CAACG,CAAC,CAAC8C,GAAF,CAAMV,SAAN,EAAiB,SAAjB,EAA4B,EAA5B,CAAD,EAAkCiB,GAAlC,CAAzB;AACH,eAFM,CAAP;AAGH;AACJ,WAViC;AAWlCN,UAAAA,OAAO,EAAE,2DACL,6DADK,GAEL,kCAb8B;AAclCC,UAAAA,OAAO,EAAE1C,OAAO,CAAC2C,mCAAR,CAA4Cb,SAAS,CAACF,OAAtD;AAdyB,SAArB,CAAjB;AAgBA;;AACJ;AACIxB,QAAAA,QAAQ,GAAG,MAAMF,QAAQ,CAACmC,UAAT,CAAoB;AACjCC,UAAAA,IAAI,EAAER,SAAS,CAACnB,KADiB;AAEjCC,UAAAA,IAAI,EAAE,OAF2B;AAGjC2B,UAAAA,OAAO,EAAET,SAAS,CAACS,OAHc;AAIjCE,UAAAA,OAAO,EAAG,qBAAoBT,KAAM;AAJH,SAApB,CAAjB;AAnCR;;AA0CA1B,IAAAA,KAAK,GAAGb,aAAa,CAACW,QAAD,EAAW0B,SAAX,CAArB;AACH;;AACD,SAAO1B,QAAP;AACH;;AACDhB,OAAO,CAACI,WAAR,GAAsBA,WAAtB;;AACA,SAASD,kBAAT,CAA4BqC,OAA5B,EAAqCmB,GAArC,EAA0C;AACtC,QAAMC,aAAa,GAAGtD,CAAC,CAACuD,IAAF,CAAOrB,OAAP,EAAiBC,MAAD,IAAY;AAC9C,WAAOA,MAAM,CAACxC,KAAP,KAAiB0D,GAAxB;AACH,GAFqB,CAAtB;;AAGA,SAAOC,aAAa,GAAGA,aAAa,CAAChB,KAAd,IAAuBgB,aAAa,CAAC3D,KAAxC,GAAgD,EAApE;AACH;;AACDD,OAAO,CAACG,kBAAR,GAA6BA,kBAA7B;;AACA,eAAeD,GAAf,CAAmB4D,UAAnB,EAA+BC,qBAA/B,EAAsD;AAClD,MAAIzD,CAAC,CAAC0D,OAAF,CAAUF,UAAV,CAAJ,EAA2B;AACvBjD,IAAAA,QAAQ,CAACiC,MAAT,CAAgBmB,KAAhB,CAAsB,8CAAtB;AACA,WAAO,EAAP;AACH;;AACDlD,EAAAA,KAAK,CAACmD,gBAAN,CAAuBvD,kBAAkB,CAACwD,SAA1C,EAAqD,yDAArD;AACA,QAAMC,WAAW,GAAGzD,kBAAkB,CAAC0D,gBAAnB,CAAoCP,UAApC,EAAgDC,qBAAhD,CAApB;AACA,QAAMO,MAAM,GAAG,EAAf;;AACA,QAAMC,QAAQ,GAAGjE,CAAC,CAACoD,GAAF,CAAMU,WAAN,EAAoB1B,SAAD,IAAe;AAC/C,WAAO,YAAY;AACf4B,MAAAA,MAAM,CAAC5B,SAAS,CAACnB,KAAX,CAAN,GAA0B,MAAMnB,WAAW,CAACsC,SAAD,CAA3C;AACH,KAFD;AAGH,GAJgB,CAAjB;;AAKA,QAAM6B,QAAQ,CAACC,MAAT,CAAgB,CAACC,IAAD,EAAOC,GAAP,KAAeD,IAAI,CAACE,IAAL,CAAUD,GAAV,CAA/B,EAA+CE,OAAO,CAACC,OAAR,EAA/C,CAAN;AACAhE,EAAAA,QAAQ,CAACiC,MAAT,CAAgBC,IAAhB;AACA,SAAOuB,MAAP;AACH;;AACDtE,OAAO,CAACE,GAAR,GAAcA,GAAd","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ask = exports.getInquirerDefault = exports.askForParam = exports.checkResponse = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst extensionsApi_1 = require(\"./extensionsApi\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst utils_1 = require(\"./utils\");\nconst logger_1 = require(\"../logger\");\nconst prompt_1 = require(\"../prompt\");\nconst utils = require(\"../utils\");\nfunction checkResponse(response, spec) {\n    let valid = true;\n    let responses;\n    if (spec.required && (response == \"\" || response == undefined)) {\n        utils.logWarning(`Param ${spec.param} is required, but no value was provided.`);\n        return false;\n    }\n    if (spec.type === extensionsApi_1.ParamType.MULTISELECT) {\n        responses = response.split(\",\");\n    }\n    else {\n        responses = [response];\n    }\n    if (spec.validationRegex && !!response) {\n        const re = new RegExp(spec.validationRegex);\n        _.forEach(responses, (resp) => {\n            if ((spec.required || resp !== \"\") && !re.test(resp)) {\n                const genericWarn = `${resp} is not a valid value for ${spec.param} since it` +\n                    ` does not meet the requirements of the regex validation: \"${spec.validationRegex}\"`;\n                utils.logWarning(spec.validationErrorMessage || genericWarn);\n                valid = false;\n            }\n        });\n    }\n    if (spec.type && (spec.type === extensionsApi_1.ParamType.MULTISELECT || spec.type === extensionsApi_1.ParamType.SELECT)) {\n        _.forEach(responses, (r) => {\n            const validChoice = _.some(spec.options, (option) => {\n                return r === option.value;\n            });\n            if (!validChoice) {\n                utils.logWarning(`${r} is not a valid option for ${spec.param}.`);\n                valid = false;\n            }\n        });\n    }\n    return valid;\n}\nexports.checkResponse = checkResponse;\nasync function askForParam(paramSpec) {\n    let valid = false;\n    let response = \"\";\n    const description = paramSpec.description || \"\";\n    const label = paramSpec.label.trim();\n    logger_1.logger.info(`\\n${clc.bold(label)}${clc.bold(paramSpec.required ? \"\" : \" (Optional)\")}: ${marked(description).trim()}`);\n    while (!valid) {\n        switch (paramSpec.type) {\n            case extensionsApi_1.ParamType.SELECT:\n                response = await prompt_1.promptOnce({\n                    name: \"input\",\n                    type: \"list\",\n                    default: () => {\n                        if (paramSpec.default) {\n                            return getInquirerDefault(_.get(paramSpec, \"options\", []), paramSpec.default);\n                        }\n                    },\n                    message: \"Which option do you want enabled for this parameter? \" +\n                        \"Select an option with the arrow keys, and use Enter to confirm your choice. \" +\n                        \"You may only select one option.\",\n                    choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options),\n                });\n                break;\n            case extensionsApi_1.ParamType.MULTISELECT:\n                response = await utils_1.onceWithJoin({\n                    name: \"input\",\n                    type: \"checkbox\",\n                    default: () => {\n                        if (paramSpec.default) {\n                            const defaults = paramSpec.default.split(\",\");\n                            return defaults.map((def) => {\n                                return getInquirerDefault(_.get(paramSpec, \"options\", []), def);\n                            });\n                        }\n                    },\n                    message: \"Which options do you want enabled for this parameter? \" +\n                        \"Press Space to select, then Enter to confirm your choices. \" +\n                        \"You may select multiple options.\",\n                    choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options),\n                });\n                break;\n            default:\n                response = await prompt_1.promptOnce({\n                    name: paramSpec.param,\n                    type: \"input\",\n                    default: paramSpec.default,\n                    message: `Enter a value for ${label}:`,\n                });\n        }\n        valid = checkResponse(response, paramSpec);\n    }\n    return response;\n}\nexports.askForParam = askForParam;\nfunction getInquirerDefault(options, def) {\n    const defaultOption = _.find(options, (option) => {\n        return option.value === def;\n    });\n    return defaultOption ? defaultOption.label || defaultOption.value : \"\";\n}\nexports.getInquirerDefault = getInquirerDefault;\nasync function ask(paramSpecs, firebaseProjectParams) {\n    if (_.isEmpty(paramSpecs)) {\n        logger_1.logger.debug(\"No params were specified for this extension.\");\n        return {};\n    }\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"answer the questions below to configure your extension:\");\n    const substituted = extensionsHelper_1.substituteParams(paramSpecs, firebaseProjectParams);\n    const result = {};\n    const promises = _.map(substituted, (paramSpec) => {\n        return async () => {\n            result[paramSpec.param] = await askForParam(paramSpec);\n        };\n    });\n    await promises.reduce((prev, cur) => prev.then(cur), Promise.resolve());\n    logger_1.logger.info();\n    return result;\n}\nexports.ask = ask;\n"]},"metadata":{},"sourceType":"script"}