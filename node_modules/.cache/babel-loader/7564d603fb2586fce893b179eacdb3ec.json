{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst open = require(\"open\");\n\nconst error_1 = require(\"../error\");\n\nconst api = require(\"../api\");\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst utils = require(\"../utils\");\n\nconst LINKS = [{\n  name: \"Analytics\",\n  arg: \"analytics\",\n  consolePath: \"/analytics\"\n}, {\n  name: \"Authentication: Providers\",\n  arg: \"auth\",\n  consolePath: \"/authentication/providers\"\n}, {\n  name: \"Authentication: Users\",\n  arg: \"auth:users\",\n  consolePath: \"/authentication/users\"\n}, {\n  name: \"Crash Reporting\",\n  arg: \"crash\",\n  consolePath: \"/monitoring\"\n}, {\n  name: \"Database: Data\",\n  arg: \"database\",\n  consolePath: \"/database/data\"\n}, {\n  name: \"Database: Rules\",\n  arg: \"database:rules\",\n  consolePath: \"/database/rules\"\n}, {\n  name: \"Docs\",\n  arg: \"docs\",\n  url: \"https://firebase.google.com/docs\"\n}, {\n  name: \"Dynamic Links\",\n  arg: \"links\",\n  consolePath: \"/durablelinks\"\n}, {\n  name: \"Firestore: Data\",\n  arg: \"firestore\",\n  consolePath: \"/firestore/data\"\n}, {\n  name: \"Firestore: Rules\",\n  arg: \"firestore:rules\",\n  consolePath: \"/firestore/rules\"\n}, {\n  name: \"Firestore: Indexes\",\n  arg: \"firestore:indexes\",\n  consolePath: \"/firestore/indexes\"\n}, {\n  name: \"Firestore: Usage\",\n  arg: \"firestore:usage\",\n  consolePath: \"/firestore/usage\"\n}, {\n  name: \"Functions\",\n  arg: \"functions\",\n  consolePath: \"/functions/list\"\n}, {\n  name: \"Functions Log\",\n  arg: \"functions:log\"\n}, {\n  name: \"Hosting: Deployed Site\",\n  arg: \"hosting:site\"\n}, {\n  name: \"Hosting\",\n  arg: \"hosting\",\n  consolePath: \"/hosting/main\"\n}, {\n  name: \"Notifications\",\n  arg: \"notifications\",\n  consolePath: \"/notification\"\n}, {\n  name: \"Project Dashboard\",\n  arg: \"dashboard\",\n  consolePath: \"/overview\"\n}, {\n  name: \"Project Settings\",\n  arg: \"settings\",\n  consolePath: \"/settings/general\"\n}, {\n  name: \"Remote Config: Conditions\",\n  arg: \"config:conditions\",\n  consolePath: \"/config/conditions\"\n}, {\n  name: \"Remote Config\",\n  arg: \"config\",\n  consolePath: \"/config\"\n}, {\n  name: \"Storage: Files\",\n  arg: \"storage\",\n  consolePath: \"/storage/files\"\n}, {\n  name: \"Storage: Rules\",\n  arg: \"storage:rules\",\n  consolePath: \"/storage/rules\"\n}, {\n  name: \"Test Lab\",\n  arg: \"testlab\",\n  consolePath: \"/testlab/histories/\"\n}];\n\nconst CHOICES = _.map(LINKS, \"name\");\n\nexports.default = new command_1.Command(\"open [link]\").description(\"quickly open a browser to relevant project resources\").before(requirePermissions_1.requirePermissions).before(requireDatabaseInstance_1.requireDatabaseInstance).action(async (linkName, options) => {\n  let link = _.find(LINKS, {\n    arg: linkName\n  });\n\n  if (linkName && !link) {\n    throw new error_1.FirebaseError(\"Unrecognized link name. Valid links are:\\n\\n\" + _.map(LINKS, \"arg\").join(\"\\n\"));\n  }\n\n  if (!link) {\n    const name = await prompt_1.promptOnce({\n      type: \"list\",\n      message: \"What link would you like to open?\",\n      choices: CHOICES\n    });\n    link = _.find(LINKS, {\n      name\n    });\n  }\n\n  if (!link) {\n    throw new error_1.FirebaseError(\"Unrecognized link name. Valid links are:\\n\\n\" + _.map(LINKS, \"arg\").join(\"\\n\"));\n  }\n\n  let url;\n\n  if (link.consolePath) {\n    url = utils.consoleUrl(options.project, link.consolePath);\n  } else if (link.url) {\n    url = link.url;\n  } else if (link.arg === \"hosting:site\") {\n    url = utils.addSubdomain(api.hostingOrigin, options.instance);\n  } else if (link.arg === \"functions:log\") {\n    url = `https://console.developers.google.com/logs/viewer?resource=cloudfunctions.googleapis.com&project=${options.project}`;\n  } else {\n    throw new error_1.FirebaseError(`Unable to determine URL for link: ${link}`);\n  }\n\n  if (link.arg !== linkName) {\n    logger_1.logger.info(`${clc.bold.cyan(\"Tip:\")} You can also run ${clc.bold.underline(`firebase open ${link.arg}`)}`);\n    logger_1.logger.info();\n  }\n\n  logger_1.logger.info(`Opening ${clc.bold(link.name)} link in your default browser:`);\n  logger_1.logger.info(clc.bold.underline(url));\n  open(url);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/open.js"],"names":["Object","defineProperty","exports","value","_","require","clc","open","error_1","api","command_1","logger_1","prompt_1","requirePermissions_1","requireDatabaseInstance_1","utils","LINKS","name","arg","consolePath","url","CHOICES","map","default","Command","description","before","requirePermissions","requireDatabaseInstance","action","linkName","options","link","find","FirebaseError","join","promptOnce","type","message","choices","consoleUrl","project","addSubdomain","hostingOrigin","instance","logger","info","bold","cyan","underline"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst open = require(\"open\");\nconst error_1 = require(\"../error\");\nconst api = require(\"../api\");\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst prompt_1 = require(\"../prompt\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst utils = require(\"../utils\");\nconst LINKS = [\n    { name: \"Analytics\", arg: \"analytics\", consolePath: \"/analytics\" },\n    { name: \"Authentication: Providers\", arg: \"auth\", consolePath: \"/authentication/providers\" },\n    { name: \"Authentication: Users\", arg: \"auth:users\", consolePath: \"/authentication/users\" },\n    { name: \"Crash Reporting\", arg: \"crash\", consolePath: \"/monitoring\" },\n    { name: \"Database: Data\", arg: \"database\", consolePath: \"/database/data\" },\n    { name: \"Database: Rules\", arg: \"database:rules\", consolePath: \"/database/rules\" },\n    { name: \"Docs\", arg: \"docs\", url: \"https://firebase.google.com/docs\" },\n    { name: \"Dynamic Links\", arg: \"links\", consolePath: \"/durablelinks\" },\n    { name: \"Firestore: Data\", arg: \"firestore\", consolePath: \"/firestore/data\" },\n    { name: \"Firestore: Rules\", arg: \"firestore:rules\", consolePath: \"/firestore/rules\" },\n    { name: \"Firestore: Indexes\", arg: \"firestore:indexes\", consolePath: \"/firestore/indexes\" },\n    { name: \"Firestore: Usage\", arg: \"firestore:usage\", consolePath: \"/firestore/usage\" },\n    { name: \"Functions\", arg: \"functions\", consolePath: \"/functions/list\" },\n    { name: \"Functions Log\", arg: \"functions:log\" },\n    { name: \"Hosting: Deployed Site\", arg: \"hosting:site\" },\n    { name: \"Hosting\", arg: \"hosting\", consolePath: \"/hosting/main\" },\n    { name: \"Notifications\", arg: \"notifications\", consolePath: \"/notification\" },\n    { name: \"Project Dashboard\", arg: \"dashboard\", consolePath: \"/overview\" },\n    { name: \"Project Settings\", arg: \"settings\", consolePath: \"/settings/general\" },\n    {\n        name: \"Remote Config: Conditions\",\n        arg: \"config:conditions\",\n        consolePath: \"/config/conditions\",\n    },\n    { name: \"Remote Config\", arg: \"config\", consolePath: \"/config\" },\n    { name: \"Storage: Files\", arg: \"storage\", consolePath: \"/storage/files\" },\n    { name: \"Storage: Rules\", arg: \"storage:rules\", consolePath: \"/storage/rules\" },\n    { name: \"Test Lab\", arg: \"testlab\", consolePath: \"/testlab/histories/\" },\n];\nconst CHOICES = _.map(LINKS, \"name\");\nexports.default = new command_1.Command(\"open [link]\")\n    .description(\"quickly open a browser to relevant project resources\")\n    .before(requirePermissions_1.requirePermissions)\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .action(async (linkName, options) => {\n    let link = _.find(LINKS, { arg: linkName });\n    if (linkName && !link) {\n        throw new error_1.FirebaseError(\"Unrecognized link name. Valid links are:\\n\\n\" + _.map(LINKS, \"arg\").join(\"\\n\"));\n    }\n    if (!link) {\n        const name = await prompt_1.promptOnce({\n            type: \"list\",\n            message: \"What link would you like to open?\",\n            choices: CHOICES,\n        });\n        link = _.find(LINKS, { name });\n    }\n    if (!link) {\n        throw new error_1.FirebaseError(\"Unrecognized link name. Valid links are:\\n\\n\" + _.map(LINKS, \"arg\").join(\"\\n\"));\n    }\n    let url;\n    if (link.consolePath) {\n        url = utils.consoleUrl(options.project, link.consolePath);\n    }\n    else if (link.url) {\n        url = link.url;\n    }\n    else if (link.arg === \"hosting:site\") {\n        url = utils.addSubdomain(api.hostingOrigin, options.instance);\n    }\n    else if (link.arg === \"functions:log\") {\n        url = `https://console.developers.google.com/logs/viewer?resource=cloudfunctions.googleapis.com&project=${options.project}`;\n    }\n    else {\n        throw new error_1.FirebaseError(`Unable to determine URL for link: ${link}`);\n    }\n    if (link.arg !== linkName) {\n        logger_1.logger.info(`${clc.bold.cyan(\"Tip:\")} You can also run ${clc.bold.underline(`firebase open ${link.arg}`)}`);\n        logger_1.logger.info();\n    }\n    logger_1.logger.info(`Opening ${clc.bold(link.name)} link in your default browser:`);\n    logger_1.logger.info(clc.bold.underline(url));\n    open(url);\n});\n"]},"metadata":{},"sourceType":"script"}