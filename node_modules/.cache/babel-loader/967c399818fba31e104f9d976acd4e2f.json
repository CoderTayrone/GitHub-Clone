{"ast":null,"code":"/**\n * Flatten an array indefinitely.\n */\nexport function flatten(array) {\n  var result = [];\n  $flatten(array, result);\n  return result;\n}\n/**\n * Internal flatten function recursively passes `result`.\n */\n\nfunction $flatten(array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      $flatten(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAcA;;AAEG;AACH,OAAM,SAAU,OAAV,CAA4C,KAA5C,EAAoD;AACxD,MAAM,MAAM,GAAiB,EAA7B;AACA,EAAA,QAAQ,CAAI,KAAJ,EAAW,MAAX,CAAR;AACA,SAAO,MAAP;AACD;AAED;;AAEG;;AACH,SAAS,QAAT,CACE,KADF,EAEE,MAFF,EAEsB;AAEpB,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,QAAM,KAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;;AAEA,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,MAAA,QAAQ,CAAC,KAAD,EAAe,MAAf,CAAR;AACD,KAFD,MAEO;AACL,MAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACD;AACF;AACF","sourcesContent":["/**\n * Pick the value from an array.\n */\nexport type PickValue<T> = T extends ReadonlyArray<any>\n  ? {\n      [K in Extract<keyof T, number>]: PickValue<T[K]>;\n    }[number]\n  : T;\n\n/**\n * Flatten an `ArrayLike` object in TypeScript.\n */\nexport type FlatArray<T extends ArrayLike<any>> = Array<PickValue<T[number]>>;\n\n/**\n * Flatten an array indefinitely.\n */\nexport function flatten<T extends ArrayLike<any>>(array: T): FlatArray<T> {\n  const result: FlatArray<T> = [];\n  $flatten<T>(array, result);\n  return result;\n}\n\n/**\n * Internal flatten function recursively passes `result`.\n */\nfunction $flatten<T extends ArrayLike<any>>(\n  array: T,\n  result: FlatArray<T>\n): void {\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n\n    if (Array.isArray(value)) {\n      $flatten(value as any, result);\n    } else {\n      result.push(value);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}