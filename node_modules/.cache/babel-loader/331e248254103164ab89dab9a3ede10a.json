{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmulatorServer = void 0;\n\nconst registry_1 = require(\"./registry\");\n\nconst portUtils = require(\"./portUtils\");\n\nconst error_1 = require(\"../error\");\n\nclass EmulatorServer {\n  constructor(instance) {\n    this.instance = instance;\n  }\n\n  async start() {\n    const {\n      port,\n      host\n    } = this.instance.getInfo();\n    const portOpen = await portUtils.checkPortOpen(port, host);\n\n    if (!portOpen) {\n      throw new error_1.FirebaseError(`Port ${port} is not open on ${host}, could not start ${this.instance.getName()} emulator.`);\n    }\n\n    await registry_1.EmulatorRegistry.start(this.instance);\n  }\n\n  async connect() {\n    await this.instance.connect();\n  }\n\n  async stop() {\n    await registry_1.EmulatorRegistry.stop(this.instance.getName());\n  }\n\n  get() {\n    return this.instance;\n  }\n\n}\n\nexports.EmulatorServer = EmulatorServer;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/emulatorServer.js"],"names":["Object","defineProperty","exports","value","EmulatorServer","registry_1","require","portUtils","error_1","constructor","instance","start","port","host","getInfo","portOpen","checkPortOpen","FirebaseError","getName","EmulatorRegistry","connect","stop","get"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMF,cAAN,CAAqB;AACjBK,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACU,QAALC,KAAK,GAAG;AACV,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiB,KAAKH,QAAL,CAAcI,OAAd,EAAvB;AACA,UAAMC,QAAQ,GAAG,MAAMR,SAAS,CAACS,aAAV,CAAwBJ,IAAxB,EAA8BC,IAA9B,CAAvB;;AACA,QAAI,CAACE,QAAL,EAAe;AACX,YAAM,IAAIP,OAAO,CAACS,aAAZ,CAA2B,QAAOL,IAAK,mBAAkBC,IAAK,qBAAoB,KAAKH,QAAL,CAAcQ,OAAd,EAAwB,YAA1G,CAAN;AACH;;AACD,UAAMb,UAAU,CAACc,gBAAX,CAA4BR,KAA5B,CAAkC,KAAKD,QAAvC,CAAN;AACH;;AACY,QAAPU,OAAO,GAAG;AACZ,UAAM,KAAKV,QAAL,CAAcU,OAAd,EAAN;AACH;;AACS,QAAJC,IAAI,GAAG;AACT,UAAMhB,UAAU,CAACc,gBAAX,CAA4BE,IAA5B,CAAiC,KAAKX,QAAL,CAAcQ,OAAd,EAAjC,CAAN;AACH;;AACDI,EAAAA,GAAG,GAAG;AACF,WAAO,KAAKZ,QAAZ;AACH;;AApBgB;;AAsBrBR,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EmulatorServer = void 0;\nconst registry_1 = require(\"./registry\");\nconst portUtils = require(\"./portUtils\");\nconst error_1 = require(\"../error\");\nclass EmulatorServer {\n    constructor(instance) {\n        this.instance = instance;\n    }\n    async start() {\n        const { port, host } = this.instance.getInfo();\n        const portOpen = await portUtils.checkPortOpen(port, host);\n        if (!portOpen) {\n            throw new error_1.FirebaseError(`Port ${port} is not open on ${host}, could not start ${this.instance.getName()} emulator.`);\n        }\n        await registry_1.EmulatorRegistry.start(this.instance);\n    }\n    async connect() {\n        await this.instance.connect();\n    }\n    async stop() {\n        await registry_1.EmulatorRegistry.stop(this.instance.getName());\n    }\n    get() {\n        return this.instance;\n    }\n}\nexports.EmulatorServer = EmulatorServer;\n"]},"metadata":{},"sourceType":"script"}