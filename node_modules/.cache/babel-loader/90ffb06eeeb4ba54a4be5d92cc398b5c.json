{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst Table = require(\"cli-table\");\n\nconst api_1 = require(\"../hosting/api\");\n\nconst command_1 = require(\"../command\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireConfig = require(\"../requireConfig\");\n\nconst utils_1 = require(\"../utils\");\n\nconst requireHostingSite_1 = require(\"../requireHostingSite\");\n\nconst TABLE_HEAD = [\"Channel ID\", \"Last Release Time\", \"URL\", \"Expire Time\"];\nexports.default = new command_1.Command(\"hosting:channel:list\").description(\"list all Firebase Hosting channels for your project\").option(\"--site <siteName>\", \"list channels for the specified site\").before(requireConfig).before(requirePermissions_1.requirePermissions, [\"firebasehosting.sites.update\"]).before(requireHostingSite_1.requireHostingSite).action(async options => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const siteId = options.site;\n  const channels = await api_1.listChannels(projectId, siteId);\n  const table = new Table({\n    head: TABLE_HEAD,\n    style: {\n      head: [\"green\"]\n    }\n  });\n\n  for (const channel of channels) {\n    const channelId = channel.name.split(\"/\").pop();\n    table.push([channelId, utils_1.datetimeString(new Date(channel.updateTime)), channel.url, channel.expireTime ? utils_1.datetimeString(new Date(channel.expireTime)) : \"never\"]);\n  }\n\n  logger_1.logger.info();\n  logger_1.logger.info(`Channels for site ${cli_color_1.bold(siteId)}`);\n  logger_1.logger.info();\n  logger_1.logger.info(table.toString());\n  return {\n    channels\n  };\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/hosting-channel-list.js"],"names":["Object","defineProperty","exports","value","cli_color_1","require","Table","api_1","command_1","requirePermissions_1","projectUtils_1","logger_1","requireConfig","utils_1","requireHostingSite_1","TABLE_HEAD","default","Command","description","option","before","requirePermissions","requireHostingSite","action","options","projectId","needProjectId","siteId","site","channels","listChannels","table","head","style","channel","channelId","name","split","pop","push","datetimeString","Date","updateTime","url","expireTime","logger","info","bold","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,WAAD,CAArB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAArB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMO,aAAa,GAAGP,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMS,oBAAoB,GAAGT,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMU,UAAU,GAAG,CAAC,YAAD,EAAe,mBAAf,EAAoC,KAApC,EAA2C,aAA3C,CAAnB;AACAb,OAAO,CAACc,OAAR,GAAkB,IAAIR,SAAS,CAACS,OAAd,CAAsB,sBAAtB,EACbC,WADa,CACD,qDADC,EAEbC,MAFa,CAEN,mBAFM,EAEe,sCAFf,EAGbC,MAHa,CAGNR,aAHM,EAIbQ,MAJa,CAINX,oBAAoB,CAACY,kBAJf,EAImC,CAAC,8BAAD,CAJnC,EAKbD,MALa,CAKNN,oBAAoB,CAACQ,kBALf,EAMbC,MANa,CAMN,MAAOC,OAAP,IAAmB;AAC3B,QAAMC,SAAS,GAAGf,cAAc,CAACgB,aAAf,CAA6BF,OAA7B,CAAlB;AACA,QAAMG,MAAM,GAAGH,OAAO,CAACI,IAAvB;AACA,QAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,YAAN,CAAmBL,SAAnB,EAA8BE,MAA9B,CAAvB;AACA,QAAMI,KAAK,GAAG,IAAIzB,KAAJ,CAAU;AAAE0B,IAAAA,IAAI,EAAEjB,UAAR;AAAoBkB,IAAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAE,CAAC,OAAD;AAAR;AAA3B,GAAV,CAAd;;AACA,OAAK,MAAME,OAAX,IAAsBL,QAAtB,EAAgC;AAC5B,UAAMM,SAAS,GAAGD,OAAO,CAACE,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,EAAlB;AACAP,IAAAA,KAAK,CAACQ,IAAN,CAAW,CACPJ,SADO,EAEPtB,OAAO,CAAC2B,cAAR,CAAuB,IAAIC,IAAJ,CAASP,OAAO,CAACQ,UAAjB,CAAvB,CAFO,EAGPR,OAAO,CAACS,GAHD,EAIPT,OAAO,CAACU,UAAR,GAAqB/B,OAAO,CAAC2B,cAAR,CAAuB,IAAIC,IAAJ,CAASP,OAAO,CAACU,UAAjB,CAAvB,CAArB,GAA4E,OAJrE,CAAX;AAMH;;AACDjC,EAAAA,QAAQ,CAACkC,MAAT,CAAgBC,IAAhB;AACAnC,EAAAA,QAAQ,CAACkC,MAAT,CAAgBC,IAAhB,CAAsB,qBAAoB1C,WAAW,CAAC2C,IAAZ,CAAiBpB,MAAjB,CAAyB,EAAnE;AACAhB,EAAAA,QAAQ,CAACkC,MAAT,CAAgBC,IAAhB;AACAnC,EAAAA,QAAQ,CAACkC,MAAT,CAAgBC,IAAhB,CAAqBf,KAAK,CAACiB,QAAN,EAArB;AACA,SAAO;AAAEnB,IAAAA;AAAF,GAAP;AACH,CAzBiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cli_color_1 = require(\"cli-color\");\nconst Table = require(\"cli-table\");\nconst api_1 = require(\"../hosting/api\");\nconst command_1 = require(\"../command\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst logger_1 = require(\"../logger\");\nconst requireConfig = require(\"../requireConfig\");\nconst utils_1 = require(\"../utils\");\nconst requireHostingSite_1 = require(\"../requireHostingSite\");\nconst TABLE_HEAD = [\"Channel ID\", \"Last Release Time\", \"URL\", \"Expire Time\"];\nexports.default = new command_1.Command(\"hosting:channel:list\")\n    .description(\"list all Firebase Hosting channels for your project\")\n    .option(\"--site <siteName>\", \"list channels for the specified site\")\n    .before(requireConfig)\n    .before(requirePermissions_1.requirePermissions, [\"firebasehosting.sites.update\"])\n    .before(requireHostingSite_1.requireHostingSite)\n    .action(async (options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const siteId = options.site;\n    const channels = await api_1.listChannels(projectId, siteId);\n    const table = new Table({ head: TABLE_HEAD, style: { head: [\"green\"] } });\n    for (const channel of channels) {\n        const channelId = channel.name.split(\"/\").pop();\n        table.push([\n            channelId,\n            utils_1.datetimeString(new Date(channel.updateTime)),\n            channel.url,\n            channel.expireTime ? utils_1.datetimeString(new Date(channel.expireTime)) : \"never\",\n        ]);\n    }\n    logger_1.logger.info();\n    logger_1.logger.info(`Channels for site ${cli_color_1.bold(siteId)}`);\n    logger_1.logger.info();\n    logger_1.logger.info(table.toString());\n    return { channels };\n});\n"]},"metadata":{},"sourceType":"script"}