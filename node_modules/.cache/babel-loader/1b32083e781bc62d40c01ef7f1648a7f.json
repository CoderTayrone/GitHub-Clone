{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseChangelog = exports.getLocalChangelog = exports.breakingChangesInUpdate = exports.displayReleaseNotes = exports.getReleaseNotesForUpdate = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst path = require(\"path\");\n\nconst semver = require(\"semver\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst Table = require(\"cli-table\");\n\nconst extensionsApi_1 = require(\"./extensionsApi\");\n\nconst localHelper_1 = require(\"./localHelper\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils_1 = require(\"../utils\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\nconst EXTENSIONS_CHANGELOG = \"CHANGELOG.md\";\nconst VERSION_LINE_REGEX = /##.*(\\d+\\.\\d+\\.\\d+).*/;\n\nasync function getReleaseNotesForUpdate(args) {\n  const releaseNotes = {};\n  const filter = `id<=\"${args.toVersion}\" AND id>\"${args.fromVersion}\"`;\n  const extensionVersions = await extensionsApi_1.listExtensionVersions(args.extensionRef, filter);\n  extensionVersions.sort((ev1, ev2) => {\n    return -semver.compare(ev1.spec.version, ev2.spec.version);\n  });\n\n  for (const extensionVersion of extensionVersions) {\n    if (extensionVersion.releaseNotes) {\n      const version = extensionsApi_1.parseRef(extensionVersion.ref).version;\n      releaseNotes[version] = extensionVersion.releaseNotes;\n    }\n  }\n\n  return releaseNotes;\n}\n\nexports.getReleaseNotesForUpdate = getReleaseNotesForUpdate;\n\nfunction displayReleaseNotes(releaseNotes, fromVersion) {\n  const versions = [fromVersion].concat(Object.keys(releaseNotes));\n  const breakingVersions = breakingChangesInUpdate(versions);\n  const table = new Table({\n    head: [\"Version\", \"What's New\"],\n    style: {\n      head: [\"yellow\", \"bold\"]\n    }\n  });\n\n  for (const [version, note] of Object.entries(releaseNotes)) {\n    if (breakingVersions.includes(version)) {\n      table.push([clc.yellow.bold(version), marked(note)]);\n    } else {\n      table.push([version, marked(note)]);\n    }\n  }\n\n  logger_1.logger.info(clc.bold(\"What's new with this update:\"));\n\n  if (breakingVersions.length) {\n    utils_1.logLabeledWarning(\"warning\", \"This is a major version update, which means it may contain breaking changes.\" + \" Read the release notes carefully before continuing with this update.\");\n  }\n\n  logger_1.logger.info(table.toString());\n}\n\nexports.displayReleaseNotes = displayReleaseNotes;\n\nfunction breakingChangesInUpdate(versionsInUpdate) {\n  const breakingVersions = [];\n  const semvers = versionsInUpdate.map(v => semver.parse(v)).sort(semver.compare);\n\n  for (let i = 1; i < semvers.length; i++) {\n    const hasMajorBump = semvers[i - 1].major < semvers[i].major;\n    const hasMinorBumpInPreview = semvers[i - 1].major == 0 && semvers[i].major == 0 && semvers[i - 1].minor < semvers[i].minor;\n\n    if (hasMajorBump || hasMinorBumpInPreview) {\n      breakingVersions.push(semvers[i].raw);\n    }\n  }\n\n  return breakingVersions;\n}\n\nexports.breakingChangesInUpdate = breakingChangesInUpdate;\n\nfunction getLocalChangelog(directory) {\n  const rawChangelog = localHelper_1.readFile(path.resolve(directory, EXTENSIONS_CHANGELOG));\n  return parseChangelog(rawChangelog);\n}\n\nexports.getLocalChangelog = getLocalChangelog;\n\nfunction parseChangelog(rawChangelog) {\n  const changelog = {};\n  let currentVersion = \"\";\n\n  for (const line of rawChangelog.split(\"\\n\")) {\n    const matches = line.match(VERSION_LINE_REGEX);\n\n    if (matches) {\n      currentVersion = matches[1];\n    } else if (currentVersion) {\n      if (!changelog[currentVersion]) {\n        changelog[currentVersion] = line;\n      } else {\n        changelog[currentVersion] += `\\n${line}`;\n      }\n    }\n  }\n\n  return changelog;\n}\n\nexports.parseChangelog = parseChangelog;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/changelog.js"],"names":["Object","defineProperty","exports","value","parseChangelog","getLocalChangelog","breakingChangesInUpdate","displayReleaseNotes","getReleaseNotesForUpdate","clc","require","marked","path","semver","TerminalRenderer","Table","extensionsApi_1","localHelper_1","logger_1","utils_1","setOptions","renderer","EXTENSIONS_CHANGELOG","VERSION_LINE_REGEX","args","releaseNotes","filter","toVersion","fromVersion","extensionVersions","listExtensionVersions","extensionRef","sort","ev1","ev2","compare","spec","version","extensionVersion","parseRef","ref","versions","concat","keys","breakingVersions","table","head","style","note","entries","includes","push","yellow","bold","logger","info","length","logLabeledWarning","toString","versionsInUpdate","semvers","map","v","parse","i","hasMajorBump","major","hasMinorBumpInPreview","minor","raw","directory","rawChangelog","readFile","resolve","changelog","currentVersion","line","split","matches","match"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseChangelog = exports.getLocalChangelog = exports.breakingChangesInUpdate = exports.displayReleaseNotes = exports.getReleaseNotesForUpdate = void 0;\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst path = require(\"path\");\nconst semver = require(\"semver\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst Table = require(\"cli-table\");\nconst extensionsApi_1 = require(\"./extensionsApi\");\nconst localHelper_1 = require(\"./localHelper\");\nconst logger_1 = require(\"../logger\");\nconst utils_1 = require(\"../utils\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nconst EXTENSIONS_CHANGELOG = \"CHANGELOG.md\";\nconst VERSION_LINE_REGEX = /##.*(\\d+\\.\\d+\\.\\d+).*/;\nasync function getReleaseNotesForUpdate(args) {\n    const releaseNotes = {};\n    const filter = `id<=\"${args.toVersion}\" AND id>\"${args.fromVersion}\"`;\n    const extensionVersions = await extensionsApi_1.listExtensionVersions(args.extensionRef, filter);\n    extensionVersions.sort((ev1, ev2) => {\n        return -semver.compare(ev1.spec.version, ev2.spec.version);\n    });\n    for (const extensionVersion of extensionVersions) {\n        if (extensionVersion.releaseNotes) {\n            const version = extensionsApi_1.parseRef(extensionVersion.ref).version;\n            releaseNotes[version] = extensionVersion.releaseNotes;\n        }\n    }\n    return releaseNotes;\n}\nexports.getReleaseNotesForUpdate = getReleaseNotesForUpdate;\nfunction displayReleaseNotes(releaseNotes, fromVersion) {\n    const versions = [fromVersion].concat(Object.keys(releaseNotes));\n    const breakingVersions = breakingChangesInUpdate(versions);\n    const table = new Table({ head: [\"Version\", \"What's New\"], style: { head: [\"yellow\", \"bold\"] } });\n    for (const [version, note] of Object.entries(releaseNotes)) {\n        if (breakingVersions.includes(version)) {\n            table.push([clc.yellow.bold(version), marked(note)]);\n        }\n        else {\n            table.push([version, marked(note)]);\n        }\n    }\n    logger_1.logger.info(clc.bold(\"What's new with this update:\"));\n    if (breakingVersions.length) {\n        utils_1.logLabeledWarning(\"warning\", \"This is a major version update, which means it may contain breaking changes.\" +\n            \" Read the release notes carefully before continuing with this update.\");\n    }\n    logger_1.logger.info(table.toString());\n}\nexports.displayReleaseNotes = displayReleaseNotes;\nfunction breakingChangesInUpdate(versionsInUpdate) {\n    const breakingVersions = [];\n    const semvers = versionsInUpdate.map((v) => semver.parse(v)).sort(semver.compare);\n    for (let i = 1; i < semvers.length; i++) {\n        const hasMajorBump = semvers[i - 1].major < semvers[i].major;\n        const hasMinorBumpInPreview = semvers[i - 1].major == 0 && semvers[i].major == 0 && semvers[i - 1].minor < semvers[i].minor;\n        if (hasMajorBump || hasMinorBumpInPreview) {\n            breakingVersions.push(semvers[i].raw);\n        }\n    }\n    return breakingVersions;\n}\nexports.breakingChangesInUpdate = breakingChangesInUpdate;\nfunction getLocalChangelog(directory) {\n    const rawChangelog = localHelper_1.readFile(path.resolve(directory, EXTENSIONS_CHANGELOG));\n    return parseChangelog(rawChangelog);\n}\nexports.getLocalChangelog = getLocalChangelog;\nfunction parseChangelog(rawChangelog) {\n    const changelog = {};\n    let currentVersion = \"\";\n    for (const line of rawChangelog.split(\"\\n\")) {\n        const matches = line.match(VERSION_LINE_REGEX);\n        if (matches) {\n            currentVersion = matches[1];\n        }\n        else if (currentVersion) {\n            if (!changelog[currentVersion]) {\n                changelog[currentVersion] = line;\n            }\n            else {\n                changelog[currentVersion] += `\\n${line}`;\n            }\n        }\n    }\n    return changelog;\n}\nexports.parseChangelog = parseChangelog;\n"]},"metadata":{},"sourceType":"script"}