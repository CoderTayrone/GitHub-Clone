{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addServiceAccountToRoles = exports.setIamPolicy = exports.getIamPolicy = exports.firebaseRoles = void 0;\n\nconst lodash_1 = require(\"lodash\");\n\nconst api = require(\"../api\");\n\nconst iam_1 = require(\"./iam\");\n\nconst API_VERSION = \"v1\";\nexports.firebaseRoles = {\n  apiKeysViewer: \"roles/serviceusage.apiKeysViewer\",\n  authAdmin: \"roles/firebaseauth.admin\",\n  hostingAdmin: \"roles/firebasehosting.admin\",\n  runViewer: \"roles/run.viewer\"\n};\n\nasync function getIamPolicy(projectId) {\n  const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}:getIamPolicy`, {\n    auth: true,\n    origin: api.resourceManagerOrigin\n  });\n  return response.body;\n}\n\nexports.getIamPolicy = getIamPolicy;\n\nasync function setIamPolicy(projectId, newPolicy, updateMask) {\n  const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}:setIamPolicy`, {\n    auth: true,\n    origin: api.resourceManagerOrigin,\n    data: {\n      policy: newPolicy,\n      updateMask: updateMask\n    }\n  });\n  return response.body;\n}\n\nexports.setIamPolicy = setIamPolicy;\n\nasync function addServiceAccountToRoles(projectId, serviceAccountName, roles) {\n  const [{\n    name: fullServiceAccountName\n  }, projectPolicy] = await Promise.all([iam_1.getServiceAccount(projectId, serviceAccountName), getIamPolicy(projectId)]);\n  const newMemberName = `serviceAccount:${fullServiceAccountName.split(\"/\").pop()}`;\n  roles.forEach(roleName => {\n    let bindingIndex = lodash_1.findIndex(projectPolicy.bindings, binding => binding.role === roleName);\n\n    if (bindingIndex === -1) {\n      bindingIndex = projectPolicy.bindings.push({\n        role: roleName,\n        members: []\n      }) - 1;\n    }\n\n    const binding = projectPolicy.bindings[bindingIndex];\n\n    if (!binding.members.includes(newMemberName)) {\n      binding.members.push(newMemberName);\n    }\n  });\n  return setIamPolicy(projectId, projectPolicy, \"bindings\");\n}\n\nexports.addServiceAccountToRoles = addServiceAccountToRoles;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/gcp/resourceManager.js"],"names":["Object","defineProperty","exports","value","addServiceAccountToRoles","setIamPolicy","getIamPolicy","firebaseRoles","lodash_1","require","api","iam_1","API_VERSION","apiKeysViewer","authAdmin","hostingAdmin","runViewer","projectId","response","request","auth","origin","resourceManagerOrigin","body","newPolicy","updateMask","data","policy","serviceAccountName","roles","name","fullServiceAccountName","projectPolicy","Promise","all","getServiceAccount","newMemberName","split","pop","forEach","roleName","bindingIndex","findIndex","bindings","binding","role","push","members","includes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addServiceAccountToRoles = exports.setIamPolicy = exports.getIamPolicy = exports.firebaseRoles = void 0;\nconst lodash_1 = require(\"lodash\");\nconst api = require(\"../api\");\nconst iam_1 = require(\"./iam\");\nconst API_VERSION = \"v1\";\nexports.firebaseRoles = {\n    apiKeysViewer: \"roles/serviceusage.apiKeysViewer\",\n    authAdmin: \"roles/firebaseauth.admin\",\n    hostingAdmin: \"roles/firebasehosting.admin\",\n    runViewer: \"roles/run.viewer\",\n};\nasync function getIamPolicy(projectId) {\n    const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}:getIamPolicy`, {\n        auth: true,\n        origin: api.resourceManagerOrigin,\n    });\n    return response.body;\n}\nexports.getIamPolicy = getIamPolicy;\nasync function setIamPolicy(projectId, newPolicy, updateMask) {\n    const response = await api.request(\"POST\", `/${API_VERSION}/projects/${projectId}:setIamPolicy`, {\n        auth: true,\n        origin: api.resourceManagerOrigin,\n        data: {\n            policy: newPolicy,\n            updateMask: updateMask,\n        },\n    });\n    return response.body;\n}\nexports.setIamPolicy = setIamPolicy;\nasync function addServiceAccountToRoles(projectId, serviceAccountName, roles) {\n    const [{ name: fullServiceAccountName }, projectPolicy] = await Promise.all([\n        iam_1.getServiceAccount(projectId, serviceAccountName),\n        getIamPolicy(projectId),\n    ]);\n    const newMemberName = `serviceAccount:${fullServiceAccountName.split(\"/\").pop()}`;\n    roles.forEach((roleName) => {\n        let bindingIndex = lodash_1.findIndex(projectPolicy.bindings, (binding) => binding.role === roleName);\n        if (bindingIndex === -1) {\n            bindingIndex =\n                projectPolicy.bindings.push({\n                    role: roleName,\n                    members: [],\n                }) - 1;\n        }\n        const binding = projectPolicy.bindings[bindingIndex];\n        if (!binding.members.includes(newMemberName)) {\n            binding.members.push(newMemberName);\n        }\n    });\n    return setIamPolicy(projectId, projectPolicy, \"bindings\");\n}\nexports.addServiceAccountToRoles = addServiceAccountToRoles;\n"]},"metadata":{},"sourceType":"script"}