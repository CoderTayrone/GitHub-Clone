{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PubsubEmulator = void 0;\n\nconst uuid = require(\"uuid\");\n\nconst pubsub_1 = require(\"@google-cloud/pubsub\");\n\nconst api = require(\"../api\");\n\nconst downloadableEmulators = require(\"./downloadableEmulators\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"../error\");\n\nconst registry_1 = require(\"./registry\");\n\nclass PubsubEmulator {\n  constructor(args) {\n    this.args = args;\n    this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.PUBSUB);\n    const {\n      host,\n      port\n    } = this.getInfo();\n    this.pubsub = new pubsub_1.PubSub({\n      apiEndpoint: `${host}:${port}`,\n      projectId: this.args.projectId\n    });\n    this.triggers = new Map();\n    this.subscriptions = new Map();\n  }\n\n  async start() {\n    return downloadableEmulators.start(types_1.Emulators.PUBSUB, this.args);\n  }\n\n  connect() {\n    return Promise.resolve();\n  }\n\n  async stop() {\n    await downloadableEmulators.stop(types_1.Emulators.PUBSUB);\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.PUBSUB);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.PUBSUB);\n    return {\n      name: this.getName(),\n      host,\n      port,\n      pid: downloadableEmulators.getPID(types_1.Emulators.PUBSUB)\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.PUBSUB;\n  }\n\n  async addTrigger(topicName, trigger) {\n    this.logger.logLabeled(\"DEBUG\", \"pubsub\", `addTrigger(${topicName}, ${trigger})`);\n    const topicTriggers = this.triggers.get(topicName) || new Set();\n\n    if (topicTriggers.has(topicName) && this.subscriptions.has(topicName)) {\n      this.logger.logLabeled(\"DEBUG\", \"pubsub\", \"Trigger already exists\");\n      return;\n    }\n\n    const topic = this.pubsub.topic(topicName);\n\n    try {\n      this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating topic: ${topicName}`);\n      await topic.create();\n    } catch (e) {\n      if (e && e.code === 6) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Topic ${topicName} exists`);\n      } else {\n        throw new error_1.FirebaseError(`Could not create topic ${topicName}`, {\n          original: e\n        });\n      }\n    }\n\n    const subName = `emulator-sub-${topicName}`;\n    let sub;\n\n    try {\n      this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating sub for topic: ${topicName}`);\n      [sub] = await topic.createSubscription(subName);\n    } catch (e) {\n      if (e && e.code === 6) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Sub for ${topicName} exists`);\n        sub = topic.subscription(`emulator-sub-${topicName}`);\n      } else {\n        throw new error_1.FirebaseError(`Could not create sub ${subName}`, {\n          original: e\n        });\n      }\n    }\n\n    sub.on(\"message\", message => {\n      this.onMessage(topicName, message);\n    });\n    topicTriggers.add(trigger);\n    this.triggers.set(topicName, topicTriggers);\n    this.subscriptions.set(topicName, sub);\n  }\n\n  async onMessage(topicName, message) {\n    this.logger.logLabeled(\"DEBUG\", \"pubsub\", `onMessage(${topicName}, ${message.id})`);\n    const topicTriggers = this.triggers.get(topicName);\n\n    if (!topicTriggers || topicTriggers.size === 0) {\n      throw new error_1.FirebaseError(`No trigger for topic: ${topicName}`);\n    }\n\n    const functionsEmu = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n\n    if (!functionsEmu) {\n      throw new error_1.FirebaseError(`Attempted to execute pubsub trigger for topic ${topicName} but could not find Functions emulator`);\n    }\n\n    this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Executing ${topicTriggers.size} matching triggers (${JSON.stringify(Array.from(topicTriggers))})`);\n    let remaining = topicTriggers.size;\n\n    for (const trigger of topicTriggers) {\n      const body = {\n        context: {\n          eventId: uuid.v4(),\n          resource: {\n            service: \"pubsub.googleapis.com\",\n            name: `projects/${this.args.projectId}/topics/${topicName}`\n          },\n          eventType: \"google.pubsub.topic.publish\",\n          timestamp: message.publishTime.toISOString()\n        },\n        data: {\n          data: message.data,\n          attributes: message.attributes\n        }\n      };\n\n      try {\n        await api.request(\"POST\", `/functions/projects/${this.args.projectId}/triggers/${trigger}`, {\n          origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(functionsEmu.getInfo())}`,\n          data: body\n        });\n      } catch (e) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", e);\n      }\n\n      remaining--;\n\n      if (remaining <= 0) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Acking message ${message.id}`);\n        message.ack();\n      }\n    }\n  }\n\n}\n\nexports.PubsubEmulator = PubsubEmulator;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/pubsubEmulator.js"],"names":["Object","defineProperty","exports","value","PubsubEmulator","uuid","require","pubsub_1","api","downloadableEmulators","emulatorLogger_1","types_1","constants_1","error_1","registry_1","constructor","args","logger","EmulatorLogger","forEmulator","Emulators","PUBSUB","host","port","getInfo","pubsub","PubSub","apiEndpoint","projectId","triggers","Map","subscriptions","start","connect","Promise","resolve","stop","Constants","getDefaultHost","getDefaultPort","name","getName","pid","getPID","addTrigger","topicName","trigger","logLabeled","topicTriggers","get","Set","has","topic","create","e","code","FirebaseError","original","subName","sub","createSubscription","subscription","on","message","onMessage","add","set","id","size","functionsEmu","EmulatorRegistry","FUNCTIONS","JSON","stringify","Array","from","remaining","body","context","eventId","v4","resource","service","eventType","timestamp","publishTime","toISOString","data","attributes","request","origin","getInfoHostString","ack"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PubsubEmulator = void 0;\nconst uuid = require(\"uuid\");\nconst pubsub_1 = require(\"@google-cloud/pubsub\");\nconst api = require(\"../api\");\nconst downloadableEmulators = require(\"./downloadableEmulators\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst types_1 = require(\"../emulator/types\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"../error\");\nconst registry_1 = require(\"./registry\");\nclass PubsubEmulator {\n    constructor(args) {\n        this.args = args;\n        this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.PUBSUB);\n        const { host, port } = this.getInfo();\n        this.pubsub = new pubsub_1.PubSub({\n            apiEndpoint: `${host}:${port}`,\n            projectId: this.args.projectId,\n        });\n        this.triggers = new Map();\n        this.subscriptions = new Map();\n    }\n    async start() {\n        return downloadableEmulators.start(types_1.Emulators.PUBSUB, this.args);\n    }\n    connect() {\n        return Promise.resolve();\n    }\n    async stop() {\n        await downloadableEmulators.stop(types_1.Emulators.PUBSUB);\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.PUBSUB);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.PUBSUB);\n        return {\n            name: this.getName(),\n            host,\n            port,\n            pid: downloadableEmulators.getPID(types_1.Emulators.PUBSUB),\n        };\n    }\n    getName() {\n        return types_1.Emulators.PUBSUB;\n    }\n    async addTrigger(topicName, trigger) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `addTrigger(${topicName}, ${trigger})`);\n        const topicTriggers = this.triggers.get(topicName) || new Set();\n        if (topicTriggers.has(topicName) && this.subscriptions.has(topicName)) {\n            this.logger.logLabeled(\"DEBUG\", \"pubsub\", \"Trigger already exists\");\n            return;\n        }\n        const topic = this.pubsub.topic(topicName);\n        try {\n            this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating topic: ${topicName}`);\n            await topic.create();\n        }\n        catch (e) {\n            if (e && e.code === 6) {\n                this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Topic ${topicName} exists`);\n            }\n            else {\n                throw new error_1.FirebaseError(`Could not create topic ${topicName}`, { original: e });\n            }\n        }\n        const subName = `emulator-sub-${topicName}`;\n        let sub;\n        try {\n            this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating sub for topic: ${topicName}`);\n            [sub] = await topic.createSubscription(subName);\n        }\n        catch (e) {\n            if (e && e.code === 6) {\n                this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Sub for ${topicName} exists`);\n                sub = topic.subscription(`emulator-sub-${topicName}`);\n            }\n            else {\n                throw new error_1.FirebaseError(`Could not create sub ${subName}`, { original: e });\n            }\n        }\n        sub.on(\"message\", (message) => {\n            this.onMessage(topicName, message);\n        });\n        topicTriggers.add(trigger);\n        this.triggers.set(topicName, topicTriggers);\n        this.subscriptions.set(topicName, sub);\n    }\n    async onMessage(topicName, message) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `onMessage(${topicName}, ${message.id})`);\n        const topicTriggers = this.triggers.get(topicName);\n        if (!topicTriggers || topicTriggers.size === 0) {\n            throw new error_1.FirebaseError(`No trigger for topic: ${topicName}`);\n        }\n        const functionsEmu = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n        if (!functionsEmu) {\n            throw new error_1.FirebaseError(`Attempted to execute pubsub trigger for topic ${topicName} but could not find Functions emulator`);\n        }\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Executing ${topicTriggers.size} matching triggers (${JSON.stringify(Array.from(topicTriggers))})`);\n        let remaining = topicTriggers.size;\n        for (const trigger of topicTriggers) {\n            const body = {\n                context: {\n                    eventId: uuid.v4(),\n                    resource: {\n                        service: \"pubsub.googleapis.com\",\n                        name: `projects/${this.args.projectId}/topics/${topicName}`,\n                    },\n                    eventType: \"google.pubsub.topic.publish\",\n                    timestamp: message.publishTime.toISOString(),\n                },\n                data: {\n                    data: message.data,\n                    attributes: message.attributes,\n                },\n            };\n            try {\n                await api.request(\"POST\", `/functions/projects/${this.args.projectId}/triggers/${trigger}`, {\n                    origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(functionsEmu.getInfo())}`,\n                    data: body,\n                });\n            }\n            catch (e) {\n                this.logger.logLabeled(\"DEBUG\", \"pubsub\", e);\n            }\n            remaining--;\n            if (remaining <= 0) {\n                this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Acking message ${message.id}`);\n                message.ack();\n            }\n        }\n    }\n}\nexports.PubsubEmulator = PubsubEmulator;\n"]},"metadata":{},"sourceType":"script"}