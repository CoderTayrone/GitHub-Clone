{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst api = require(\"../../api\");\n\nconst convertConfig = require(\"./convertConfig\");\n\nconst deploymentTool = require(\"../../deploymentTool\");\n\nconst {\n  FirebaseError\n} = require(\"../../error\");\n\nconst {\n  normalizedHostingConfigs\n} = require(\"../../hosting/normalizedHostingConfigs\");\n\nconst {\n  validateDeploy\n} = require(\"./validate\");\n\nmodule.exports = function (context, options) {\n  if (options.public) {\n    if (_.isArray(options.config.get(\"hosting\"))) {\n      throw new FirebaseError(\"Cannot specify --public option with multi-site configuration.\");\n    }\n\n    options.config.set(\"hosting.public\", options.public);\n  }\n\n  const configs = normalizedHostingConfigs(options, {\n    resolveTargets: true\n  });\n\n  if (configs.length === 0) {\n    return Promise.resolve();\n  }\n\n  context.hosting = {\n    deploys: configs.map(function (cfg) {\n      return {\n        config: cfg,\n        site: cfg.site\n      };\n    })\n  };\n  const versionCreates = [];\n\n  _.each(context.hosting.deploys, function (deploy) {\n    const cfg = deploy.config;\n    validateDeploy(deploy, options);\n    const data = {\n      config: convertConfig(cfg),\n      labels: deploymentTool.labels()\n    };\n    versionCreates.push(api.request(\"POST\", `/v1beta1/sites/${deploy.site}/versions`, {\n      origin: api.hostingApiOrigin,\n      auth: true,\n      data\n    }).then(function (result) {\n      deploy.version = result.body.name;\n    }));\n  });\n\n  return Promise.all(versionCreates);\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/hosting/prepare.js"],"names":["_","require","api","convertConfig","deploymentTool","FirebaseError","normalizedHostingConfigs","validateDeploy","module","exports","context","options","public","isArray","config","get","set","configs","resolveTargets","length","Promise","resolve","hosting","deploys","map","cfg","site","versionCreates","each","deploy","data","labels","push","request","origin","hostingApiOrigin","auth","then","result","version","body","name","all"],"mappings":"AAAA;;AACA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,sBAAD,CAA9B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAoBJ,OAAO,CAAC,aAAD,CAAjC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAA+BL,OAAO,CAAC,wCAAD,CAA5C;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAqBN,OAAO,CAAC,YAAD,CAAlC;;AACAO,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACzC,MAAIA,OAAO,CAACC,MAAZ,EAAoB;AAChB,QAAIZ,CAAC,CAACa,OAAF,CAAUF,OAAO,CAACG,MAAR,CAAeC,GAAf,CAAmB,SAAnB,CAAV,CAAJ,EAA8C;AAC1C,YAAM,IAAIV,aAAJ,CAAkB,+DAAlB,CAAN;AACH;;AACDM,IAAAA,OAAO,CAACG,MAAR,CAAeE,GAAf,CAAmB,gBAAnB,EAAqCL,OAAO,CAACC,MAA7C;AACH;;AACD,QAAMK,OAAO,GAAGX,wBAAwB,CAACK,OAAD,EAAU;AAAEO,IAAAA,cAAc,EAAE;AAAlB,GAAV,CAAxC;;AACA,MAAID,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACtB,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH;;AACDX,EAAAA,OAAO,CAACY,OAAR,GAAkB;AACdC,IAAAA,OAAO,EAAEN,OAAO,CAACO,GAAR,CAAY,UAAUC,GAAV,EAAe;AAChC,aAAO;AAAEX,QAAAA,MAAM,EAAEW,GAAV;AAAeC,QAAAA,IAAI,EAAED,GAAG,CAACC;AAAzB,OAAP;AACH,KAFQ;AADK,GAAlB;AAKA,QAAMC,cAAc,GAAG,EAAvB;;AACA3B,EAAAA,CAAC,CAAC4B,IAAF,CAAOlB,OAAO,CAACY,OAAR,CAAgBC,OAAvB,EAAgC,UAAUM,MAAV,EAAkB;AAC9C,UAAMJ,GAAG,GAAGI,MAAM,CAACf,MAAnB;AACAP,IAAAA,cAAc,CAACsB,MAAD,EAASlB,OAAT,CAAd;AACA,UAAMmB,IAAI,GAAG;AACThB,MAAAA,MAAM,EAAEX,aAAa,CAACsB,GAAD,CADZ;AAETM,MAAAA,MAAM,EAAE3B,cAAc,CAAC2B,MAAf;AAFC,KAAb;AAIAJ,IAAAA,cAAc,CAACK,IAAf,CAAoB9B,GAAG,CAClB+B,OADe,CACP,MADO,EACE,kBAAiBJ,MAAM,CAACH,IAAK,WAD/B,EAC2C;AAC3DQ,MAAAA,MAAM,EAAEhC,GAAG,CAACiC,gBAD+C;AAE3DC,MAAAA,IAAI,EAAE,IAFqD;AAG3DN,MAAAA;AAH2D,KAD3C,EAMfO,IANe,CAMV,UAAUC,MAAV,EAAkB;AACxBT,MAAAA,MAAM,CAACU,OAAP,GAAiBD,MAAM,CAACE,IAAP,CAAYC,IAA7B;AACH,KARmB,CAApB;AASH,GAhBD;;AAiBA,SAAOrB,OAAO,CAACsB,GAAR,CAAYf,cAAZ,CAAP;AACH,CAnCD","sourcesContent":["\"use strict\";\nconst _ = require(\"lodash\");\nconst api = require(\"../../api\");\nconst convertConfig = require(\"./convertConfig\");\nconst deploymentTool = require(\"../../deploymentTool\");\nconst { FirebaseError } = require(\"../../error\");\nconst { normalizedHostingConfigs } = require(\"../../hosting/normalizedHostingConfigs\");\nconst { validateDeploy } = require(\"./validate\");\nmodule.exports = function (context, options) {\n    if (options.public) {\n        if (_.isArray(options.config.get(\"hosting\"))) {\n            throw new FirebaseError(\"Cannot specify --public option with multi-site configuration.\");\n        }\n        options.config.set(\"hosting.public\", options.public);\n    }\n    const configs = normalizedHostingConfigs(options, { resolveTargets: true });\n    if (configs.length === 0) {\n        return Promise.resolve();\n    }\n    context.hosting = {\n        deploys: configs.map(function (cfg) {\n            return { config: cfg, site: cfg.site };\n        }),\n    };\n    const versionCreates = [];\n    _.each(context.hosting.deploys, function (deploy) {\n        const cfg = deploy.config;\n        validateDeploy(deploy, options);\n        const data = {\n            config: convertConfig(cfg),\n            labels: deploymentTool.labels(),\n        };\n        versionCreates.push(api\n            .request(\"POST\", `/v1beta1/sites/${deploy.site}/versions`, {\n            origin: api.hostingApiOrigin,\n            auth: true,\n            data,\n        })\n            .then(function (result) {\n            deploy.version = result.body.name;\n        }));\n    });\n    return Promise.all(versionCreates);\n};\n"]},"metadata":{},"sourceType":"script"}