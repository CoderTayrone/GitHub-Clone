{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadControllersSync = void 0;\n\nconst fs_1 = __importDefault(require(\"fs\"));\n\nconst glob_1 = __importDefault(require(\"glob\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n/**\n * Load a set of controllers.\n *\n * @param folder - The folder to load controllers from.\n * @param [pattern] - A glob pattern for controllers to load.  Defaults to only\n *   .js files.\n * @param [loader] - The function to call to load each controller.  Defaults to\n *   `require`.\n *\n * @example\n *   // Assuming controllers has files \"foo.js\" and \"bar/bar.js\", then `controllers`\n *   // will be a `{\"foo\", \"foo.js\", \"bar/bar.js\", \"bar/bar\"}` object.\n *   const controllers = loadControllersSync('controlers', '**\\/*.js');\n */\n\n\nfunction loadControllersSync(folder, pattern = '**/*.js', loader = require) {\n  const controllerNames = glob_1.default.sync(pattern, {\n    cwd: folder\n  });\n  return controllerNames.reduce((result, controllerName) => {\n    const fullPath = path_1.default.resolve(folder, controllerName);\n\n    if (fs_1.default.statSync(fullPath).isDirectory()) {\n      // Skip directories.\n      return result;\n    }\n\n    try {\n      // Add the file at the full path\n      const mod = loader(fullPath);\n      result[controllerName] = mod; // Add the file at the full path, minus the extension\n\n      const ext = path_1.default.extname(controllerName);\n      result[controllerName.slice(0, -ext.length)] = mod; // If the file is an \"index\" file, then add it at the folder\n      // name (unless there's already something there.)\n\n      const basename = path_1.default.basename(controllerName, ext);\n\n      if (basename === 'index') {\n        const indexFolder = controllerName.slice(0, -(ext.length + basename.length + 1));\n        result[indexFolder] = result[indexFolder] || mod;\n      }\n    } catch (err) {\n      throw new Error(`Could not load controller '${fullPath}': ${err.message}`);\n    }\n\n    return result;\n  }, {});\n}\n\nexports.loadControllersSync = loadControllersSync;","map":{"version":3,"sources":["../../src/controllers/loadControllers.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,IAAA,GAAA,eAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAIA;;;;;;;;;;;;;AAaG;;;AACH,SAAgB,mBAAhB,CACI,MADJ,EAEI,OAAA,GAAkB,SAFtB,EAGI,MAAA,GAA6C,OAHjD,EAGwD;AAEpD,QAAM,eAAe,GAAG,MAAA,CAAA,OAAA,CAAK,IAAL,CAAU,OAAV,EAAmB;AAAE,IAAA,GAAG,EAAE;AAAP,GAAnB,CAAxB;AAEA,SAAO,eAAe,CAAC,MAAhB,CAAoC,CAAC,MAAD,EAAS,cAAT,KAA2B;AAClE,UAAM,QAAQ,GAAG,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,MAAb,EAAqB,cAArB,CAAjB;;AACA,QAAI,IAAA,CAAA,OAAA,CAAG,QAAH,CAAY,QAAZ,EAAsB,WAAtB,EAAJ,EAAyC;AACrC;AACA,aAAO,MAAP;AACH;;AACD,QAAI;AACA;AACA,YAAM,GAAG,GAAG,MAAM,CAAC,QAAD,CAAlB;AACA,MAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,GAAzB,CAHA,CAKA;;AACA,YAAM,GAAG,GAAG,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,CAAZ;AACA,MAAA,MAAM,CAAC,cAAc,CAAC,KAAf,CAAqB,CAArB,EAAwB,CAAC,GAAG,CAAC,MAA7B,CAAD,CAAN,GAA+C,GAA/C,CAPA,CASA;AACA;;AACA,YAAM,QAAQ,GAAG,MAAA,CAAA,OAAA,CAAK,QAAL,CAAc,cAAd,EAA8B,GAA9B,CAAjB;;AACA,UAAI,QAAQ,KAAK,OAAjB,EAA0B;AACtB,cAAM,WAAW,GAAG,cAAc,CAAC,KAAf,CAAqB,CAArB,EAAwB,EAAE,GAAG,CAAC,MAAJ,GAAa,QAAQ,CAAC,MAAtB,GAA+B,CAAjC,CAAxB,CAApB;AACA,QAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,MAAM,CAAC,WAAD,CAAN,IAAuB,GAA7C;AACH;AACJ,KAhBD,CAgBE,OAAO,GAAP,EAAY;AACV,YAAM,IAAI,KAAJ,CAAU,8BAA8B,QAAQ,MAAM,GAAG,CAAC,OAAO,EAAjE,CAAN;AACH;;AACD,WAAO,MAAP;AACH,GA1BM,EA0BJ,EA1BI,CAAP;AA2BH;;AAlCD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadControllersSync = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst glob_1 = __importDefault(require(\"glob\"));\nconst path_1 = __importDefault(require(\"path\"));\n/**\n * Load a set of controllers.\n *\n * @param folder - The folder to load controllers from.\n * @param [pattern] - A glob pattern for controllers to load.  Defaults to only\n *   .js files.\n * @param [loader] - The function to call to load each controller.  Defaults to\n *   `require`.\n *\n * @example\n *   // Assuming controllers has files \"foo.js\" and \"bar/bar.js\", then `controllers`\n *   // will be a `{\"foo\", \"foo.js\", \"bar/bar.js\", \"bar/bar\"}` object.\n *   const controllers = loadControllersSync('controlers', '**\\/*.js');\n */\nfunction loadControllersSync(folder, pattern = '**/*.js', loader = require) {\n    const controllerNames = glob_1.default.sync(pattern, { cwd: folder });\n    return controllerNames.reduce((result, controllerName) => {\n        const fullPath = path_1.default.resolve(folder, controllerName);\n        if (fs_1.default.statSync(fullPath).isDirectory()) {\n            // Skip directories.\n            return result;\n        }\n        try {\n            // Add the file at the full path\n            const mod = loader(fullPath);\n            result[controllerName] = mod;\n            // Add the file at the full path, minus the extension\n            const ext = path_1.default.extname(controllerName);\n            result[controllerName.slice(0, -ext.length)] = mod;\n            // If the file is an \"index\" file, then add it at the folder\n            // name (unless there's already something there.)\n            const basename = path_1.default.basename(controllerName, ext);\n            if (basename === 'index') {\n                const indexFolder = controllerName.slice(0, -(ext.length + basename.length + 1));\n                result[indexFolder] = result[indexFolder] || mod;\n            }\n        }\n        catch (err) {\n            throw new Error(`Could not load controller '${fullPath}': ${err.message}`);\n        }\n        return result;\n    }, {});\n}\nexports.loadControllersSync = loadControllersSync;\n//# sourceMappingURL=loadControllers.js.map"]},"metadata":{},"sourceType":"script"}