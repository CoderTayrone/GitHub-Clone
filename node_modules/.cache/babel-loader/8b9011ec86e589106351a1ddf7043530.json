{"ast":null,"code":"module.exports = getType;\n\nfunction getType(st) {\n  var types = ['Directory', 'File', 'SymbolicLink', 'Link', // special for hardlinks from tarballs\n  'BlockDevice', 'CharacterDevice', 'FIFO', 'Socket'];\n  var type;\n\n  if (st.type && types.indexOf(st.type) !== -1) {\n    st[st.type] = true;\n    return st.type;\n  }\n\n  for (var i = 0, l = types.length; i < l; i++) {\n    type = types[i];\n    var is = st[type] || st['is' + type];\n    if (typeof is === 'function') is = is.call(st);\n\n    if (is) {\n      st[type] = true;\n      st.type = type;\n      return type;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/fstream/lib/get-type.js"],"names":["module","exports","getType","st","types","type","indexOf","i","l","length","is","call"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAkBC,EAAlB,EAAsB;AACpB,MAAIC,KAAK,GAAG,CACV,WADU,EAEV,MAFU,EAGV,cAHU,EAIV,MAJU,EAIF;AACR,eALU,EAMV,iBANU,EAOV,MAPU,EAQV,QARU,CAAZ;AAUA,MAAIC,IAAJ;;AAEA,MAAIF,EAAE,CAACE,IAAH,IAAWD,KAAK,CAACE,OAAN,CAAcH,EAAE,CAACE,IAAjB,MAA2B,CAAC,CAA3C,EAA8C;AAC5CF,IAAAA,EAAE,CAACA,EAAE,CAACE,IAAJ,CAAF,GAAc,IAAd;AACA,WAAOF,EAAE,CAACE,IAAV;AACD;;AAED,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CF,IAAAA,IAAI,GAAGD,KAAK,CAACG,CAAD,CAAZ;AACA,QAAIG,EAAE,GAAGP,EAAE,CAACE,IAAD,CAAF,IAAYF,EAAE,CAAC,OAAOE,IAAR,CAAvB;AACA,QAAI,OAAOK,EAAP,KAAc,UAAlB,EAA8BA,EAAE,GAAGA,EAAE,CAACC,IAAH,CAAQR,EAAR,CAAL;;AAC9B,QAAIO,EAAJ,EAAQ;AACNP,MAAAA,EAAE,CAACE,IAAD,CAAF,GAAW,IAAX;AACAF,MAAAA,EAAE,CAACE,IAAH,GAAUA,IAAV;AACA,aAAOA,IAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["module.exports = getType\n\nfunction getType (st) {\n  var types = [\n    'Directory',\n    'File',\n    'SymbolicLink',\n    'Link', // special for hardlinks from tarballs\n    'BlockDevice',\n    'CharacterDevice',\n    'FIFO',\n    'Socket'\n  ]\n  var type\n\n  if (st.type && types.indexOf(st.type) !== -1) {\n    st[st.type] = true\n    return st.type\n  }\n\n  for (var i = 0, l = types.length; i < l; i++) {\n    type = types[i]\n    var is = st[type] || st['is' + type]\n    if (typeof is === 'function') is = is.call(st)\n    if (is) {\n      st[type] = true\n      st.type = type\n      return type\n    }\n  }\n\n  return null\n}\n"]},"metadata":{},"sourceType":"script"}