{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionsEmulatorShell = void 0;\n\nconst uuid = require(\"uuid\");\n\nconst functionsEmulator_1 = require(\"./functionsEmulator\");\n\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst error_1 = require(\"../error\");\n\nclass FunctionsEmulatorShell {\n  constructor(emu) {\n    this.emu = emu;\n    this.urls = {};\n    this.triggers = emu.getTriggerDefinitions();\n    this.emulatedFunctions = this.triggers.map(t => t.id);\n    const entryPoints = this.triggers.map(t => t.entryPoint);\n    utils.logLabeledBullet(\"functions\", `Loaded functions: ${entryPoints.join(\", \")}`);\n\n    for (const trigger of this.triggers) {\n      if (trigger.httpsTrigger) {\n        this.urls[trigger.id] = functionsEmulator_1.FunctionsEmulator.getHttpFunctionUrl(this.emu.getInfo().host, this.emu.getInfo().port, this.emu.getProjectId(), trigger.name, trigger.region);\n      }\n    }\n  }\n\n  call(name, data, opts) {\n    const trigger = this.getTrigger(name);\n    logger_1.logger.debug(`shell:${name}: trigger=${JSON.stringify(trigger)}`);\n    logger_1.logger.debug(`shell:${name}: opts=${JSON.stringify(opts)}, data=${JSON.stringify(data)}`);\n\n    if (!trigger.eventTrigger) {\n      throw new error_1.FirebaseError(`Function ${name} is not a background function`);\n    }\n\n    const eventType = trigger.eventTrigger.eventType;\n    let resource = opts.resource;\n\n    if (typeof resource === \"object\" && resource.name) {\n      resource = resource.name;\n    }\n\n    const proto = {\n      eventId: uuid.v4(),\n      timestamp: new Date().toISOString(),\n      eventType,\n      resource,\n      params: opts.params,\n      auth: opts.auth,\n      data\n    };\n    this.emu.startFunctionRuntime(trigger.id, trigger.name, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n  }\n\n  getTrigger(name) {\n    const result = this.triggers.find(trigger => {\n      return trigger.name === name;\n    });\n\n    if (!result) {\n      throw new error_1.FirebaseError(`Could not find trigger ${name}`);\n    }\n\n    return result;\n  }\n\n}\n\nexports.FunctionsEmulatorShell = FunctionsEmulatorShell;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/functionsEmulatorShell.js"],"names":["Object","defineProperty","exports","value","FunctionsEmulatorShell","uuid","require","functionsEmulator_1","functionsEmulatorShared_1","utils","logger_1","error_1","constructor","emu","urls","triggers","getTriggerDefinitions","emulatedFunctions","map","t","id","entryPoints","entryPoint","logLabeledBullet","join","trigger","httpsTrigger","FunctionsEmulator","getHttpFunctionUrl","getInfo","host","port","getProjectId","name","region","call","data","opts","getTrigger","logger","debug","JSON","stringify","eventTrigger","FirebaseError","eventType","resource","proto","eventId","v4","timestamp","Date","toISOString","params","auth","startFunctionRuntime","EmulatedTriggerType","BACKGROUND","result","find"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionsEmulatorShell = void 0;\nconst uuid = require(\"uuid\");\nconst functionsEmulator_1 = require(\"./functionsEmulator\");\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nconst error_1 = require(\"../error\");\nclass FunctionsEmulatorShell {\n    constructor(emu) {\n        this.emu = emu;\n        this.urls = {};\n        this.triggers = emu.getTriggerDefinitions();\n        this.emulatedFunctions = this.triggers.map((t) => t.id);\n        const entryPoints = this.triggers.map((t) => t.entryPoint);\n        utils.logLabeledBullet(\"functions\", `Loaded functions: ${entryPoints.join(\", \")}`);\n        for (const trigger of this.triggers) {\n            if (trigger.httpsTrigger) {\n                this.urls[trigger.id] = functionsEmulator_1.FunctionsEmulator.getHttpFunctionUrl(this.emu.getInfo().host, this.emu.getInfo().port, this.emu.getProjectId(), trigger.name, trigger.region);\n            }\n        }\n    }\n    call(name, data, opts) {\n        const trigger = this.getTrigger(name);\n        logger_1.logger.debug(`shell:${name}: trigger=${JSON.stringify(trigger)}`);\n        logger_1.logger.debug(`shell:${name}: opts=${JSON.stringify(opts)}, data=${JSON.stringify(data)}`);\n        if (!trigger.eventTrigger) {\n            throw new error_1.FirebaseError(`Function ${name} is not a background function`);\n        }\n        const eventType = trigger.eventTrigger.eventType;\n        let resource = opts.resource;\n        if (typeof resource === \"object\" && resource.name) {\n            resource = resource.name;\n        }\n        const proto = {\n            eventId: uuid.v4(),\n            timestamp: new Date().toISOString(),\n            eventType,\n            resource,\n            params: opts.params,\n            auth: opts.auth,\n            data,\n        };\n        this.emu.startFunctionRuntime(trigger.id, trigger.name, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n    }\n    getTrigger(name) {\n        const result = this.triggers.find((trigger) => {\n            return trigger.name === name;\n        });\n        if (!result) {\n            throw new error_1.FirebaseError(`Could not find trigger ${name}`);\n        }\n        return result;\n    }\n}\nexports.FunctionsEmulatorShell = FunctionsEmulatorShell;\n"]},"metadata":{},"sourceType":"script"}