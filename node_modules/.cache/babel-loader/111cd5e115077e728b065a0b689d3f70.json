{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchWebSetup = exports.getCachedWebSetup = void 0;\n\nconst apiv2_1 = require(\"./apiv2\");\n\nconst configstore_1 = require(\"./configstore\");\n\nconst api_1 = require(\"./api\");\n\nconst projectUtils_1 = require(\"./projectUtils\");\n\nconst logger_1 = require(\"./logger\");\n\nconst constants_1 = require(\"./emulator/constants\");\n\nconst apiClient = new apiv2_1.Client({\n  urlPrefix: api_1.firebaseApiOrigin,\n  auth: true,\n  apiVersion: \"v1beta1\"\n});\nconst hostingApiClient = new apiv2_1.Client({\n  urlPrefix: api_1.hostingApiOrigin,\n  auth: true,\n  apiVersion: \"v1beta1\"\n});\nconst CONFIGSTORE_KEY = \"webconfig\";\n\nfunction setCachedWebSetup(projectId, config) {\n  const allConfigs = configstore_1.configstore.get(CONFIGSTORE_KEY) || {};\n  allConfigs[projectId] = config;\n  configstore_1.configstore.set(CONFIGSTORE_KEY, allConfigs);\n}\n\nfunction getCachedWebSetup(options) {\n  const projectId = projectUtils_1.needProjectId(options);\n  const allConfigs = configstore_1.configstore.get(CONFIGSTORE_KEY) || {};\n  return allConfigs[projectId];\n}\n\nexports.getCachedWebSetup = getCachedWebSetup;\n\nasync function listAllSites(projectId, nextPageToken) {\n  const queryParams = nextPageToken ? {\n    pageToken: nextPageToken\n  } : {};\n  const res = await hostingApiClient.get(`/projects/${projectId}/sites`, {\n    queryParams\n  });\n  const sites = res.body.sites;\n\n  if (res.body.nextPageToken) {\n    const remainder = await listAllSites(projectId, res.body.nextPageToken);\n    return [...sites, ...remainder];\n  }\n\n  return sites;\n}\n\nfunction constructDefaultWebSetup(projectId) {\n  return {\n    projectId,\n    databaseURL: `https://${projectId}.firebaseio.com`,\n    storageBucket: `${projectId}.appspot.com`,\n    apiKey: \"fake-api-key\",\n    authDomain: `${projectId}.firebaseapp.com`\n  };\n}\n\nasync function fetchWebSetup(options) {\n  const projectId = projectUtils_1.needProjectId(options);\n\n  if (constants_1.Constants.isDemoProject(projectId)) {\n    return constructDefaultWebSetup(projectId);\n  }\n\n  let hostingAppId = undefined;\n\n  try {\n    const sites = await listAllSites(projectId);\n    const defaultSite = sites.find(s => s.type === \"DEFAULT_SITE\");\n\n    if (defaultSite && defaultSite.appId) {\n      hostingAppId = defaultSite.appId;\n    }\n  } catch (e) {\n    logger_1.logger.debug(\"Failed to list hosting sites\");\n    logger_1.logger.debug(e);\n  }\n\n  const appId = hostingAppId || \"-\";\n  const res = await apiClient.get(`/projects/${projectId}/webApps/${appId}/config`);\n  const config = res.body;\n\n  if (!config.appId && hostingAppId) {\n    config.appId = hostingAppId;\n  }\n\n  setCachedWebSetup(config.projectId, config);\n  return config;\n}\n\nexports.fetchWebSetup = fetchWebSetup;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/fetchWebSetup.js"],"names":["Object","defineProperty","exports","value","fetchWebSetup","getCachedWebSetup","apiv2_1","require","configstore_1","api_1","projectUtils_1","logger_1","constants_1","apiClient","Client","urlPrefix","firebaseApiOrigin","auth","apiVersion","hostingApiClient","hostingApiOrigin","CONFIGSTORE_KEY","setCachedWebSetup","projectId","config","allConfigs","configstore","get","set","options","needProjectId","listAllSites","nextPageToken","queryParams","pageToken","res","sites","body","remainder","constructDefaultWebSetup","databaseURL","storageBucket","apiKey","authDomain","Constants","isDemoProject","hostingAppId","undefined","defaultSite","find","s","type","appId","e","logger","debug"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,iBAAR,GAA4B,KAAK,CAAzD;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMM,SAAS,GAAG,IAAIP,OAAO,CAACQ,MAAZ,CAAmB;AAAEC,EAAAA,SAAS,EAAEN,KAAK,CAACO,iBAAnB;AAAsCC,EAAAA,IAAI,EAAE,IAA5C;AAAkDC,EAAAA,UAAU,EAAE;AAA9D,CAAnB,CAAlB;AACA,MAAMC,gBAAgB,GAAG,IAAIb,OAAO,CAACQ,MAAZ,CAAmB;AACxCC,EAAAA,SAAS,EAAEN,KAAK,CAACW,gBADuB;AAExCH,EAAAA,IAAI,EAAE,IAFkC;AAGxCC,EAAAA,UAAU,EAAE;AAH4B,CAAnB,CAAzB;AAKA,MAAMG,eAAe,GAAG,WAAxB;;AACA,SAASC,iBAAT,CAA2BC,SAA3B,EAAsCC,MAAtC,EAA8C;AAC1C,QAAMC,UAAU,GAAGjB,aAAa,CAACkB,WAAd,CAA0BC,GAA1B,CAA8BN,eAA9B,KAAkD,EAArE;AACAI,EAAAA,UAAU,CAACF,SAAD,CAAV,GAAwBC,MAAxB;AACAhB,EAAAA,aAAa,CAACkB,WAAd,CAA0BE,GAA1B,CAA8BP,eAA9B,EAA+CI,UAA/C;AACH;;AACD,SAASpB,iBAAT,CAA2BwB,OAA3B,EAAoC;AAChC,QAAMN,SAAS,GAAGb,cAAc,CAACoB,aAAf,CAA6BD,OAA7B,CAAlB;AACA,QAAMJ,UAAU,GAAGjB,aAAa,CAACkB,WAAd,CAA0BC,GAA1B,CAA8BN,eAA9B,KAAkD,EAArE;AACA,SAAOI,UAAU,CAACF,SAAD,CAAjB;AACH;;AACDrB,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;;AACA,eAAe0B,YAAf,CAA4BR,SAA5B,EAAuCS,aAAvC,EAAsD;AAClD,QAAMC,WAAW,GAAGD,aAAa,GAAG;AAAEE,IAAAA,SAAS,EAAEF;AAAb,GAAH,GAAkC,EAAnE;AACA,QAAMG,GAAG,GAAG,MAAMhB,gBAAgB,CAACQ,GAAjB,CAAsB,aAAYJ,SAAU,QAA5C,EAAqD;AACnEU,IAAAA;AADmE,GAArD,CAAlB;AAGA,QAAMG,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASD,KAAvB;;AACA,MAAID,GAAG,CAACE,IAAJ,CAASL,aAAb,EAA4B;AACxB,UAAMM,SAAS,GAAG,MAAMP,YAAY,CAACR,SAAD,EAAYY,GAAG,CAACE,IAAJ,CAASL,aAArB,CAApC;AACA,WAAO,CAAC,GAAGI,KAAJ,EAAW,GAAGE,SAAd,CAAP;AACH;;AACD,SAAOF,KAAP;AACH;;AACD,SAASG,wBAAT,CAAkChB,SAAlC,EAA6C;AACzC,SAAO;AACHA,IAAAA,SADG;AAEHiB,IAAAA,WAAW,EAAG,WAAUjB,SAAU,iBAF/B;AAGHkB,IAAAA,aAAa,EAAG,GAAElB,SAAU,cAHzB;AAIHmB,IAAAA,MAAM,EAAE,cAJL;AAKHC,IAAAA,UAAU,EAAG,GAAEpB,SAAU;AALtB,GAAP;AAOH;;AACD,eAAenB,aAAf,CAA6ByB,OAA7B,EAAsC;AAClC,QAAMN,SAAS,GAAGb,cAAc,CAACoB,aAAf,CAA6BD,OAA7B,CAAlB;;AACA,MAAIjB,WAAW,CAACgC,SAAZ,CAAsBC,aAAtB,CAAoCtB,SAApC,CAAJ,EAAoD;AAChD,WAAOgB,wBAAwB,CAAChB,SAAD,CAA/B;AACH;;AACD,MAAIuB,YAAY,GAAGC,SAAnB;;AACA,MAAI;AACA,UAAMX,KAAK,GAAG,MAAML,YAAY,CAACR,SAAD,CAAhC;AACA,UAAMyB,WAAW,GAAGZ,KAAK,CAACa,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,cAA7B,CAApB;;AACA,QAAIH,WAAW,IAAIA,WAAW,CAACI,KAA/B,EAAsC;AAClCN,MAAAA,YAAY,GAAGE,WAAW,CAACI,KAA3B;AACH;AACJ,GAND,CAOA,OAAOC,CAAP,EAAU;AACN1C,IAAAA,QAAQ,CAAC2C,MAAT,CAAgBC,KAAhB,CAAsB,8BAAtB;AACA5C,IAAAA,QAAQ,CAAC2C,MAAT,CAAgBC,KAAhB,CAAsBF,CAAtB;AACH;;AACD,QAAMD,KAAK,GAAGN,YAAY,IAAI,GAA9B;AACA,QAAMX,GAAG,GAAG,MAAMtB,SAAS,CAACc,GAAV,CAAe,aAAYJ,SAAU,YAAW6B,KAAM,SAAtD,CAAlB;AACA,QAAM5B,MAAM,GAAGW,GAAG,CAACE,IAAnB;;AACA,MAAI,CAACb,MAAM,CAAC4B,KAAR,IAAiBN,YAArB,EAAmC;AAC/BtB,IAAAA,MAAM,CAAC4B,KAAP,GAAeN,YAAf;AACH;;AACDxB,EAAAA,iBAAiB,CAACE,MAAM,CAACD,SAAR,EAAmBC,MAAnB,CAAjB;AACA,SAAOA,MAAP;AACH;;AACDtB,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchWebSetup = exports.getCachedWebSetup = void 0;\nconst apiv2_1 = require(\"./apiv2\");\nconst configstore_1 = require(\"./configstore\");\nconst api_1 = require(\"./api\");\nconst projectUtils_1 = require(\"./projectUtils\");\nconst logger_1 = require(\"./logger\");\nconst constants_1 = require(\"./emulator/constants\");\nconst apiClient = new apiv2_1.Client({ urlPrefix: api_1.firebaseApiOrigin, auth: true, apiVersion: \"v1beta1\" });\nconst hostingApiClient = new apiv2_1.Client({\n    urlPrefix: api_1.hostingApiOrigin,\n    auth: true,\n    apiVersion: \"v1beta1\",\n});\nconst CONFIGSTORE_KEY = \"webconfig\";\nfunction setCachedWebSetup(projectId, config) {\n    const allConfigs = configstore_1.configstore.get(CONFIGSTORE_KEY) || {};\n    allConfigs[projectId] = config;\n    configstore_1.configstore.set(CONFIGSTORE_KEY, allConfigs);\n}\nfunction getCachedWebSetup(options) {\n    const projectId = projectUtils_1.needProjectId(options);\n    const allConfigs = configstore_1.configstore.get(CONFIGSTORE_KEY) || {};\n    return allConfigs[projectId];\n}\nexports.getCachedWebSetup = getCachedWebSetup;\nasync function listAllSites(projectId, nextPageToken) {\n    const queryParams = nextPageToken ? { pageToken: nextPageToken } : {};\n    const res = await hostingApiClient.get(`/projects/${projectId}/sites`, {\n        queryParams,\n    });\n    const sites = res.body.sites;\n    if (res.body.nextPageToken) {\n        const remainder = await listAllSites(projectId, res.body.nextPageToken);\n        return [...sites, ...remainder];\n    }\n    return sites;\n}\nfunction constructDefaultWebSetup(projectId) {\n    return {\n        projectId,\n        databaseURL: `https://${projectId}.firebaseio.com`,\n        storageBucket: `${projectId}.appspot.com`,\n        apiKey: \"fake-api-key\",\n        authDomain: `${projectId}.firebaseapp.com`,\n    };\n}\nasync function fetchWebSetup(options) {\n    const projectId = projectUtils_1.needProjectId(options);\n    if (constants_1.Constants.isDemoProject(projectId)) {\n        return constructDefaultWebSetup(projectId);\n    }\n    let hostingAppId = undefined;\n    try {\n        const sites = await listAllSites(projectId);\n        const defaultSite = sites.find((s) => s.type === \"DEFAULT_SITE\");\n        if (defaultSite && defaultSite.appId) {\n            hostingAppId = defaultSite.appId;\n        }\n    }\n    catch (e) {\n        logger_1.logger.debug(\"Failed to list hosting sites\");\n        logger_1.logger.debug(e);\n    }\n    const appId = hostingAppId || \"-\";\n    const res = await apiClient.get(`/projects/${projectId}/webApps/${appId}/config`);\n    const config = res.body;\n    if (!config.appId && hostingAppId) {\n        config.appId = hostingAppId;\n    }\n    setCachedWebSetup(config.projectId, config);\n    return config;\n}\nexports.fetchWebSetup = fetchWebSetup;\n"]},"metadata":{},"sourceType":"script"}