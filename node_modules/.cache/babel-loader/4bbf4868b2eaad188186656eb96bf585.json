{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst containerCleaner_1 = require(\"../deploy/functions/containerCleaner\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst error_1 = require(\"../error\");\n\nfunction getConfirmationMessage(paths) {\n  let message = \"You are about to delete all images in the following directories:\\n\\n\";\n\n  for (const path of paths) {\n    message += `${path}\\n`;\n  }\n\n  message += \"\\nAre you sure?\\n\";\n  return message;\n}\n\nexports.default = new command_1.Command(\"functions:deletegcfartifacts\").description(\"Deletes all artifacts created by Google Cloud Functions on Google Container Registry.\").option(\"--regions <regions>\", \"Specify regions of artifacts to be deleted. \" + \"If omitted, artifacts from all regions will be deleted. \" + \"<regions> is a Google defined region list, e.g. us-central1,us-east1,europe-west2.\").before(requirePermissions_1.requirePermissions, [\"storage.objects.delete\"]).action(async options => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const regions = options.regions ? options.regions.split(\",\") : undefined;\n  const dockerHelper = {};\n\n  try {\n    const gcfPaths = await containerCleaner_1.listGcfPaths(projectId, regions, dockerHelper);\n    const confirmDeletion = await prompt_1.promptOnce({\n      type: \"confirm\",\n      name: \"force\",\n      default: false,\n      message: getConfirmationMessage(gcfPaths)\n    }, options);\n\n    if (!confirmDeletion) {\n      throw new error_1.FirebaseError(\"Command aborted.\", {\n        exit: 1\n      });\n    }\n\n    await containerCleaner_1.deleteGcfArtifacts(projectId, regions, dockerHelper);\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Command failed.\", {\n      original: err\n    });\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/functions-deletegcfartifacts.js"],"names":["Object","defineProperty","exports","value","command_1","require","projectUtils_1","containerCleaner_1","prompt_1","requirePermissions_1","error_1","getConfirmationMessage","paths","message","path","default","Command","description","option","before","requirePermissions","action","options","projectId","needProjectId","regions","split","undefined","dockerHelper","gcfPaths","listGcfPaths","confirmDeletion","promptOnce","type","name","FirebaseError","exit","deleteGcfArtifacts","err","original"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sCAAD,CAAlC;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,SAASM,sBAAT,CAAgCC,KAAhC,EAAuC;AACnC,MAAIC,OAAO,GAAG,sEAAd;;AACA,OAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACtBC,IAAAA,OAAO,IAAK,GAAEC,IAAK,IAAnB;AACH;;AACDD,EAAAA,OAAO,IAAI,mBAAX;AACA,SAAOA,OAAP;AACH;;AACDX,OAAO,CAACa,OAAR,GAAkB,IAAIX,SAAS,CAACY,OAAd,CAAsB,8BAAtB,EACbC,WADa,CACD,uFADC,EAEbC,MAFa,CAEN,qBAFM,EAEiB,iDAC/B,0DAD+B,GAE/B,oFAJc,EAKbC,MALa,CAKNV,oBAAoB,CAACW,kBALf,EAKmC,CAAC,wBAAD,CALnC,EAMbC,MANa,CAMN,MAAOC,OAAP,IAAmB;AAC3B,QAAMC,SAAS,GAAGjB,cAAc,CAACkB,aAAf,CAA6BF,OAA7B,CAAlB;AACA,QAAMG,OAAO,GAAGH,OAAO,CAACG,OAAR,GAAkBH,OAAO,CAACG,OAAR,CAAgBC,KAAhB,CAAsB,GAAtB,CAAlB,GAA+CC,SAA/D;AACA,QAAMC,YAAY,GAAG,EAArB;;AACA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMtB,kBAAkB,CAACuB,YAAnB,CAAgCP,SAAhC,EAA2CE,OAA3C,EAAoDG,YAApD,CAAvB;AACA,UAAMG,eAAe,GAAG,MAAMvB,QAAQ,CAACwB,UAAT,CAAoB;AAC9CC,MAAAA,IAAI,EAAE,SADwC;AAE9CC,MAAAA,IAAI,EAAE,OAFwC;AAG9CnB,MAAAA,OAAO,EAAE,KAHqC;AAI9CF,MAAAA,OAAO,EAAEF,sBAAsB,CAACkB,QAAD;AAJe,KAApB,EAK3BP,OAL2B,CAA9B;;AAMA,QAAI,CAACS,eAAL,EAAsB;AAClB,YAAM,IAAIrB,OAAO,CAACyB,aAAZ,CAA0B,kBAA1B,EAA8C;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA9C,CAAN;AACH;;AACD,UAAM7B,kBAAkB,CAAC8B,kBAAnB,CAAsCd,SAAtC,EAAiDE,OAAjD,EAA0DG,YAA1D,CAAN;AACH,GAZD,CAaA,OAAOU,GAAP,EAAY;AACR,UAAM,IAAI5B,OAAO,CAACyB,aAAZ,CAA0B,iBAA1B,EAA6C;AAAEI,MAAAA,QAAQ,EAAED;AAAZ,KAA7C,CAAN;AACH;AACJ,CA1BiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst containerCleaner_1 = require(\"../deploy/functions/containerCleaner\");\nconst prompt_1 = require(\"../prompt\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst error_1 = require(\"../error\");\nfunction getConfirmationMessage(paths) {\n    let message = \"You are about to delete all images in the following directories:\\n\\n\";\n    for (const path of paths) {\n        message += `${path}\\n`;\n    }\n    message += \"\\nAre you sure?\\n\";\n    return message;\n}\nexports.default = new command_1.Command(\"functions:deletegcfartifacts\")\n    .description(\"Deletes all artifacts created by Google Cloud Functions on Google Container Registry.\")\n    .option(\"--regions <regions>\", \"Specify regions of artifacts to be deleted. \" +\n    \"If omitted, artifacts from all regions will be deleted. \" +\n    \"<regions> is a Google defined region list, e.g. us-central1,us-east1,europe-west2.\")\n    .before(requirePermissions_1.requirePermissions, [\"storage.objects.delete\"])\n    .action(async (options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const regions = options.regions ? options.regions.split(\",\") : undefined;\n    const dockerHelper = {};\n    try {\n        const gcfPaths = await containerCleaner_1.listGcfPaths(projectId, regions, dockerHelper);\n        const confirmDeletion = await prompt_1.promptOnce({\n            type: \"confirm\",\n            name: \"force\",\n            default: false,\n            message: getConfirmationMessage(gcfPaths),\n        }, options);\n        if (!confirmDeletion) {\n            throw new error_1.FirebaseError(\"Command aborted.\", { exit: 1 });\n        }\n        await containerCleaner_1.deleteGcfArtifacts(projectId, regions, dockerHelper);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Command failed.\", { original: err });\n    }\n});\n"]},"metadata":{},"sourceType":"script"}