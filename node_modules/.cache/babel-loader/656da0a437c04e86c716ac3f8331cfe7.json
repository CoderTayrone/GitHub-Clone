{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst gcp = require(\"../../gcp\");\n\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\n\nasync function default_1(context, options) {\n  let rulesConfig = options.config.get(\"storage\");\n\n  if (!rulesConfig) {\n    return;\n  }\n\n  _.set(context, \"storage.rules\", rulesConfig);\n\n  const rulesDeploy = new rulesDeploy_1.RulesDeploy(options, rulesDeploy_1.RulesetServiceType.FIREBASE_STORAGE);\n\n  _.set(context, \"storage.rulesDeploy\", rulesDeploy);\n\n  if (_.isPlainObject(rulesConfig)) {\n    const defaultBucket = await gcp.storage.getDefaultBucket(options.project);\n    rulesConfig = [_.assign(rulesConfig, {\n      bucket: defaultBucket\n    })];\n\n    _.set(context, \"storage.rules\", rulesConfig);\n  }\n\n  rulesConfig.forEach(ruleConfig => {\n    if (ruleConfig.target) {\n      options.rc.requireTarget(context.projectId, \"storage\", ruleConfig.target);\n    }\n\n    rulesDeploy.addFile(ruleConfig.rules);\n  });\n  await rulesDeploy.compile();\n}\n\nexports.default = default_1;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/storage/prepare.js"],"names":["Object","defineProperty","exports","value","_","require","gcp","rulesDeploy_1","default_1","context","options","rulesConfig","config","get","set","rulesDeploy","RulesDeploy","RulesetServiceType","FIREBASE_STORAGE","isPlainObject","defaultBucket","storage","getDefaultBucket","project","assign","bucket","forEach","ruleConfig","target","rc","requireTarget","projectId","addFile","rules","compile","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,mBAAD,CAA7B;;AACA,eAAeG,SAAf,CAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AACvC,MAAIC,WAAW,GAAGD,OAAO,CAACE,MAAR,CAAeC,GAAf,CAAmB,SAAnB,CAAlB;;AACA,MAAI,CAACF,WAAL,EAAkB;AACd;AACH;;AACDP,EAAAA,CAAC,CAACU,GAAF,CAAML,OAAN,EAAe,eAAf,EAAgCE,WAAhC;;AACA,QAAMI,WAAW,GAAG,IAAIR,aAAa,CAACS,WAAlB,CAA8BN,OAA9B,EAAuCH,aAAa,CAACU,kBAAd,CAAiCC,gBAAxE,CAApB;;AACAd,EAAAA,CAAC,CAACU,GAAF,CAAML,OAAN,EAAe,qBAAf,EAAsCM,WAAtC;;AACA,MAAIX,CAAC,CAACe,aAAF,CAAgBR,WAAhB,CAAJ,EAAkC;AAC9B,UAAMS,aAAa,GAAG,MAAMd,GAAG,CAACe,OAAJ,CAAYC,gBAAZ,CAA6BZ,OAAO,CAACa,OAArC,CAA5B;AACAZ,IAAAA,WAAW,GAAG,CAACP,CAAC,CAACoB,MAAF,CAASb,WAAT,EAAsB;AAAEc,MAAAA,MAAM,EAAEL;AAAV,KAAtB,CAAD,CAAd;;AACAhB,IAAAA,CAAC,CAACU,GAAF,CAAML,OAAN,EAAe,eAAf,EAAgCE,WAAhC;AACH;;AACDA,EAAAA,WAAW,CAACe,OAAZ,CAAqBC,UAAD,IAAgB;AAChC,QAAIA,UAAU,CAACC,MAAf,EAAuB;AACnBlB,MAAAA,OAAO,CAACmB,EAAR,CAAWC,aAAX,CAAyBrB,OAAO,CAACsB,SAAjC,EAA4C,SAA5C,EAAuDJ,UAAU,CAACC,MAAlE;AACH;;AACDb,IAAAA,WAAW,CAACiB,OAAZ,CAAoBL,UAAU,CAACM,KAA/B;AACH,GALD;AAMA,QAAMlB,WAAW,CAACmB,OAAZ,EAAN;AACH;;AACDhC,OAAO,CAACiC,OAAR,GAAkB3B,SAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst gcp = require(\"../../gcp\");\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\nasync function default_1(context, options) {\n    let rulesConfig = options.config.get(\"storage\");\n    if (!rulesConfig) {\n        return;\n    }\n    _.set(context, \"storage.rules\", rulesConfig);\n    const rulesDeploy = new rulesDeploy_1.RulesDeploy(options, rulesDeploy_1.RulesetServiceType.FIREBASE_STORAGE);\n    _.set(context, \"storage.rulesDeploy\", rulesDeploy);\n    if (_.isPlainObject(rulesConfig)) {\n        const defaultBucket = await gcp.storage.getDefaultBucket(options.project);\n        rulesConfig = [_.assign(rulesConfig, { bucket: defaultBucket })];\n        _.set(context, \"storage.rules\", rulesConfig);\n    }\n    rulesConfig.forEach((ruleConfig) => {\n        if (ruleConfig.target) {\n            options.rc.requireTarget(context.projectId, \"storage\", ruleConfig.target);\n        }\n        rulesDeploy.addFile(ruleConfig.rules);\n    });\n    await rulesDeploy.compile();\n}\nexports.default = default_1;\n"]},"metadata":{},"sourceType":"script"}