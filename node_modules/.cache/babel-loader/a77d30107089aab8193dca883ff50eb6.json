{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"./util\");\n/**\n * Tries to resolve the hostname. Returns true if succeeds.\n *\n * @param {String} host is the hostname from the URL.\n * @return {Boolean}\n */\n\n\nfunction isResolvable(host) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const family = 4;\n\n    try {\n      if (yield util_1.dnsLookup(host, {\n        family\n      })) {\n        return true;\n      }\n    } catch (err) {// ignore\n    }\n\n    return false;\n  });\n}\n\nexports.default = isResolvable;","map":{"version":3,"sources":["../src/isResolvable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA;;;;;AAKG;;;AAEH,SAA8B,YAA9B,CAA2C,IAA3C,EAAuD;;AACtD,UAAM,MAAM,GAAG,CAAf;;AACA,QAAI;AACH,UAAI,MAAM,MAAA,CAAA,SAAA,CAAU,IAAV,EAAgB;AAAE,QAAA;AAAF,OAAhB,CAAV,EAAuC;AACtC,eAAO,IAAP;AACA;AACD,KAJD,CAIE,OAAO,GAAP,EAAY,CACb;AACA;;AACD,WAAO,KAAP;AACA,G;AAAA;;AAVD,OAAA,CAAA,OAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"./util\");\n/**\n * Tries to resolve the hostname. Returns true if succeeds.\n *\n * @param {String} host is the hostname from the URL.\n * @return {Boolean}\n */\nfunction isResolvable(host) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const family = 4;\n        try {\n            if (yield util_1.dnsLookup(host, { family })) {\n                return true;\n            }\n        }\n        catch (err) {\n            // ignore\n        }\n        return false;\n    });\n}\nexports.default = isResolvable;\n//# sourceMappingURL=isResolvable.js.map"]},"metadata":{},"sourceType":"script"}