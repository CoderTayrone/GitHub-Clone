{"ast":null,"code":"const newline = /\\r?\\n/;\nconst onoCall = /\\bono[ @]/;\n/**\n * Is the property lazily computed?\n */\n\nexport function isLazyStack(stackProp) {\n  return Boolean(stackProp && stackProp.configurable && typeof stackProp.get === \"function\");\n}\n/**\n * Is the stack property writable?\n */\n\nexport function isWritableStack(stackProp) {\n  return Boolean( // If there is no stack property, then it's writable, since assigning it will create it\n  !stackProp || stackProp.writable || typeof stackProp.set === \"function\");\n}\n/**\n * Appends the original `Error.stack` property to the new Error's stack.\n */\n\nexport function joinStacks(newError, originalError) {\n  let newStack = popStack(newError.stack);\n  let originalStack = originalError ? originalError.stack : undefined;\n\n  if (newStack && originalStack) {\n    return newStack + \"\\n\\n\" + originalStack;\n  } else {\n    return newStack || originalStack;\n  }\n}\n/**\n * Calls `joinStacks` lazily, when the `Error.stack` property is accessed.\n */\n\nexport function lazyJoinStacks(lazyStack, newError, originalError) {\n  if (originalError) {\n    Object.defineProperty(newError, \"stack\", {\n      get: () => {\n        let newStack = lazyStack.get.apply(newError);\n        return joinStacks({\n          stack: newStack\n        }, originalError);\n      },\n      enumerable: false,\n      configurable: true\n    });\n  } else {\n    lazyPopStack(newError, lazyStack);\n  }\n}\n/**\n * Removes Ono from the stack, so that the stack starts at the original error location\n */\n\nfunction popStack(stack) {\n  if (stack) {\n    let lines = stack.split(newline); // Find the Ono call(s) in the stack, and remove them\n\n    let onoStart;\n\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n\n      if (onoCall.test(line)) {\n        if (onoStart === undefined) {\n          // We found the first Ono call in the stack trace.\n          // There may be other subsequent Ono calls as well.\n          onoStart = i;\n        }\n      } else if (onoStart !== undefined) {\n        // We found the first non-Ono call after one or more Ono calls.\n        // So remove the Ono call lines from the stack trace\n        lines.splice(onoStart, i - onoStart);\n        break;\n      }\n    }\n\n    if (lines.length > 0) {\n      return lines.join(\"\\n\");\n    }\n  } // If we get here, then the stack doesn't contain a call to `ono`.\n  // This may be due to minification or some optimization of the JS engine.\n  // So just return the stack as-is.\n\n\n  return stack;\n}\n/**\n * Calls `popStack` lazily, when the `Error.stack` property is accessed.\n */\n\n\nfunction lazyPopStack(error, lazyStack) {\n  Object.defineProperty(error, \"stack\", {\n    get: () => popStack(lazyStack.get.apply(error)),\n    enumerable: false,\n    configurable: true\n  });\n}","map":{"version":3,"sources":["../src/stack.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["const newline = /\\r?\\n/;\nconst onoCall = /\\bono[ @]/;\n/**\n * Is the property lazily computed?\n */\nexport function isLazyStack(stackProp) {\n    return Boolean(stackProp &&\n        stackProp.configurable &&\n        typeof stackProp.get === \"function\");\n}\n/**\n * Is the stack property writable?\n */\nexport function isWritableStack(stackProp) {\n    return Boolean(\n    // If there is no stack property, then it's writable, since assigning it will create it\n    !stackProp ||\n        stackProp.writable ||\n        typeof stackProp.set === \"function\");\n}\n/**\n * Appends the original `Error.stack` property to the new Error's stack.\n */\nexport function joinStacks(newError, originalError) {\n    let newStack = popStack(newError.stack);\n    let originalStack = originalError ? originalError.stack : undefined;\n    if (newStack && originalStack) {\n        return newStack + \"\\n\\n\" + originalStack;\n    }\n    else {\n        return newStack || originalStack;\n    }\n}\n/**\n * Calls `joinStacks` lazily, when the `Error.stack` property is accessed.\n */\nexport function lazyJoinStacks(lazyStack, newError, originalError) {\n    if (originalError) {\n        Object.defineProperty(newError, \"stack\", {\n            get: () => {\n                let newStack = lazyStack.get.apply(newError);\n                return joinStacks({ stack: newStack }, originalError);\n            },\n            enumerable: false,\n            configurable: true\n        });\n    }\n    else {\n        lazyPopStack(newError, lazyStack);\n    }\n}\n/**\n * Removes Ono from the stack, so that the stack starts at the original error location\n */\nfunction popStack(stack) {\n    if (stack) {\n        let lines = stack.split(newline);\n        // Find the Ono call(s) in the stack, and remove them\n        let onoStart;\n        for (let i = 0; i < lines.length; i++) {\n            let line = lines[i];\n            if (onoCall.test(line)) {\n                if (onoStart === undefined) {\n                    // We found the first Ono call in the stack trace.\n                    // There may be other subsequent Ono calls as well.\n                    onoStart = i;\n                }\n            }\n            else if (onoStart !== undefined) {\n                // We found the first non-Ono call after one or more Ono calls.\n                // So remove the Ono call lines from the stack trace\n                lines.splice(onoStart, i - onoStart);\n                break;\n            }\n        }\n        if (lines.length > 0) {\n            return lines.join(\"\\n\");\n        }\n    }\n    // If we get here, then the stack doesn't contain a call to `ono`.\n    // This may be due to minification or some optimization of the JS engine.\n    // So just return the stack as-is.\n    return stack;\n}\n/**\n * Calls `popStack` lazily, when the `Error.stack` property is accessed.\n */\nfunction lazyPopStack(error, lazyStack) {\n    Object.defineProperty(error, \"stack\", {\n        get: () => popStack(lazyStack.get.apply(error)),\n        enumerable: false,\n        configurable: true\n    });\n}\n//# sourceMappingURL=stack.js.map"]},"metadata":{},"sourceType":"module"}