{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst {\n  requireDatabaseInstance\n} = require(\"../requireDatabaseInstance\");\n\nconst {\n  requirePermissions\n} = require(\"../requirePermissions\");\n\nconst {\n  checkServiceAccountIam\n} = require(\"../deploy/functions/checkIam\");\n\nconst checkValidTargetFilters = require(\"../checkValidTargetFilters\");\n\nconst {\n  Command\n} = require(\"../command\");\n\nconst deploy = require(\"../deploy\");\n\nconst requireConfig = require(\"../requireConfig\");\n\nconst {\n  filterTargets\n} = require(\"../filterTargets\");\n\nconst {\n  requireHostingSite\n} = require(\"../requireHostingSite\");\n\nconst VALID_TARGETS = [\"database\", \"storage\", \"firestore\", \"functions\", \"hosting\", \"remoteconfig\"];\nconst TARGET_PERMISSIONS = {\n  database: [\"firebasedatabase.instances.update\"],\n  hosting: [\"firebasehosting.sites.update\"],\n  functions: [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.create\", \"cloudfunctions.functions.get\", \"cloudfunctions.functions.update\", \"cloudfunctions.functions.delete\", \"cloudfunctions.operations.get\"],\n  firestore: [\"datastore.indexes.list\", \"datastore.indexes.create\", \"datastore.indexes.update\", \"datastore.indexes.delete\"],\n  storage: [\"firebaserules.releases.create\", \"firebaserules.rulesets.create\", \"firebaserules.releases.update\"],\n  remoteconfig: [\"cloudconfig.configs.get\", \"cloudconfig.configs.update\"]\n};\nmodule.exports = new Command(\"deploy\").description(\"deploy code and assets to your Firebase project\").withForce(\"delete Cloud Functions missing from the current working directory without confirmation\").option(\"-p, --public <path>\", \"override the Hosting public directory specified in firebase.json\").option(\"-m, --message <message>\", \"an optional message describing this deploy\").option(\"--only <targets>\", 'only deploy to specified, comma-separated targets (e.g. \"hosting,storage\"). For functions, ' + 'can specify filters with colons to scope function deploys to only those functions (e.g. \"--only functions:func1,functions:func2\"). ' + \"When filtering based on export groups (the exported module object keys), use dots to specify group names \" + '(e.g. \"--only functions:group1.subgroup1,functions:group2)\"').option(\"--except <targets>\", 'deploy to all targets except specified (e.g. \"database\")').before(requireConfig).before(function (options) {\n  options.filteredTargets = filterTargets(options, VALID_TARGETS);\n  const permissions = options.filteredTargets.reduce((perms, target) => {\n    return perms.concat(TARGET_PERMISSIONS[target]);\n  }, []);\n  return requirePermissions(options, permissions);\n}).before(options => {\n  if (options.filteredTargets.includes(\"functions\")) {\n    return checkServiceAccountIam(options.project);\n  }\n}).before(async function (options) {\n  if (_.includes(options.filteredTargets, \"database\")) {\n    await requireDatabaseInstance(options);\n  }\n\n  if (_.includes(options.filteredTargets, \"hosting\")) {\n    await requireHostingSite(options);\n  }\n}).before(checkValidTargetFilters).action(function (options) {\n  return deploy(options.filteredTargets, options);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/deploy.js"],"names":["_","require","requireDatabaseInstance","requirePermissions","checkServiceAccountIam","checkValidTargetFilters","Command","deploy","requireConfig","filterTargets","requireHostingSite","VALID_TARGETS","TARGET_PERMISSIONS","database","hosting","functions","firestore","storage","remoteconfig","module","exports","description","withForce","option","before","options","filteredTargets","permissions","reduce","perms","target","concat","includes","project","action"],"mappings":"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","sourcesContent":["\"use strict\";\nconst _ = require(\"lodash\");\nconst { requireDatabaseInstance } = require(\"../requireDatabaseInstance\");\nconst { requirePermissions } = require(\"../requirePermissions\");\nconst { checkServiceAccountIam } = require(\"../deploy/functions/checkIam\");\nconst checkValidTargetFilters = require(\"../checkValidTargetFilters\");\nconst { Command } = require(\"../command\");\nconst deploy = require(\"../deploy\");\nconst requireConfig = require(\"../requireConfig\");\nconst { filterTargets } = require(\"../filterTargets\");\nconst { requireHostingSite } = require(\"../requireHostingSite\");\nconst VALID_TARGETS = [\"database\", \"storage\", \"firestore\", \"functions\", \"hosting\", \"remoteconfig\"];\nconst TARGET_PERMISSIONS = {\n    database: [\"firebasedatabase.instances.update\"],\n    hosting: [\"firebasehosting.sites.update\"],\n    functions: [\n        \"cloudfunctions.functions.list\",\n        \"cloudfunctions.functions.create\",\n        \"cloudfunctions.functions.get\",\n        \"cloudfunctions.functions.update\",\n        \"cloudfunctions.functions.delete\",\n        \"cloudfunctions.operations.get\",\n    ],\n    firestore: [\n        \"datastore.indexes.list\",\n        \"datastore.indexes.create\",\n        \"datastore.indexes.update\",\n        \"datastore.indexes.delete\",\n    ],\n    storage: [\n        \"firebaserules.releases.create\",\n        \"firebaserules.rulesets.create\",\n        \"firebaserules.releases.update\",\n    ],\n    remoteconfig: [\"cloudconfig.configs.get\", \"cloudconfig.configs.update\"],\n};\nmodule.exports = new Command(\"deploy\")\n    .description(\"deploy code and assets to your Firebase project\")\n    .withForce(\"delete Cloud Functions missing from the current working directory without confirmation\")\n    .option(\"-p, --public <path>\", \"override the Hosting public directory specified in firebase.json\")\n    .option(\"-m, --message <message>\", \"an optional message describing this deploy\")\n    .option(\"--only <targets>\", 'only deploy to specified, comma-separated targets (e.g. \"hosting,storage\"). For functions, ' +\n    'can specify filters with colons to scope function deploys to only those functions (e.g. \"--only functions:func1,functions:func2\"). ' +\n    \"When filtering based on export groups (the exported module object keys), use dots to specify group names \" +\n    '(e.g. \"--only functions:group1.subgroup1,functions:group2)\"')\n    .option(\"--except <targets>\", 'deploy to all targets except specified (e.g. \"database\")')\n    .before(requireConfig)\n    .before(function (options) {\n    options.filteredTargets = filterTargets(options, VALID_TARGETS);\n    const permissions = options.filteredTargets.reduce((perms, target) => {\n        return perms.concat(TARGET_PERMISSIONS[target]);\n    }, []);\n    return requirePermissions(options, permissions);\n})\n    .before((options) => {\n    if (options.filteredTargets.includes(\"functions\")) {\n        return checkServiceAccountIam(options.project);\n    }\n})\n    .before(async function (options) {\n    if (_.includes(options.filteredTargets, \"database\")) {\n        await requireDatabaseInstance(options);\n    }\n    if (_.includes(options.filteredTargets, \"hosting\")) {\n        await requireHostingSite(options);\n    }\n})\n    .before(checkValidTargetFilters)\n    .action(function (options) {\n    return deploy(options.filteredTargets, options);\n});\n"]},"metadata":{},"sourceType":"script"}