{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.waitForPortClosed = exports.checkPortOpen = exports.findAvailablePort = exports.suggestUnrestricted = exports.isRestricted = void 0;\n\nconst pf = require(\"portfinder\");\n\nconst tcpport = require(\"tcp-port-used\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst RESTRICTED_PORTS = [1, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 25, 37, 42, 43, 53, 77, 79, 87, 95, 101, 102, 103, 104, 109, 110, 111, 113, 115, 117, 119, 123, 135, 139, 143, 179, 389, 427, 465, 512, 513, 514, 515, 526, 530, 531, 532, 540, 548, 556, 563, 587, 601, 636, 993, 995, 2049, 3659, 4045, 6000, 6665, 6666, 6667, 6668, 6669, 6697];\n\nfunction isRestricted(port) {\n  return RESTRICTED_PORTS.includes(port);\n}\n\nexports.isRestricted = isRestricted;\n\nfunction suggestUnrestricted(port) {\n  if (!isRestricted(port)) {\n    return port;\n  }\n\n  let newPort = port;\n\n  while (isRestricted(newPort)) {\n    newPort++;\n  }\n\n  return newPort;\n}\n\nexports.suggestUnrestricted = suggestUnrestricted;\n\nasync function findAvailablePort(host, start, avoidRestricted = true) {\n  const openPort = await pf.getPortPromise({\n    host,\n    port: start\n  });\n\n  if (avoidRestricted && isRestricted(openPort)) {\n    logger_1.logger.debug(`portUtils: skipping restricted port ${openPort}`);\n    return findAvailablePort(host, suggestUnrestricted(openPort), avoidRestricted);\n  }\n\n  return openPort;\n}\n\nexports.findAvailablePort = findAvailablePort;\n\nasync function checkPortOpen(port, host) {\n  try {\n    const inUse = await tcpport.check(port, host);\n    return !inUse;\n  } catch (e) {\n    logger_1.logger.debug(`port check error: ${e}`);\n    return false;\n  }\n}\n\nexports.checkPortOpen = checkPortOpen;\n\nasync function waitForPortClosed(port, host) {\n  const interval = 250;\n  const timeout = 60000;\n\n  try {\n    await tcpport.waitUntilUsedOnHost(port, host, interval, timeout);\n  } catch (e) {\n    throw new error_1.FirebaseError(`TIMEOUT: Port ${port} on ${host} was not active within ${timeout}ms`);\n  }\n}\n\nexports.waitForPortClosed = waitForPortClosed;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/portUtils.js"],"names":["Object","defineProperty","exports","value","waitForPortClosed","checkPortOpen","findAvailablePort","suggestUnrestricted","isRestricted","pf","require","tcpport","error_1","logger_1","RESTRICTED_PORTS","port","includes","newPort","host","start","avoidRestricted","openPort","getPortPromise","logger","debug","inUse","check","e","interval","timeout","waitUntilUsedOnHost","FirebaseError"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitForPortClosed = exports.checkPortOpen = exports.findAvailablePort = exports.suggestUnrestricted = exports.isRestricted = void 0;\nconst pf = require(\"portfinder\");\nconst tcpport = require(\"tcp-port-used\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst RESTRICTED_PORTS = [\n    1,\n    7,\n    9,\n    11,\n    13,\n    15,\n    17,\n    19,\n    20,\n    21,\n    22,\n    23,\n    25,\n    37,\n    42,\n    43,\n    53,\n    77,\n    79,\n    87,\n    95,\n    101,\n    102,\n    103,\n    104,\n    109,\n    110,\n    111,\n    113,\n    115,\n    117,\n    119,\n    123,\n    135,\n    139,\n    143,\n    179,\n    389,\n    427,\n    465,\n    512,\n    513,\n    514,\n    515,\n    526,\n    530,\n    531,\n    532,\n    540,\n    548,\n    556,\n    563,\n    587,\n    601,\n    636,\n    993,\n    995,\n    2049,\n    3659,\n    4045,\n    6000,\n    6665,\n    6666,\n    6667,\n    6668,\n    6669,\n    6697,\n];\nfunction isRestricted(port) {\n    return RESTRICTED_PORTS.includes(port);\n}\nexports.isRestricted = isRestricted;\nfunction suggestUnrestricted(port) {\n    if (!isRestricted(port)) {\n        return port;\n    }\n    let newPort = port;\n    while (isRestricted(newPort)) {\n        newPort++;\n    }\n    return newPort;\n}\nexports.suggestUnrestricted = suggestUnrestricted;\nasync function findAvailablePort(host, start, avoidRestricted = true) {\n    const openPort = await pf.getPortPromise({ host, port: start });\n    if (avoidRestricted && isRestricted(openPort)) {\n        logger_1.logger.debug(`portUtils: skipping restricted port ${openPort}`);\n        return findAvailablePort(host, suggestUnrestricted(openPort), avoidRestricted);\n    }\n    return openPort;\n}\nexports.findAvailablePort = findAvailablePort;\nasync function checkPortOpen(port, host) {\n    try {\n        const inUse = await tcpport.check(port, host);\n        return !inUse;\n    }\n    catch (e) {\n        logger_1.logger.debug(`port check error: ${e}`);\n        return false;\n    }\n}\nexports.checkPortOpen = checkPortOpen;\nasync function waitForPortClosed(port, host) {\n    const interval = 250;\n    const timeout = 60000;\n    try {\n        await tcpport.waitUntilUsedOnHost(port, host, interval, timeout);\n    }\n    catch (e) {\n        throw new error_1.FirebaseError(`TIMEOUT: Port ${port} on ${host} was not active within ${timeout}ms`);\n    }\n}\nexports.waitForPortClosed = waitForPortClosed;\n"]},"metadata":{},"sourceType":"script"}