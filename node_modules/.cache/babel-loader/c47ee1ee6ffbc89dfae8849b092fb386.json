{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmulatorLogger = exports.Verbosity = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils_1 = require(\"../utils\");\n\nconst TYPE_VERBOSITY = {\n  DEBUG: 0,\n  INFO: 1,\n  BULLET: 1,\n  SUCCESS: 1,\n  USER: 2,\n  WARN: 2,\n  WARN_ONCE: 2\n};\nvar Verbosity;\n\n(function (Verbosity) {\n  Verbosity[Verbosity[\"DEBUG\"] = 0] = \"DEBUG\";\n  Verbosity[Verbosity[\"INFO\"] = 1] = \"INFO\";\n  Verbosity[Verbosity[\"QUIET\"] = 2] = \"QUIET\";\n})(Verbosity = exports.Verbosity || (exports.Verbosity = {}));\n\nclass EmulatorLogger {\n  constructor(data = {}) {\n    this.data = data;\n  }\n\n  static forEmulator(emulator) {\n    return new EmulatorLogger({\n      metadata: {\n        emulator: {\n          name: emulator\n        }\n      }\n    });\n  }\n\n  static forFunction(functionName) {\n    return new EmulatorLogger({\n      metadata: {\n        emulator: {\n          name: \"functions\"\n        },\n        function: {\n          name: functionName\n        }\n      }\n    });\n  }\n\n  log(type, text, data) {\n    if (!data) {\n      data = this.data;\n    }\n\n    if (EmulatorLogger.shouldSupress(type)) {\n      logger_1.logger.debug(`${type}: ${text}`);\n      return;\n    }\n\n    const mergedData = Object.assign(Object.assign({}, data), {\n      metadata: Object.assign(Object.assign({}, data.metadata), {\n        message: text\n      })\n    });\n\n    switch (type) {\n      case \"DEBUG\":\n        logger_1.logger.debug(text, mergedData);\n        break;\n\n      case \"INFO\":\n        logger_1.logger.info(text, mergedData);\n        break;\n\n      case \"USER\":\n        logger_1.logger.info(text, mergedData);\n        break;\n\n      case \"BULLET\":\n        utils.logBullet(text, \"info\", mergedData);\n        break;\n\n      case \"WARN\":\n        utils.logWarning(text, \"warn\", mergedData);\n        break;\n\n      case \"WARN_ONCE\":\n        if (!EmulatorLogger.warnOnceCache.has(text)) {\n          utils.logWarning(text, \"warn\", mergedData);\n          EmulatorLogger.warnOnceCache.add(text);\n        }\n\n        break;\n\n      case \"SUCCESS\":\n        utils.logSuccess(text, \"info\", mergedData);\n        break;\n    }\n  }\n\n  handleRuntimeLog(log, ignore = []) {\n    if (ignore.includes(log.level)) {\n      return;\n    }\n\n    switch (log.level) {\n      case \"SYSTEM\":\n        this.handleSystemLog(log);\n        break;\n\n      case \"USER\":\n        this.log(\"USER\", `${clc.blackBright(\"> \")} ${log.text}`, Object.assign({\n          user: utils_1.tryParse(log.text)\n        }, this.data));\n        break;\n\n      case \"DEBUG\":\n        if (log.data && Object.keys(log.data).length > 0) {\n          this.log(\"DEBUG\", `[${log.type}] ${log.text} ${JSON.stringify(log.data)}`);\n        } else {\n          this.log(\"DEBUG\", `[${log.type}] ${log.text}`);\n        }\n\n        break;\n\n      case \"INFO\":\n        this.logLabeled(\"BULLET\", \"functions\", log.text);\n        break;\n\n      case \"WARN\":\n        this.logLabeled(\"WARN\", \"functions\", log.text);\n        break;\n\n      case \"WARN_ONCE\":\n        this.logLabeled(\"WARN_ONCE\", \"functions\", log.text);\n        break;\n\n      case \"FATAL\":\n        this.logLabeled(\"WARN\", \"functions\", log.text);\n        break;\n\n      default:\n        this.log(\"INFO\", `${log.level}: ${log.text}`);\n        break;\n    }\n  }\n\n  handleSystemLog(systemLog) {\n    switch (systemLog.type) {\n      case \"runtime-status\":\n        if (systemLog.text === \"killed\") {\n          this.log(\"WARN\", `Your function was killed because it raised an unhandled error.`);\n        }\n\n        break;\n\n      case \"googleapis-network-access\":\n        this.log(\"WARN\", `Google API requested!\\n   - URL: \"${systemLog.data.href}\"\\n   - Be careful, this may be a production service.`);\n        break;\n\n      case \"unidentified-network-access\":\n        this.log(\"WARN\", `External network resource requested!\\n   - URL: \"${systemLog.data.href}\"\\n - Be careful, this may be a production service.`);\n        break;\n\n      case \"functions-config-missing-value\":\n        this.log(\"WARN_ONCE\", `It looks like you're trying to access functions.config().${systemLog.data.key} but there is no value there. You can learn more about setting up config here: https://firebase.google.com/docs/functions/local-emulator`);\n        break;\n\n      case \"non-default-admin-app-used\":\n        this.log(\"WARN\", `Non-default \"firebase-admin\" instance created!\\n   ` + `- This instance will *not* be mocked and will access production resources.`);\n        break;\n\n      case \"missing-module\":\n        this.log(\"WARN\", `The Cloud Functions emulator requires the module \"${systemLog.data.name}\" to be installed as a ${systemLog.data.isDev ? \"development dependency\" : \"dependency\"}. To fix this, run \"npm install ${systemLog.data.isDev ? \"--save-dev\" : \"--save\"} ${systemLog.data.name}\" in your functions directory.`);\n        break;\n\n      case \"uninstalled-module\":\n        this.log(\"WARN\", `The Cloud Functions emulator requires the module \"${systemLog.data.name}\" to be installed. This package is in your package.json, but it's not available. \\\nYou probably need to run \"npm install\" in your functions directory.`);\n        break;\n\n      case \"out-of-date-module\":\n        this.log(\"WARN\", `The Cloud Functions emulator requires the module \"${systemLog.data.name}\" to be version >${systemLog.data.minVersion} so your version is too old. \\\nYou can probably fix this by running \"npm install ${systemLog.data.name}@latest\" in your functions directory.`);\n        break;\n\n      case \"missing-package-json\":\n        this.log(\"WARN\", `The Cloud Functions directory you specified does not have a \"package.json\" file, so we can't load it.`);\n        break;\n\n      case \"function-code-resolution-failed\":\n        this.log(\"WARN\", systemLog.data.error);\n        const helper = [\"We were unable to load your functions code. (see above)\"];\n\n        if (systemLog.data.isPotentially.wrong_directory) {\n          helper.push(`   - There is no \"package.json\" file in your functions directory.`);\n        }\n\n        if (systemLog.data.isPotentially.typescript) {\n          helper.push(\"   - It appears your code is written in Typescript, which must be compiled before emulation.\");\n        }\n\n        if (systemLog.data.isPotentially.uncompiled) {\n          helper.push(`   - You may be able to run \"npm run build\" in your functions directory to resolve this.`);\n        }\n\n        utils.logWarning(helper.join(\"\\n\"), \"warn\", this.data);\n        break;\n\n      case \"function-runtimeconfig-json-invalid\":\n        this.log(\"WARN\", \"Found .runtimeconfig.json but the JSON format is invalid.\");\n        break;\n\n      case \"function-env-load-failed\":\n        this.log(\"WARN\", \"Failed to load environment variables: \" + systemLog.text);\n        break;\n\n      default:\n    }\n  }\n\n  logLabeled(type, label, text) {\n    if (EmulatorLogger.shouldSupress(type)) {\n      logger_1.logger.debug(`[${label}] ${text}`);\n      return;\n    }\n\n    const mergedData = Object.assign(Object.assign({}, this.data), {\n      metadata: Object.assign(Object.assign({}, this.data.metadata), {\n        message: text\n      })\n    });\n\n    switch (type) {\n      case \"DEBUG\":\n        logger_1.logger.debug(`[${label}] ${text}`);\n        break;\n\n      case \"BULLET\":\n        utils.logLabeledBullet(label, text, \"info\", mergedData);\n        break;\n\n      case \"SUCCESS\":\n        utils.logLabeledSuccess(label, text, \"info\", mergedData);\n        break;\n\n      case \"WARN\":\n        utils.logLabeledWarning(label, text, \"warn\", mergedData);\n        break;\n\n      case \"WARN_ONCE\":\n        if (!EmulatorLogger.warnOnceCache.has(text)) {\n          utils.logLabeledWarning(label, text, \"warn\", mergedData);\n          EmulatorLogger.warnOnceCache.add(text);\n        }\n\n        break;\n    }\n  }\n\n  static shouldSupress(type) {\n    const typeVerbosity = TYPE_VERBOSITY[type];\n    return EmulatorLogger.verbosity > typeVerbosity;\n  }\n\n}\n\nexports.EmulatorLogger = EmulatorLogger;\nEmulatorLogger.verbosity = Verbosity.DEBUG;\nEmulatorLogger.warnOnceCache = new Set();","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/emulatorLogger.js"],"names":["Object","defineProperty","exports","value","EmulatorLogger","Verbosity","clc","require","utils","logger_1","utils_1","TYPE_VERBOSITY","DEBUG","INFO","BULLET","SUCCESS","USER","WARN","WARN_ONCE","constructor","data","forEmulator","emulator","metadata","name","forFunction","functionName","function","log","type","text","shouldSupress","logger","debug","mergedData","assign","message","info","logBullet","logWarning","warnOnceCache","has","add","logSuccess","handleRuntimeLog","ignore","includes","level","handleSystemLog","blackBright","user","tryParse","keys","length","JSON","stringify","logLabeled","systemLog","href","key","isDev","minVersion","error","helper","isPotentially","wrong_directory","push","typescript","uncompiled","join","label","logLabeledBullet","logLabeledSuccess","logLabeledWarning","typeVerbosity","verbosity","Set"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EmulatorLogger = exports.Verbosity = void 0;\nconst clc = require(\"cli-color\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nconst utils_1 = require(\"../utils\");\nconst TYPE_VERBOSITY = {\n    DEBUG: 0,\n    INFO: 1,\n    BULLET: 1,\n    SUCCESS: 1,\n    USER: 2,\n    WARN: 2,\n    WARN_ONCE: 2,\n};\nvar Verbosity;\n(function (Verbosity) {\n    Verbosity[Verbosity[\"DEBUG\"] = 0] = \"DEBUG\";\n    Verbosity[Verbosity[\"INFO\"] = 1] = \"INFO\";\n    Verbosity[Verbosity[\"QUIET\"] = 2] = \"QUIET\";\n})(Verbosity = exports.Verbosity || (exports.Verbosity = {}));\nclass EmulatorLogger {\n    constructor(data = {}) {\n        this.data = data;\n    }\n    static forEmulator(emulator) {\n        return new EmulatorLogger({\n            metadata: {\n                emulator: {\n                    name: emulator,\n                },\n            },\n        });\n    }\n    static forFunction(functionName) {\n        return new EmulatorLogger({\n            metadata: {\n                emulator: {\n                    name: \"functions\",\n                },\n                function: {\n                    name: functionName,\n                },\n            },\n        });\n    }\n    log(type, text, data) {\n        if (!data) {\n            data = this.data;\n        }\n        if (EmulatorLogger.shouldSupress(type)) {\n            logger_1.logger.debug(`${type}: ${text}`);\n            return;\n        }\n        const mergedData = Object.assign(Object.assign({}, data), { metadata: Object.assign(Object.assign({}, data.metadata), { message: text }) });\n        switch (type) {\n            case \"DEBUG\":\n                logger_1.logger.debug(text, mergedData);\n                break;\n            case \"INFO\":\n                logger_1.logger.info(text, mergedData);\n                break;\n            case \"USER\":\n                logger_1.logger.info(text, mergedData);\n                break;\n            case \"BULLET\":\n                utils.logBullet(text, \"info\", mergedData);\n                break;\n            case \"WARN\":\n                utils.logWarning(text, \"warn\", mergedData);\n                break;\n            case \"WARN_ONCE\":\n                if (!EmulatorLogger.warnOnceCache.has(text)) {\n                    utils.logWarning(text, \"warn\", mergedData);\n                    EmulatorLogger.warnOnceCache.add(text);\n                }\n                break;\n            case \"SUCCESS\":\n                utils.logSuccess(text, \"info\", mergedData);\n                break;\n        }\n    }\n    handleRuntimeLog(log, ignore = []) {\n        if (ignore.includes(log.level)) {\n            return;\n        }\n        switch (log.level) {\n            case \"SYSTEM\":\n                this.handleSystemLog(log);\n                break;\n            case \"USER\":\n                this.log(\"USER\", `${clc.blackBright(\"> \")} ${log.text}`, Object.assign({ user: utils_1.tryParse(log.text) }, this.data));\n                break;\n            case \"DEBUG\":\n                if (log.data && Object.keys(log.data).length > 0) {\n                    this.log(\"DEBUG\", `[${log.type}] ${log.text} ${JSON.stringify(log.data)}`);\n                }\n                else {\n                    this.log(\"DEBUG\", `[${log.type}] ${log.text}`);\n                }\n                break;\n            case \"INFO\":\n                this.logLabeled(\"BULLET\", \"functions\", log.text);\n                break;\n            case \"WARN\":\n                this.logLabeled(\"WARN\", \"functions\", log.text);\n                break;\n            case \"WARN_ONCE\":\n                this.logLabeled(\"WARN_ONCE\", \"functions\", log.text);\n                break;\n            case \"FATAL\":\n                this.logLabeled(\"WARN\", \"functions\", log.text);\n                break;\n            default:\n                this.log(\"INFO\", `${log.level}: ${log.text}`);\n                break;\n        }\n    }\n    handleSystemLog(systemLog) {\n        switch (systemLog.type) {\n            case \"runtime-status\":\n                if (systemLog.text === \"killed\") {\n                    this.log(\"WARN\", `Your function was killed because it raised an unhandled error.`);\n                }\n                break;\n            case \"googleapis-network-access\":\n                this.log(\"WARN\", `Google API requested!\\n   - URL: \"${systemLog.data.href}\"\\n   - Be careful, this may be a production service.`);\n                break;\n            case \"unidentified-network-access\":\n                this.log(\"WARN\", `External network resource requested!\\n   - URL: \"${systemLog.data.href}\"\\n - Be careful, this may be a production service.`);\n                break;\n            case \"functions-config-missing-value\":\n                this.log(\"WARN_ONCE\", `It looks like you're trying to access functions.config().${systemLog.data.key} but there is no value there. You can learn more about setting up config here: https://firebase.google.com/docs/functions/local-emulator`);\n                break;\n            case \"non-default-admin-app-used\":\n                this.log(\"WARN\", `Non-default \"firebase-admin\" instance created!\\n   ` +\n                    `- This instance will *not* be mocked and will access production resources.`);\n                break;\n            case \"missing-module\":\n                this.log(\"WARN\", `The Cloud Functions emulator requires the module \"${systemLog.data.name}\" to be installed as a ${systemLog.data.isDev ? \"development dependency\" : \"dependency\"}. To fix this, run \"npm install ${systemLog.data.isDev ? \"--save-dev\" : \"--save\"} ${systemLog.data.name}\" in your functions directory.`);\n                break;\n            case \"uninstalled-module\":\n                this.log(\"WARN\", `The Cloud Functions emulator requires the module \"${systemLog.data.name}\" to be installed. This package is in your package.json, but it's not available. \\\nYou probably need to run \"npm install\" in your functions directory.`);\n                break;\n            case \"out-of-date-module\":\n                this.log(\"WARN\", `The Cloud Functions emulator requires the module \"${systemLog.data.name}\" to be version >${systemLog.data.minVersion} so your version is too old. \\\nYou can probably fix this by running \"npm install ${systemLog.data.name}@latest\" in your functions directory.`);\n                break;\n            case \"missing-package-json\":\n                this.log(\"WARN\", `The Cloud Functions directory you specified does not have a \"package.json\" file, so we can't load it.`);\n                break;\n            case \"function-code-resolution-failed\":\n                this.log(\"WARN\", systemLog.data.error);\n                const helper = [\"We were unable to load your functions code. (see above)\"];\n                if (systemLog.data.isPotentially.wrong_directory) {\n                    helper.push(`   - There is no \"package.json\" file in your functions directory.`);\n                }\n                if (systemLog.data.isPotentially.typescript) {\n                    helper.push(\"   - It appears your code is written in Typescript, which must be compiled before emulation.\");\n                }\n                if (systemLog.data.isPotentially.uncompiled) {\n                    helper.push(`   - You may be able to run \"npm run build\" in your functions directory to resolve this.`);\n                }\n                utils.logWarning(helper.join(\"\\n\"), \"warn\", this.data);\n                break;\n            case \"function-runtimeconfig-json-invalid\":\n                this.log(\"WARN\", \"Found .runtimeconfig.json but the JSON format is invalid.\");\n                break;\n            case \"function-env-load-failed\":\n                this.log(\"WARN\", \"Failed to load environment variables: \" + systemLog.text);\n                break;\n            default:\n        }\n    }\n    logLabeled(type, label, text) {\n        if (EmulatorLogger.shouldSupress(type)) {\n            logger_1.logger.debug(`[${label}] ${text}`);\n            return;\n        }\n        const mergedData = Object.assign(Object.assign({}, this.data), { metadata: Object.assign(Object.assign({}, this.data.metadata), { message: text }) });\n        switch (type) {\n            case \"DEBUG\":\n                logger_1.logger.debug(`[${label}] ${text}`);\n                break;\n            case \"BULLET\":\n                utils.logLabeledBullet(label, text, \"info\", mergedData);\n                break;\n            case \"SUCCESS\":\n                utils.logLabeledSuccess(label, text, \"info\", mergedData);\n                break;\n            case \"WARN\":\n                utils.logLabeledWarning(label, text, \"warn\", mergedData);\n                break;\n            case \"WARN_ONCE\":\n                if (!EmulatorLogger.warnOnceCache.has(text)) {\n                    utils.logLabeledWarning(label, text, \"warn\", mergedData);\n                    EmulatorLogger.warnOnceCache.add(text);\n                }\n                break;\n        }\n    }\n    static shouldSupress(type) {\n        const typeVerbosity = TYPE_VERBOSITY[type];\n        return EmulatorLogger.verbosity > typeVerbosity;\n    }\n}\nexports.EmulatorLogger = EmulatorLogger;\nEmulatorLogger.verbosity = Verbosity.DEBUG;\nEmulatorLogger.warnOnceCache = new Set();\n"]},"metadata":{},"sourceType":"script"}