{"ast":null,"code":"\"use strict\";\n\nconst path_1 = require(\"path\");\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\n\nfunction fileUriToPath(uri) {\n  if (typeof uri !== 'string' || uri.length <= 7 || uri.substring(0, 7) !== 'file://') {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  const rest = decodeURI(uri.substring(7));\n  const firstSlash = rest.indexOf('/');\n  let host = rest.substring(0, firstSlash);\n  let path = rest.substring(firstSlash + 1); // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n\n  if (host === 'localhost') {\n    host = '';\n  }\n\n  if (host) {\n    host = path_1.sep + path_1.sep + host;\n  } // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n\n\n  path = path.replace(/^(.+)\\|/, '$1:'); // for Windows, we need to invert the path separators from what a URI uses\n\n  if (path_1.sep === '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+:/.test(path)) {// has Windows drive at beginning of path\n  } else {\n    // unix path…\n    path = path_1.sep + path;\n  }\n\n  return host + path;\n}\n\nmodule.exports = fileUriToPath;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;AAEA;;;;;;AAMG;;;AAEH,SAAS,aAAT,CAAuB,GAAvB,EAAkC;AACjC,MACC,OAAO,GAAP,KAAe,QAAf,IACA,GAAG,CAAC,MAAJ,IAAc,CADd,IAEA,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,SAHzB,EAIE;AACD,UAAM,IAAI,SAAJ,CACL,sDADK,CAAN;AAGA;;AAED,QAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,SAAJ,CAAc,CAAd,CAAD,CAAtB;AACA,QAAM,UAAU,GAAG,IAAI,CAAC,OAAL,CAAa,GAAb,CAAnB;AACA,MAAI,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,UAAlB,CAAX;AACA,MAAI,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,UAAU,GAAG,CAA5B,CAAX,CAdiC,CAgBjC;AACA;AACA;AACA;;AACA,MAAI,IAAI,KAAK,WAAb,EAA0B;AACzB,IAAA,IAAI,GAAG,EAAP;AACA;;AAED,MAAI,IAAJ,EAAU;AACT,IAAA,IAAI,GAAG,MAAA,CAAA,GAAA,GAAM,MAAA,CAAA,GAAN,GAAY,IAAnB;AACA,GA1BgC,CA4BjC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,EAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,SAAb,EAAwB,KAAxB,CAAP,CAnCiC,CAqCjC;;AACA,MAAI,MAAA,CAAA,GAAA,KAAQ,IAAZ,EAAkB;AACjB,IAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,IAApB,CAAP;AACA;;AAED,MAAI,OAAO,IAAP,CAAY,IAAZ,CAAJ,EAAuB,CACtB;AACA,GAFD,MAEO;AACN;AACA,IAAA,IAAI,GAAG,MAAA,CAAA,GAAA,GAAM,IAAb;AACA;;AAED,SAAO,IAAI,GAAG,IAAd;AACA;;AAED,MAAA,CAAA,OAAA,GAAS,aAAT","sourceRoot":"","sourcesContent":["\"use strict\";\nconst path_1 = require(\"path\");\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\nfunction fileUriToPath(uri) {\n    if (typeof uri !== 'string' ||\n        uri.length <= 7 ||\n        uri.substring(0, 7) !== 'file://') {\n        throw new TypeError('must pass in a file:// URI to convert to a file path');\n    }\n    const rest = decodeURI(uri.substring(7));\n    const firstSlash = rest.indexOf('/');\n    let host = rest.substring(0, firstSlash);\n    let path = rest.substring(firstSlash + 1);\n    // 2.  Scheme Definition\n    // As a special case, <host> can be the string \"localhost\" or the empty\n    // string; this is interpreted as \"the machine from which the URL is\n    // being interpreted\".\n    if (host === 'localhost') {\n        host = '';\n    }\n    if (host) {\n        host = path_1.sep + path_1.sep + host;\n    }\n    // 3.2  Drives, drive letters, mount points, file system root\n    // Drive letters are mapped into the top of a file URI in various ways,\n    // depending on the implementation; some applications substitute\n    // vertical bar (\"|\") for the colon after the drive letter, yielding\n    // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n    // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n    // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n    path = path.replace(/^(.+)\\|/, '$1:');\n    // for Windows, we need to invert the path separators from what a URI uses\n    if (path_1.sep === '\\\\') {\n        path = path.replace(/\\//g, '\\\\');\n    }\n    if (/^.+:/.test(path)) {\n        // has Windows drive at beginning of path\n    }\n    else {\n        // unix path…\n        path = path_1.sep + path;\n    }\n    return host + path;\n}\nmodule.exports = fileUriToPath;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}