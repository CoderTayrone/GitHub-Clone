{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst metadata = require(\"../database/metadata\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nexports.default = new command_1.Command(\"database:rules:canary <rulesetId>\").description(\"mark a staged ruleset as the canary ruleset\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async (rulesetId, options) => {\n  const oldLabels = await metadata.getRulesetLabels(options.instance);\n  const newLabels = {\n    stable: oldLabels.stable,\n    canary: rulesetId\n  };\n  await metadata.setRulesetLabels(options.instance, newLabels);\n  return newLabels;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-rules-canary.js"],"names":["Object","defineProperty","exports","value","command_1","require","requirePermissions_1","metadata","types_1","commandUtils_1","requireDatabaseInstance_1","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","warnEmulatorNotSupported","Emulators","DATABASE","action","rulesetId","options","oldLabels","getRulesetLabels","instance","newLabels","stable","canary","setRulesetLabels"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMK,yBAAyB,GAAGL,OAAO,CAAC,4BAAD,CAAzC;;AACAH,OAAO,CAACS,OAAR,GAAkB,IAAIP,SAAS,CAACQ,OAAd,CAAsB,mCAAtB,EACbC,WADa,CACD,6CADC,EAEbC,MAFa,CAEN,uBAFM,EAEmB,yFAFnB,EAGbC,MAHa,CAGNT,oBAAoB,CAACU,kBAHf,EAGmC,CAAC,mCAAD,CAHnC,EAIbD,MAJa,CAINL,yBAAyB,CAACO,uBAJpB,EAKbF,MALa,CAKNN,cAAc,CAACS,wBALT,EAKmCV,OAAO,CAACW,SAAR,CAAkBC,QALrD,EAMbC,MANa,CAMN,OAAOC,SAAP,EAAkBC,OAAlB,KAA8B;AACtC,QAAMC,SAAS,GAAG,MAAMjB,QAAQ,CAACkB,gBAAT,CAA0BF,OAAO,CAACG,QAAlC,CAAxB;AACA,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAEJ,SAAS,CAACI,MADJ;AAEdC,IAAAA,MAAM,EAAEP;AAFM,GAAlB;AAIA,QAAMf,QAAQ,CAACuB,gBAAT,CAA0BP,OAAO,CAACG,QAAlC,EAA4CC,SAA5C,CAAN;AACA,SAAOA,SAAP;AACH,CAdiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst metadata = require(\"../database/metadata\");\nconst types_1 = require(\"../emulator/types\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nexports.default = new command_1.Command(\"database:rules:canary <rulesetId>\")\n    .description(\"mark a staged ruleset as the canary ruleset\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (rulesetId, options) => {\n    const oldLabels = await metadata.getRulesetLabels(options.instance);\n    const newLabels = {\n        stable: oldLabels.stable,\n        canary: rulesetId,\n    };\n    await metadata.setRulesetLabels(options.instance, newLabels);\n    return newLabels;\n});\n"]},"metadata":{},"sourceType":"script"}