{"ast":null,"code":"\"use strict\";\n\nconst api = require(\"../../api\");\n\nconst utils = require(\"../../utils\");\n\nconst {\n  logger\n} = require(\"../../logger\");\n\nmodule.exports = function (context, options) {\n  if (!context.hosting || !context.hosting.deploys) {\n    return Promise.resolve();\n  }\n\n  logger.debug(JSON.stringify(context.hosting.deploys, null, 2));\n  return Promise.all(context.hosting.deploys.map(async function (deploy) {\n    utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"finalizing version...\");\n    const finalizeResult = await api.request(\"PATCH\", `/v1beta1/${deploy.version}?updateMask=status`, {\n      origin: api.hostingApiOrigin,\n      auth: true,\n      data: {\n        status: \"FINALIZED\"\n      }\n    });\n    logger.debug(\"[hosting] finalized version for \" + deploy.site + \":\", finalizeResult.body);\n    utils.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"version finalized\");\n    utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"releasing new version...\");\n    const channelSegment = context.hostingChannel && context.hostingChannel !== \"live\" ? `/channels/${context.hostingChannel}` : \"\";\n\n    if (channelSegment) {\n      logger.debug(\"[hosting] releasing to channel:\", context.hostingChannel);\n    }\n\n    const releaseResult = await api.request(\"POST\", `/v1beta1/sites/${deploy.site}${channelSegment}/releases?version_name=${deploy.version}`, {\n      auth: true,\n      origin: api.hostingApiOrigin,\n      data: {\n        message: options.message || null\n      }\n    });\n    logger.debug(\"[hosting] release:\", releaseResult.body);\n    utils.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"release complete\");\n  }));\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/hosting/release.js"],"names":["api","require","utils","logger","module","exports","context","options","hosting","deploys","Promise","resolve","debug","JSON","stringify","all","map","deploy","logLabeledBullet","site","finalizeResult","request","version","origin","hostingApiOrigin","auth","data","status","body","logLabeledSuccess","channelSegment","hostingChannel","releaseResult","message"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,cAAD,CAA1B;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACzC,MAAI,CAACD,OAAO,CAACE,OAAT,IAAoB,CAACF,OAAO,CAACE,OAAR,CAAgBC,OAAzC,EAAkD;AAC9C,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH;;AACDR,EAAAA,MAAM,CAACS,KAAP,CAAaC,IAAI,CAACC,SAAL,CAAeR,OAAO,CAACE,OAAR,CAAgBC,OAA/B,EAAwC,IAAxC,EAA8C,CAA9C,CAAb;AACA,SAAOC,OAAO,CAACK,GAAR,CAAYT,OAAO,CAACE,OAAR,CAAgBC,OAAhB,CAAwBO,GAAxB,CAA4B,gBAAgBC,MAAhB,EAAwB;AACnEf,IAAAA,KAAK,CAACgB,gBAAN,CAAuB,aAAaD,MAAM,CAACE,IAApB,GAA2B,GAAlD,EAAuD,uBAAvD;AACA,UAAMC,cAAc,GAAG,MAAMpB,GAAG,CAACqB,OAAJ,CAAY,OAAZ,EAAsB,YAAWJ,MAAM,CAACK,OAAQ,oBAAhD,EAAqE;AAC9FC,MAAAA,MAAM,EAAEvB,GAAG,CAACwB,gBADkF;AAE9FC,MAAAA,IAAI,EAAE,IAFwF;AAG9FC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AAHwF,KAArE,CAA7B;AAKAxB,IAAAA,MAAM,CAACS,KAAP,CAAa,qCAAqCK,MAAM,CAACE,IAA5C,GAAmD,GAAhE,EAAqEC,cAAc,CAACQ,IAApF;AACA1B,IAAAA,KAAK,CAAC2B,iBAAN,CAAwB,aAAaZ,MAAM,CAACE,IAApB,GAA2B,GAAnD,EAAwD,mBAAxD;AACAjB,IAAAA,KAAK,CAACgB,gBAAN,CAAuB,aAAaD,MAAM,CAACE,IAApB,GAA2B,GAAlD,EAAuD,0BAAvD;AACA,UAAMW,cAAc,GAAGxB,OAAO,CAACyB,cAAR,IAA0BzB,OAAO,CAACyB,cAAR,KAA2B,MAArD,GAChB,aAAYzB,OAAO,CAACyB,cAAe,EADnB,GAEjB,EAFN;;AAGA,QAAID,cAAJ,EAAoB;AAChB3B,MAAAA,MAAM,CAACS,KAAP,CAAa,iCAAb,EAAgDN,OAAO,CAACyB,cAAxD;AACH;;AACD,UAAMC,aAAa,GAAG,MAAMhC,GAAG,CAACqB,OAAJ,CAAY,MAAZ,EAAqB,kBAAiBJ,MAAM,CAACE,IAAK,GAAEW,cAAe,0BAAyBb,MAAM,CAACK,OAAQ,EAA3G,EAA8G;AACtIG,MAAAA,IAAI,EAAE,IADgI;AAEtIF,MAAAA,MAAM,EAAEvB,GAAG,CAACwB,gBAF0H;AAGtIE,MAAAA,IAAI,EAAE;AAAEO,QAAAA,OAAO,EAAE1B,OAAO,CAAC0B,OAAR,IAAmB;AAA9B;AAHgI,KAA9G,CAA5B;AAKA9B,IAAAA,MAAM,CAACS,KAAP,CAAa,oBAAb,EAAmCoB,aAAa,CAACJ,IAAjD;AACA1B,IAAAA,KAAK,CAAC2B,iBAAN,CAAwB,aAAaZ,MAAM,CAACE,IAApB,GAA2B,GAAnD,EAAwD,kBAAxD;AACH,GAvBkB,CAAZ,CAAP;AAwBH,CA7BD","sourcesContent":["\"use strict\";\nconst api = require(\"../../api\");\nconst utils = require(\"../../utils\");\nconst { logger } = require(\"../../logger\");\nmodule.exports = function (context, options) {\n    if (!context.hosting || !context.hosting.deploys) {\n        return Promise.resolve();\n    }\n    logger.debug(JSON.stringify(context.hosting.deploys, null, 2));\n    return Promise.all(context.hosting.deploys.map(async function (deploy) {\n        utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"finalizing version...\");\n        const finalizeResult = await api.request(\"PATCH\", `/v1beta1/${deploy.version}?updateMask=status`, {\n            origin: api.hostingApiOrigin,\n            auth: true,\n            data: { status: \"FINALIZED\" },\n        });\n        logger.debug(\"[hosting] finalized version for \" + deploy.site + \":\", finalizeResult.body);\n        utils.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"version finalized\");\n        utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"releasing new version...\");\n        const channelSegment = context.hostingChannel && context.hostingChannel !== \"live\"\n            ? `/channels/${context.hostingChannel}`\n            : \"\";\n        if (channelSegment) {\n            logger.debug(\"[hosting] releasing to channel:\", context.hostingChannel);\n        }\n        const releaseResult = await api.request(\"POST\", `/v1beta1/sites/${deploy.site}${channelSegment}/releases?version_name=${deploy.version}`, {\n            auth: true,\n            origin: api.hostingApiOrigin,\n            data: { message: options.message || null },\n        });\n        logger.debug(\"[hosting] release:\", releaseResult.body);\n        utils.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"release complete\");\n    }));\n};\n"]},"metadata":{},"sourceType":"script"}