{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseModule = void 0;\n\nconst logger_1 = require(\"../../../../logger\");\n\nfunction parseModule(mod) {\n  const module = {\n    module: \"\",\n    version: \"\",\n    dependencies: {},\n    replaces: {}\n  };\n  const lines = mod.split(\"\\n\");\n  let inBlock = undefined;\n\n  for (const line of lines) {\n    if (inBlock) {\n      const endRequireMatch = /\\)/.exec(line);\n\n      if (endRequireMatch) {\n        inBlock = undefined;\n        continue;\n      }\n\n      let regex;\n\n      if (inBlock === module.dependencies) {\n        regex = /([^ ]+) ([^ ]+)/;\n      } else {\n        regex = /([^ ]+) => ([^ ]+)/;\n      }\n\n      const mapping = regex.exec(line);\n\n      if (mapping) {\n        inBlock[mapping[1]] = mapping[2];\n        continue;\n      }\n\n      if (line.trim()) {\n        logger_1.logger.debug(\"Don't know how to handle line\", line, \"inside a mod.go require block\");\n      }\n\n      continue;\n    }\n\n    const modMatch = /^module (.*)$/.exec(line);\n\n    if (modMatch) {\n      module.module = modMatch[1];\n      continue;\n    }\n\n    const versionMatch = /^go (\\d+\\.\\d+)$/.exec(line);\n\n    if (versionMatch) {\n      module.version = versionMatch[1];\n      continue;\n    }\n\n    const requireMatch = /^require ([^ ]+) ([^ ]+)/.exec(line);\n\n    if (requireMatch) {\n      module.dependencies[requireMatch[1]] = requireMatch[2];\n      continue;\n    }\n\n    const replaceMatch = /^replace ([^ ]+) => ([^ ]+)$/.exec(line);\n\n    if (replaceMatch) {\n      module.replaces[replaceMatch[1]] = replaceMatch[2];\n      continue;\n    }\n\n    const requireBlockMatch = /^require +\\(/.exec(line);\n\n    if (requireBlockMatch) {\n      inBlock = module.dependencies;\n      continue;\n    }\n\n    const replaceBlockMatch = /^replace +\\(/.exec(line);\n\n    if (replaceBlockMatch) {\n      inBlock = module.replaces;\n      continue;\n    }\n\n    if (line.trim()) {\n      logger_1.logger.debug(\"Don't know how to handle line\", line, \"in mod.go\");\n    }\n  }\n\n  return module;\n}\n\nexports.parseModule = parseModule;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/runtimes/golang/gomod.js"],"names":["Object","defineProperty","exports","value","parseModule","logger_1","require","mod","module","version","dependencies","replaces","lines","split","inBlock","undefined","line","endRequireMatch","exec","regex","mapping","trim","logger","debug","modMatch","versionMatch","requireMatch","replaceMatch","requireBlockMatch","replaceBlockMatch"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseModule = void 0;\nconst logger_1 = require(\"../../../../logger\");\nfunction parseModule(mod) {\n    const module = {\n        module: \"\",\n        version: \"\",\n        dependencies: {},\n        replaces: {},\n    };\n    const lines = mod.split(\"\\n\");\n    let inBlock = undefined;\n    for (const line of lines) {\n        if (inBlock) {\n            const endRequireMatch = /\\)/.exec(line);\n            if (endRequireMatch) {\n                inBlock = undefined;\n                continue;\n            }\n            let regex;\n            if (inBlock === module.dependencies) {\n                regex = /([^ ]+) ([^ ]+)/;\n            }\n            else {\n                regex = /([^ ]+) => ([^ ]+)/;\n            }\n            const mapping = regex.exec(line);\n            if (mapping) {\n                inBlock[mapping[1]] = mapping[2];\n                continue;\n            }\n            if (line.trim()) {\n                logger_1.logger.debug(\"Don't know how to handle line\", line, \"inside a mod.go require block\");\n            }\n            continue;\n        }\n        const modMatch = /^module (.*)$/.exec(line);\n        if (modMatch) {\n            module.module = modMatch[1];\n            continue;\n        }\n        const versionMatch = /^go (\\d+\\.\\d+)$/.exec(line);\n        if (versionMatch) {\n            module.version = versionMatch[1];\n            continue;\n        }\n        const requireMatch = /^require ([^ ]+) ([^ ]+)/.exec(line);\n        if (requireMatch) {\n            module.dependencies[requireMatch[1]] = requireMatch[2];\n            continue;\n        }\n        const replaceMatch = /^replace ([^ ]+) => ([^ ]+)$/.exec(line);\n        if (replaceMatch) {\n            module.replaces[replaceMatch[1]] = replaceMatch[2];\n            continue;\n        }\n        const requireBlockMatch = /^require +\\(/.exec(line);\n        if (requireBlockMatch) {\n            inBlock = module.dependencies;\n            continue;\n        }\n        const replaceBlockMatch = /^replace +\\(/.exec(line);\n        if (replaceBlockMatch) {\n            inBlock = module.replaces;\n            continue;\n        }\n        if (line.trim()) {\n            logger_1.logger.debug(\"Don't know how to handle line\", line, \"in mod.go\");\n        }\n    }\n    return module;\n}\nexports.parseModule = parseModule;\n"]},"metadata":{},"sourceType":"script"}