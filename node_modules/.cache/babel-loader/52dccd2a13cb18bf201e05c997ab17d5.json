{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\nconst isUrl = require(\"is-url\");\n\nconst _ = require(\"lodash\");\n\nconst patterns = require(\"../utils/patterns\");\n\nconst pathToRegexp = require(\"path-to-regexp\");\n\nconst slasher = require(\"glob-slasher\");\n\nfunction formatExternalUrl(u) {\n  const cleaned = u.replace(\"/http:/\", \"http://\").replace(\"/https:/\", \"https://\");\n  return isUrl(cleaned) ? cleaned : u;\n}\n\nfunction addQuery(url, qs) {\n  if (url.indexOf(\"?\") >= 0) {\n    return url + \"&\" + qs;\n  } else if (qs && qs.length) {\n    return url + \"?\" + qs;\n  }\n\n  return url;\n}\n\nconst Redirect = function (glob, regex, destination, type) {\n  this.type = type || 301;\n  this.glob = slasher(glob);\n  this.regex = regex;\n  this.destination = destination;\n\n  if (this.destination.match(/(?:^|\\/):/)) {\n    this.captureKeys = [];\n\n    if (this.glob) {\n      this.engine = \"glob\";\n      this.capture = pathToRegexp(this.glob, this.captureKeys);\n    }\n\n    if (this.regex) {\n      this.engine = \"pattern\";\n      this.capture = patterns.createRaw(this.regex);\n    }\n\n    this.compileDestination = pathToRegexp.compile(this.destination);\n  }\n};\n\nRedirect.prototype.test = function (url) {\n  let qs = \"\";\n\n  if (url.indexOf(\"?\") >= 0) {\n    const parts = url.split(\"?\");\n    url = parts[0];\n    qs = parts[1];\n  }\n\n  let match;\n\n  if (this.capture) {\n    match = this.capture.exec(url);\n  }\n\n  if (match) {\n    let params = {};\n\n    if (this.engine === \"glob\") {\n      for (let i = 0; i < this.captureKeys.length; i++) {\n        let m = match[i + 1];\n\n        if (m && m.indexOf(\"/\") >= 0) {\n          m = m.split(\"/\");\n        }\n\n        params[this.captureKeys[i].name] = m;\n      }\n    } else {\n      for (let j = 0; j < match.length; j++) {\n        params[j.toString()] = match[j];\n      }\n\n      if (match.groups) {\n        params = Object.assign(params, match.groups);\n      }\n    }\n\n    try {\n      const dest = decodeURIComponent(this.compileDestination(params));\n      return {\n        type: this.type,\n        destination: encodeURI(addQuery(dest, qs))\n      };\n    } catch (e) {\n      return undefined;\n    }\n  } else if (patterns.configMatcher(url, {\n    glob: this.glob,\n    regex: this.regex\n  })) {\n    return {\n      type: this.type,\n      destination: encodeURI(addQuery(this.destination, qs))\n    };\n  }\n\n  return undefined;\n};\n\nmodule.exports = function () {\n  return function (req, res, next) {\n    const config = _.get(req, \"superstatic.redirects\");\n\n    if (!config) {\n      return next();\n    }\n\n    const redirects = [];\n\n    if (_.isArray(config)) {\n      config.forEach(redir => {\n        const glob = redir.glob || redir.source;\n        redirects.push(new Redirect(glob, redir.regex, redir.destination, redir.type));\n      });\n    } else {\n      throw new Error(\"redirects provided in an unrecognized format\");\n    }\n\n    const matcher = function (url) {\n      for (let i = 0; i < redirects.length; i++) {\n        const result = redirects[i].test(url);\n\n        if (result) {\n          return result;\n        }\n      }\n\n      return undefined;\n    };\n\n    const match = matcher(req.url);\n\n    if (!match) {\n      return next();\n    } // Remove leading slash of a url\n\n\n    const redirectUrl = formatExternalUrl(match.destination);\n    return res.superstatic.handle({\n      redirect: redirectUrl,\n      status: match.type\n    });\n  };\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/superstatic/lib/middleware/redirects.js"],"names":["isUrl","require","_","patterns","pathToRegexp","slasher","formatExternalUrl","u","cleaned","replace","addQuery","url","qs","indexOf","length","Redirect","glob","regex","destination","type","match","captureKeys","engine","capture","createRaw","compileDestination","compile","prototype","test","parts","split","exec","params","i","m","name","j","toString","groups","Object","assign","dest","decodeURIComponent","encodeURI","e","undefined","configMatcher","module","exports","req","res","next","config","get","redirects","isArray","forEach","redir","source","push","Error","matcher","result","redirectUrl","superstatic","handle","redirect","status"],"mappings":"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","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n\nconst isUrl = require(\"is-url\");\nconst _ = require(\"lodash\");\n\nconst patterns = require(\"../utils/patterns\");\nconst pathToRegexp = require(\"path-to-regexp\");\nconst slasher = require(\"glob-slasher\");\n\nfunction formatExternalUrl(u) {\n  const cleaned = u\n    .replace(\"/http:/\", \"http://\")\n    .replace(\"/https:/\", \"https://\");\n\n  return isUrl(cleaned) ? cleaned : u;\n}\n\nfunction addQuery(url, qs) {\n  if (url.indexOf(\"?\") >= 0) {\n    return url + \"&\" + qs;\n  } else if (qs && qs.length) {\n    return url + \"?\" + qs;\n  }\n  return url;\n}\n\nconst Redirect = function(glob, regex, destination, type) {\n  this.type = type || 301;\n  this.glob = slasher(glob);\n  this.regex = regex;\n  this.destination = destination;\n\n  if (this.destination.match(/(?:^|\\/):/)) {\n    this.captureKeys = [];\n    if (this.glob) {\n      this.engine = \"glob\";\n      this.capture = pathToRegexp(this.glob, this.captureKeys);\n    }\n    if (this.regex) {\n      this.engine = \"pattern\";\n      this.capture = patterns.createRaw(this.regex);\n    }\n    this.compileDestination = pathToRegexp.compile(this.destination);\n  }\n};\n\nRedirect.prototype.test = function(url) {\n  let qs = \"\";\n  if (url.indexOf(\"?\") >= 0) {\n    const parts = url.split(\"?\");\n    url = parts[0];\n    qs = parts[1];\n  }\n\n  let match;\n  if (this.capture) {\n    match = this.capture.exec(url);\n  }\n  if (match) {\n    let params = {};\n    if (this.engine === \"glob\") {\n      for (let i = 0; i < this.captureKeys.length; i++) {\n        let m = match[i + 1];\n        if (m && m.indexOf(\"/\") >= 0) {\n          m = m.split(\"/\");\n        }\n\n        params[this.captureKeys[i].name] = m;\n      }\n    } else {\n      for (let j = 0; j < match.length; j++) {\n        params[j.toString()] = match[j];\n      }\n      if (match.groups) {\n        params = Object.assign(params, match.groups);\n      }\n    }\n\n    try {\n      const dest = decodeURIComponent(this.compileDestination(params));\n      return {\n        type: this.type,\n        destination: encodeURI(addQuery(dest, qs))\n      };\n    } catch (e) {\n      return undefined;\n    }\n  } else if (\n    patterns.configMatcher(url, { glob: this.glob, regex: this.regex })\n  ) {\n    return {\n      type: this.type,\n      destination: encodeURI(addQuery(this.destination, qs))\n    };\n  }\n  return undefined;\n};\n\nmodule.exports = function() {\n  return function(req, res, next) {\n    const config = _.get(req, \"superstatic.redirects\");\n    if (!config) {\n      return next();\n    }\n\n    const redirects = [];\n    if (_.isArray(config)) {\n      config.forEach((redir) => {\n        const glob = redir.glob || redir.source;\n        redirects.push(\n          new Redirect(glob, redir.regex, redir.destination, redir.type)\n        );\n      });\n    } else {\n      throw new Error(\"redirects provided in an unrecognized format\");\n    }\n\n    const matcher = function(url) {\n      for (let i = 0; i < redirects.length; i++) {\n        const result = redirects[i].test(url);\n        if (result) {\n          return result;\n        }\n      }\n      return undefined;\n    };\n\n    const match = matcher(req.url);\n\n    if (!match) {\n      return next();\n    }\n\n    // Remove leading slash of a url\n    const redirectUrl = formatExternalUrl(match.destination);\n\n    return res.superstatic.handle({\n      redirect: redirectUrl,\n      status: match.type\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}