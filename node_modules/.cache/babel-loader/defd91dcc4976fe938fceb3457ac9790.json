{"ast":null,"code":"/**\n * node-crc32-stream\n *\n * Copyright (c) 2014 Chris Talkington, contributors.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\n */\n'use strict';\n\nconst {\n  Transform\n} = require('readable-stream');\n\nconst crc32 = require('crc-32');\n\nclass CRC32Stream extends Transform {\n  constructor(options) {\n    super(options);\n    this.checksum = Buffer.allocUnsafe(4);\n    this.checksum.writeInt32BE(0, 0);\n    this.rawSize = 0;\n  }\n\n  _transform(chunk, encoding, callback) {\n    if (chunk) {\n      this.checksum = crc32.buf(chunk, this.checksum) >>> 0;\n      this.rawSize += chunk.length;\n    }\n\n    callback(null, chunk);\n  }\n\n  digest(encoding) {\n    const checksum = Buffer.allocUnsafe(4);\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\n    return encoding ? checksum.toString(encoding) : checksum;\n  }\n\n  hex() {\n    return this.digest('hex').toUpperCase();\n  }\n\n  size() {\n    return this.rawSize;\n  }\n\n}\n\nmodule.exports = CRC32Stream;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/crc32-stream/lib/crc32-stream.js"],"names":["Transform","require","crc32","CRC32Stream","constructor","options","checksum","Buffer","allocUnsafe","writeInt32BE","rawSize","_transform","chunk","encoding","callback","buf","length","digest","writeUInt32BE","toString","hex","toUpperCase","size","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;;AAED,MAAM;AAACA,EAAAA;AAAD,IAAcC,OAAO,CAAC,iBAAD,CAA3B;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAArB;;AAEA,MAAME,WAAN,SAA0BH,SAA1B,CAAoC;AAClCI,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,QAAL,GAAgBC,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAhB;AACA,SAAKF,QAAL,CAAcG,YAAd,CAA2B,CAA3B,EAA8B,CAA9B;AAEA,SAAKC,OAAL,GAAe,CAAf;AACD;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4B;AACpC,QAAIF,KAAJ,EAAW;AACT,WAAKN,QAAL,GAAgBJ,KAAK,CAACa,GAAN,CAAUH,KAAV,EAAiB,KAAKN,QAAtB,MAAoC,CAApD;AACA,WAAKI,OAAL,IAAgBE,KAAK,CAACI,MAAtB;AACD;;AAEDF,IAAAA,QAAQ,CAAC,IAAD,EAAOF,KAAP,CAAR;AACD;;AAEDK,EAAAA,MAAM,CAACJ,QAAD,EAAW;AACf,UAAMP,QAAQ,GAAGC,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAjB;AACAF,IAAAA,QAAQ,CAACY,aAAT,CAAuB,KAAKZ,QAAL,KAAkB,CAAzC,EAA4C,CAA5C;AACA,WAAOO,QAAQ,GAAGP,QAAQ,CAACa,QAAT,CAAkBN,QAAlB,CAAH,GAAiCP,QAAhD;AACD;;AAEDc,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKH,MAAL,CAAY,KAAZ,EAAmBI,WAAnB,EAAP;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKZ,OAAZ;AACD;;AA9BiC;;AAiCpCa,MAAM,CAACC,OAAP,GAAiBrB,WAAjB","sourcesContent":["/**\n * node-crc32-stream\n *\n * Copyright (c) 2014 Chris Talkington, contributors.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\n */\n\n 'use strict';\n\nconst {Transform} = require('readable-stream');\n\nconst crc32 = require('crc-32');\n\nclass CRC32Stream extends Transform {\n  constructor(options) {\n    super(options);\n    this.checksum = Buffer.allocUnsafe(4);\n    this.checksum.writeInt32BE(0, 0);\n\n    this.rawSize = 0;\n  }\n\n  _transform(chunk, encoding, callback) {\n    if (chunk) {\n      this.checksum = crc32.buf(chunk, this.checksum) >>> 0;\n      this.rawSize += chunk.length;\n    }\n\n    callback(null, chunk);\n  }\n\n  digest(encoding) {\n    const checksum = Buffer.allocUnsafe(4);\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\n    return encoding ? checksum.toString(encoding) : checksum;\n  }\n\n  hex() {\n    return this.digest('hex').toUpperCase();\n  }\n\n  size() {\n    return this.rawSize;\n  }\n}\n\nmodule.exports = CRC32Stream;\n"]},"metadata":{},"sourceType":"script"}