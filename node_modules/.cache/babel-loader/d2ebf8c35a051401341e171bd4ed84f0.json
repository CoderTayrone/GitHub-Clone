{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar _ = require(\"lodash\");\n\nvar api = require(\"./api\");\n\nconst {\n  logger\n} = require(\"./logger\");\n\nvar utils = require(\"./utils\");\n\nvar {\n  FirebaseError\n} = require(\"./error\");\n\nvar ALLOWED_JSON_KEYS = [\"localId\", \"email\", \"emailVerified\", \"passwordHash\", \"salt\", \"displayName\", \"photoUrl\", \"createdAt\", \"lastSignedInAt\", \"providerUserInfo\", \"phoneNumber\", \"disabled\", \"customAttributes\"];\nvar ALLOWED_JSON_KEYS_RENAMING = {\n  lastSignedInAt: \"lastLoginAt\"\n};\nvar ALLOWED_PROVIDER_USER_INFO_KEYS = [\"providerId\", \"rawId\", \"email\", \"displayName\", \"photoUrl\"];\nvar ALLOWED_PROVIDER_IDS = [\"google.com\", \"facebook.com\", \"twitter.com\", \"github.com\"];\n\nvar _isValidBase64 = function (str) {\n  var expected = Buffer.from(str, \"base64\").toString(\"base64\");\n\n  if (str.length < expected.length && str.slice(-1) !== \"=\") {\n    str += \"=\".repeat(expected.length - str.length);\n  }\n\n  return expected === str;\n};\n\nvar _toWebSafeBase64 = function (data) {\n  return data.toString(\"base64\").replace(/\\//g, \"_\").replace(/\\+/g, \"-\");\n};\n\nvar _addProviderUserInfo = function (user, providerId, arr) {\n  if (arr[0]) {\n    user.providerUserInfo.push({\n      providerId: providerId,\n      rawId: arr[0],\n      email: arr[1],\n      displayName: arr[2],\n      photoUrl: arr[3]\n    });\n  }\n};\n\nvar _genUploadAccountPostBody = function (projectId, accounts, hashOptions) {\n  var postBody = {\n    users: accounts.map(function (account) {\n      if (account.passwordHash) {\n        account.passwordHash = _toWebSafeBase64(account.passwordHash);\n      }\n\n      if (account.salt) {\n        account.salt = _toWebSafeBase64(account.salt);\n      }\n\n      _.each(ALLOWED_JSON_KEYS_RENAMING, function (value, key) {\n        if (account[key]) {\n          account[value] = account[key];\n          delete account[key];\n        }\n      });\n\n      return account;\n    })\n  };\n\n  if (hashOptions.hashAlgo) {\n    postBody.hashAlgorithm = hashOptions.hashAlgo;\n  }\n\n  if (hashOptions.hashKey) {\n    postBody.signerKey = _toWebSafeBase64(hashOptions.hashKey);\n  }\n\n  if (hashOptions.saltSeparator) {\n    postBody.saltSeparator = _toWebSafeBase64(hashOptions.saltSeparator);\n  }\n\n  if (hashOptions.rounds) {\n    postBody.rounds = hashOptions.rounds;\n  }\n\n  if (hashOptions.memCost) {\n    postBody.memoryCost = hashOptions.memCost;\n  }\n\n  if (hashOptions.cpuMemCost) {\n    postBody.cpuMemCost = hashOptions.cpuMemCost;\n  }\n\n  if (hashOptions.parallelization) {\n    postBody.parallelization = hashOptions.parallelization;\n  }\n\n  if (hashOptions.blockSize) {\n    postBody.blockSize = hashOptions.blockSize;\n  }\n\n  if (hashOptions.dkLen) {\n    postBody.dkLen = hashOptions.dkLen;\n  }\n\n  if (hashOptions.passwordHashOrder) {\n    postBody.passwordHashOrder = hashOptions.passwordHashOrder;\n  }\n\n  postBody.targetProjectId = projectId;\n  return postBody;\n};\n\nvar transArrayToUser = function (arr) {\n  var user = {\n    localId: arr[0],\n    email: arr[1],\n    emailVerified: arr[2] === \"true\",\n    passwordHash: arr[3],\n    salt: arr[4],\n    displayName: arr[5],\n    photoUrl: arr[6],\n    createdAt: arr[23],\n    lastLoginAt: arr[24],\n    phoneNumber: arr[25],\n    providerUserInfo: [],\n    disabled: arr[26],\n    customAttributes: arr[27]\n  };\n\n  _addProviderUserInfo(user, \"google.com\", arr.slice(7, 11));\n\n  _addProviderUserInfo(user, \"facebook.com\", arr.slice(11, 15));\n\n  _addProviderUserInfo(user, \"twitter.com\", arr.slice(15, 19));\n\n  _addProviderUserInfo(user, \"github.com\", arr.slice(19, 23));\n\n  if (user.passwordHash && !_isValidBase64(user.passwordHash)) {\n    return {\n      error: \"Password hash should be base64 encoded.\"\n    };\n  }\n\n  if (user.salt && !_isValidBase64(user.salt)) {\n    return {\n      error: \"Password salt should be base64 encoded.\"\n    };\n  }\n\n  return user;\n};\n\nvar validateOptions = function (options) {\n  var hashOptions = _validateRequiredParameters(options);\n\n  if (!hashOptions.valid) {\n    return hashOptions;\n  }\n\n  var hashInputOrder = options.hashInputOrder ? options.hashInputOrder.toUpperCase() : undefined;\n\n  if (hashInputOrder) {\n    if (hashInputOrder != \"SALT_FIRST\" && hashInputOrder != \"PASSWORD_FIRST\") {\n      throw new FirebaseError(\"Unknown password hash order flag\", {\n        exit: 1\n      });\n    } else {\n      hashOptions[\"passwordHashOrder\"] = hashInputOrder == \"SALT_FIRST\" ? \"SALT_AND_PASSWORD\" : \"PASSWORD_AND_SALT\";\n    }\n  }\n\n  return hashOptions;\n};\n\nvar _validateRequiredParameters = function (options) {\n  if (!options.hashAlgo) {\n    utils.logWarning(\"No hash algorithm specified. Password users cannot be imported.\");\n    return {\n      valid: true\n    };\n  }\n\n  var hashAlgo = options.hashAlgo.toUpperCase();\n  let roundsNum;\n\n  switch (hashAlgo) {\n    case \"HMAC_SHA512\":\n    case \"HMAC_SHA256\":\n    case \"HMAC_SHA1\":\n    case \"HMAC_MD5\":\n      if (!options.hashKey || options.hashKey === \"\") {\n        throw new FirebaseError(\"Must provide hash key(base64 encoded) for hash algorithm \" + options.hashAlgo, {\n          exit: 1\n        });\n      }\n\n      return {\n        hashAlgo: hashAlgo,\n        hashKey: options.hashKey,\n        valid: true\n      };\n\n    case \"MD5\":\n    case \"SHA1\":\n    case \"SHA256\":\n    case \"SHA512\":\n      roundsNum = parseInt(options.rounds, 10);\n      var minRounds = hashAlgo === \"MD5\" ? 0 : 1;\n\n      if (isNaN(roundsNum) || roundsNum < minRounds || roundsNum > 8192) {\n        throw new FirebaseError(`Must provide valid rounds(${minRounds}..8192) for hash algorithm ${options.hashAlgo}`, {\n          exit: 1\n        });\n      }\n\n      return {\n        hashAlgo: hashAlgo,\n        rounds: options.rounds,\n        valid: true\n      };\n\n    case \"PBKDF_SHA1\":\n    case \"PBKDF2_SHA256\":\n      roundsNum = parseInt(options.rounds, 10);\n\n      if (isNaN(roundsNum) || roundsNum < 0 || roundsNum > 120000) {\n        throw new FirebaseError(\"Must provide valid rounds(0..120000) for hash algorithm \" + options.hashAlgo, {\n          exit: 1\n        });\n      }\n\n      return {\n        hashAlgo: hashAlgo,\n        rounds: options.rounds,\n        valid: true\n      };\n\n    case \"SCRYPT\":\n      if (!options.hashKey || options.hashKey === \"\") {\n        throw new FirebaseError(\"Must provide hash key(base64 encoded) for hash algorithm \" + options.hashAlgo, {\n          exit: 1\n        });\n      }\n\n      roundsNum = parseInt(options.rounds, 10);\n\n      if (isNaN(roundsNum) || roundsNum <= 0 || roundsNum > 8) {\n        throw new FirebaseError(\"Must provide valid rounds(1..8) for hash algorithm \" + options.hashAlgo, {\n          exit: 1\n        });\n      }\n\n      var memCost = parseInt(options.memCost, 10);\n\n      if (isNaN(memCost) || memCost <= 0 || memCost > 14) {\n        throw new FirebaseError(\"Must provide valid memory cost(1..14) for hash algorithm \" + options.hashAlgo, {\n          exit: 1\n        });\n      }\n\n      var saltSeparator = \"\";\n\n      if (options.saltSeparator) {\n        saltSeparator = options.saltSeparator;\n      }\n\n      return {\n        hashAlgo: hashAlgo,\n        hashKey: options.hashKey,\n        saltSeparator: saltSeparator,\n        rounds: options.rounds,\n        memCost: options.memCost,\n        valid: true\n      };\n\n    case \"BCRYPT\":\n      return {\n        hashAlgo: hashAlgo,\n        valid: true\n      };\n\n    case \"STANDARD_SCRYPT\":\n      var cpuMemCost = parseInt(options.memCost, 10);\n      var parallelization = parseInt(options.parallelization, 10);\n      var blockSize = parseInt(options.blockSize, 10);\n      var dkLen = parseInt(options.dkLen, 10);\n      return {\n        hashAlgo: hashAlgo,\n        valid: true,\n        cpuMemCost: cpuMemCost,\n        parallelization: parallelization,\n        blockSize: blockSize,\n        dkLen: dkLen\n      };\n\n    default:\n      throw new FirebaseError(\"Unsupported hash algorithm \" + clc.bold(options.hashAlgo));\n  }\n};\n\nvar _validateProviderUserInfo = function (providerUserInfo) {\n  if (!_.includes(ALLOWED_PROVIDER_IDS, providerUserInfo.providerId)) {\n    return {\n      error: JSON.stringify(providerUserInfo, null, 2) + \" has unsupported providerId\"\n    };\n  }\n\n  var keydiff = _.difference(_.keys(providerUserInfo), ALLOWED_PROVIDER_USER_INFO_KEYS);\n\n  if (keydiff.length) {\n    return {\n      error: JSON.stringify(providerUserInfo, null, 2) + \" has unsupported keys: \" + keydiff.join(\",\")\n    };\n  }\n\n  return {};\n};\n\nvar validateUserJson = function (userJson) {\n  var keydiff = _.difference(_.keys(userJson), ALLOWED_JSON_KEYS);\n\n  if (keydiff.length) {\n    return {\n      error: JSON.stringify(userJson, null, 2) + \" has unsupported keys: \" + keydiff.join(\",\")\n    };\n  }\n\n  if (userJson.providerUserInfo) {\n    for (var i = 0; i < userJson.providerUserInfo.length; i++) {\n      var res = _validateProviderUserInfo(userJson.providerUserInfo[i]);\n\n      if (res.error) {\n        return res;\n      }\n    }\n  }\n\n  var badFormat = JSON.stringify(userJson, null, 2) + \" has invalid data format: \";\n\n  if (userJson.passwordHash && !_isValidBase64(userJson.passwordHash)) {\n    return {\n      error: badFormat + \"Password hash should be base64 encoded.\"\n    };\n  }\n\n  if (userJson.salt && !_isValidBase64(userJson.salt)) {\n    return {\n      error: badFormat + \"Password salt should be base64 encoded.\"\n    };\n  }\n\n  return {};\n};\n\nvar _sendRequest = function (projectId, userList, hashOptions) {\n  logger.info(\"Starting importing \" + userList.length + \" account(s).\");\n  return api.request(\"POST\", \"/identitytoolkit/v3/relyingparty/uploadAccount\", {\n    auth: true,\n    json: true,\n    data: _genUploadAccountPostBody(projectId, userList, hashOptions),\n    origin: api.googleOrigin\n  }).then(function (ret) {\n    if (ret.body.error) {\n      logger.info(\"Encountered problems while importing accounts. Details:\");\n      logger.info(ret.body.error.map(function (rawInfo) {\n        return {\n          account: JSON.stringify(userList[parseInt(rawInfo.index, 10)], null, 2),\n          reason: rawInfo.message\n        };\n      }));\n    } else {\n      utils.logSuccess(\"Imported successfully.\");\n    }\n\n    logger.info();\n  });\n};\n\nvar serialImportUsers = function (projectId, hashOptions, userListArr, index) {\n  return _sendRequest(projectId, userListArr[index], hashOptions).then(function () {\n    if (index < userListArr.length - 1) {\n      return serialImportUsers(projectId, hashOptions, userListArr, index + 1);\n    }\n  });\n};\n\nvar accountImporter = {\n  validateOptions: validateOptions,\n  validateUserJson: validateUserJson,\n  transArrayToUser: transArrayToUser,\n  serialImportUsers: serialImportUsers\n};\nmodule.exports = accountImporter;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/accountImporter.js"],"names":["clc","require","_","api","logger","utils","FirebaseError","ALLOWED_JSON_KEYS","ALLOWED_JSON_KEYS_RENAMING","lastSignedInAt","ALLOWED_PROVIDER_USER_INFO_KEYS","ALLOWED_PROVIDER_IDS","_isValidBase64","str","expected","Buffer","from","toString","length","slice","repeat","_toWebSafeBase64","data","replace","_addProviderUserInfo","user","providerId","arr","providerUserInfo","push","rawId","email","displayName","photoUrl","_genUploadAccountPostBody","projectId","accounts","hashOptions","postBody","users","map","account","passwordHash","salt","each","value","key","hashAlgo","hashAlgorithm","hashKey","signerKey","saltSeparator","rounds","memCost","memoryCost","cpuMemCost","parallelization","blockSize","dkLen","passwordHashOrder","targetProjectId","transArrayToUser","localId","emailVerified","createdAt","lastLoginAt","phoneNumber","disabled","customAttributes","error","validateOptions","options","_validateRequiredParameters","valid","hashInputOrder","toUpperCase","undefined","exit","logWarning","roundsNum","parseInt","minRounds","isNaN","bold","_validateProviderUserInfo","includes","JSON","stringify","keydiff","difference","keys","join","validateUserJson","userJson","i","res","badFormat","_sendRequest","userList","info","request","auth","json","origin","googleOrigin","then","ret","body","rawInfo","index","reason","message","logSuccess","serialImportUsers","userListArr","accountImporter","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar _ = require(\"lodash\");\nvar api = require(\"./api\");\nconst { logger } = require(\"./logger\");\nvar utils = require(\"./utils\");\nvar { FirebaseError } = require(\"./error\");\nvar ALLOWED_JSON_KEYS = [\n    \"localId\",\n    \"email\",\n    \"emailVerified\",\n    \"passwordHash\",\n    \"salt\",\n    \"displayName\",\n    \"photoUrl\",\n    \"createdAt\",\n    \"lastSignedInAt\",\n    \"providerUserInfo\",\n    \"phoneNumber\",\n    \"disabled\",\n    \"customAttributes\",\n];\nvar ALLOWED_JSON_KEYS_RENAMING = {\n    lastSignedInAt: \"lastLoginAt\",\n};\nvar ALLOWED_PROVIDER_USER_INFO_KEYS = [\"providerId\", \"rawId\", \"email\", \"displayName\", \"photoUrl\"];\nvar ALLOWED_PROVIDER_IDS = [\"google.com\", \"facebook.com\", \"twitter.com\", \"github.com\"];\nvar _isValidBase64 = function (str) {\n    var expected = Buffer.from(str, \"base64\").toString(\"base64\");\n    if (str.length < expected.length && str.slice(-1) !== \"=\") {\n        str += \"=\".repeat(expected.length - str.length);\n    }\n    return expected === str;\n};\nvar _toWebSafeBase64 = function (data) {\n    return data.toString(\"base64\").replace(/\\//g, \"_\").replace(/\\+/g, \"-\");\n};\nvar _addProviderUserInfo = function (user, providerId, arr) {\n    if (arr[0]) {\n        user.providerUserInfo.push({\n            providerId: providerId,\n            rawId: arr[0],\n            email: arr[1],\n            displayName: arr[2],\n            photoUrl: arr[3],\n        });\n    }\n};\nvar _genUploadAccountPostBody = function (projectId, accounts, hashOptions) {\n    var postBody = {\n        users: accounts.map(function (account) {\n            if (account.passwordHash) {\n                account.passwordHash = _toWebSafeBase64(account.passwordHash);\n            }\n            if (account.salt) {\n                account.salt = _toWebSafeBase64(account.salt);\n            }\n            _.each(ALLOWED_JSON_KEYS_RENAMING, function (value, key) {\n                if (account[key]) {\n                    account[value] = account[key];\n                    delete account[key];\n                }\n            });\n            return account;\n        }),\n    };\n    if (hashOptions.hashAlgo) {\n        postBody.hashAlgorithm = hashOptions.hashAlgo;\n    }\n    if (hashOptions.hashKey) {\n        postBody.signerKey = _toWebSafeBase64(hashOptions.hashKey);\n    }\n    if (hashOptions.saltSeparator) {\n        postBody.saltSeparator = _toWebSafeBase64(hashOptions.saltSeparator);\n    }\n    if (hashOptions.rounds) {\n        postBody.rounds = hashOptions.rounds;\n    }\n    if (hashOptions.memCost) {\n        postBody.memoryCost = hashOptions.memCost;\n    }\n    if (hashOptions.cpuMemCost) {\n        postBody.cpuMemCost = hashOptions.cpuMemCost;\n    }\n    if (hashOptions.parallelization) {\n        postBody.parallelization = hashOptions.parallelization;\n    }\n    if (hashOptions.blockSize) {\n        postBody.blockSize = hashOptions.blockSize;\n    }\n    if (hashOptions.dkLen) {\n        postBody.dkLen = hashOptions.dkLen;\n    }\n    if (hashOptions.passwordHashOrder) {\n        postBody.passwordHashOrder = hashOptions.passwordHashOrder;\n    }\n    postBody.targetProjectId = projectId;\n    return postBody;\n};\nvar transArrayToUser = function (arr) {\n    var user = {\n        localId: arr[0],\n        email: arr[1],\n        emailVerified: arr[2] === \"true\",\n        passwordHash: arr[3],\n        salt: arr[4],\n        displayName: arr[5],\n        photoUrl: arr[6],\n        createdAt: arr[23],\n        lastLoginAt: arr[24],\n        phoneNumber: arr[25],\n        providerUserInfo: [],\n        disabled: arr[26],\n        customAttributes: arr[27],\n    };\n    _addProviderUserInfo(user, \"google.com\", arr.slice(7, 11));\n    _addProviderUserInfo(user, \"facebook.com\", arr.slice(11, 15));\n    _addProviderUserInfo(user, \"twitter.com\", arr.slice(15, 19));\n    _addProviderUserInfo(user, \"github.com\", arr.slice(19, 23));\n    if (user.passwordHash && !_isValidBase64(user.passwordHash)) {\n        return {\n            error: \"Password hash should be base64 encoded.\",\n        };\n    }\n    if (user.salt && !_isValidBase64(user.salt)) {\n        return {\n            error: \"Password salt should be base64 encoded.\",\n        };\n    }\n    return user;\n};\nvar validateOptions = function (options) {\n    var hashOptions = _validateRequiredParameters(options);\n    if (!hashOptions.valid) {\n        return hashOptions;\n    }\n    var hashInputOrder = options.hashInputOrder ? options.hashInputOrder.toUpperCase() : undefined;\n    if (hashInputOrder) {\n        if (hashInputOrder != \"SALT_FIRST\" && hashInputOrder != \"PASSWORD_FIRST\") {\n            throw new FirebaseError(\"Unknown password hash order flag\", { exit: 1 });\n        }\n        else {\n            hashOptions[\"passwordHashOrder\"] =\n                hashInputOrder == \"SALT_FIRST\" ? \"SALT_AND_PASSWORD\" : \"PASSWORD_AND_SALT\";\n        }\n    }\n    return hashOptions;\n};\nvar _validateRequiredParameters = function (options) {\n    if (!options.hashAlgo) {\n        utils.logWarning(\"No hash algorithm specified. Password users cannot be imported.\");\n        return { valid: true };\n    }\n    var hashAlgo = options.hashAlgo.toUpperCase();\n    let roundsNum;\n    switch (hashAlgo) {\n        case \"HMAC_SHA512\":\n        case \"HMAC_SHA256\":\n        case \"HMAC_SHA1\":\n        case \"HMAC_MD5\":\n            if (!options.hashKey || options.hashKey === \"\") {\n                throw new FirebaseError(\"Must provide hash key(base64 encoded) for hash algorithm \" + options.hashAlgo, { exit: 1 });\n            }\n            return { hashAlgo: hashAlgo, hashKey: options.hashKey, valid: true };\n        case \"MD5\":\n        case \"SHA1\":\n        case \"SHA256\":\n        case \"SHA512\":\n            roundsNum = parseInt(options.rounds, 10);\n            var minRounds = hashAlgo === \"MD5\" ? 0 : 1;\n            if (isNaN(roundsNum) || roundsNum < minRounds || roundsNum > 8192) {\n                throw new FirebaseError(`Must provide valid rounds(${minRounds}..8192) for hash algorithm ${options.hashAlgo}`, { exit: 1 });\n            }\n            return { hashAlgo: hashAlgo, rounds: options.rounds, valid: true };\n        case \"PBKDF_SHA1\":\n        case \"PBKDF2_SHA256\":\n            roundsNum = parseInt(options.rounds, 10);\n            if (isNaN(roundsNum) || roundsNum < 0 || roundsNum > 120000) {\n                throw new FirebaseError(\"Must provide valid rounds(0..120000) for hash algorithm \" + options.hashAlgo, { exit: 1 });\n            }\n            return { hashAlgo: hashAlgo, rounds: options.rounds, valid: true };\n        case \"SCRYPT\":\n            if (!options.hashKey || options.hashKey === \"\") {\n                throw new FirebaseError(\"Must provide hash key(base64 encoded) for hash algorithm \" + options.hashAlgo, { exit: 1 });\n            }\n            roundsNum = parseInt(options.rounds, 10);\n            if (isNaN(roundsNum) || roundsNum <= 0 || roundsNum > 8) {\n                throw new FirebaseError(\"Must provide valid rounds(1..8) for hash algorithm \" + options.hashAlgo, { exit: 1 });\n            }\n            var memCost = parseInt(options.memCost, 10);\n            if (isNaN(memCost) || memCost <= 0 || memCost > 14) {\n                throw new FirebaseError(\"Must provide valid memory cost(1..14) for hash algorithm \" + options.hashAlgo, { exit: 1 });\n            }\n            var saltSeparator = \"\";\n            if (options.saltSeparator) {\n                saltSeparator = options.saltSeparator;\n            }\n            return {\n                hashAlgo: hashAlgo,\n                hashKey: options.hashKey,\n                saltSeparator: saltSeparator,\n                rounds: options.rounds,\n                memCost: options.memCost,\n                valid: true,\n            };\n        case \"BCRYPT\":\n            return { hashAlgo: hashAlgo, valid: true };\n        case \"STANDARD_SCRYPT\":\n            var cpuMemCost = parseInt(options.memCost, 10);\n            var parallelization = parseInt(options.parallelization, 10);\n            var blockSize = parseInt(options.blockSize, 10);\n            var dkLen = parseInt(options.dkLen, 10);\n            return {\n                hashAlgo: hashAlgo,\n                valid: true,\n                cpuMemCost: cpuMemCost,\n                parallelization: parallelization,\n                blockSize: blockSize,\n                dkLen: dkLen,\n            };\n        default:\n            throw new FirebaseError(\"Unsupported hash algorithm \" + clc.bold(options.hashAlgo));\n    }\n};\nvar _validateProviderUserInfo = function (providerUserInfo) {\n    if (!_.includes(ALLOWED_PROVIDER_IDS, providerUserInfo.providerId)) {\n        return {\n            error: JSON.stringify(providerUserInfo, null, 2) + \" has unsupported providerId\",\n        };\n    }\n    var keydiff = _.difference(_.keys(providerUserInfo), ALLOWED_PROVIDER_USER_INFO_KEYS);\n    if (keydiff.length) {\n        return {\n            error: JSON.stringify(providerUserInfo, null, 2) + \" has unsupported keys: \" + keydiff.join(\",\"),\n        };\n    }\n    return {};\n};\nvar validateUserJson = function (userJson) {\n    var keydiff = _.difference(_.keys(userJson), ALLOWED_JSON_KEYS);\n    if (keydiff.length) {\n        return {\n            error: JSON.stringify(userJson, null, 2) + \" has unsupported keys: \" + keydiff.join(\",\"),\n        };\n    }\n    if (userJson.providerUserInfo) {\n        for (var i = 0; i < userJson.providerUserInfo.length; i++) {\n            var res = _validateProviderUserInfo(userJson.providerUserInfo[i]);\n            if (res.error) {\n                return res;\n            }\n        }\n    }\n    var badFormat = JSON.stringify(userJson, null, 2) + \" has invalid data format: \";\n    if (userJson.passwordHash && !_isValidBase64(userJson.passwordHash)) {\n        return {\n            error: badFormat + \"Password hash should be base64 encoded.\",\n        };\n    }\n    if (userJson.salt && !_isValidBase64(userJson.salt)) {\n        return {\n            error: badFormat + \"Password salt should be base64 encoded.\",\n        };\n    }\n    return {};\n};\nvar _sendRequest = function (projectId, userList, hashOptions) {\n    logger.info(\"Starting importing \" + userList.length + \" account(s).\");\n    return api\n        .request(\"POST\", \"/identitytoolkit/v3/relyingparty/uploadAccount\", {\n        auth: true,\n        json: true,\n        data: _genUploadAccountPostBody(projectId, userList, hashOptions),\n        origin: api.googleOrigin,\n    })\n        .then(function (ret) {\n        if (ret.body.error) {\n            logger.info(\"Encountered problems while importing accounts. Details:\");\n            logger.info(ret.body.error.map(function (rawInfo) {\n                return {\n                    account: JSON.stringify(userList[parseInt(rawInfo.index, 10)], null, 2),\n                    reason: rawInfo.message,\n                };\n            }));\n        }\n        else {\n            utils.logSuccess(\"Imported successfully.\");\n        }\n        logger.info();\n    });\n};\nvar serialImportUsers = function (projectId, hashOptions, userListArr, index) {\n    return _sendRequest(projectId, userListArr[index], hashOptions).then(function () {\n        if (index < userListArr.length - 1) {\n            return serialImportUsers(projectId, hashOptions, userListArr, index + 1);\n        }\n    });\n};\nvar accountImporter = {\n    validateOptions: validateOptions,\n    validateUserJson: validateUserJson,\n    transArrayToUser: transArrayToUser,\n    serialImportUsers: serialImportUsers,\n};\nmodule.exports = accountImporter;\n"]},"metadata":{},"sourceType":"script"}