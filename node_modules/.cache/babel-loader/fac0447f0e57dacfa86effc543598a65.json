{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.specFromFunction = exports.functionFromSpec = exports.deleteFunction = exports.updateFunction = exports.listAllFunctions = exports.listFunctions = exports.getFunction = exports.createFunction = exports.generateUploadUrl = exports.PUBSUB_PUBLISH_EVENT = exports.API_VERSION = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst error_1 = require(\"../error\");\n\nconst api_1 = require(\"../api\");\n\nconst logger_1 = require(\"../logger\");\n\nconst backend = require(\"../deploy/functions/backend\");\n\nconst runtimes = require(\"../deploy/functions/runtimes\");\n\nconst proto = require(\"./proto\");\n\nconst utils = require(\"../utils\");\n\nexports.API_VERSION = \"v2alpha\";\nconst client = new apiv2_1.Client({\n  urlPrefix: api_1.functionsV2Origin,\n  auth: true,\n  apiVersion: exports.API_VERSION\n});\nexports.PUBSUB_PUBLISH_EVENT = \"google.cloud.pubsub.topic.v1.messagePublished\";\n\nfunction functionsOpLogReject(funcName, type, err) {\n  var _a, _b;\n\n  if (((_b = (_a = err === null || err === void 0 ? void 0 : err.context) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.statusCode) === 429) {\n    utils.logWarning(`${clc.bold.yellow(\"functions:\")} got \"Quota Exceeded\" error while trying to ${type} ${funcName}. Waiting to retry...`);\n  } else {\n    utils.logWarning(clc.bold.yellow(\"functions:\") + \" failed to \" + type + \" function \" + funcName);\n  }\n\n  throw new error_1.FirebaseError(`Failed to ${type} function ${funcName}`, {\n    original: err,\n    context: {\n      function: funcName\n    }\n  });\n}\n\nasync function generateUploadUrl(projectId, location) {\n  try {\n    const res = await client.post(`projects/${projectId}/locations/${location}/functions:generateUploadUrl`);\n    return res.body;\n  } catch (err) {\n    logger_1.logger.info(\"\\n\\nThere was an issue deploying your functions. Verify that your project has a Google App Engine instance setup at https://console.cloud.google.com/appengine and try again. If this issue persists, please contact support.\");\n    throw err;\n  }\n}\n\nexports.generateUploadUrl = generateUploadUrl;\n\nasync function createFunction(cloudFunction) {\n  const components = cloudFunction.name.split(\"/\");\n  const functionId = components.splice(-1, 1)[0];\n\n  try {\n    const res = await client.post(components.join(\"/\"), cloudFunction, {\n      queryParams: {\n        functionId\n      }\n    });\n    return res.body;\n  } catch (err) {\n    throw functionsOpLogReject(cloudFunction.name, \"create\", err);\n  }\n}\n\nexports.createFunction = createFunction;\n\nasync function getFunction(projectId, location, functionId) {\n  const name = `projects/${projectId}/locations/${location}/functions/${functionId}`;\n  const res = await client.get(name);\n  return res.body;\n}\n\nexports.getFunction = getFunction;\n\nasync function listFunctions(projectId, region) {\n  const res = await listFunctionsInternal(projectId, region);\n\n  if (res.unreachable.includes(region)) {\n    throw new error_1.FirebaseError(`Cloud Functions region ${region} is unavailable`);\n  }\n\n  return res.functions;\n}\n\nexports.listFunctions = listFunctions;\n\nasync function listAllFunctions(projectId) {\n  return await listFunctionsInternal(projectId, \"-\");\n}\n\nexports.listAllFunctions = listAllFunctions;\n\nasync function listFunctionsInternal(projectId, region) {\n  const functions = [];\n  const unreacahble = new Set();\n  let pageToken = \"\";\n\n  while (true) {\n    const url = `projects/${projectId}/locations/${region}/functions`;\n    const opts = pageToken == \"\" ? {} : {\n      queryParams: {\n        pageToken\n      }\n    };\n    const res = await client.get(url, opts);\n    functions.push(...(res.body.functions || []));\n\n    for (const region of res.body.unreachable || []) {\n      unreacahble.add(region);\n    }\n\n    if (!res.body.nextPageToken) {\n      return {\n        functions,\n        unreachable: Array.from(unreacahble)\n      };\n    }\n\n    pageToken = res.body.nextPageToken;\n  }\n}\n\nasync function updateFunction(cloudFunction) {\n  try {\n    const queryParams = {\n      updateMask: proto.fieldMasks(cloudFunction).join(\",\")\n    };\n    const res = await client.patch(cloudFunction.name, cloudFunction, {\n      queryParams\n    });\n    return res.body;\n  } catch (err) {\n    throw functionsOpLogReject(cloudFunction.name, \"update\", err);\n  }\n}\n\nexports.updateFunction = updateFunction;\n\nasync function deleteFunction(cloudFunction) {\n  try {\n    const res = await client.delete(cloudFunction);\n    return res.body;\n  } catch (err) {\n    throw functionsOpLogReject(cloudFunction, \"update\", err);\n  }\n}\n\nexports.deleteFunction = deleteFunction;\n\nfunction functionFromSpec(cloudFunction, source) {\n  if (cloudFunction.platform != \"gcfv2\") {\n    throw new error_1.FirebaseError(\"Trying to create a v2 CloudFunction with v1 API. This should never happen\");\n  }\n\n  if (!runtimes.isValidRuntime(cloudFunction.runtime)) {\n    throw new error_1.FirebaseError(\"Failed internal assertion. Trying to deploy a new function with a deprecated runtime.\" + \" This should never happen\");\n  }\n\n  const gcfFunction = {\n    name: backend.functionName(cloudFunction),\n    buildConfig: {\n      runtime: cloudFunction.runtime,\n      entryPoint: cloudFunction.entryPoint,\n      source: {\n        storageSource: source\n      },\n      environmentVariables: {}\n    },\n    serviceConfig: {}\n  };\n  proto.copyIfPresent(gcfFunction.serviceConfig, cloudFunction, \"availableMemoryMb\", \"environmentVariables\", \"vpcConnector\", \"vpcConnectorEgressSettings\", \"serviceAccountEmail\", \"ingressSettings\");\n  proto.renameIfPresent(gcfFunction.serviceConfig, cloudFunction, \"timeoutSeconds\", \"timeout\", proto.secondsFromDuration);\n  proto.renameIfPresent(gcfFunction.serviceConfig, cloudFunction, \"minInstanceCount\", \"minInstances\");\n  proto.renameIfPresent(gcfFunction.serviceConfig, cloudFunction, \"maxInstanceCount\", \"maxInstances\");\n\n  if (backend.isEventTrigger(cloudFunction.trigger)) {\n    gcfFunction.eventTrigger = {\n      eventType: cloudFunction.trigger.eventType\n    };\n\n    if (gcfFunction.eventTrigger.eventType === exports.PUBSUB_PUBLISH_EVENT) {\n      gcfFunction.eventTrigger.pubsubTopic = cloudFunction.trigger.eventFilters.resource;\n    } else {\n      gcfFunction.eventTrigger.eventFilters = [];\n\n      for (const [attribute, value] of Object.entries(cloudFunction.trigger.eventFilters)) {\n        gcfFunction.eventTrigger.eventFilters.push({\n          attribute,\n          value\n        });\n      }\n    }\n\n    if (cloudFunction.trigger.retry) {\n      logger_1.logger.warn(\"Cannot set a retry policy on Cloud Function\", cloudFunction.id);\n    }\n  } else if (cloudFunction.trigger.allowInsecure) {\n    logger_1.logger.warn(\"Cannot enable insecure traffic for Cloud Function\", cloudFunction.id);\n  }\n\n  proto.copyIfPresent(gcfFunction, cloudFunction, \"labels\");\n  return gcfFunction;\n}\n\nexports.functionFromSpec = functionFromSpec;\n\nfunction specFromFunction(gcfFunction) {\n  const [, project,, region,, id] = gcfFunction.name.split(\"/\");\n  let trigger;\n\n  if (gcfFunction.eventTrigger) {\n    trigger = {\n      eventType: gcfFunction.eventTrigger.eventType,\n      eventFilters: {},\n      retry: false\n    };\n\n    if (gcfFunction.eventTrigger.pubsubTopic) {\n      trigger.eventFilters.resource = gcfFunction.eventTrigger.pubsubTopic;\n    } else {\n      for (const {\n        attribute,\n        value\n      } of gcfFunction.eventTrigger.eventFilters || []) {\n        trigger.eventFilters[attribute] = value;\n      }\n    }\n  } else {\n    trigger = {\n      allowInsecure: false\n    };\n  }\n\n  if (!runtimes.isValidRuntime(gcfFunction.buildConfig.runtime)) {\n    logger_1.logger.debug(\"GCFv2 function has a deprecated runtime:\", JSON.stringify(gcfFunction, null, 2));\n  }\n\n  const cloudFunction = {\n    platform: \"gcfv2\",\n    id,\n    project,\n    region,\n    trigger,\n    entryPoint: gcfFunction.buildConfig.entryPoint,\n    runtime: gcfFunction.buildConfig.runtime,\n    uri: gcfFunction.serviceConfig.uri\n  };\n  proto.copyIfPresent(cloudFunction, gcfFunction.serviceConfig, \"serviceAccountEmail\", \"availableMemoryMb\", \"vpcConnector\", \"vpcConnectorEgressSettings\", \"ingressSettings\", \"environmentVariables\");\n  proto.renameIfPresent(cloudFunction, gcfFunction.serviceConfig, \"timeout\", \"timeoutSeconds\", proto.durationFromSeconds);\n  proto.renameIfPresent(cloudFunction, gcfFunction.serviceConfig, \"minInstances\", \"minInstanceCount\");\n  proto.renameIfPresent(cloudFunction, gcfFunction.serviceConfig, \"maxInstances\", \"maxInstanceCount\");\n  proto.copyIfPresent(cloudFunction, gcfFunction, \"labels\");\n  return cloudFunction;\n}\n\nexports.specFromFunction = specFromFunction;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/gcp/cloudfunctionsv2.js"],"names":["Object","defineProperty","exports","value","specFromFunction","functionFromSpec","deleteFunction","updateFunction","listAllFunctions","listFunctions","getFunction","createFunction","generateUploadUrl","PUBSUB_PUBLISH_EVENT","API_VERSION","clc","require","apiv2_1","error_1","api_1","logger_1","backend","runtimes","proto","utils","client","Client","urlPrefix","functionsV2Origin","auth","apiVersion","functionsOpLogReject","funcName","type","err","_a","_b","context","response","statusCode","logWarning","bold","yellow","FirebaseError","original","function","projectId","location","res","post","body","logger","info","cloudFunction","components","name","split","functionId","splice","join","queryParams","get","region","listFunctionsInternal","unreachable","includes","functions","unreacahble","Set","pageToken","url","opts","push","add","nextPageToken","Array","from","updateMask","fieldMasks","patch","delete","source","platform","isValidRuntime","runtime","gcfFunction","functionName","buildConfig","entryPoint","storageSource","environmentVariables","serviceConfig","copyIfPresent","renameIfPresent","secondsFromDuration","isEventTrigger","trigger","eventTrigger","eventType","pubsubTopic","eventFilters","resource","attribute","entries","retry","warn","id","allowInsecure","project","debug","JSON","stringify","uri","durationFromSeconds"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.specFromFunction = exports.functionFromSpec = exports.deleteFunction = exports.updateFunction = exports.listAllFunctions = exports.listFunctions = exports.getFunction = exports.createFunction = exports.generateUploadUrl = exports.PUBSUB_PUBLISH_EVENT = exports.API_VERSION = void 0;\nconst clc = require(\"cli-color\");\nconst apiv2_1 = require(\"../apiv2\");\nconst error_1 = require(\"../error\");\nconst api_1 = require(\"../api\");\nconst logger_1 = require(\"../logger\");\nconst backend = require(\"../deploy/functions/backend\");\nconst runtimes = require(\"../deploy/functions/runtimes\");\nconst proto = require(\"./proto\");\nconst utils = require(\"../utils\");\nexports.API_VERSION = \"v2alpha\";\nconst client = new apiv2_1.Client({\n    urlPrefix: api_1.functionsV2Origin,\n    auth: true,\n    apiVersion: exports.API_VERSION,\n});\nexports.PUBSUB_PUBLISH_EVENT = \"google.cloud.pubsub.topic.v1.messagePublished\";\nfunction functionsOpLogReject(funcName, type, err) {\n    var _a, _b;\n    if (((_b = (_a = err === null || err === void 0 ? void 0 : err.context) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.statusCode) === 429) {\n        utils.logWarning(`${clc.bold.yellow(\"functions:\")} got \"Quota Exceeded\" error while trying to ${type} ${funcName}. Waiting to retry...`);\n    }\n    else {\n        utils.logWarning(clc.bold.yellow(\"functions:\") + \" failed to \" + type + \" function \" + funcName);\n    }\n    throw new error_1.FirebaseError(`Failed to ${type} function ${funcName}`, {\n        original: err,\n        context: { function: funcName },\n    });\n}\nasync function generateUploadUrl(projectId, location) {\n    try {\n        const res = await client.post(`projects/${projectId}/locations/${location}/functions:generateUploadUrl`);\n        return res.body;\n    }\n    catch (err) {\n        logger_1.logger.info(\"\\n\\nThere was an issue deploying your functions. Verify that your project has a Google App Engine instance setup at https://console.cloud.google.com/appengine and try again. If this issue persists, please contact support.\");\n        throw err;\n    }\n}\nexports.generateUploadUrl = generateUploadUrl;\nasync function createFunction(cloudFunction) {\n    const components = cloudFunction.name.split(\"/\");\n    const functionId = components.splice(-1, 1)[0];\n    try {\n        const res = await client.post(components.join(\"/\"), cloudFunction, { queryParams: { functionId } });\n        return res.body;\n    }\n    catch (err) {\n        throw functionsOpLogReject(cloudFunction.name, \"create\", err);\n    }\n}\nexports.createFunction = createFunction;\nasync function getFunction(projectId, location, functionId) {\n    const name = `projects/${projectId}/locations/${location}/functions/${functionId}`;\n    const res = await client.get(name);\n    return res.body;\n}\nexports.getFunction = getFunction;\nasync function listFunctions(projectId, region) {\n    const res = await listFunctionsInternal(projectId, region);\n    if (res.unreachable.includes(region)) {\n        throw new error_1.FirebaseError(`Cloud Functions region ${region} is unavailable`);\n    }\n    return res.functions;\n}\nexports.listFunctions = listFunctions;\nasync function listAllFunctions(projectId) {\n    return await listFunctionsInternal(projectId, \"-\");\n}\nexports.listAllFunctions = listAllFunctions;\nasync function listFunctionsInternal(projectId, region) {\n    const functions = [];\n    const unreacahble = new Set();\n    let pageToken = \"\";\n    while (true) {\n        const url = `projects/${projectId}/locations/${region}/functions`;\n        const opts = pageToken == \"\" ? {} : { queryParams: { pageToken } };\n        const res = await client.get(url, opts);\n        functions.push(...(res.body.functions || []));\n        for (const region of res.body.unreachable || []) {\n            unreacahble.add(region);\n        }\n        if (!res.body.nextPageToken) {\n            return {\n                functions,\n                unreachable: Array.from(unreacahble),\n            };\n        }\n        pageToken = res.body.nextPageToken;\n    }\n}\nasync function updateFunction(cloudFunction) {\n    try {\n        const queryParams = {\n            updateMask: proto.fieldMasks(cloudFunction).join(\",\"),\n        };\n        const res = await client.patch(cloudFunction.name, cloudFunction, { queryParams });\n        return res.body;\n    }\n    catch (err) {\n        throw functionsOpLogReject(cloudFunction.name, \"update\", err);\n    }\n}\nexports.updateFunction = updateFunction;\nasync function deleteFunction(cloudFunction) {\n    try {\n        const res = await client.delete(cloudFunction);\n        return res.body;\n    }\n    catch (err) {\n        throw functionsOpLogReject(cloudFunction, \"update\", err);\n    }\n}\nexports.deleteFunction = deleteFunction;\nfunction functionFromSpec(cloudFunction, source) {\n    if (cloudFunction.platform != \"gcfv2\") {\n        throw new error_1.FirebaseError(\"Trying to create a v2 CloudFunction with v1 API. This should never happen\");\n    }\n    if (!runtimes.isValidRuntime(cloudFunction.runtime)) {\n        throw new error_1.FirebaseError(\"Failed internal assertion. Trying to deploy a new function with a deprecated runtime.\" +\n            \" This should never happen\");\n    }\n    const gcfFunction = {\n        name: backend.functionName(cloudFunction),\n        buildConfig: {\n            runtime: cloudFunction.runtime,\n            entryPoint: cloudFunction.entryPoint,\n            source: {\n                storageSource: source,\n            },\n            environmentVariables: {},\n        },\n        serviceConfig: {},\n    };\n    proto.copyIfPresent(gcfFunction.serviceConfig, cloudFunction, \"availableMemoryMb\", \"environmentVariables\", \"vpcConnector\", \"vpcConnectorEgressSettings\", \"serviceAccountEmail\", \"ingressSettings\");\n    proto.renameIfPresent(gcfFunction.serviceConfig, cloudFunction, \"timeoutSeconds\", \"timeout\", proto.secondsFromDuration);\n    proto.renameIfPresent(gcfFunction.serviceConfig, cloudFunction, \"minInstanceCount\", \"minInstances\");\n    proto.renameIfPresent(gcfFunction.serviceConfig, cloudFunction, \"maxInstanceCount\", \"maxInstances\");\n    if (backend.isEventTrigger(cloudFunction.trigger)) {\n        gcfFunction.eventTrigger = {\n            eventType: cloudFunction.trigger.eventType,\n        };\n        if (gcfFunction.eventTrigger.eventType === exports.PUBSUB_PUBLISH_EVENT) {\n            gcfFunction.eventTrigger.pubsubTopic = cloudFunction.trigger.eventFilters.resource;\n        }\n        else {\n            gcfFunction.eventTrigger.eventFilters = [];\n            for (const [attribute, value] of Object.entries(cloudFunction.trigger.eventFilters)) {\n                gcfFunction.eventTrigger.eventFilters.push({ attribute, value });\n            }\n        }\n        if (cloudFunction.trigger.retry) {\n            logger_1.logger.warn(\"Cannot set a retry policy on Cloud Function\", cloudFunction.id);\n        }\n    }\n    else if (cloudFunction.trigger.allowInsecure) {\n        logger_1.logger.warn(\"Cannot enable insecure traffic for Cloud Function\", cloudFunction.id);\n    }\n    proto.copyIfPresent(gcfFunction, cloudFunction, \"labels\");\n    return gcfFunction;\n}\nexports.functionFromSpec = functionFromSpec;\nfunction specFromFunction(gcfFunction) {\n    const [, project, , region, , id] = gcfFunction.name.split(\"/\");\n    let trigger;\n    if (gcfFunction.eventTrigger) {\n        trigger = {\n            eventType: gcfFunction.eventTrigger.eventType,\n            eventFilters: {},\n            retry: false,\n        };\n        if (gcfFunction.eventTrigger.pubsubTopic) {\n            trigger.eventFilters.resource = gcfFunction.eventTrigger.pubsubTopic;\n        }\n        else {\n            for (const { attribute, value } of gcfFunction.eventTrigger.eventFilters || []) {\n                trigger.eventFilters[attribute] = value;\n            }\n        }\n    }\n    else {\n        trigger = {\n            allowInsecure: false,\n        };\n    }\n    if (!runtimes.isValidRuntime(gcfFunction.buildConfig.runtime)) {\n        logger_1.logger.debug(\"GCFv2 function has a deprecated runtime:\", JSON.stringify(gcfFunction, null, 2));\n    }\n    const cloudFunction = {\n        platform: \"gcfv2\",\n        id,\n        project,\n        region,\n        trigger,\n        entryPoint: gcfFunction.buildConfig.entryPoint,\n        runtime: gcfFunction.buildConfig.runtime,\n        uri: gcfFunction.serviceConfig.uri,\n    };\n    proto.copyIfPresent(cloudFunction, gcfFunction.serviceConfig, \"serviceAccountEmail\", \"availableMemoryMb\", \"vpcConnector\", \"vpcConnectorEgressSettings\", \"ingressSettings\", \"environmentVariables\");\n    proto.renameIfPresent(cloudFunction, gcfFunction.serviceConfig, \"timeout\", \"timeoutSeconds\", proto.durationFromSeconds);\n    proto.renameIfPresent(cloudFunction, gcfFunction.serviceConfig, \"minInstances\", \"minInstanceCount\");\n    proto.renameIfPresent(cloudFunction, gcfFunction.serviceConfig, \"maxInstances\", \"maxInstanceCount\");\n    proto.copyIfPresent(cloudFunction, gcfFunction, \"labels\");\n    return cloudFunction;\n}\nexports.specFromFunction = specFromFunction;\n"]},"metadata":{},"sourceType":"script"}