{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _isWindows = require('./is-windows');\n\nvar _isWindows2 = _interopRequireDefault(_isWindows);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = commandConvert;\n/**\n * Converts an environment variable usage to be appropriate for the current OS\n * @param {String} command Command to convert\n * @param {Object} env Map of the current environment variable names and their values\n * @param {boolean} normalize If the command should be normalized using `path`\n * after converting\n * @returns {String} Converted command\n */\n\nfunction commandConvert(command, env) {\n  var normalize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!(0, _isWindows2.default)()) {\n    return command;\n  }\n\n  var envUnixRegex = /\\$(\\w+)|\\${(\\w+)}/g; // $my_var or ${my_var}\n\n  var convertedCmd = command.replace(envUnixRegex, function (match, $1, $2) {\n    var varName = $1 || $2; // In Windows, non-existent variables are not replaced by the shell,\n    // so for example \"echo %FOO%\" will literally print the string \"%FOO%\", as\n    // opposed to printing an empty string in UNIX. See kentcdodds/cross-env#145\n    // If the env variable isn't defined at runtime, just strip it from the command entirely\n\n    return env[varName] ? `%${varName}%` : '';\n  }); // Normalization is required for commands with relative paths\n  // For example, `./cmd.bat`. See kentcdodds/cross-env#127\n  // However, it should not be done for command arguments.\n  // See https://github.com/kentcdodds/cross-env/pull/130#issuecomment-319887970\n\n  return normalize === true ? _path2.default.normalize(convertedCmd) : convertedCmd;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/cross-env/dist/command.js"],"names":["Object","defineProperty","exports","value","_path","require","_path2","_interopRequireDefault","_isWindows","_isWindows2","obj","__esModule","default","commandConvert","command","env","normalize","arguments","length","undefined","envUnixRegex","convertedCmd","replace","match","$1","$2","varName"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACH,KAAD,CAAnC;;AAEA,IAAII,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAD,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/FR,OAAO,CAACU,OAAR,GAAkBC,cAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,GAAjC,EAAsC;AACpC,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;;AAEA,MAAI,CAAC,CAAC,GAAGR,WAAW,CAACG,OAAhB,GAAL,EAAiC;AAC/B,WAAOE,OAAP;AACD;;AACD,MAAIM,YAAY,GAAG,oBAAnB,CANoC,CAMK;;AACzC,MAAIC,YAAY,GAAGP,OAAO,CAACQ,OAAR,CAAgBF,YAAhB,EAA8B,UAAUG,KAAV,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyB;AACxE,QAAIC,OAAO,GAAGF,EAAE,IAAIC,EAApB,CADwE,CAExE;AACA;AACA;AACA;;AACA,WAAOV,GAAG,CAACW,OAAD,CAAH,GAAgB,IAAGA,OAAQ,GAA3B,GAAgC,EAAvC;AACD,GAPkB,CAAnB,CAPoC,CAepC;AACA;AACA;AACA;;AACA,SAAOV,SAAS,KAAK,IAAd,GAAqBV,MAAM,CAACM,OAAP,CAAeI,SAAf,CAAyBK,YAAzB,CAArB,GAA8DA,YAArE;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _isWindows = require('./is-windows');\n\nvar _isWindows2 = _interopRequireDefault(_isWindows);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = commandConvert;\n\n/**\n * Converts an environment variable usage to be appropriate for the current OS\n * @param {String} command Command to convert\n * @param {Object} env Map of the current environment variable names and their values\n * @param {boolean} normalize If the command should be normalized using `path`\n * after converting\n * @returns {String} Converted command\n */\n\nfunction commandConvert(command, env) {\n  var normalize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!(0, _isWindows2.default)()) {\n    return command;\n  }\n  var envUnixRegex = /\\$(\\w+)|\\${(\\w+)}/g; // $my_var or ${my_var}\n  var convertedCmd = command.replace(envUnixRegex, function (match, $1, $2) {\n    var varName = $1 || $2;\n    // In Windows, non-existent variables are not replaced by the shell,\n    // so for example \"echo %FOO%\" will literally print the string \"%FOO%\", as\n    // opposed to printing an empty string in UNIX. See kentcdodds/cross-env#145\n    // If the env variable isn't defined at runtime, just strip it from the command entirely\n    return env[varName] ? `%${varName}%` : '';\n  });\n  // Normalization is required for commands with relative paths\n  // For example, `./cmd.bat`. See kentcdodds/cross-env#127\n  // However, it should not be done for command arguments.\n  // See https://github.com/kentcdodds/cross-env/pull/130#issuecomment-319887970\n  return normalize === true ? _path2.default.normalize(convertedCmd) : convertedCmd;\n}"]},"metadata":{},"sourceType":"script"}