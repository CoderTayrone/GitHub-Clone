{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\nconst fs = require(\"fs\");\n\nconst _ = require(\"lodash\");\n\nconst join = require(\"join-path\");\n\nconst path = require(\"path\");\n\nconst CONFIG_FILE = [\"superstatic.json\", \"firebase.json\"];\n\nmodule.exports = function (filename) {\n  if (_.isFunction(filename)) {\n    return filename;\n  }\n\n  filename = filename || CONFIG_FILE;\n  let configObject = {};\n  let config = {}; // From custom config data passed in\n\n  try {\n    configObject = JSON.parse(filename);\n  } catch (e) {\n    if (_.isPlainObject(filename)) {\n      configObject = filename;\n      filename = CONFIG_FILE;\n    }\n  }\n\n  if (_.isArray(filename)) {\n    filename = _.find(filename, name => {\n      return fs.existsSync(join(process.cwd(), name));\n    });\n  } // Set back to default config file if stringified object is\n  // given as config. With this, we override values in the config file\n\n\n  if (_.isPlainObject(filename)) {\n    filename = CONFIG_FILE;\n  } // A file name or array of file names\n\n\n  if (_.isString(filename) && _.endsWith(filename, \"json\")) {\n    try {\n      config = JSON.parse(fs.readFileSync(path.resolve(filename)));\n      config = config.hosting ? config.hosting : config;\n    } catch (e) {// do nothing\n    }\n  } // Passing an object as the config value merges\n  // the config data\n\n\n  return _.assign(config, configObject);\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/superstatic/lib/loaders/config-file.js"],"names":["fs","require","_","join","path","CONFIG_FILE","module","exports","filename","isFunction","configObject","config","JSON","parse","e","isPlainObject","isArray","find","name","existsSync","process","cwd","isString","endsWith","readFileSync","resolve","hosting","assign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,WAAD,CAApB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMI,WAAW,GAAG,CAAC,kBAAD,EAAqB,eAArB,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmB;AAClC,MAAIN,CAAC,CAACO,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B,WAAOA,QAAP;AACD;;AAEDA,EAAAA,QAAQ,GAAGA,QAAQ,IAAIH,WAAvB;AAEA,MAAIK,YAAY,GAAG,EAAnB;AACA,MAAIC,MAAM,GAAG,EAAb,CARkC,CAUlC;;AACA,MAAI;AACFD,IAAAA,YAAY,GAAGE,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAf;AACD,GAFD,CAEE,OAAOM,CAAP,EAAU;AACV,QAAIZ,CAAC,CAACa,aAAF,CAAgBP,QAAhB,CAAJ,EAA+B;AAC7BE,MAAAA,YAAY,GAAGF,QAAf;AACAA,MAAAA,QAAQ,GAAGH,WAAX;AACD;AACF;;AAED,MAAIH,CAAC,CAACc,OAAF,CAAUR,QAAV,CAAJ,EAAyB;AACvBA,IAAAA,QAAQ,GAAGN,CAAC,CAACe,IAAF,CAAOT,QAAP,EAAkBU,IAAD,IAAU;AACpC,aAAOlB,EAAE,CAACmB,UAAH,CAAchB,IAAI,CAACiB,OAAO,CAACC,GAAR,EAAD,EAAgBH,IAAhB,CAAlB,CAAP;AACD,KAFU,CAAX;AAGD,GAxBiC,CA0BlC;AACA;;;AACA,MAAIhB,CAAC,CAACa,aAAF,CAAgBP,QAAhB,CAAJ,EAA+B;AAC7BA,IAAAA,QAAQ,GAAGH,WAAX;AACD,GA9BiC,CAgClC;;;AACA,MAAIH,CAAC,CAACoB,QAAF,CAAWd,QAAX,KAAwBN,CAAC,CAACqB,QAAF,CAAWf,QAAX,EAAqB,MAArB,CAA5B,EAA0D;AACxD,QAAI;AACFG,MAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWb,EAAE,CAACwB,YAAH,CAAgBpB,IAAI,CAACqB,OAAL,CAAajB,QAAb,CAAhB,CAAX,CAAT;AACAG,MAAAA,MAAM,GAAGA,MAAM,CAACe,OAAP,GAAiBf,MAAM,CAACe,OAAxB,GAAkCf,MAA3C;AACD,KAHD,CAGE,OAAOG,CAAP,EAAU,CACV;AACD;AACF,GAxCiC,CA0ClC;AACA;;;AACA,SAAOZ,CAAC,CAACyB,MAAF,CAAShB,MAAT,EAAiBD,YAAjB,CAAP;AACD,CA7CD","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n\nconst fs = require(\"fs\");\n\nconst _ = require(\"lodash\");\nconst join = require(\"join-path\");\nconst path = require(\"path\");\n\nconst CONFIG_FILE = [\"superstatic.json\", \"firebase.json\"];\n\nmodule.exports = function(filename) {\n  if (_.isFunction(filename)) {\n    return filename;\n  }\n\n  filename = filename || CONFIG_FILE;\n\n  let configObject = {};\n  let config = {};\n\n  // From custom config data passed in\n  try {\n    configObject = JSON.parse(filename);\n  } catch (e) {\n    if (_.isPlainObject(filename)) {\n      configObject = filename;\n      filename = CONFIG_FILE;\n    }\n  }\n\n  if (_.isArray(filename)) {\n    filename = _.find(filename, (name) => {\n      return fs.existsSync(join(process.cwd(), name));\n    });\n  }\n\n  // Set back to default config file if stringified object is\n  // given as config. With this, we override values in the config file\n  if (_.isPlainObject(filename)) {\n    filename = CONFIG_FILE;\n  }\n\n  // A file name or array of file names\n  if (_.isString(filename) && _.endsWith(filename, \"json\")) {\n    try {\n      config = JSON.parse(fs.readFileSync(path.resolve(filename)));\n      config = config.hosting ? config.hosting : config;\n    } catch (e) {\n      // do nothing\n    }\n  }\n\n  // Passing an object as the config value merges\n  // the config data\n  return _.assign(config, configObject);\n};\n"]},"metadata":{},"sourceType":"script"}