{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTemplate = exports.parseTemplateForTable = void 0;\n\nconst api = require(\"../api\");\n\nconst logger_1 = require(\"../logger\");\n\nconst error_1 = require(\"../error\");\n\nconst TIMEOUT = 30000;\nconst MAX_DISPLAY_ITEMS = 50;\n\nfunction parseTemplateForTable(templateItems) {\n  let outputStr = \"\";\n  let counter = 0;\n\n  for (const item in templateItems) {\n    if (Object.prototype.hasOwnProperty.call(templateItems, item)) {\n      outputStr = outputStr.concat(item, \"\\n\");\n      counter++;\n\n      if (counter === MAX_DISPLAY_ITEMS) {\n        outputStr += \"+more...\" + \"\\n\";\n        break;\n      }\n    }\n  }\n\n  return outputStr;\n}\n\nexports.parseTemplateForTable = parseTemplateForTable;\n\nasync function getTemplate(projectId, versionNumber) {\n  try {\n    let request = `/v1/projects/${projectId}/remoteConfig`;\n\n    if (versionNumber) {\n      request = request + \"?versionNumber=\" + versionNumber;\n    }\n\n    const response = await api.request(\"GET\", request, {\n      auth: true,\n      origin: api.remoteConfigApiOrigin,\n      timeout: TIMEOUT\n    });\n    return response.body;\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    throw new error_1.FirebaseError(`Failed to get Firebase Remote Config template for project ${projectId}. `, {\n      exit: 2,\n      original: err\n    });\n  }\n}\n\nexports.getTemplate = getTemplate;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/remoteconfig/get.js"],"names":["Object","defineProperty","exports","value","getTemplate","parseTemplateForTable","api","require","logger_1","error_1","TIMEOUT","MAX_DISPLAY_ITEMS","templateItems","outputStr","counter","item","prototype","hasOwnProperty","call","concat","projectId","versionNumber","request","response","auth","origin","remoteConfigApiOrigin","timeout","body","err","logger","debug","message","FirebaseError","exit","original"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,qBAAR,GAAgC,KAAK,CAA3D;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,OAAO,GAAG,KAAhB;AACA,MAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAASN,qBAAT,CAA+BO,aAA/B,EAA8C;AAC1C,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAG,CAAd;;AACA,OAAK,MAAMC,IAAX,IAAmBH,aAAnB,EAAkC;AAC9B,QAAIZ,MAAM,CAACgB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,aAArC,EAAoDG,IAApD,CAAJ,EAA+D;AAC3DF,MAAAA,SAAS,GAAGA,SAAS,CAACM,MAAV,CAAiBJ,IAAjB,EAAuB,IAAvB,CAAZ;AACAD,MAAAA,OAAO;;AACP,UAAIA,OAAO,KAAKH,iBAAhB,EAAmC;AAC/BE,QAAAA,SAAS,IAAI,aAAa,IAA1B;AACA;AACH;AACJ;AACJ;;AACD,SAAOA,SAAP;AACH;;AACDX,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AACA,eAAeD,WAAf,CAA2BgB,SAA3B,EAAsCC,aAAtC,EAAqD;AACjD,MAAI;AACA,QAAIC,OAAO,GAAI,gBAAeF,SAAU,eAAxC;;AACA,QAAIC,aAAJ,EAAmB;AACfC,MAAAA,OAAO,GAAGA,OAAO,GAAG,iBAAV,GAA8BD,aAAxC;AACH;;AACD,UAAME,QAAQ,GAAG,MAAMjB,GAAG,CAACgB,OAAJ,CAAY,KAAZ,EAAmBA,OAAnB,EAA4B;AAC/CE,MAAAA,IAAI,EAAE,IADyC;AAE/CC,MAAAA,MAAM,EAAEnB,GAAG,CAACoB,qBAFmC;AAG/CC,MAAAA,OAAO,EAAEjB;AAHsC,KAA5B,CAAvB;AAKA,WAAOa,QAAQ,CAACK,IAAhB;AACH,GAXD,CAYA,OAAOC,GAAP,EAAY;AACRrB,IAAAA,QAAQ,CAACsB,MAAT,CAAgBC,KAAhB,CAAsBF,GAAG,CAACG,OAA1B;AACA,UAAM,IAAIvB,OAAO,CAACwB,aAAZ,CAA2B,6DAA4Db,SAAU,IAAjG,EAAsG;AAAEc,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,QAAQ,EAAEN;AAArB,KAAtG,CAAN;AACH;AACJ;;AACD3B,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTemplate = exports.parseTemplateForTable = void 0;\nconst api = require(\"../api\");\nconst logger_1 = require(\"../logger\");\nconst error_1 = require(\"../error\");\nconst TIMEOUT = 30000;\nconst MAX_DISPLAY_ITEMS = 50;\nfunction parseTemplateForTable(templateItems) {\n    let outputStr = \"\";\n    let counter = 0;\n    for (const item in templateItems) {\n        if (Object.prototype.hasOwnProperty.call(templateItems, item)) {\n            outputStr = outputStr.concat(item, \"\\n\");\n            counter++;\n            if (counter === MAX_DISPLAY_ITEMS) {\n                outputStr += \"+more...\" + \"\\n\";\n                break;\n            }\n        }\n    }\n    return outputStr;\n}\nexports.parseTemplateForTable = parseTemplateForTable;\nasync function getTemplate(projectId, versionNumber) {\n    try {\n        let request = `/v1/projects/${projectId}/remoteConfig`;\n        if (versionNumber) {\n            request = request + \"?versionNumber=\" + versionNumber;\n        }\n        const response = await api.request(\"GET\", request, {\n            auth: true,\n            origin: api.remoteConfigApiOrigin,\n            timeout: TIMEOUT,\n        });\n        return response.body;\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        throw new error_1.FirebaseError(`Failed to get Firebase Remote Config template for project ${projectId}. `, { exit: 2, original: err });\n    }\n}\nexports.getTemplate = getTemplate;\n"]},"metadata":{},"sourceType":"script"}