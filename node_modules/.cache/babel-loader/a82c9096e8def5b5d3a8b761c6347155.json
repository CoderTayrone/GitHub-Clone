{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableBilling = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst opn = require(\"open\");\n\nconst cloudbilling = require(\"../gcp/cloudbilling\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst prompt = require(\"../prompt\");\n\nconst utils = require(\"../utils\");\n\nconst ADD_BILLING_ACCOUNT = \"Add new billing account\";\n\nfunction logBillingStatus(enabled, projectId) {\n  if (!enabled) {\n    throw new error_1.FirebaseError(`${extensionsHelper_1.logPrefix}: ${clc.bold(projectId)} could not be upgraded. Please add a billing account via the Firebase console before proceeding.`);\n  }\n\n  utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `${clc.bold(projectId)} has successfully been upgraded.`);\n}\n\nasync function openBillingAccount(projectId, url, open) {\n  if (open) {\n    try {\n      opn(url);\n    } catch (err) {\n      logger_1.logger.debug(\"Unable to open billing URL: \" + err.stack);\n    }\n  }\n\n  await prompt.promptOnce({\n    name: \"continue\",\n    type: \"confirm\",\n    message: \"Press enter when finished upgrading your project to continue setting up your extension.\",\n    default: true\n  });\n  return cloudbilling.checkBillingEnabled(projectId);\n}\n\nasync function chooseBillingAccount(projectId, extensionName, accounts) {\n  const choices = accounts.map(m => m.displayName);\n  choices.push(ADD_BILLING_ACCOUNT);\n  const answer = await prompt.promptOnce({\n    name: \"billing\",\n    type: \"list\",\n    message: `The extension ${clc.underline(extensionName)} requires your project to be upgraded to the Blaze plan. You have access to the following billing accounts.\nPlease select the one that you would like to associate with this project:`,\n    choices: choices\n  });\n  let billingEnabled;\n\n  if (answer === ADD_BILLING_ACCOUNT) {\n    const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n    billingEnabled = await openBillingAccount(projectId, billingURL, true);\n  } else {\n    const billingAccount = accounts.find(a => a.displayName == answer);\n    billingEnabled = await cloudbilling.setBillingAccount(projectId, billingAccount.name);\n  }\n\n  return logBillingStatus(billingEnabled, projectId);\n}\n\nasync function setUpBillingAccount(projectId, extensionName) {\n  const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n  logger_1.logger.info();\n  logger_1.logger.info(`The extension ${clc.bold(extensionName)} requires your project to be upgraded to the Blaze plan. Please visit the following link to add a billing account:`);\n  logger_1.logger.info();\n  logger_1.logger.info(clc.bold.underline(billingURL));\n  logger_1.logger.info();\n  const open = await prompt.promptOnce({\n    name: \"open-url\",\n    type: \"confirm\",\n    message: \"Press enter to open the URL.\",\n    default: true\n  });\n  const billingEnabled = await openBillingAccount(projectId, billingURL, open);\n  return logBillingStatus(billingEnabled, projectId);\n}\n\nasync function enableBilling(projectId, extensionName) {\n  const billingAccounts = await cloudbilling.listBillingAccounts();\n\n  if (billingAccounts) {\n    const accounts = billingAccounts.filter(account => account.open);\n    return accounts.length > 0 ? chooseBillingAccount(projectId, extensionName, accounts) : setUpBillingAccount(projectId, extensionName);\n  }\n}\n\nexports.enableBilling = enableBilling;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/checkProjectBilling.js"],"names":["Object","defineProperty","exports","value","enableBilling","clc","require","opn","cloudbilling","error_1","logger_1","extensionsHelper_1","prompt","utils","ADD_BILLING_ACCOUNT","logBillingStatus","enabled","projectId","FirebaseError","logPrefix","bold","logLabeledSuccess","openBillingAccount","url","open","err","logger","debug","stack","promptOnce","name","type","message","default","checkBillingEnabled","chooseBillingAccount","extensionName","accounts","choices","map","m","displayName","push","answer","underline","billingEnabled","billingURL","billingAccount","find","a","setBillingAccount","setUpBillingAccount","info","billingAccounts","listBillingAccounts","filter","account","length"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,qBAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMO,KAAK,GAAGP,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMQ,mBAAmB,GAAG,yBAA5B;;AACA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,SAAnC,EAA8C;AAC1C,MAAI,CAACD,OAAL,EAAc;AACV,UAAM,IAAIP,OAAO,CAACS,aAAZ,CAA2B,GAAEP,kBAAkB,CAACQ,SAAU,KAAId,GAAG,CAACe,IAAJ,CAASH,SAAT,CAAoB,kGAAlF,CAAN;AACH;;AACDJ,EAAAA,KAAK,CAACQ,iBAAN,CAAwBV,kBAAkB,CAACQ,SAA3C,EAAuD,GAAEd,GAAG,CAACe,IAAJ,CAASH,SAAT,CAAoB,kCAA7E;AACH;;AACD,eAAeK,kBAAf,CAAkCL,SAAlC,EAA6CM,GAA7C,EAAkDC,IAAlD,EAAwD;AACpD,MAAIA,IAAJ,EAAU;AACN,QAAI;AACAjB,MAAAA,GAAG,CAACgB,GAAD,CAAH;AACH,KAFD,CAGA,OAAOE,GAAP,EAAY;AACRf,MAAAA,QAAQ,CAACgB,MAAT,CAAgBC,KAAhB,CAAsB,iCAAiCF,GAAG,CAACG,KAA3D;AACH;AACJ;;AACD,QAAMhB,MAAM,CAACiB,UAAP,CAAkB;AACpBC,IAAAA,IAAI,EAAE,UADc;AAEpBC,IAAAA,IAAI,EAAE,SAFc;AAGpBC,IAAAA,OAAO,EAAE,yFAHW;AAIpBC,IAAAA,OAAO,EAAE;AAJW,GAAlB,CAAN;AAMA,SAAOzB,YAAY,CAAC0B,mBAAb,CAAiCjB,SAAjC,CAAP;AACH;;AACD,eAAekB,oBAAf,CAAoClB,SAApC,EAA+CmB,aAA/C,EAA8DC,QAA9D,EAAwE;AACpE,QAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,CAAcC,CAAD,IAAOA,CAAC,CAACC,WAAtB,CAAhB;AACAH,EAAAA,OAAO,CAACI,IAAR,CAAa5B,mBAAb;AACA,QAAM6B,MAAM,GAAG,MAAM/B,MAAM,CAACiB,UAAP,CAAkB;AACnCC,IAAAA,IAAI,EAAE,SAD6B;AAEnCC,IAAAA,IAAI,EAAE,MAF6B;AAGnCC,IAAAA,OAAO,EAAG,iBAAgB3B,GAAG,CAACuC,SAAJ,CAAcR,aAAd,CAA6B;AAC/D,0EAJ2C;AAKnCE,IAAAA,OAAO,EAAEA;AAL0B,GAAlB,CAArB;AAOA,MAAIO,cAAJ;;AACA,MAAIF,MAAM,KAAK7B,mBAAf,EAAoC;AAChC,UAAMgC,UAAU,GAAI,kEAAiE7B,SAAU,EAA/F;AACA4B,IAAAA,cAAc,GAAG,MAAMvB,kBAAkB,CAACL,SAAD,EAAY6B,UAAZ,EAAwB,IAAxB,CAAzC;AACH,GAHD,MAIK;AACD,UAAMC,cAAc,GAAGV,QAAQ,CAACW,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAACR,WAAF,IAAiBE,MAAtC,CAAvB;AACAE,IAAAA,cAAc,GAAG,MAAMrC,YAAY,CAAC0C,iBAAb,CAA+BjC,SAA/B,EAA0C8B,cAAc,CAACjB,IAAzD,CAAvB;AACH;;AACD,SAAOf,gBAAgB,CAAC8B,cAAD,EAAiB5B,SAAjB,CAAvB;AACH;;AACD,eAAekC,mBAAf,CAAmClC,SAAnC,EAA8CmB,aAA9C,EAA6D;AACzD,QAAMU,UAAU,GAAI,kEAAiE7B,SAAU,EAA/F;AACAP,EAAAA,QAAQ,CAACgB,MAAT,CAAgB0B,IAAhB;AACA1C,EAAAA,QAAQ,CAACgB,MAAT,CAAgB0B,IAAhB,CAAsB,iBAAgB/C,GAAG,CAACe,IAAJ,CAASgB,aAAT,CAAwB,oHAA9D;AACA1B,EAAAA,QAAQ,CAACgB,MAAT,CAAgB0B,IAAhB;AACA1C,EAAAA,QAAQ,CAACgB,MAAT,CAAgB0B,IAAhB,CAAqB/C,GAAG,CAACe,IAAJ,CAASwB,SAAT,CAAmBE,UAAnB,CAArB;AACApC,EAAAA,QAAQ,CAACgB,MAAT,CAAgB0B,IAAhB;AACA,QAAM5B,IAAI,GAAG,MAAMZ,MAAM,CAACiB,UAAP,CAAkB;AACjCC,IAAAA,IAAI,EAAE,UAD2B;AAEjCC,IAAAA,IAAI,EAAE,SAF2B;AAGjCC,IAAAA,OAAO,EAAE,8BAHwB;AAIjCC,IAAAA,OAAO,EAAE;AAJwB,GAAlB,CAAnB;AAMA,QAAMY,cAAc,GAAG,MAAMvB,kBAAkB,CAACL,SAAD,EAAY6B,UAAZ,EAAwBtB,IAAxB,CAA/C;AACA,SAAOT,gBAAgB,CAAC8B,cAAD,EAAiB5B,SAAjB,CAAvB;AACH;;AACD,eAAeb,aAAf,CAA6Ba,SAA7B,EAAwCmB,aAAxC,EAAuD;AACnD,QAAMiB,eAAe,GAAG,MAAM7C,YAAY,CAAC8C,mBAAb,EAA9B;;AACA,MAAID,eAAJ,EAAqB;AACjB,UAAMhB,QAAQ,GAAGgB,eAAe,CAACE,MAAhB,CAAwBC,OAAD,IAAaA,OAAO,CAAChC,IAA5C,CAAjB;AACA,WAAOa,QAAQ,CAACoB,MAAT,GAAkB,CAAlB,GACDtB,oBAAoB,CAAClB,SAAD,EAAYmB,aAAZ,EAA2BC,QAA3B,CADnB,GAEDc,mBAAmB,CAAClC,SAAD,EAAYmB,aAAZ,CAFzB;AAGH;AACJ;;AACDlC,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.enableBilling = void 0;\nconst clc = require(\"cli-color\");\nconst opn = require(\"open\");\nconst cloudbilling = require(\"../gcp/cloudbilling\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst prompt = require(\"../prompt\");\nconst utils = require(\"../utils\");\nconst ADD_BILLING_ACCOUNT = \"Add new billing account\";\nfunction logBillingStatus(enabled, projectId) {\n    if (!enabled) {\n        throw new error_1.FirebaseError(`${extensionsHelper_1.logPrefix}: ${clc.bold(projectId)} could not be upgraded. Please add a billing account via the Firebase console before proceeding.`);\n    }\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `${clc.bold(projectId)} has successfully been upgraded.`);\n}\nasync function openBillingAccount(projectId, url, open) {\n    if (open) {\n        try {\n            opn(url);\n        }\n        catch (err) {\n            logger_1.logger.debug(\"Unable to open billing URL: \" + err.stack);\n        }\n    }\n    await prompt.promptOnce({\n        name: \"continue\",\n        type: \"confirm\",\n        message: \"Press enter when finished upgrading your project to continue setting up your extension.\",\n        default: true,\n    });\n    return cloudbilling.checkBillingEnabled(projectId);\n}\nasync function chooseBillingAccount(projectId, extensionName, accounts) {\n    const choices = accounts.map((m) => m.displayName);\n    choices.push(ADD_BILLING_ACCOUNT);\n    const answer = await prompt.promptOnce({\n        name: \"billing\",\n        type: \"list\",\n        message: `The extension ${clc.underline(extensionName)} requires your project to be upgraded to the Blaze plan. You have access to the following billing accounts.\nPlease select the one that you would like to associate with this project:`,\n        choices: choices,\n    });\n    let billingEnabled;\n    if (answer === ADD_BILLING_ACCOUNT) {\n        const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n        billingEnabled = await openBillingAccount(projectId, billingURL, true);\n    }\n    else {\n        const billingAccount = accounts.find((a) => a.displayName == answer);\n        billingEnabled = await cloudbilling.setBillingAccount(projectId, billingAccount.name);\n    }\n    return logBillingStatus(billingEnabled, projectId);\n}\nasync function setUpBillingAccount(projectId, extensionName) {\n    const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n    logger_1.logger.info();\n    logger_1.logger.info(`The extension ${clc.bold(extensionName)} requires your project to be upgraded to the Blaze plan. Please visit the following link to add a billing account:`);\n    logger_1.logger.info();\n    logger_1.logger.info(clc.bold.underline(billingURL));\n    logger_1.logger.info();\n    const open = await prompt.promptOnce({\n        name: \"open-url\",\n        type: \"confirm\",\n        message: \"Press enter to open the URL.\",\n        default: true,\n    });\n    const billingEnabled = await openBillingAccount(projectId, billingURL, open);\n    return logBillingStatus(billingEnabled, projectId);\n}\nasync function enableBilling(projectId, extensionName) {\n    const billingAccounts = await cloudbilling.listBillingAccounts();\n    if (billingAccounts) {\n        const accounts = billingAccounts.filter((account) => account.open);\n        return accounts.length > 0\n            ? chooseBillingAccount(projectId, extensionName, accounts)\n            : setUpBillingAccount(projectId, extensionName);\n    }\n}\nexports.enableBilling = enableBilling;\n"]},"metadata":{},"sourceType":"script"}