{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n\nconst fs = require('fs');\n\nconst isWsl = require('is-wsl');\n\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile); // Path to included `xdg-open`\n\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open'); // Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` → `C:\\Program Files\\Example\\MyApp.exe`\n\nconst wslToWindowsPath = async path => {\n  const {\n    stdout\n  } = await pExecFile('wslpath', ['-w', path]);\n  return stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n  if (typeof target !== 'string') {\n    throw new TypeError('Expected a `target`');\n  }\n\n  options = {\n    wait: false,\n    background: false,\n    ...options\n  };\n  let command;\n  let appArguments = [];\n  const cliArguments = [];\n  const childProcessOptions = {};\n\n  if (Array.isArray(options.app)) {\n    appArguments = options.app.slice(1);\n    options.app = options.app[0];\n  }\n\n  if (process.platform === 'darwin') {\n    command = 'open';\n\n    if (options.wait) {\n      cliArguments.push('--wait-apps');\n    }\n\n    if (options.background) {\n      cliArguments.push('--background');\n    }\n\n    if (options.app) {\n      cliArguments.push('-a', options.app);\n    }\n  } else if (process.platform === 'win32' || isWsl) {\n    command = 'cmd' + (isWsl ? '.exe' : '');\n    cliArguments.push('/c', 'start', '\"\"', '/b');\n    target = target.replace(/&/g, '^&');\n\n    if (options.wait) {\n      cliArguments.push('/wait');\n    }\n\n    if (options.app) {\n      if (isWsl && options.app.startsWith('/mnt/')) {\n        const windowsPath = await wslToWindowsPath(options.app);\n        options.app = windowsPath;\n      }\n\n      cliArguments.push(options.app);\n    }\n\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n  } else {\n    if (options.app) {\n      command = options.app;\n    } else {\n      // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n      const isBundled = !__dirname || __dirname === '/'; // Check if local `xdg-open` exists and is executable.\n\n      let exeLocalXdgOpen = false;\n\n      try {\n        await pAccess(localXdgOpenPath, fs.constants.X_OK);\n        exeLocalXdgOpen = true;\n      } catch (error) {}\n\n      const useSystemXdgOpen = process.versions.electron || process.platform === 'android' || isBundled || !exeLocalXdgOpen;\n      command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n    }\n\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n\n    if (!options.wait) {\n      // `xdg-open` will block the process unless stdio is ignored\n      // and it's detached from the parent even if it's unref'd.\n      childProcessOptions.stdio = 'ignore';\n      childProcessOptions.detached = true;\n    }\n  }\n\n  cliArguments.push(target);\n\n  if (process.platform === 'darwin' && appArguments.length > 0) {\n    cliArguments.push('--args', ...appArguments);\n  }\n\n  const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n  if (options.wait) {\n    return new Promise((resolve, reject) => {\n      subprocess.once('error', reject);\n      subprocess.once('close', exitCode => {\n        if (exitCode > 0) {\n          reject(new Error(`Exited with code ${exitCode}`));\n          return;\n        }\n\n        resolve(subprocess);\n      });\n    });\n  }\n\n  subprocess.unref();\n  return subprocess;\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/node_modules/open/index.js"],"names":["promisify","require","path","childProcess","fs","isWsl","pAccess","access","pExecFile","execFile","localXdgOpenPath","join","__dirname","wslToWindowsPath","stdout","trim","module","exports","target","options","TypeError","wait","background","command","appArguments","cliArguments","childProcessOptions","Array","isArray","app","slice","process","platform","push","replace","startsWith","windowsPath","length","isBundled","exeLocalXdgOpen","constants","X_OK","error","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst isWsl = require('is-wsl');\n\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile);\n\n// Path to included `xdg-open`\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n// Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` → `C:\\Program Files\\Example\\MyApp.exe`\nconst wslToWindowsPath = async path => {\n\tconst {stdout} = await pExecFile('wslpath', ['-w', path]);\n\treturn stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(options.app)) {\n\t\tappArguments = options.app.slice(1);\n\t\toptions.app = options.app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tcliArguments.push('-a', options.app);\n\t\t}\n\t} else if (process.platform === 'win32' || isWsl) {\n\t\tcommand = 'cmd' + (isWsl ? '.exe' : '');\n\t\tcliArguments.push('/c', 'start', '\"\"', '/b');\n\t\ttarget = target.replace(/&/g, '^&');\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('/wait');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tif (isWsl && options.app.startsWith('/mnt/')) {\n\t\t\t\tconst windowsPath = await wslToWindowsPath(options.app);\n\t\t\t\toptions.app = windowsPath;\n\t\t\t}\n\n\t\t\tcliArguments.push(options.app);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\t} else {\n\t\tif (options.app) {\n\t\t\tcommand = options.app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (error) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n"]},"metadata":{},"sourceType":"script"}