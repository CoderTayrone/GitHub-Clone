{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connect = exports.start = exports.stop = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst superstatic = require(\"superstatic\").server;\n\nconst morgan = require(\"morgan\");\n\nconst detectProjectRoot_1 = require(\"../detectProjectRoot\");\n\nconst error_1 = require(\"../error\");\n\nconst implicitInit_1 = require(\"../hosting/implicitInit\");\n\nconst initMiddleware_1 = require(\"../hosting/initMiddleware\");\n\nconst normalizedHostingConfigs_1 = require(\"../hosting/normalizedHostingConfigs\");\n\nconst cloudRunProxy_1 = require(\"../hosting/cloudRunProxy\");\n\nconst functionsProxy_1 = require(\"../hosting/functionsProxy\");\n\nconst stream_1 = require(\"stream\");\n\nconst emulatorLogger_1 = require(\"../emulator/emulatorLogger\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst MAX_PORT_ATTEMPTS = 10;\nlet attempts = 0;\nlet destroyServer = undefined;\nconst logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.HOSTING);\n\nfunction startServer(options, config, port, init) {\n  const firebaseMiddleware = initMiddleware_1.initMiddleware(init);\n  const morganStream = new stream_1.Writable();\n\n  morganStream._write = (chunk, encoding, callback) => {\n    if (chunk instanceof Buffer) {\n      logger.logLabeled(\"BULLET\", \"hosting\", chunk.toString().trim());\n    }\n\n    callback();\n  };\n\n  const morganMiddleware = morgan(\"combined\", {\n    stream: morganStream\n  });\n  const server = superstatic({\n    debug: false,\n    port: port,\n    host: options.host,\n    config: config,\n    cwd: detectProjectRoot_1.detectProjectRoot(options),\n    stack: \"strict\",\n    before: {\n      files: (req, res, next) => {\n        morganMiddleware(req, res, () => {});\n        firebaseMiddleware(req, res, next);\n      }\n    },\n    rewriters: {\n      function: functionsProxy_1.default(options),\n      run: cloudRunProxy_1.default(options)\n    }\n  }).listen(() => {\n    const siteName = config.target || config.site;\n    const label = siteName ? \"hosting[\" + siteName + \"]\" : \"hosting\";\n\n    if (config.public && config.public !== \".\") {\n      logger.logLabeled(\"BULLET\", label, \"Serving hosting files from: \" + clc.bold(config.public));\n    }\n\n    logger.logLabeled(\"SUCCESS\", label, \"Local server: \" + clc.underline(clc.bold(\"http://\" + options.host + \":\" + port)));\n  });\n  destroyServer = utils_1.createDestroyer(server);\n  server.on(\"error\", err => {\n    if (err.code === \"EADDRINUSE\") {\n      const message = \"Port \" + options.port + \" is not available.\";\n      logger.log(\"WARN\", clc.yellow(\"hosting: \") + message + \" Trying another port...\");\n\n      if (attempts < MAX_PORT_ATTEMPTS) {\n        attempts++;\n        startServer(options, config, port + 5, init);\n      } else {\n        logger.log(\"WARN\", message);\n        throw new error_1.FirebaseError(\"Could not find an open port for hosting development server.\", {\n          exit: 1\n        });\n      }\n    } else {\n      throw new error_1.FirebaseError(\"An error occurred while starting the hosting development server:\\n\\n\" + err.toString(), {\n        exit: 1\n      });\n    }\n  });\n}\n\nfunction stop() {\n  return destroyServer ? destroyServer() : Promise.resolve();\n}\n\nexports.stop = stop;\n\nasync function start(options) {\n  const init = await implicitInit_1.implicitInit(options);\n  const configs = normalizedHostingConfigs_1.normalizedHostingConfigs(options);\n\n  for (let i = 0; i < configs.length; i++) {\n    const port = i === 0 ? options.port : options.port + 4 + i;\n    startServer(options, configs[i], port, init);\n  }\n}\n\nexports.start = start;\n\nasync function connect() {\n  await Promise.resolve();\n}\n\nexports.connect = connect;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/serve/hosting.js"],"names":["Object","defineProperty","exports","value","connect","start","stop","clc","require","superstatic","server","morgan","detectProjectRoot_1","error_1","implicitInit_1","initMiddleware_1","normalizedHostingConfigs_1","cloudRunProxy_1","functionsProxy_1","stream_1","emulatorLogger_1","types_1","utils_1","MAX_PORT_ATTEMPTS","attempts","destroyServer","undefined","logger","EmulatorLogger","forEmulator","Emulators","HOSTING","startServer","options","config","port","init","firebaseMiddleware","initMiddleware","morganStream","Writable","_write","chunk","encoding","callback","Buffer","logLabeled","toString","trim","morganMiddleware","stream","debug","host","cwd","detectProjectRoot","stack","before","files","req","res","next","rewriters","function","default","run","listen","siteName","target","site","label","public","bold","underline","createDestroyer","on","err","code","message","log","yellow","FirebaseError","exit","Promise","resolve","implicitInit","configs","normalizedHostingConfigs","i","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.connect = exports.start = exports.stop = void 0;\nconst clc = require(\"cli-color\");\nconst superstatic = require(\"superstatic\").server;\nconst morgan = require(\"morgan\");\nconst detectProjectRoot_1 = require(\"../detectProjectRoot\");\nconst error_1 = require(\"../error\");\nconst implicitInit_1 = require(\"../hosting/implicitInit\");\nconst initMiddleware_1 = require(\"../hosting/initMiddleware\");\nconst normalizedHostingConfigs_1 = require(\"../hosting/normalizedHostingConfigs\");\nconst cloudRunProxy_1 = require(\"../hosting/cloudRunProxy\");\nconst functionsProxy_1 = require(\"../hosting/functionsProxy\");\nconst stream_1 = require(\"stream\");\nconst emulatorLogger_1 = require(\"../emulator/emulatorLogger\");\nconst types_1 = require(\"../emulator/types\");\nconst utils_1 = require(\"../utils\");\nconst MAX_PORT_ATTEMPTS = 10;\nlet attempts = 0;\nlet destroyServer = undefined;\nconst logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.HOSTING);\nfunction startServer(options, config, port, init) {\n    const firebaseMiddleware = initMiddleware_1.initMiddleware(init);\n    const morganStream = new stream_1.Writable();\n    morganStream._write = (chunk, encoding, callback) => {\n        if (chunk instanceof Buffer) {\n            logger.logLabeled(\"BULLET\", \"hosting\", chunk.toString().trim());\n        }\n        callback();\n    };\n    const morganMiddleware = morgan(\"combined\", {\n        stream: morganStream,\n    });\n    const server = superstatic({\n        debug: false,\n        port: port,\n        host: options.host,\n        config: config,\n        cwd: detectProjectRoot_1.detectProjectRoot(options),\n        stack: \"strict\",\n        before: {\n            files: (req, res, next) => {\n                morganMiddleware(req, res, () => {\n                });\n                firebaseMiddleware(req, res, next);\n            },\n        },\n        rewriters: {\n            function: functionsProxy_1.default(options),\n            run: cloudRunProxy_1.default(options),\n        },\n    }).listen(() => {\n        const siteName = config.target || config.site;\n        const label = siteName ? \"hosting[\" + siteName + \"]\" : \"hosting\";\n        if (config.public && config.public !== \".\") {\n            logger.logLabeled(\"BULLET\", label, \"Serving hosting files from: \" + clc.bold(config.public));\n        }\n        logger.logLabeled(\"SUCCESS\", label, \"Local server: \" + clc.underline(clc.bold(\"http://\" + options.host + \":\" + port)));\n    });\n    destroyServer = utils_1.createDestroyer(server);\n    server.on(\"error\", (err) => {\n        if (err.code === \"EADDRINUSE\") {\n            const message = \"Port \" + options.port + \" is not available.\";\n            logger.log(\"WARN\", clc.yellow(\"hosting: \") + message + \" Trying another port...\");\n            if (attempts < MAX_PORT_ATTEMPTS) {\n                attempts++;\n                startServer(options, config, port + 5, init);\n            }\n            else {\n                logger.log(\"WARN\", message);\n                throw new error_1.FirebaseError(\"Could not find an open port for hosting development server.\", {\n                    exit: 1,\n                });\n            }\n        }\n        else {\n            throw new error_1.FirebaseError(\"An error occurred while starting the hosting development server:\\n\\n\" + err.toString(), { exit: 1 });\n        }\n    });\n}\nfunction stop() {\n    return destroyServer ? destroyServer() : Promise.resolve();\n}\nexports.stop = stop;\nasync function start(options) {\n    const init = await implicitInit_1.implicitInit(options);\n    const configs = normalizedHostingConfigs_1.normalizedHostingConfigs(options);\n    for (let i = 0; i < configs.length; i++) {\n        const port = i === 0 ? options.port : options.port + 4 + i;\n        startServer(options, configs[i], port, init);\n    }\n}\nexports.start = start;\nasync function connect() {\n    await Promise.resolve();\n}\nexports.connect = connect;\n"]},"metadata":{},"sourceType":"script"}