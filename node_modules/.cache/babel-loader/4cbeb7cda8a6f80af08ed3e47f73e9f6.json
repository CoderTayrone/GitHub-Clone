{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listExtensions = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst Table = require(\"cli-table\");\n\nconst extensionsApi_1 = require(\"./extensionsApi\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst utils = require(\"../utils\");\n\nconst extensionsUtils = require(\"./utils\");\n\nconst logger_1 = require(\"../logger\");\n\nasync function listExtensions(projectId) {\n  const instances = await extensionsApi_1.listInstances(projectId);\n\n  if (instances.length < 1) {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `there are no extensions installed on project ${clc.bold(projectId)}.`);\n    return {\n      instances: []\n    };\n  }\n\n  const table = new Table({\n    head: [\"Extension\", \"Publisher\", \"Instance ID\", \"State\", \"Version\", \"Your last update\"],\n    style: {\n      head: [\"yellow\"]\n    }\n  });\n\n  const sorted = _.sortBy(instances, \"createTime\", \"asc\").reverse();\n\n  sorted.forEach(instance => {\n    let extension = _.get(instance, \"config.extensionRef\", \"\");\n\n    let publisher;\n\n    if (extension === \"\") {\n      extension = _.get(instance, \"config.source.spec.name\", \"\");\n      publisher = \"N/A\";\n    } else {\n      publisher = extension.split(\"/\")[0];\n    }\n\n    table.push([extension, publisher, _.last(instance.name.split(\"/\")), instance.state + (_.get(instance, \"config.source.state\", \"ACTIVE\") === \"DELETED\" ? \" (UNPUBLISHED)\" : \"\"), _.get(instance, \"config.source.spec.version\", \"\"), extensionsUtils.formatTimestamp(instance.updateTime)]);\n  });\n  utils.logLabeledBullet(extensionsHelper_1.logPrefix, `list of extensions installed in ${clc.bold(projectId)}:`);\n  logger_1.logger.info(table.toString());\n  return {\n    instances: sorted\n  };\n}\n\nexports.listExtensions = listExtensions;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/listExtensions.js"],"names":["Object","defineProperty","exports","value","listExtensions","_","require","clc","Table","extensionsApi_1","extensionsHelper_1","utils","extensionsUtils","logger_1","projectId","instances","listInstances","length","logLabeledBullet","logPrefix","bold","table","head","style","sorted","sortBy","reverse","forEach","instance","extension","get","publisher","split","push","last","name","state","formatTimestamp","updateTime","logger","info","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,WAAD,CAArB;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,SAAD,CAA/B;;AACA,MAAMO,QAAQ,GAAGP,OAAO,CAAC,WAAD,CAAxB;;AACA,eAAeF,cAAf,CAA8BU,SAA9B,EAAyC;AACrC,QAAMC,SAAS,GAAG,MAAMN,eAAe,CAACO,aAAhB,CAA8BF,SAA9B,CAAxB;;AACA,MAAIC,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AACtBN,IAAAA,KAAK,CAACO,gBAAN,CAAuBR,kBAAkB,CAACS,SAA1C,EAAsD,gDAA+CZ,GAAG,CAACa,IAAJ,CAASN,SAAT,CAAoB,GAAzH;AACA,WAAO;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAP;AACH;;AACD,QAAMM,KAAK,GAAG,IAAIb,KAAJ,CAAU;AACpBc,IAAAA,IAAI,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,aAA3B,EAA0C,OAA1C,EAAmD,SAAnD,EAA8D,kBAA9D,CADc;AAEpBC,IAAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAE,CAAC,QAAD;AAAR;AAFa,GAAV,CAAd;;AAIA,QAAME,MAAM,GAAGnB,CAAC,CAACoB,MAAF,CAASV,SAAT,EAAoB,YAApB,EAAkC,KAAlC,EAAyCW,OAAzC,EAAf;;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAgBC,QAAD,IAAc;AACzB,QAAIC,SAAS,GAAGxB,CAAC,CAACyB,GAAF,CAAMF,QAAN,EAAgB,qBAAhB,EAAuC,EAAvC,CAAhB;;AACA,QAAIG,SAAJ;;AACA,QAAIF,SAAS,KAAK,EAAlB,EAAsB;AAClBA,MAAAA,SAAS,GAAGxB,CAAC,CAACyB,GAAF,CAAMF,QAAN,EAAgB,yBAAhB,EAA2C,EAA3C,CAAZ;AACAG,MAAAA,SAAS,GAAG,KAAZ;AACH,KAHD,MAIK;AACDA,MAAAA,SAAS,GAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACH;;AACDX,IAAAA,KAAK,CAACY,IAAN,CAAW,CACPJ,SADO,EAEPE,SAFO,EAGP1B,CAAC,CAAC6B,IAAF,CAAON,QAAQ,CAACO,IAAT,CAAcH,KAAd,CAAoB,GAApB,CAAP,CAHO,EAIPJ,QAAQ,CAACQ,KAAT,IACK/B,CAAC,CAACyB,GAAF,CAAMF,QAAN,EAAgB,qBAAhB,EAAuC,QAAvC,MAAqD,SAArD,GAAiE,gBAAjE,GAAoF,EADzF,CAJO,EAMPvB,CAAC,CAACyB,GAAF,CAAMF,QAAN,EAAgB,4BAAhB,EAA8C,EAA9C,CANO,EAOPhB,eAAe,CAACyB,eAAhB,CAAgCT,QAAQ,CAACU,UAAzC,CAPO,CAAX;AASH,GAnBD;AAoBA3B,EAAAA,KAAK,CAACO,gBAAN,CAAuBR,kBAAkB,CAACS,SAA1C,EAAsD,mCAAkCZ,GAAG,CAACa,IAAJ,CAASN,SAAT,CAAoB,GAA5G;AACAD,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqBnB,KAAK,CAACoB,QAAN,EAArB;AACA,SAAO;AAAE1B,IAAAA,SAAS,EAAES;AAAb,GAAP;AACH;;AACDtB,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.listExtensions = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst Table = require(\"cli-table\");\nconst extensionsApi_1 = require(\"./extensionsApi\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst utils = require(\"../utils\");\nconst extensionsUtils = require(\"./utils\");\nconst logger_1 = require(\"../logger\");\nasync function listExtensions(projectId) {\n    const instances = await extensionsApi_1.listInstances(projectId);\n    if (instances.length < 1) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `there are no extensions installed on project ${clc.bold(projectId)}.`);\n        return { instances: [] };\n    }\n    const table = new Table({\n        head: [\"Extension\", \"Publisher\", \"Instance ID\", \"State\", \"Version\", \"Your last update\"],\n        style: { head: [\"yellow\"] },\n    });\n    const sorted = _.sortBy(instances, \"createTime\", \"asc\").reverse();\n    sorted.forEach((instance) => {\n        let extension = _.get(instance, \"config.extensionRef\", \"\");\n        let publisher;\n        if (extension === \"\") {\n            extension = _.get(instance, \"config.source.spec.name\", \"\");\n            publisher = \"N/A\";\n        }\n        else {\n            publisher = extension.split(\"/\")[0];\n        }\n        table.push([\n            extension,\n            publisher,\n            _.last(instance.name.split(\"/\")),\n            instance.state +\n                (_.get(instance, \"config.source.state\", \"ACTIVE\") === \"DELETED\" ? \" (UNPUBLISHED)\" : \"\"),\n            _.get(instance, \"config.source.spec.version\", \"\"),\n            extensionsUtils.formatTimestamp(instance.updateTime),\n        ]);\n    });\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `list of extensions installed in ${clc.bold(projectId)}:`);\n    logger_1.logger.info(table.toString());\n    return { instances: sorted };\n}\nexports.listExtensions = listExtensions;\n"]},"metadata":{},"sourceType":"script"}