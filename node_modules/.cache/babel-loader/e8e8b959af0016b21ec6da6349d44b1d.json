{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionsServer = void 0;\n\nconst path = require(\"path\");\n\nconst functionsEmulator_1 = require(\"../emulator/functionsEmulator\");\n\nconst emulatorServer_1 = require(\"../emulator/emulatorServer\");\n\nconst functionsEmulatorUtils_1 = require(\"../emulator/functionsEmulatorUtils\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst auth_1 = require(\"../auth\");\n\nconst utils = require(\"../utils\");\n\nclass FunctionsServer {\n  constructor() {\n    this.emulatorServer = undefined;\n  }\n\n  assertServer() {\n    if (!this.emulatorServer) {\n      throw new Error(\"Must call start() before calling any other operation!\");\n    }\n  }\n\n  async start(options, partialArgs) {\n    const projectId = projectUtils_1.needProjectId(options);\n    utils.assertDefined(options.config.src.functions);\n    utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n    const functionsDir = path.join(options.config.projectDir, options.config.src.functions.source);\n    const account = auth_1.getProjectDefaultAccount(options.config.projectDir);\n    const nodeMajorVersion = functionsEmulatorUtils_1.parseRuntimeVersion(options.config.get(\"functions.runtime\"));\n    const args = Object.assign({\n      projectId,\n      functionsDir,\n      account,\n      nodeMajorVersion\n    }, partialArgs);\n\n    if (options.host) {\n      utils.assertIsStringOrUndefined(options.host);\n      args.host = options.host;\n    }\n\n    if (options.port) {\n      utils.assertIsNumber(options.port);\n      const targets = options.targets;\n      const port = options.port;\n      const hostingRunning = targets && targets.indexOf(\"hosting\") >= 0;\n\n      if (hostingRunning) {\n        args.port = port + 1;\n      } else {\n        args.port = port;\n      }\n    }\n\n    this.emulatorServer = new emulatorServer_1.EmulatorServer(new functionsEmulator_1.FunctionsEmulator(args));\n    await this.emulatorServer.start();\n  }\n\n  async connect() {\n    this.assertServer();\n    await this.emulatorServer.connect();\n  }\n\n  async stop() {\n    this.assertServer();\n    await this.emulatorServer.stop();\n  }\n\n  get() {\n    this.assertServer();\n    return this.emulatorServer.get();\n  }\n\n}\n\nexports.FunctionsServer = FunctionsServer;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/serve/functions.js"],"names":["Object","defineProperty","exports","value","FunctionsServer","path","require","functionsEmulator_1","emulatorServer_1","functionsEmulatorUtils_1","projectUtils_1","auth_1","utils","constructor","emulatorServer","undefined","assertServer","Error","start","options","partialArgs","projectId","needProjectId","assertDefined","config","src","functions","source","functionsDir","join","projectDir","account","getProjectDefaultAccount","nodeMajorVersion","parseRuntimeVersion","get","args","assign","host","assertIsStringOrUndefined","port","assertIsNumber","targets","hostingRunning","indexOf","EmulatorServer","FunctionsEmulator","connect","stop"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionsServer = void 0;\nconst path = require(\"path\");\nconst functionsEmulator_1 = require(\"../emulator/functionsEmulator\");\nconst emulatorServer_1 = require(\"../emulator/emulatorServer\");\nconst functionsEmulatorUtils_1 = require(\"../emulator/functionsEmulatorUtils\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst auth_1 = require(\"../auth\");\nconst utils = require(\"../utils\");\nclass FunctionsServer {\n    constructor() {\n        this.emulatorServer = undefined;\n    }\n    assertServer() {\n        if (!this.emulatorServer) {\n            throw new Error(\"Must call start() before calling any other operation!\");\n        }\n    }\n    async start(options, partialArgs) {\n        const projectId = projectUtils_1.needProjectId(options);\n        utils.assertDefined(options.config.src.functions);\n        utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n        const functionsDir = path.join(options.config.projectDir, options.config.src.functions.source);\n        const account = auth_1.getProjectDefaultAccount(options.config.projectDir);\n        const nodeMajorVersion = functionsEmulatorUtils_1.parseRuntimeVersion(options.config.get(\"functions.runtime\"));\n        const args = Object.assign({ projectId,\n            functionsDir,\n            account,\n            nodeMajorVersion }, partialArgs);\n        if (options.host) {\n            utils.assertIsStringOrUndefined(options.host);\n            args.host = options.host;\n        }\n        if (options.port) {\n            utils.assertIsNumber(options.port);\n            const targets = options.targets;\n            const port = options.port;\n            const hostingRunning = targets && targets.indexOf(\"hosting\") >= 0;\n            if (hostingRunning) {\n                args.port = port + 1;\n            }\n            else {\n                args.port = port;\n            }\n        }\n        this.emulatorServer = new emulatorServer_1.EmulatorServer(new functionsEmulator_1.FunctionsEmulator(args));\n        await this.emulatorServer.start();\n    }\n    async connect() {\n        this.assertServer();\n        await this.emulatorServer.connect();\n    }\n    async stop() {\n        this.assertServer();\n        await this.emulatorServer.stop();\n    }\n    get() {\n        this.assertServer();\n        return this.emulatorServer.get();\n    }\n}\nexports.FunctionsServer = FunctionsServer;\n"]},"metadata":{},"sourceType":"script"}