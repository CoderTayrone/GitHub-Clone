{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepare = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst ensureCloudBuildEnabled_1 = require(\"./ensureCloudBuildEnabled\");\n\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst prepareFunctionsUpload_1 = require(\"./prepareFunctionsUpload\");\n\nconst prompts_1 = require(\"./prompts\");\n\nconst backend = require(\"./backend\");\n\nconst ensureApiEnabled = require(\"../../ensureApiEnabled\");\n\nconst functionsConfig = require(\"../../functionsConfig\");\n\nconst functionsEnv = require(\"../../functions/env\");\n\nconst previews_1 = require(\"../../previews\");\n\nconst projectUtils_1 = require(\"../../projectUtils\");\n\nconst track_1 = require(\"../../track\");\n\nconst runtimes = require(\"./runtimes\");\n\nconst validate = require(\"./validate\");\n\nconst utils = require(\"../../utils\");\n\nconst logger_1 = require(\"../../logger\");\n\nfunction hasUserConfig(config) {\n  return Object.keys(config).length > 1;\n}\n\nfunction hasDotenv(opts) {\n  return previews_1.previews.dotenv && functionsEnv.hasUserEnvs(opts);\n}\n\nasync function prepare(context, options, payload) {\n  if (!options.config.src.functions) {\n    return;\n  }\n\n  const runtimeDelegate = await runtimes.getRuntimeDelegate(context, options);\n  logger_1.logger.debug(`Validating ${runtimeDelegate.name} source`);\n  await runtimeDelegate.validate();\n  logger_1.logger.debug(`Building ${runtimeDelegate.name} source`);\n  await runtimeDelegate.build();\n  const projectId = projectUtils_1.needProjectId(options);\n  const checkAPIsEnabled = await Promise.all([ensureApiEnabled.ensure(projectId, \"cloudfunctions.googleapis.com\", \"functions\"), ensureApiEnabled.check(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true), ensureCloudBuildEnabled_1.ensureCloudBuildEnabled(projectId)]);\n  context.runtimeConfigEnabled = checkAPIsEnabled[1];\n  const firebaseConfig = await functionsConfig.getFirebaseConfig(options);\n  context.firebaseConfig = firebaseConfig;\n  const runtimeConfig = await prepareFunctionsUpload_1.getFunctionsConfig(context);\n  utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n  const source = options.config.src.functions.source;\n  const firebaseEnvs = functionsEnv.loadFirebaseEnvs(firebaseConfig, projectId);\n  const userEnvOpt = {\n    functionsSource: options.config.path(source),\n    projectId: projectId,\n    projectAlias: options.projectAlias\n  };\n  const userEnvs = functionsEnv.loadUserEnvs(userEnvOpt);\n  const tag = hasUserConfig(runtimeConfig) ? hasDotenv(userEnvOpt) ? \"mixed\" : \"runtime_config\" : hasDotenv(userEnvOpt) ? \"dotenv\" : \"none\";\n  track_1.track(\"functions_codebase_deploy_env_method\", tag);\n  logger_1.logger.debug(`Analyzing ${runtimeDelegate.name} backend spec`);\n  const wantBackend = await runtimeDelegate.discoverSpec(runtimeConfig, firebaseEnvs);\n  wantBackend.environmentVariables = Object.assign(Object.assign({}, userEnvs), firebaseEnvs);\n  payload.functions = {\n    backend: wantBackend\n  };\n\n  if (backend.isEmptyBackend(wantBackend)) {\n    return;\n  }\n\n  if (wantBackend.cloudFunctions.find(f => f.platform === \"gcfv2\")) {\n    const V2_APIS = {\n      artifactregistry: \"artifactregistry.googleapis.com\",\n      cloudrun: \"run.googleapis.com\",\n      eventarc: \"eventarc.googleapis.com\",\n      pubsub: \"pubsub.googleapis.com\"\n    };\n    const enablements = Object.entries(V2_APIS).map(([tag, api]) => {\n      return ensureApiEnabled.ensure(context.projectId, api, tag);\n    });\n    await Promise.all(enablements);\n  }\n\n  utils_1.logBullet(clc.cyan.bold(\"functions:\") + \" preparing \" + clc.bold(options.config.src.functions.source) + \" directory for uploading...\");\n\n  if (wantBackend.cloudFunctions.find(fn => fn.platform === \"gcfv1\")) {\n    context.functionsSourceV1 = await prepareFunctionsUpload_1.prepareFunctionsUpload(runtimeConfig, options);\n  }\n\n  if (wantBackend.cloudFunctions.find(fn => fn.platform === \"gcfv2\")) {\n    context.functionsSourceV2 = await prepareFunctionsUpload_1.prepareFunctionsUpload(undefined, options);\n  }\n\n  wantBackend.cloudFunctions.forEach(fn => {\n    fn.environmentVariables = wantBackend.environmentVariables;\n  });\n  await Promise.all(Object.keys(wantBackend.requiredAPIs).map(friendlyName => {\n    ensureApiEnabled.ensure(projectId, wantBackend.requiredAPIs[friendlyName], friendlyName, false);\n  }));\n  validate.functionIdsAreValid(wantBackend.cloudFunctions);\n  context.filters = functionsDeployHelper_1.getFilterGroups(options);\n  const wantFunctions = wantBackend.cloudFunctions.filter(fn => {\n    return functionsDeployHelper_1.functionMatchesAnyGroup(fn, context.filters);\n  });\n  const haveFunctions = (await backend.existingBackend(context)).cloudFunctions;\n  await prompts_1.promptForFailurePolicies(options, wantFunctions, haveFunctions);\n  await prompts_1.promptForMinInstances(options, wantFunctions, haveFunctions);\n  await backend.checkAvailability(context, wantBackend);\n}\n\nexports.prepare = prepare;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/prepare.js"],"names":["Object","defineProperty","exports","value","prepare","clc","require","ensureCloudBuildEnabled_1","functionsDeployHelper_1","utils_1","prepareFunctionsUpload_1","prompts_1","backend","ensureApiEnabled","functionsConfig","functionsEnv","previews_1","projectUtils_1","track_1","runtimes","validate","utils","logger_1","hasUserConfig","config","keys","length","hasDotenv","opts","previews","dotenv","hasUserEnvs","context","options","payload","src","functions","runtimeDelegate","getRuntimeDelegate","logger","debug","name","build","projectId","needProjectId","checkAPIsEnabled","Promise","all","ensure","check","ensureCloudBuildEnabled","runtimeConfigEnabled","firebaseConfig","getFirebaseConfig","runtimeConfig","getFunctionsConfig","assertDefined","source","firebaseEnvs","loadFirebaseEnvs","userEnvOpt","functionsSource","path","projectAlias","userEnvs","loadUserEnvs","tag","track","wantBackend","discoverSpec","environmentVariables","assign","isEmptyBackend","cloudFunctions","find","f","platform","V2_APIS","artifactregistry","cloudrun","eventarc","pubsub","enablements","entries","map","api","logBullet","cyan","bold","fn","functionsSourceV1","prepareFunctionsUpload","functionsSourceV2","undefined","forEach","requiredAPIs","friendlyName","functionIdsAreValid","filters","getFilterGroups","wantFunctions","filter","functionMatchesAnyGroup","haveFunctions","existingBackend","promptForFailurePolicies","promptForMinInstances","checkAvailability"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepare = void 0;\nconst clc = require(\"cli-color\");\nconst ensureCloudBuildEnabled_1 = require(\"./ensureCloudBuildEnabled\");\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\nconst utils_1 = require(\"../../utils\");\nconst prepareFunctionsUpload_1 = require(\"./prepareFunctionsUpload\");\nconst prompts_1 = require(\"./prompts\");\nconst backend = require(\"./backend\");\nconst ensureApiEnabled = require(\"../../ensureApiEnabled\");\nconst functionsConfig = require(\"../../functionsConfig\");\nconst functionsEnv = require(\"../../functions/env\");\nconst previews_1 = require(\"../../previews\");\nconst projectUtils_1 = require(\"../../projectUtils\");\nconst track_1 = require(\"../../track\");\nconst runtimes = require(\"./runtimes\");\nconst validate = require(\"./validate\");\nconst utils = require(\"../../utils\");\nconst logger_1 = require(\"../../logger\");\nfunction hasUserConfig(config) {\n    return Object.keys(config).length > 1;\n}\nfunction hasDotenv(opts) {\n    return previews_1.previews.dotenv && functionsEnv.hasUserEnvs(opts);\n}\nasync function prepare(context, options, payload) {\n    if (!options.config.src.functions) {\n        return;\n    }\n    const runtimeDelegate = await runtimes.getRuntimeDelegate(context, options);\n    logger_1.logger.debug(`Validating ${runtimeDelegate.name} source`);\n    await runtimeDelegate.validate();\n    logger_1.logger.debug(`Building ${runtimeDelegate.name} source`);\n    await runtimeDelegate.build();\n    const projectId = projectUtils_1.needProjectId(options);\n    const checkAPIsEnabled = await Promise.all([\n        ensureApiEnabled.ensure(projectId, \"cloudfunctions.googleapis.com\", \"functions\"),\n        ensureApiEnabled.check(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true),\n        ensureCloudBuildEnabled_1.ensureCloudBuildEnabled(projectId),\n    ]);\n    context.runtimeConfigEnabled = checkAPIsEnabled[1];\n    const firebaseConfig = await functionsConfig.getFirebaseConfig(options);\n    context.firebaseConfig = firebaseConfig;\n    const runtimeConfig = await prepareFunctionsUpload_1.getFunctionsConfig(context);\n    utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n    const source = options.config.src.functions.source;\n    const firebaseEnvs = functionsEnv.loadFirebaseEnvs(firebaseConfig, projectId);\n    const userEnvOpt = {\n        functionsSource: options.config.path(source),\n        projectId: projectId,\n        projectAlias: options.projectAlias,\n    };\n    const userEnvs = functionsEnv.loadUserEnvs(userEnvOpt);\n    const tag = hasUserConfig(runtimeConfig)\n        ? hasDotenv(userEnvOpt)\n            ? \"mixed\"\n            : \"runtime_config\"\n        : hasDotenv(userEnvOpt)\n            ? \"dotenv\"\n            : \"none\";\n    track_1.track(\"functions_codebase_deploy_env_method\", tag);\n    logger_1.logger.debug(`Analyzing ${runtimeDelegate.name} backend spec`);\n    const wantBackend = await runtimeDelegate.discoverSpec(runtimeConfig, firebaseEnvs);\n    wantBackend.environmentVariables = Object.assign(Object.assign({}, userEnvs), firebaseEnvs);\n    payload.functions = { backend: wantBackend };\n    if (backend.isEmptyBackend(wantBackend)) {\n        return;\n    }\n    if (wantBackend.cloudFunctions.find((f) => f.platform === \"gcfv2\")) {\n        const V2_APIS = {\n            artifactregistry: \"artifactregistry.googleapis.com\",\n            cloudrun: \"run.googleapis.com\",\n            eventarc: \"eventarc.googleapis.com\",\n            pubsub: \"pubsub.googleapis.com\",\n        };\n        const enablements = Object.entries(V2_APIS).map(([tag, api]) => {\n            return ensureApiEnabled.ensure(context.projectId, api, tag);\n        });\n        await Promise.all(enablements);\n    }\n    utils_1.logBullet(clc.cyan.bold(\"functions:\") +\n        \" preparing \" +\n        clc.bold(options.config.src.functions.source) +\n        \" directory for uploading...\");\n    if (wantBackend.cloudFunctions.find((fn) => fn.platform === \"gcfv1\")) {\n        context.functionsSourceV1 = await prepareFunctionsUpload_1.prepareFunctionsUpload(runtimeConfig, options);\n    }\n    if (wantBackend.cloudFunctions.find((fn) => fn.platform === \"gcfv2\")) {\n        context.functionsSourceV2 = await prepareFunctionsUpload_1.prepareFunctionsUpload(undefined, options);\n    }\n    wantBackend.cloudFunctions.forEach((fn) => {\n        fn.environmentVariables = wantBackend.environmentVariables;\n    });\n    await Promise.all(Object.keys(wantBackend.requiredAPIs).map((friendlyName) => {\n        ensureApiEnabled.ensure(projectId, wantBackend.requiredAPIs[friendlyName], friendlyName, false);\n    }));\n    validate.functionIdsAreValid(wantBackend.cloudFunctions);\n    context.filters = functionsDeployHelper_1.getFilterGroups(options);\n    const wantFunctions = wantBackend.cloudFunctions.filter((fn) => {\n        return functionsDeployHelper_1.functionMatchesAnyGroup(fn, context.filters);\n    });\n    const haveFunctions = (await backend.existingBackend(context)).cloudFunctions;\n    await prompts_1.promptForFailurePolicies(options, wantFunctions, haveFunctions);\n    await prompts_1.promptForMinInstances(options, wantFunctions, haveFunctions);\n    await backend.checkAvailability(context, wantBackend);\n}\nexports.prepare = prepare;\n"]},"metadata":{},"sourceType":"script"}