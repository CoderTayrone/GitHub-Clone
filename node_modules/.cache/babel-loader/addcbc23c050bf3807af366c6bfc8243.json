{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doSetup = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst prompt_1 = require(\"../../prompt\");\n\nconst ensureCloudResourceLocation_1 = require(\"../../ensureCloudResourceLocation\");\n\nconst RULES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../templates/init/storage/storage.rules\", \"utf8\");\n\nasync function doSetup(setup, config) {\n  setup.config.storage = {};\n  ensureCloudResourceLocation_1.ensureLocationSet(setup.projectLocation, \"Cloud Storage\");\n  logger_1.logger.info();\n  logger_1.logger.info(\"Firebase Storage Security Rules allow you to define how and when to allow\");\n  logger_1.logger.info(\"uploads and downloads. You can keep these rules in your project directory\");\n  logger_1.logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n  logger_1.logger.info();\n  const storageRulesFile = await prompt_1.promptOnce({\n    type: \"input\",\n    name: \"rules\",\n    message: \"What file should be used for Storage Rules?\",\n    default: \"storage.rules\"\n  });\n  setup.config.storage.rules = storageRulesFile;\n  await config.askWriteProjectFile(setup.config.storage.rules, RULES_TEMPLATE);\n}\n\nexports.doSetup = doSetup;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/storage.js"],"names":["Object","defineProperty","exports","value","doSetup","clc","require","fs","logger_1","prompt_1","ensureCloudResourceLocation_1","RULES_TEMPLATE","readFileSync","__dirname","setup","config","storage","ensureLocationSet","projectLocation","logger","info","bold","storageRulesFile","promptOnce","type","name","message","default","rules","askWriteProjectFile"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAMI,6BAA6B,GAAGJ,OAAO,CAAC,mCAAD,CAA7C;;AACA,MAAMK,cAAc,GAAGJ,EAAE,CAACK,YAAH,CAAgBC,SAAS,GAAG,gDAA5B,EAA8E,MAA9E,CAAvB;;AACA,eAAeT,OAAf,CAAuBU,KAAvB,EAA8BC,MAA9B,EAAsC;AAClCD,EAAAA,KAAK,CAACC,MAAN,CAAaC,OAAb,GAAuB,EAAvB;AACAN,EAAAA,6BAA6B,CAACO,iBAA9B,CAAgDH,KAAK,CAACI,eAAtD,EAAuE,eAAvE;AACAV,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB;AACAZ,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB,CAAqB,2EAArB;AACAZ,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB,CAAqB,2EAArB;AACAZ,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB,CAAqB,2BAA2Bf,GAAG,CAACgB,IAAJ,CAAS,iBAAT,CAA3B,GAAyD,GAA9E;AACAb,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB;AACA,QAAME,gBAAgB,GAAG,MAAMb,QAAQ,CAACc,UAAT,CAAoB;AAC/CC,IAAAA,IAAI,EAAE,OADyC;AAE/CC,IAAAA,IAAI,EAAE,OAFyC;AAG/CC,IAAAA,OAAO,EAAE,6CAHsC;AAI/CC,IAAAA,OAAO,EAAE;AAJsC,GAApB,CAA/B;AAMAb,EAAAA,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBY,KAArB,GAA6BN,gBAA7B;AACA,QAAMP,MAAM,CAACc,mBAAP,CAA2Bf,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBY,KAAhD,EAAuDjB,cAAvD,CAAN;AACH;;AACDT,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doSetup = void 0;\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst logger_1 = require(\"../../logger\");\nconst prompt_1 = require(\"../../prompt\");\nconst ensureCloudResourceLocation_1 = require(\"../../ensureCloudResourceLocation\");\nconst RULES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../templates/init/storage/storage.rules\", \"utf8\");\nasync function doSetup(setup, config) {\n    setup.config.storage = {};\n    ensureCloudResourceLocation_1.ensureLocationSet(setup.projectLocation, \"Cloud Storage\");\n    logger_1.logger.info();\n    logger_1.logger.info(\"Firebase Storage Security Rules allow you to define how and when to allow\");\n    logger_1.logger.info(\"uploads and downloads. You can keep these rules in your project directory\");\n    logger_1.logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n    logger_1.logger.info();\n    const storageRulesFile = await prompt_1.promptOnce({\n        type: \"input\",\n        name: \"rules\",\n        message: \"What file should be used for Storage Rules?\",\n        default: \"storage.rules\",\n    });\n    setup.config.storage.rules = storageRulesFile;\n    await config.askWriteProjectFile(setup.config.storage.rules, RULES_TEMPLATE);\n}\nexports.doSetup = doSetup;\n"]},"metadata":{},"sourceType":"script"}