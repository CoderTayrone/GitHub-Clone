{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ip_1 = __importDefault(require(\"ip\"));\n\nconst net_1 = __importDefault(require(\"net\"));\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\n\n\nfunction myIpAddress() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      // 8.8.8.8:53 is \"Google Public DNS\":\n      // https://developers.google.com/speed/public-dns/\n      const socket = net_1.default.connect({\n        host: '8.8.8.8',\n        port: 53\n      });\n\n      const onError = err => {\n        // if we fail to access Google DNS (as in firewall blocks access),\n        // fallback to querying IP locally\n        resolve(ip_1.default.address());\n      };\n\n      socket.once('error', onError);\n      socket.once('connect', () => {\n        socket.removeListener('error', onError);\n        const addr = socket.address();\n        socket.destroy();\n\n        if (typeof addr === 'string') {\n          resolve(addr);\n        } else if (addr.address) {\n          resolve(addr.address);\n        } else {\n          reject(new Error('Expected a `string`'));\n        }\n      });\n    });\n  });\n}\n\nexports.default = myIpAddress;","map":{"version":3,"sources":["../src/myIpAddress.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,IAAA,GAAA,eAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,MAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;AAEA;;;;;;;;;;;;;AAaG;;;AACH,SAA8B,WAA9B,GAAyC;;AACxC,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACtC;AACA;AACA,YAAM,MAAM,GAAG,KAAA,CAAA,OAAA,CAAI,OAAJ,CAAY;AAAE,QAAA,IAAI,EAAE,SAAR;AAAmB,QAAA,IAAI,EAAE;AAAzB,OAAZ,CAAf;;AACA,YAAM,OAAO,GAAI,GAAD,IAAe;AAC9B;AACA;AACA,QAAA,OAAO,CAAC,IAAA,CAAA,OAAA,CAAG,OAAH,EAAD,CAAP;AACA,OAJD;;AAKA,MAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,OAArB;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,MAAK;AAC3B,QAAA,MAAM,CAAC,cAAP,CAAsB,OAAtB,EAA+B,OAA/B;AACA,cAAM,IAAI,GAAG,MAAM,CAAC,OAAP,EAAb;AACA,QAAA,MAAM,CAAC,OAAP;;AACA,YAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC7B,UAAA,OAAO,CAAC,IAAD,CAAP;AACA,SAFD,MAEO,IAAI,IAAI,CAAC,OAAT,EAAkB;AACxB,UAAA,OAAO,CAAC,IAAI,CAAC,OAAN,CAAP;AACA,SAFM,MAEA;AACN,UAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACA;AACD,OAXD;AAYA,KAtBM,CAAP;AAuBA,G;AAAA;;AAxBD,OAAA,CAAA,OAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ip_1 = __importDefault(require(\"ip\"));\nconst net_1 = __importDefault(require(\"net\"));\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\nfunction myIpAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            // 8.8.8.8:53 is \"Google Public DNS\":\n            // https://developers.google.com/speed/public-dns/\n            const socket = net_1.default.connect({ host: '8.8.8.8', port: 53 });\n            const onError = (err) => {\n                // if we fail to access Google DNS (as in firewall blocks access),\n                // fallback to querying IP locally\n                resolve(ip_1.default.address());\n            };\n            socket.once('error', onError);\n            socket.once('connect', () => {\n                socket.removeListener('error', onError);\n                const addr = socket.address();\n                socket.destroy();\n                if (typeof addr === 'string') {\n                    resolve(addr);\n                }\n                else if (addr.address) {\n                    resolve(addr.address);\n                }\n                else {\n                    reject(new Error('Expected a `string`'));\n                }\n            });\n        });\n    });\n}\nexports.default = myIpAddress;\n//# sourceMappingURL=myIpAddress.js.map"]},"metadata":{},"sourceType":"script"}