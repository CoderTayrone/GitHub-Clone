{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Distribution = exports.DistributionFileType = void 0;\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../error\");\n\nconst crypto = require(\"crypto\");\n\nconst logger_1 = require(\"../logger\");\n\nconst pathUtil = require(\"path\");\n\nvar DistributionFileType;\n\n(function (DistributionFileType) {\n  DistributionFileType[\"IPA\"] = \"ipa\";\n  DistributionFileType[\"APK\"] = \"apk\";\n  DistributionFileType[\"AAB\"] = \"aab\";\n})(DistributionFileType = exports.DistributionFileType || (exports.DistributionFileType = {}));\n\nclass Distribution {\n  constructor(path) {\n    this.path = path;\n\n    if (!path) {\n      throw new error_1.FirebaseError(\"must specify a distribution file\");\n    }\n\n    const distributionType = path.split(\".\").pop();\n\n    if (distributionType !== DistributionFileType.IPA && distributionType !== DistributionFileType.APK && distributionType !== DistributionFileType.AAB) {\n      throw new error_1.FirebaseError(\"Unsupported distribution file format, should be .ipa, .apk or .aab\");\n    }\n\n    try {\n      fs.ensureFileSync(path);\n    } catch (err) {\n      logger_1.logger.info(err);\n      throw new error_1.FirebaseError(`${path} is not a file. Verify that it points to a distribution binary.`);\n    }\n\n    this.path = path;\n    this.fileType = distributionType;\n    this.fileName = pathUtil.basename(path);\n  }\n\n  distributionFileType() {\n    return this.fileType;\n  }\n\n  readStream() {\n    return fs.createReadStream(this.path);\n  }\n\n  platform() {\n    switch (this.fileType) {\n      case DistributionFileType.IPA:\n        return \"ios\";\n\n      case DistributionFileType.AAB:\n      case DistributionFileType.APK:\n        return \"android\";\n\n      default:\n        throw new error_1.FirebaseError(\"Unsupported distribution file format, should be .ipa, .apk or .aab\");\n    }\n  }\n\n  getFileName() {\n    return this.fileName;\n  }\n\n  binaryName(app) {\n    return new Promise(resolve => {\n      const hash = crypto.createHash(\"sha256\");\n      const stream = this.readStream();\n      stream.on(\"data\", data => hash.update(data));\n      stream.on(\"end\", () => {\n        return resolve(`projects/${app.projectNumber}/apps/${app.appId}/releases/-/binaries/${hash.digest(\"hex\")}`);\n      });\n    });\n  }\n\n}\n\nexports.Distribution = Distribution;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/appdistribution/distribution.js"],"names":["Object","defineProperty","exports","value","Distribution","DistributionFileType","fs","require","error_1","crypto","logger_1","pathUtil","constructor","path","FirebaseError","distributionType","split","pop","IPA","APK","AAB","ensureFileSync","err","logger","info","fileType","fileName","basename","distributionFileType","readStream","createReadStream","platform","getFileName","binaryName","app","Promise","resolve","hash","createHash","stream","on","data","update","projectNumber","appId","digest"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Distribution = exports.DistributionFileType = void 0;\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../error\");\nconst crypto = require(\"crypto\");\nconst logger_1 = require(\"../logger\");\nconst pathUtil = require(\"path\");\nvar DistributionFileType;\n(function (DistributionFileType) {\n    DistributionFileType[\"IPA\"] = \"ipa\";\n    DistributionFileType[\"APK\"] = \"apk\";\n    DistributionFileType[\"AAB\"] = \"aab\";\n})(DistributionFileType = exports.DistributionFileType || (exports.DistributionFileType = {}));\nclass Distribution {\n    constructor(path) {\n        this.path = path;\n        if (!path) {\n            throw new error_1.FirebaseError(\"must specify a distribution file\");\n        }\n        const distributionType = path.split(\".\").pop();\n        if (distributionType !== DistributionFileType.IPA &&\n            distributionType !== DistributionFileType.APK &&\n            distributionType !== DistributionFileType.AAB) {\n            throw new error_1.FirebaseError(\"Unsupported distribution file format, should be .ipa, .apk or .aab\");\n        }\n        try {\n            fs.ensureFileSync(path);\n        }\n        catch (err) {\n            logger_1.logger.info(err);\n            throw new error_1.FirebaseError(`${path} is not a file. Verify that it points to a distribution binary.`);\n        }\n        this.path = path;\n        this.fileType = distributionType;\n        this.fileName = pathUtil.basename(path);\n    }\n    distributionFileType() {\n        return this.fileType;\n    }\n    readStream() {\n        return fs.createReadStream(this.path);\n    }\n    platform() {\n        switch (this.fileType) {\n            case DistributionFileType.IPA:\n                return \"ios\";\n            case DistributionFileType.AAB:\n            case DistributionFileType.APK:\n                return \"android\";\n            default:\n                throw new error_1.FirebaseError(\"Unsupported distribution file format, should be .ipa, .apk or .aab\");\n        }\n    }\n    getFileName() {\n        return this.fileName;\n    }\n    binaryName(app) {\n        return new Promise((resolve) => {\n            const hash = crypto.createHash(\"sha256\");\n            const stream = this.readStream();\n            stream.on(\"data\", (data) => hash.update(data));\n            stream.on(\"end\", () => {\n                return resolve(`projects/${app.projectNumber}/apps/${app.appId}/releases/-/binaries/${hash.digest(\"hex\")}`);\n            });\n        });\n    }\n}\nexports.Distribution = Distribution;\n"]},"metadata":{},"sourceType":"script"}