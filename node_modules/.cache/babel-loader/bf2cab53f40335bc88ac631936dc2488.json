{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isLocalExtension = exports.readFile = exports.findExtensionYaml = exports.getLocalExtensionSpec = void 0;\n\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nconst yaml = require(\"js-yaml\");\n\nconst fsutils_1 = require(\"../fsutils\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst EXTENSIONS_SPEC_FILE = \"extension.yaml\";\nconst EXTENSIONS_PREINSTALL_FILE = \"PREINSTALL.md\";\n\nasync function getLocalExtensionSpec(directory) {\n  const spec = await parseYAML(readFile(path.resolve(directory, EXTENSIONS_SPEC_FILE)));\n\n  try {\n    const preinstall = readFile(path.resolve(directory, EXTENSIONS_PREINSTALL_FILE));\n    spec.preinstallContent = preinstall;\n  } catch (err) {\n    logger_1.logger.debug(`No PREINSTALL.md found in directory ${directory}.`);\n  }\n\n  return spec;\n}\n\nexports.getLocalExtensionSpec = getLocalExtensionSpec;\n\nfunction findExtensionYaml(directory) {\n  while (!fsutils_1.fileExistsSync(path.resolve(directory, EXTENSIONS_SPEC_FILE))) {\n    const parentDir = path.dirname(directory);\n\n    if (parentDir === directory) {\n      throw new error_1.FirebaseError(\"Couldn't find an extension.yaml file. Check that you are in the root directory of your extension.\");\n    }\n\n    directory = parentDir;\n  }\n\n  return directory;\n}\n\nexports.findExtensionYaml = findExtensionYaml;\n\nfunction readFile(pathToFile) {\n  try {\n    return fs.readFileSync(pathToFile, \"utf8\");\n  } catch (err) {\n    if (err.code === \"ENOENT\") {\n      throw new error_1.FirebaseError(`Could not find \"${pathToFile}\"\"`, {\n        original: err\n      });\n    }\n\n    throw new error_1.FirebaseError(`Failed to read file at \"${pathToFile}\"`, {\n      original: err\n    });\n  }\n}\n\nexports.readFile = readFile;\n\nfunction isLocalExtension(extensionName) {\n  try {\n    fs.readdirSync(extensionName);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isLocalExtension = isLocalExtension;\n\nfunction parseYAML(source) {\n  try {\n    return yaml.safeLoad(source);\n  } catch (err) {\n    if (err instanceof yaml.YAMLException) {\n      throw new error_1.FirebaseError(`YAML Error: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw new error_1.FirebaseError(err.message);\n  }\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/localHelper.js"],"names":["Object","defineProperty","exports","value","isLocalExtension","readFile","findExtensionYaml","getLocalExtensionSpec","fs","require","path","yaml","fsutils_1","error_1","logger_1","EXTENSIONS_SPEC_FILE","EXTENSIONS_PREINSTALL_FILE","directory","spec","parseYAML","resolve","preinstall","preinstallContent","err","logger","debug","fileExistsSync","parentDir","dirname","FirebaseError","pathToFile","readFileSync","code","original","extensionName","readdirSync","source","safeLoad","YAMLException","message"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isLocalExtension = exports.readFile = exports.findExtensionYaml = exports.getLocalExtensionSpec = void 0;\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst yaml = require(\"js-yaml\");\nconst fsutils_1 = require(\"../fsutils\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst EXTENSIONS_SPEC_FILE = \"extension.yaml\";\nconst EXTENSIONS_PREINSTALL_FILE = \"PREINSTALL.md\";\nasync function getLocalExtensionSpec(directory) {\n    const spec = await parseYAML(readFile(path.resolve(directory, EXTENSIONS_SPEC_FILE)));\n    try {\n        const preinstall = readFile(path.resolve(directory, EXTENSIONS_PREINSTALL_FILE));\n        spec.preinstallContent = preinstall;\n    }\n    catch (err) {\n        logger_1.logger.debug(`No PREINSTALL.md found in directory ${directory}.`);\n    }\n    return spec;\n}\nexports.getLocalExtensionSpec = getLocalExtensionSpec;\nfunction findExtensionYaml(directory) {\n    while (!fsutils_1.fileExistsSync(path.resolve(directory, EXTENSIONS_SPEC_FILE))) {\n        const parentDir = path.dirname(directory);\n        if (parentDir === directory) {\n            throw new error_1.FirebaseError(\"Couldn't find an extension.yaml file. Check that you are in the root directory of your extension.\");\n        }\n        directory = parentDir;\n    }\n    return directory;\n}\nexports.findExtensionYaml = findExtensionYaml;\nfunction readFile(pathToFile) {\n    try {\n        return fs.readFileSync(pathToFile, \"utf8\");\n    }\n    catch (err) {\n        if (err.code === \"ENOENT\") {\n            throw new error_1.FirebaseError(`Could not find \"${pathToFile}\"\"`, { original: err });\n        }\n        throw new error_1.FirebaseError(`Failed to read file at \"${pathToFile}\"`, { original: err });\n    }\n}\nexports.readFile = readFile;\nfunction isLocalExtension(extensionName) {\n    try {\n        fs.readdirSync(extensionName);\n    }\n    catch (err) {\n        return false;\n    }\n    return true;\n}\nexports.isLocalExtension = isLocalExtension;\nfunction parseYAML(source) {\n    try {\n        return yaml.safeLoad(source);\n    }\n    catch (err) {\n        if (err instanceof yaml.YAMLException) {\n            throw new error_1.FirebaseError(`YAML Error: ${err.message}`, { original: err });\n        }\n        throw new error_1.FirebaseError(err.message);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}