{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\n\nconst error_1 = require(\"../../error\");\n\nasync function default_1(context, options) {\n  var _a;\n\n  const rulesDeploy = _.get(context, \"firestore.rulesDeploy\");\n\n  if (!context.firestoreRules || !rulesDeploy) {\n    return;\n  }\n\n  const rulesFile = (_a = options.config.src.firestore) === null || _a === void 0 ? void 0 : _a.rules;\n\n  if (!rulesFile) {\n    throw new error_1.FirebaseError(`Invalid firestore config: ${JSON.stringify(options.config.src.firestore)}`);\n  }\n\n  await rulesDeploy.release(rulesFile, rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n}\n\nexports.default = default_1;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/firestore/release.js"],"names":["Object","defineProperty","exports","value","_","require","rulesDeploy_1","error_1","default_1","context","options","_a","rulesDeploy","get","firestoreRules","rulesFile","config","src","firestore","rules","FirebaseError","JSON","stringify","release","RulesetServiceType","CLOUD_FIRESTORE","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,eAAeG,SAAf,CAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AACvC,MAAIC,EAAJ;;AACA,QAAMC,WAAW,GAAGR,CAAC,CAACS,GAAF,CAAMJ,OAAN,EAAe,uBAAf,CAApB;;AACA,MAAI,CAACA,OAAO,CAACK,cAAT,IAA2B,CAACF,WAAhC,EAA6C;AACzC;AACH;;AACD,QAAMG,SAAS,GAAG,CAACJ,EAAE,GAAGD,OAAO,CAACM,MAAR,CAAeC,GAAf,CAAmBC,SAAzB,MAAwC,IAAxC,IAAgDP,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAACQ,KAA9F;;AACA,MAAI,CAACJ,SAAL,EAAgB;AACZ,UAAM,IAAIR,OAAO,CAACa,aAAZ,CAA2B,6BAA4BC,IAAI,CAACC,SAAL,CAAeZ,OAAO,CAACM,MAAR,CAAeC,GAAf,CAAmBC,SAAlC,CAA6C,EAApG,CAAN;AACH;;AACD,QAAMN,WAAW,CAACW,OAAZ,CAAoBR,SAApB,EAA+BT,aAAa,CAACkB,kBAAd,CAAiCC,eAAhE,CAAN;AACH;;AACDvB,OAAO,CAACwB,OAAR,GAAkBlB,SAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\nconst error_1 = require(\"../../error\");\nasync function default_1(context, options) {\n    var _a;\n    const rulesDeploy = _.get(context, \"firestore.rulesDeploy\");\n    if (!context.firestoreRules || !rulesDeploy) {\n        return;\n    }\n    const rulesFile = (_a = options.config.src.firestore) === null || _a === void 0 ? void 0 : _a.rules;\n    if (!rulesFile) {\n        throw new error_1.FirebaseError(`Invalid firestore config: ${JSON.stringify(options.config.src.firestore)}`);\n    }\n    await rulesDeploy.release(rulesFile, rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n}\nexports.default = default_1;\n"]},"metadata":{},"sourceType":"script"}