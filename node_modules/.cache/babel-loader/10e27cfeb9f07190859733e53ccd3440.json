{"ast":null,"code":"'use strict';\n\nconst Buffer = require('./buffer.js');\n\nconst MiniPass = require('minipass');\n\nconst Pax = require('./pax.js');\n\nconst Header = require('./header.js');\n\nconst ReadEntry = require('./read-entry.js');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst normPath = require('./normalize-windows-path.js');\n\nconst stripSlash = require('./strip-trailing-slashes.js');\n\nconst prefixPath = (path, prefix) => {\n  if (!prefix) return path;\n  path = normPath(path).replace(/^\\.(\\/|$)/, '');\n  return stripSlash(prefix) + '/' + path;\n};\n\nconst maxReadSize = 16 * 1024 * 1024;\nconst PROCESS = Symbol('process');\nconst FILE = Symbol('file');\nconst DIRECTORY = Symbol('directory');\nconst SYMLINK = Symbol('symlink');\nconst HARDLINK = Symbol('hardlink');\nconst HEADER = Symbol('header');\nconst READ = Symbol('read');\nconst LSTAT = Symbol('lstat');\nconst ONLSTAT = Symbol('onlstat');\nconst ONREAD = Symbol('onread');\nconst ONREADLINK = Symbol('onreadlink');\nconst OPENFILE = Symbol('openfile');\nconst ONOPENFILE = Symbol('onopenfile');\nconst CLOSE = Symbol('close');\nconst MODE = Symbol('mode');\nconst AWAITDRAIN = Symbol('awaitDrain');\nconst ONDRAIN = Symbol('ondrain');\nconst PREFIX = Symbol('prefix');\nconst HAD_ERROR = Symbol('hadError');\n\nconst warner = require('./warn-mixin.js');\n\nconst winchars = require('./winchars.js');\n\nconst stripAbsolutePath = require('./strip-absolute-path.js');\n\nconst modeFix = require('./mode-fix.js');\n\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor(p, opt) {\n    opt = opt || {};\n    super(opt);\n    if (typeof p !== 'string') throw new TypeError('path is required');\n    this.path = normPath(p); // suppress atime, ctime, uid, gid, uname, gname\n\n    this.portable = !!opt.portable; // until node has builtin pwnam functions, this'll have to do\n\n    this.myuid = process.getuid && process.getuid() || 0;\n    this.myuser = process.env.USER || '';\n    this.maxReadSize = opt.maxReadSize || maxReadSize;\n    this.linkCache = opt.linkCache || new Map();\n    this.statCache = opt.statCache || new Map();\n    this.preservePaths = !!opt.preservePaths;\n    this.cwd = normPath(opt.cwd || process.cwd());\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.mtime = opt.mtime || null;\n    this.prefix = opt.prefix ? normPath(opt.prefix) : null;\n    this.fd = null;\n    this.blockLen = null;\n    this.blockRemain = null;\n    this.buf = null;\n    this.offset = null;\n    this.length = null;\n    this.pos = null;\n    this.remain = null;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n\n    if (!this.preservePaths) {\n      const s = stripAbsolutePath(this.path);\n\n      if (s[0]) {\n        this.warn('stripping ' + s[0] + ' from absolute path', this.path);\n        this.path = s[1];\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32';\n\n    if (this.win32) {\n      // force the \\ to / normalization, since we might not *actually*\n      // be on windows, but want \\ to be considered a path separator.\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'));\n      p = p.replace(/\\\\/g, '/');\n    }\n\n    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p));\n    if (this.path === '') this.path = './';\n    if (this.statCache.has(this.absolute)) this[ONLSTAT](this.statCache.get(this.absolute));else this[LSTAT]();\n  }\n\n  emit(ev, ...data) {\n    if (ev === 'error') this[HAD_ERROR] = true;\n    return super.emit(ev, ...data);\n  }\n\n  [LSTAT]() {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er) return this.emit('error', er);\n      this[ONLSTAT](stat);\n    });\n  }\n\n  [ONLSTAT](stat) {\n    this.statCache.set(this.absolute, stat);\n    this.stat = stat;\n    if (!stat.isFile()) stat.size = 0;\n    this.type = getType(stat);\n    this.emit('stat', stat);\n    this[PROCESS]();\n  }\n\n  [PROCESS]() {\n    switch (this.type) {\n      case 'File':\n        return this[FILE]();\n\n      case 'Directory':\n        return this[DIRECTORY]();\n\n      case 'SymbolicLink':\n        return this[SYMLINK]();\n      // unsupported types are ignored.\n\n      default:\n        return this.end();\n    }\n  }\n\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory');\n  }\n\n  [PREFIX](path) {\n    return prefixPath(path, this.prefix);\n  }\n\n  [HEADER]() {\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      // only apply the prefix to hard links.\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime\n    });\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink\n      }).encode());\n    }\n\n    super.write(this.header.block);\n  }\n\n  [DIRECTORY]() {\n    if (this.path.substr(-1) !== '/') this.path += '/';\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n\n  [SYMLINK]() {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er) return this.emit('error', er);\n      this[ONREADLINK](linkpath);\n    });\n  }\n\n  [ONREADLINK](linkpath) {\n    this.linkpath = normPath(linkpath);\n    this[HEADER]();\n    this.end();\n  }\n\n  [HARDLINK](linkpath) {\n    this.type = 'Link';\n    this.linkpath = normPath(path.relative(this.cwd, linkpath));\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n\n  [FILE]() {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino;\n\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey);\n        if (linkpath.indexOf(this.cwd) === 0) return this[HARDLINK](linkpath);\n      }\n\n      this.linkCache.set(linkKey, this.absolute);\n    }\n\n    this[HEADER]();\n    if (this.stat.size === 0) return this.end();\n    this[OPENFILE]();\n  }\n\n  [OPENFILE]() {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er) return this.emit('error', er);\n      this[ONOPENFILE](fd);\n    });\n  }\n\n  [ONOPENFILE](fd) {\n    this.fd = fd;\n    if (this[HAD_ERROR]) return this[CLOSE]();\n    this.blockLen = 512 * Math.ceil(this.stat.size / 512);\n    this.blockRemain = this.blockLen;\n    const bufLen = Math.min(this.blockLen, this.maxReadSize);\n    this.buf = Buffer.allocUnsafe(bufLen);\n    this.offset = 0;\n    this.pos = 0;\n    this.remain = this.stat.size;\n    this.length = this.buf.length;\n    this[READ]();\n  }\n\n  [READ]() {\n    const {\n      fd,\n      buf,\n      offset,\n      length,\n      pos\n    } = this;\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](() => this.emit('error', er));\n      }\n\n      this[ONREAD](bytesRead);\n    });\n  }\n\n  [CLOSE](cb) {\n    fs.close(this.fd, cb);\n  }\n\n  [ONREAD](bytesRead) {\n    if (bytesRead <= 0 && this.remain > 0) {\n      const er = new Error('encountered unexpected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](() => this.emit('error', er));\n    }\n\n    if (bytesRead > this.remain) {\n      const er = new Error('did not encounter expected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](() => this.emit('error', er));\n    } // null out the rest of the buffer, if we could fit the block padding\n    // at the end of this loop, we've incremented bytesRead and this.remain\n    // to be incremented up to the blockRemain level, as if we had expected\n    // to get a null-padded file, and read it until the end.  then we will\n    // decrement both remain and blockRemain by bytesRead, and know that we\n    // reached the expected EOF, without any null buffer to append.\n\n\n    if (bytesRead === this.remain) {\n      for (let i = bytesRead; i < this.length && bytesRead < this.blockRemain; i++) {\n        this.buf[i + this.offset] = 0;\n        bytesRead++;\n        this.remain++;\n      }\n    }\n\n    const writeBuf = this.offset === 0 && bytesRead === this.buf.length ? this.buf : this.buf.slice(this.offset, this.offset + bytesRead);\n    const flushed = this.write(writeBuf);\n    if (!flushed) this[AWAITDRAIN](() => this[ONDRAIN]());else this[ONDRAIN]();\n  }\n\n  [AWAITDRAIN](cb) {\n    this.once('drain', cb);\n  }\n\n  write(writeBuf) {\n    if (this.blockRemain < writeBuf.length) {\n      const er = new Error('writing more data than expected');\n      er.path = this.absolute;\n      return this.emit('error', er);\n    }\n\n    this.remain -= writeBuf.length;\n    this.blockRemain -= writeBuf.length;\n    this.pos += writeBuf.length;\n    this.offset += writeBuf.length;\n    return super.write(writeBuf);\n  }\n\n  [ONDRAIN]() {\n    if (!this.remain) {\n      if (this.blockRemain) super.write(Buffer.alloc(this.blockRemain));\n      return this[CLOSE](\n      /* istanbul ignore next - legacy */\n      er => er ? this.emit('error', er) : this.end());\n    }\n\n    if (this.offset >= this.length) {\n      // if we only have a smaller bit left to read, alloc a smaller buffer\n      // otherwise, keep it the same length it was before.\n      this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length));\n      this.offset = 0;\n    }\n\n    this.length = this.buf.length - this.offset;\n    this[READ]();\n  }\n\n});\n\nclass WriteEntrySync extends WriteEntry {\n  constructor(path, opt) {\n    super(path, opt);\n  }\n\n  [LSTAT]() {\n    this[ONLSTAT](fs.lstatSync(this.absolute));\n  }\n\n  [SYMLINK]() {\n    this[ONREADLINK](fs.readlinkSync(this.absolute));\n  }\n\n  [OPENFILE]() {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'));\n  }\n\n  [READ]() {\n    let threw = true;\n\n    try {\n      const {\n        fd,\n        buf,\n        offset,\n        length,\n        pos\n      } = this;\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos);\n      this[ONREAD](bytesRead);\n      threw = false;\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](() => {});\n        } catch (er) {}\n      }\n    }\n  }\n\n  [AWAITDRAIN](cb) {\n    cb();\n  }\n\n  [CLOSE](cb) {\n    fs.closeSync(this.fd);\n    cb();\n  }\n\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor(readEntry, opt) {\n    opt = opt || {};\n    super(opt);\n    this.preservePaths = !!opt.preservePaths;\n    this.portable = !!opt.portable;\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.readEntry = readEntry;\n    this.type = readEntry.type;\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.prefix = opt.prefix || null;\n    this.path = normPath(readEntry.path);\n    this.mode = this[MODE](readEntry.mode);\n    this.uid = this.portable ? null : readEntry.uid;\n    this.gid = this.portable ? null : readEntry.gid;\n    this.uname = this.portable ? null : readEntry.uname;\n    this.gname = this.portable ? null : readEntry.gname;\n    this.size = readEntry.size;\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;\n    this.atime = this.portable ? null : readEntry.atime;\n    this.ctime = this.portable ? null : readEntry.ctime;\n    this.linkpath = normPath(readEntry.linkpath);\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n\n    if (!this.preservePaths) {\n      const s = stripAbsolutePath(this.path);\n\n      if (s[0]) {\n        this.warn('stripping ' + s[0] + ' from absolute path', this.path);\n        this.path = s[1];\n      }\n    }\n\n    this.remain = readEntry.size;\n    this.blockRemain = readEntry.startBlockSize;\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime\n    });\n    if (this.header.encode() && !this.noPax) super.write(new Pax({\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime,\n      gid: this.portable ? null : this.gid,\n      mtime: this.noMtime ? null : this.mtime,\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n      size: this.size,\n      uid: this.portable ? null : this.uid,\n      uname: this.portable ? null : this.uname,\n      dev: this.portable ? null : this.readEntry.dev,\n      ino: this.portable ? null : this.readEntry.ino,\n      nlink: this.portable ? null : this.readEntry.nlink\n    }).encode());\n    super.write(this.header.block);\n    readEntry.pipe(this);\n  }\n\n  [PREFIX](path) {\n    return prefixPath(path, this.prefix);\n  }\n\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory');\n  }\n\n  write(data) {\n    const writeLen = data.length;\n    if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');\n    this.blockRemain -= writeLen;\n    return super.write(data);\n  }\n\n  end() {\n    if (this.blockRemain) super.write(Buffer.alloc(this.blockRemain));\n    return super.end();\n  }\n\n});\nWriteEntry.Sync = WriteEntrySync;\nWriteEntry.Tar = WriteEntryTar;\n\nconst getType = stat => stat.isFile() ? 'File' : stat.isDirectory() ? 'Directory' : stat.isSymbolicLink() ? 'SymbolicLink' : 'Unsupported';\n\nmodule.exports = WriteEntry;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/node_modules/tar/lib/write-entry.js"],"names":["Buffer","require","MiniPass","Pax","Header","ReadEntry","fs","path","normPath","stripSlash","prefixPath","prefix","replace","maxReadSize","PROCESS","Symbol","FILE","DIRECTORY","SYMLINK","HARDLINK","HEADER","READ","LSTAT","ONLSTAT","ONREAD","ONREADLINK","OPENFILE","ONOPENFILE","CLOSE","MODE","AWAITDRAIN","ONDRAIN","PREFIX","HAD_ERROR","warner","winchars","stripAbsolutePath","modeFix","WriteEntry","constructor","p","opt","TypeError","portable","myuid","process","getuid","myuser","env","USER","linkCache","Map","statCache","preservePaths","cwd","strict","noPax","noMtime","mtime","fd","blockLen","blockRemain","buf","offset","length","pos","remain","onwarn","on","s","warn","win32","platform","decode","absolute","resolve","has","get","emit","ev","data","lstat","er","stat","set","isFile","size","type","getType","end","mode","header","linkpath","uid","gid","uname","atime","ctime","encode","write","dev","ino","nlink","block","substr","readlink","relative","linkKey","indexOf","open","Math","ceil","bufLen","min","allocUnsafe","read","bytesRead","cb","close","Error","syscall","code","i","writeBuf","slice","flushed","once","alloc","WriteEntrySync","lstatSync","readlinkSync","openSync","threw","readSync","closeSync","WriteEntryTar","readEntry","gname","startBlockSize","pipe","writeLen","Sync","Tar","isDirectory","isSymbolicLink","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst Buffer = require('./buffer.js')\nconst MiniPass = require('minipass')\nconst Pax = require('./pax.js')\nconst Header = require('./header.js')\nconst ReadEntry = require('./read-entry.js')\nconst fs = require('fs')\nconst path = require('path')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nconst prefixPath = (path, prefix) => {\n  if (!prefix)\n    return path\n  path = normPath(path).replace(/^\\.(\\/|$)/, '')\n  return stripSlash(prefix) + '/' + path\n}\n\nconst maxReadSize = 16 * 1024 * 1024\nconst PROCESS = Symbol('process')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst HEADER = Symbol('header')\nconst READ = Symbol('read')\nconst LSTAT = Symbol('lstat')\nconst ONLSTAT = Symbol('onlstat')\nconst ONREAD = Symbol('onread')\nconst ONREADLINK = Symbol('onreadlink')\nconst OPENFILE = Symbol('openfile')\nconst ONOPENFILE = Symbol('onopenfile')\nconst CLOSE = Symbol('close')\nconst MODE = Symbol('mode')\nconst AWAITDRAIN = Symbol('awaitDrain')\nconst ONDRAIN = Symbol('ondrain')\nconst PREFIX = Symbol('prefix')\nconst HAD_ERROR = Symbol('hadError')\nconst warner = require('./warn-mixin.js')\nconst winchars = require('./winchars.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\n\nconst modeFix = require('./mode-fix.js')\n\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor (p, opt) {\n    opt = opt || {}\n    super(opt)\n    if (typeof p !== 'string')\n      throw new TypeError('path is required')\n    this.path = normPath(p)\n    // suppress atime, ctime, uid, gid, uname, gname\n    this.portable = !!opt.portable\n    // until node has builtin pwnam functions, this'll have to do\n    this.myuid = process.getuid && process.getuid() || 0\n    this.myuser = process.env.USER || ''\n    this.maxReadSize = opt.maxReadSize || maxReadSize\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.preservePaths = !!opt.preservePaths\n    this.cwd = normPath(opt.cwd || process.cwd())\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n    this.prefix = opt.prefix ? normPath(opt.prefix) : null\n\n    this.fd = null\n    this.blockLen = null\n    this.blockRemain = null\n    this.buf = null\n    this.offset = null\n    this.length = null\n    this.pos = null\n    this.remain = null\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    if (!this.preservePaths) {\n      const s = stripAbsolutePath(this.path)\n      if (s[0]) {\n        this.warn('stripping ' + s[0] + ' from absolute path', this.path)\n        this.path = s[1]\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32'\n    if (this.win32) {\n      // force the \\ to / normalization, since we might not *actually*\n      // be on windows, but want \\ to be considered a path separator.\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'))\n      p = p.replace(/\\\\/g, '/')\n    }\n\n    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p))\n\n    if (this.path === '')\n      this.path = './'\n\n    if (this.statCache.has(this.absolute))\n      this[ONLSTAT](this.statCache.get(this.absolute))\n    else\n      this[LSTAT]()\n  }\n\n  emit (ev, ...data) {\n    if (ev === 'error')\n      this[HAD_ERROR] = true\n    return super.emit(ev, ...data)\n  }\n\n  [LSTAT] () {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONLSTAT](stat)\n    })\n  }\n\n  [ONLSTAT] (stat) {\n    this.statCache.set(this.absolute, stat)\n    this.stat = stat\n    if (!stat.isFile())\n      stat.size = 0\n    this.type = getType(stat)\n    this.emit('stat', stat)\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    switch (this.type) {\n      case 'File': return this[FILE]()\n      case 'Directory': return this[DIRECTORY]()\n      case 'SymbolicLink': return this[SYMLINK]()\n      // unsupported types are ignored.\n      default: return this.end()\n    }\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory')\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [HEADER] () {\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      // only apply the prefix to hard links.\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null :\n        this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime\n    })\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink\n      }).encode())\n    }\n    super.write(this.header.block)\n  }\n\n  [DIRECTORY] () {\n    if (this.path.substr(-1) !== '/')\n      this.path += '/'\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [SYMLINK] () {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONREADLINK](linkpath)\n    })\n  }\n\n  [ONREADLINK] (linkpath) {\n    this.linkpath = normPath(linkpath)\n    this[HEADER]()\n    this.end()\n  }\n\n  [HARDLINK] (linkpath) {\n    this.type = 'Link'\n    this.linkpath = normPath(path.relative(this.cwd, linkpath))\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [FILE] () {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey)\n        if (linkpath.indexOf(this.cwd) === 0)\n          return this[HARDLINK](linkpath)\n      }\n      this.linkCache.set(linkKey, this.absolute)\n    }\n\n    this[HEADER]()\n    if (this.stat.size === 0)\n      return this.end()\n\n    this[OPENFILE]()\n  }\n\n  [OPENFILE] () {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONOPENFILE](fd)\n    })\n  }\n\n  [ONOPENFILE] (fd) {\n    this.fd = fd\n    if (this[HAD_ERROR])\n      return this[CLOSE]()\n\n    this.blockLen = 512 * Math.ceil(this.stat.size / 512)\n    this.blockRemain = this.blockLen\n    const bufLen = Math.min(this.blockLen, this.maxReadSize)\n    this.buf = Buffer.allocUnsafe(bufLen)\n    this.offset = 0\n    this.pos = 0\n    this.remain = this.stat.size\n    this.length = this.buf.length\n    this[READ]()\n  }\n\n  [READ] () {\n    const { fd, buf, offset, length, pos } = this\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](() => this.emit('error', er))\n      }\n      this[ONREAD](bytesRead)\n    })\n  }\n\n  [CLOSE] (cb) {\n    fs.close(this.fd, cb)\n  }\n\n  [ONREAD] (bytesRead) {\n    if (bytesRead <= 0 && this.remain > 0) {\n      const er = new Error('encountered unexpected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    if (bytesRead > this.remain) {\n      const er = new Error('did not encounter expected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    // null out the rest of the buffer, if we could fit the block padding\n    // at the end of this loop, we've incremented bytesRead and this.remain\n    // to be incremented up to the blockRemain level, as if we had expected\n    // to get a null-padded file, and read it until the end.  then we will\n    // decrement both remain and blockRemain by bytesRead, and know that we\n    // reached the expected EOF, without any null buffer to append.\n    if (bytesRead === this.remain) {\n      for (let i = bytesRead; i < this.length && bytesRead < this.blockRemain; i++) {\n        this.buf[i + this.offset] = 0\n        bytesRead++\n        this.remain++\n      }\n    }\n\n    const writeBuf = this.offset === 0 && bytesRead === this.buf.length ?\n      this.buf : this.buf.slice(this.offset, this.offset + bytesRead)\n\n    const flushed = this.write(writeBuf)\n    if (!flushed)\n      this[AWAITDRAIN](() => this[ONDRAIN]())\n    else\n      this[ONDRAIN]()\n  }\n\n  [AWAITDRAIN] (cb) {\n    this.once('drain', cb)\n  }\n\n  write (writeBuf) {\n    if (this.blockRemain < writeBuf.length) {\n      const er = new Error('writing more data than expected')\n      er.path = this.absolute\n      return this.emit('error', er)\n    }\n    this.remain -= writeBuf.length\n    this.blockRemain -= writeBuf.length\n    this.pos += writeBuf.length\n    this.offset += writeBuf.length\n    return super.write(writeBuf)\n  }\n\n  [ONDRAIN] () {\n    if (!this.remain) {\n      if (this.blockRemain)\n        super.write(Buffer.alloc(this.blockRemain))\n      return this[CLOSE](/* istanbul ignore next - legacy */\n        er => er ? this.emit('error', er) : this.end())\n    }\n\n    if (this.offset >= this.length) {\n      // if we only have a smaller bit left to read, alloc a smaller buffer\n      // otherwise, keep it the same length it was before.\n      this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length))\n      this.offset = 0\n    }\n    this.length = this.buf.length - this.offset\n    this[READ]()\n  }\n})\n\nclass WriteEntrySync extends WriteEntry {\n  constructor (path, opt) {\n    super(path, opt)\n  }\n\n  [LSTAT] () {\n    this[ONLSTAT](fs.lstatSync(this.absolute))\n  }\n\n  [SYMLINK] () {\n    this[ONREADLINK](fs.readlinkSync(this.absolute))\n  }\n\n  [OPENFILE] () {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'))\n  }\n\n  [READ] () {\n    let threw = true\n    try {\n      const { fd, buf, offset, length, pos } = this\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos)\n      this[ONREAD](bytesRead)\n      threw = false\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](() => {})\n        } catch (er) {}\n      }\n    }\n  }\n\n  [AWAITDRAIN] (cb) {\n    cb()\n  }\n\n  [CLOSE] (cb) {\n    fs.closeSync(this.fd)\n    cb()\n  }\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor (readEntry, opt) {\n    opt = opt || {}\n    super(opt)\n    this.preservePaths = !!opt.preservePaths\n    this.portable = !!opt.portable\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n\n    this.readEntry = readEntry\n    this.type = readEntry.type\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.prefix = opt.prefix || null\n\n    this.path = normPath(readEntry.path)\n    this.mode = this[MODE](readEntry.mode)\n    this.uid = this.portable ? null : readEntry.uid\n    this.gid = this.portable ? null : readEntry.gid\n    this.uname = this.portable ? null : readEntry.uname\n    this.gname = this.portable ? null : readEntry.gname\n    this.size = readEntry.size\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime\n    this.atime = this.portable ? null : readEntry.atime\n    this.ctime = this.portable ? null : readEntry.ctime\n    this.linkpath = normPath(readEntry.linkpath)\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    if (!this.preservePaths) {\n      const s = stripAbsolutePath(this.path)\n      if (s[0]) {\n        this.warn(\n          'stripping ' + s[0] + ' from absolute path',\n          this.path\n        )\n        this.path = s[1]\n      }\n    }\n\n    this.remain = readEntry.size\n    this.blockRemain = readEntry.startBlockSize\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime\n    })\n\n    if (this.header.encode() && !this.noPax)\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink\n      }).encode())\n\n    super.write(this.header.block)\n    readEntry.pipe(this)\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory')\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain)\n      throw new Error('writing more to entry than is appropriate')\n    this.blockRemain -= writeLen\n    return super.write(data)\n  }\n\n  end () {\n    if (this.blockRemain)\n      super.write(Buffer.alloc(this.blockRemain))\n    return super.end()\n  }\n})\n\nWriteEntry.Sync = WriteEntrySync\nWriteEntry.Tar = WriteEntryTar\n\nconst getType = stat =>\n  stat.isFile() ? 'File'\n  : stat.isDirectory() ? 'Directory'\n  : stat.isSymbolicLink() ? 'SymbolicLink'\n  : 'Unsupported'\n\nmodule.exports = WriteEntry\n"]},"metadata":{},"sourceType":"script"}