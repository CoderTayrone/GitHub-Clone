{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readParamsFile = exports.promptForNewParams = exports.getParams = exports.getParamsWithCurrentValuesAsDefaults = void 0;\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst clc = require(\"cli-color\");\n\nconst dotenv = require(\"dotenv\");\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst askUserForParam = require(\"./askUserForParam\");\n\nconst track = require(\"../track\");\n\nfunction setNewDefaults(params, newDefaults) {\n  params.forEach(param => {\n    if (newDefaults[param.param.toUpperCase()]) {\n      param.default = newDefaults[param.param.toUpperCase()];\n    }\n  });\n  return params;\n}\n\nfunction getParamsWithCurrentValuesAsDefaults(extensionInstance) {\n  const specParams = _.cloneDeep(_.get(extensionInstance, \"config.source.spec.params\", []));\n\n  const currentParams = _.cloneDeep(_.get(extensionInstance, \"config.params\", {}));\n\n  return setNewDefaults(specParams, currentParams);\n}\n\nexports.getParamsWithCurrentValuesAsDefaults = getParamsWithCurrentValuesAsDefaults;\n\nasync function getParams(projectId, paramSpecs, envFilePath) {\n  let commandLineParams;\n\n  if (envFilePath) {\n    try {\n      const buf = fs.readFileSync(path.resolve(envFilePath), \"utf8\");\n      commandLineParams = dotenv.parse(buf.toString().trim(), {\n        debug: true\n      });\n      track(\"Extension Env File\", \"Present\");\n    } catch (err) {\n      track(\"Extension Env File\", \"Invalid\");\n      throw new error_1.FirebaseError(`Error reading env file: ${err.message}\\n`, {\n        original: err\n      });\n    }\n  } else {\n    track(\"Extension Env File\", \"Not Present\");\n  }\n\n  const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(projectId);\n  let params;\n\n  if (commandLineParams) {\n    params = extensionsHelper_1.populateDefaultParams(commandLineParams, paramSpecs);\n    extensionsHelper_1.validateCommandLineParams(params, paramSpecs);\n  } else {\n    params = await askUserForParam.ask(paramSpecs, firebaseProjectParams);\n  }\n\n  track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n  return params;\n}\n\nexports.getParams = getParams;\n\nasync function promptForNewParams(spec, newSpec, currentParams, projectId) {\n  const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(projectId);\n\n  const comparer = (param1, param2) => {\n    return param1.type === param2.type && param1.param === param2.param;\n  };\n\n  let paramsDiffDeletions = _.differenceWith(spec.params, _.get(newSpec, \"params\", []), comparer);\n\n  paramsDiffDeletions = extensionsHelper_1.substituteParams(paramsDiffDeletions, firebaseProjectParams);\n\n  let paramsDiffAdditions = _.differenceWith(newSpec.params, _.get(spec, \"params\", []), comparer);\n\n  paramsDiffAdditions = extensionsHelper_1.substituteParams(paramsDiffAdditions, firebaseProjectParams);\n\n  if (paramsDiffDeletions.length) {\n    logger_1.logger.info(\"The following params will no longer be used:\");\n    paramsDiffDeletions.forEach(param => {\n      logger_1.logger.info(clc.red(`- ${param.param}: ${currentParams[param.param.toUpperCase()]}`));\n      delete currentParams[param.param.toUpperCase()];\n    });\n  }\n\n  if (paramsDiffAdditions.length) {\n    logger_1.logger.info(\"To update this instance, configure the following new parameters:\");\n\n    for (const param of paramsDiffAdditions) {\n      const chosenValue = await askUserForParam.askForParam(param);\n      currentParams[param.param] = chosenValue;\n    }\n  }\n\n  return currentParams;\n}\n\nexports.promptForNewParams = promptForNewParams;\n\nfunction readParamsFile(envFilePath) {\n  try {\n    const buf = fs.readFileSync(path.resolve(envFilePath), \"utf8\");\n    return dotenv.parse(buf.toString().trim(), {\n      debug: true\n    });\n  } catch (err) {\n    throw new error_1.FirebaseError(`Error reading --test-params file: ${err.message}\\n`, {\n      original: err\n    });\n  }\n}\n\nexports.readParamsFile = readParamsFile;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/paramHelper.js"],"names":["Object","defineProperty","exports","value","readParamsFile","promptForNewParams","getParams","getParamsWithCurrentValuesAsDefaults","_","require","path","clc","dotenv","fs","error_1","logger_1","extensionsHelper_1","askUserForParam","track","setNewDefaults","params","newDefaults","forEach","param","toUpperCase","default","extensionInstance","specParams","cloneDeep","get","currentParams","projectId","paramSpecs","envFilePath","commandLineParams","buf","readFileSync","resolve","parse","toString","trim","debug","err","FirebaseError","message","original","firebaseProjectParams","getFirebaseProjectParams","populateDefaultParams","validateCommandLineParams","ask","isEmpty","size","spec","newSpec","comparer","param1","param2","type","paramsDiffDeletions","differenceWith","substituteParams","paramsDiffAdditions","length","logger","info","red","chosenValue","askForParam"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readParamsFile = exports.promptForNewParams = exports.getParams = exports.getParamsWithCurrentValuesAsDefaults = void 0;\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nconst clc = require(\"cli-color\");\nconst dotenv = require(\"dotenv\");\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst askUserForParam = require(\"./askUserForParam\");\nconst track = require(\"../track\");\nfunction setNewDefaults(params, newDefaults) {\n    params.forEach((param) => {\n        if (newDefaults[param.param.toUpperCase()]) {\n            param.default = newDefaults[param.param.toUpperCase()];\n        }\n    });\n    return params;\n}\nfunction getParamsWithCurrentValuesAsDefaults(extensionInstance) {\n    const specParams = _.cloneDeep(_.get(extensionInstance, \"config.source.spec.params\", []));\n    const currentParams = _.cloneDeep(_.get(extensionInstance, \"config.params\", {}));\n    return setNewDefaults(specParams, currentParams);\n}\nexports.getParamsWithCurrentValuesAsDefaults = getParamsWithCurrentValuesAsDefaults;\nasync function getParams(projectId, paramSpecs, envFilePath) {\n    let commandLineParams;\n    if (envFilePath) {\n        try {\n            const buf = fs.readFileSync(path.resolve(envFilePath), \"utf8\");\n            commandLineParams = dotenv.parse(buf.toString().trim(), { debug: true });\n            track(\"Extension Env File\", \"Present\");\n        }\n        catch (err) {\n            track(\"Extension Env File\", \"Invalid\");\n            throw new error_1.FirebaseError(`Error reading env file: ${err.message}\\n`, { original: err });\n        }\n    }\n    else {\n        track(\"Extension Env File\", \"Not Present\");\n    }\n    const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(projectId);\n    let params;\n    if (commandLineParams) {\n        params = extensionsHelper_1.populateDefaultParams(commandLineParams, paramSpecs);\n        extensionsHelper_1.validateCommandLineParams(params, paramSpecs);\n    }\n    else {\n        params = await askUserForParam.ask(paramSpecs, firebaseProjectParams);\n    }\n    track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n    return params;\n}\nexports.getParams = getParams;\nasync function promptForNewParams(spec, newSpec, currentParams, projectId) {\n    const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(projectId);\n    const comparer = (param1, param2) => {\n        return param1.type === param2.type && param1.param === param2.param;\n    };\n    let paramsDiffDeletions = _.differenceWith(spec.params, _.get(newSpec, \"params\", []), comparer);\n    paramsDiffDeletions = extensionsHelper_1.substituteParams(paramsDiffDeletions, firebaseProjectParams);\n    let paramsDiffAdditions = _.differenceWith(newSpec.params, _.get(spec, \"params\", []), comparer);\n    paramsDiffAdditions = extensionsHelper_1.substituteParams(paramsDiffAdditions, firebaseProjectParams);\n    if (paramsDiffDeletions.length) {\n        logger_1.logger.info(\"The following params will no longer be used:\");\n        paramsDiffDeletions.forEach((param) => {\n            logger_1.logger.info(clc.red(`- ${param.param}: ${currentParams[param.param.toUpperCase()]}`));\n            delete currentParams[param.param.toUpperCase()];\n        });\n    }\n    if (paramsDiffAdditions.length) {\n        logger_1.logger.info(\"To update this instance, configure the following new parameters:\");\n        for (const param of paramsDiffAdditions) {\n            const chosenValue = await askUserForParam.askForParam(param);\n            currentParams[param.param] = chosenValue;\n        }\n    }\n    return currentParams;\n}\nexports.promptForNewParams = promptForNewParams;\nfunction readParamsFile(envFilePath) {\n    try {\n        const buf = fs.readFileSync(path.resolve(envFilePath), \"utf8\");\n        return dotenv.parse(buf.toString().trim(), { debug: true });\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Error reading --test-params file: ${err.message}\\n`, {\n            original: err,\n        });\n    }\n}\nexports.readParamsFile = readParamsFile;\n"]},"metadata":{},"sourceType":"script"}