{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setRulesetLabels = exports.createRuleset = exports.getRulesetLabels = exports.getRuleset = exports.listAllRulesets = void 0;\n\nconst api = require(\"../api\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nfunction handleErrorResponse(response) {\n  if (response.body && response.body.error) {\n    return utils.reject(response.body.error, {\n      code: 2\n    });\n  }\n\n  logger_1.logger.debug(\"[rules] error:\", response.status, response.body);\n  return utils.reject(\"Unexpected error encountered with database.\", {\n    code: 2\n  });\n}\n\nasync function listAllRulesets(databaseName) {\n  const response = await api.request(\"GET\", `/namespaces/${databaseName}/rulesets`, {\n    auth: true,\n    origin: api.rtdbMetadataOrigin,\n    json: true\n  });\n\n  if (response.status === 200) {\n    return response.body.rulesets;\n  }\n\n  return handleErrorResponse(response);\n}\n\nexports.listAllRulesets = listAllRulesets;\n\nasync function getRuleset(databaseName, rulesetId) {\n  const response = await api.request(\"GET\", `/namespaces/${databaseName}/rulesets/${rulesetId}`, {\n    auth: true,\n    origin: api.rtdbMetadataOrigin,\n    json: true\n  });\n\n  if (response.status === 200) {\n    return response.body;\n  }\n\n  return handleErrorResponse(response);\n}\n\nexports.getRuleset = getRuleset;\n\nasync function getRulesetLabels(databaseName) {\n  const response = await api.request(\"GET\", `/namespaces/${databaseName}/ruleset_labels`, {\n    auth: true,\n    origin: api.rtdbMetadataOrigin\n  });\n\n  if (response.status === 200) {\n    return response.body;\n  }\n\n  return handleErrorResponse(response);\n}\n\nexports.getRulesetLabels = getRulesetLabels;\n\nasync function createRuleset(databaseName, source) {\n  const response = await api.request(\"POST\", `/.settings/rulesets.json`, {\n    auth: true,\n    origin: utils.addSubdomain(api.realtimeOrigin, databaseName),\n    json: false,\n    data: source\n  });\n\n  if (response.status === 200) {\n    return JSON.parse(response.body).id;\n  }\n\n  return handleErrorResponse(response);\n}\n\nexports.createRuleset = createRuleset;\n\nasync function setRulesetLabels(databaseName, labels) {\n  const response = await api.request(\"PUT\", `/.settings/ruleset_labels.json`, {\n    auth: true,\n    origin: utils.addSubdomain(api.realtimeOrigin, databaseName),\n    data: labels\n  });\n\n  if (response.status === 200) {\n    return response.body;\n  }\n\n  return handleErrorResponse(response);\n}\n\nexports.setRulesetLabels = setRulesetLabels;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/database/metadata.js"],"names":["Object","defineProperty","exports","value","setRulesetLabels","createRuleset","getRulesetLabels","getRuleset","listAllRulesets","api","require","logger_1","utils","handleErrorResponse","response","body","error","reject","code","logger","debug","status","databaseName","request","auth","origin","rtdbMetadataOrigin","json","rulesets","rulesetId","source","addSubdomain","realtimeOrigin","data","JSON","parse","id","labels"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setRulesetLabels = exports.createRuleset = exports.getRulesetLabels = exports.getRuleset = exports.listAllRulesets = void 0;\nconst api = require(\"../api\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nfunction handleErrorResponse(response) {\n    if (response.body && response.body.error) {\n        return utils.reject(response.body.error, { code: 2 });\n    }\n    logger_1.logger.debug(\"[rules] error:\", response.status, response.body);\n    return utils.reject(\"Unexpected error encountered with database.\", {\n        code: 2,\n    });\n}\nasync function listAllRulesets(databaseName) {\n    const response = await api.request(\"GET\", `/namespaces/${databaseName}/rulesets`, {\n        auth: true,\n        origin: api.rtdbMetadataOrigin,\n        json: true,\n    });\n    if (response.status === 200) {\n        return response.body.rulesets;\n    }\n    return handleErrorResponse(response);\n}\nexports.listAllRulesets = listAllRulesets;\nasync function getRuleset(databaseName, rulesetId) {\n    const response = await api.request(\"GET\", `/namespaces/${databaseName}/rulesets/${rulesetId}`, {\n        auth: true,\n        origin: api.rtdbMetadataOrigin,\n        json: true,\n    });\n    if (response.status === 200) {\n        return response.body;\n    }\n    return handleErrorResponse(response);\n}\nexports.getRuleset = getRuleset;\nasync function getRulesetLabels(databaseName) {\n    const response = await api.request(\"GET\", `/namespaces/${databaseName}/ruleset_labels`, {\n        auth: true,\n        origin: api.rtdbMetadataOrigin,\n    });\n    if (response.status === 200) {\n        return response.body;\n    }\n    return handleErrorResponse(response);\n}\nexports.getRulesetLabels = getRulesetLabels;\nasync function createRuleset(databaseName, source) {\n    const response = await api.request(\"POST\", `/.settings/rulesets.json`, {\n        auth: true,\n        origin: utils.addSubdomain(api.realtimeOrigin, databaseName),\n        json: false,\n        data: source,\n    });\n    if (response.status === 200) {\n        return JSON.parse(response.body).id;\n    }\n    return handleErrorResponse(response);\n}\nexports.createRuleset = createRuleset;\nasync function setRulesetLabels(databaseName, labels) {\n    const response = await api.request(\"PUT\", `/.settings/ruleset_labels.json`, {\n        auth: true,\n        origin: utils.addSubdomain(api.realtimeOrigin, databaseName),\n        data: labels,\n    });\n    if (response.status === 200) {\n        return response.body;\n    }\n    return handleErrorResponse(response);\n}\nexports.setRulesetLabels = setRulesetLabels;\n"]},"metadata":{},"sourceType":"script"}