{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst error_1 = require(\"../../error\");\n\nconst indexes_1 = require(\"../../firestore/indexes\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst utils = require(\"../../utils\");\n\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\n\nasync function deployRules(context) {\n  const rulesDeploy = _.get(context, \"firestore.rulesDeploy\");\n\n  if (!context.firestoreRules || !rulesDeploy) {\n    return;\n  }\n\n  await rulesDeploy.createRulesets(rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n}\n\nasync function deployIndexes(context, options) {\n  if (!context.firestoreIndexes) {\n    return;\n  }\n\n  const indexesFileName = _.get(context, \"firestore.indexes.name\");\n\n  const indexesSrc = _.get(context, \"firestore.indexes.content\");\n\n  if (!indexesSrc) {\n    logger_1.logger.debug(\"No Firestore indexes present.\");\n    return;\n  }\n\n  const indexes = indexesSrc.indexes;\n\n  if (!indexes) {\n    throw new error_1.FirebaseError(`Index file must contain an \"indexes\" property.`);\n  }\n\n  const fieldOverrides = indexesSrc.fieldOverrides || [];\n  await new indexes_1.FirestoreIndexes().deploy(options, indexes, fieldOverrides);\n  utils.logSuccess(`${clc.bold.green(\"firestore:\")} deployed indexes in ${clc.bold(indexesFileName)} successfully`);\n}\n\nasync function default_1(context, options) {\n  await Promise.all([deployRules(context), deployIndexes(context, options)]);\n}\n\nexports.default = default_1;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/firestore/deploy.js"],"names":["Object","defineProperty","exports","value","_","require","clc","error_1","indexes_1","logger_1","utils","rulesDeploy_1","deployRules","context","rulesDeploy","get","firestoreRules","createRulesets","RulesetServiceType","CLOUD_FIRESTORE","deployIndexes","options","firestoreIndexes","indexesFileName","indexesSrc","logger","debug","indexes","FirebaseError","fieldOverrides","FirestoreIndexes","deploy","logSuccess","bold","green","default_1","Promise","all","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,yBAAD,CAAzB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,mBAAD,CAA7B;;AACA,eAAeO,WAAf,CAA2BC,OAA3B,EAAoC;AAChC,QAAMC,WAAW,GAAGV,CAAC,CAACW,GAAF,CAAMF,OAAN,EAAe,uBAAf,CAApB;;AACA,MAAI,CAACA,OAAO,CAACG,cAAT,IAA2B,CAACF,WAAhC,EAA6C;AACzC;AACH;;AACD,QAAMA,WAAW,CAACG,cAAZ,CAA2BN,aAAa,CAACO,kBAAd,CAAiCC,eAA5D,CAAN;AACH;;AACD,eAAeC,aAAf,CAA6BP,OAA7B,EAAsCQ,OAAtC,EAA+C;AAC3C,MAAI,CAACR,OAAO,CAACS,gBAAb,EAA+B;AAC3B;AACH;;AACD,QAAMC,eAAe,GAAGnB,CAAC,CAACW,GAAF,CAAMF,OAAN,EAAe,wBAAf,CAAxB;;AACA,QAAMW,UAAU,GAAGpB,CAAC,CAACW,GAAF,CAAMF,OAAN,EAAe,2BAAf,CAAnB;;AACA,MAAI,CAACW,UAAL,EAAiB;AACbf,IAAAA,QAAQ,CAACgB,MAAT,CAAgBC,KAAhB,CAAsB,+BAAtB;AACA;AACH;;AACD,QAAMC,OAAO,GAAGH,UAAU,CAACG,OAA3B;;AACA,MAAI,CAACA,OAAL,EAAc;AACV,UAAM,IAAIpB,OAAO,CAACqB,aAAZ,CAA2B,gDAA3B,CAAN;AACH;;AACD,QAAMC,cAAc,GAAGL,UAAU,CAACK,cAAX,IAA6B,EAApD;AACA,QAAM,IAAIrB,SAAS,CAACsB,gBAAd,GAAiCC,MAAjC,CAAwCV,OAAxC,EAAiDM,OAAjD,EAA0DE,cAA1D,CAAN;AACAnB,EAAAA,KAAK,CAACsB,UAAN,CAAkB,GAAE1B,GAAG,CAAC2B,IAAJ,CAASC,KAAT,CAAe,YAAf,CAA6B,wBAAuB5B,GAAG,CAAC2B,IAAJ,CAASV,eAAT,CAA0B,eAAlG;AACH;;AACD,eAAeY,SAAf,CAAyBtB,OAAzB,EAAkCQ,OAAlC,EAA2C;AACvC,QAAMe,OAAO,CAACC,GAAR,CAAY,CAACzB,WAAW,CAACC,OAAD,CAAZ,EAAuBO,aAAa,CAACP,OAAD,EAAUQ,OAAV,CAApC,CAAZ,CAAN;AACH;;AACDnB,OAAO,CAACoC,OAAR,GAAkBH,SAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst error_1 = require(\"../../error\");\nconst indexes_1 = require(\"../../firestore/indexes\");\nconst logger_1 = require(\"../../logger\");\nconst utils = require(\"../../utils\");\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\nasync function deployRules(context) {\n    const rulesDeploy = _.get(context, \"firestore.rulesDeploy\");\n    if (!context.firestoreRules || !rulesDeploy) {\n        return;\n    }\n    await rulesDeploy.createRulesets(rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n}\nasync function deployIndexes(context, options) {\n    if (!context.firestoreIndexes) {\n        return;\n    }\n    const indexesFileName = _.get(context, \"firestore.indexes.name\");\n    const indexesSrc = _.get(context, \"firestore.indexes.content\");\n    if (!indexesSrc) {\n        logger_1.logger.debug(\"No Firestore indexes present.\");\n        return;\n    }\n    const indexes = indexesSrc.indexes;\n    if (!indexes) {\n        throw new error_1.FirebaseError(`Index file must contain an \"indexes\" property.`);\n    }\n    const fieldOverrides = indexesSrc.fieldOverrides || [];\n    await new indexes_1.FirestoreIndexes().deploy(options, indexes, fieldOverrides);\n    utils.logSuccess(`${clc.bold.green(\"firestore:\")} deployed indexes in ${clc.bold(indexesFileName)} successfully`);\n}\nasync function default_1(context, options) {\n    await Promise.all([deployRules(context), deployIndexes(context, options)]);\n}\nexports.default = default_1;\n"]},"metadata":{},"sourceType":"script"}