{"ast":null,"code":"\"use strict\";\n\nlet BINARY_REGEXP = /\\.(jpeg|jpg|gif|png|bmp|ico)$/i;\nmodule.exports = {\n  /**\n   * The order that this parser will run, in relation to other parsers.\n   *\n   * @type {number}\n   */\n  order: 400,\n\n  /**\n   * Whether to allow \"empty\" files (zero bytes).\n   *\n   * @type {boolean}\n   */\n  allowEmpty: true,\n\n  /**\n   * Determines whether this parser can parse a given file reference.\n   * Parsers that return true will be tried, in order, until one successfully parses the file.\n   * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case\n   * every parser will be tried.\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {boolean}\n   */\n  canParse(file) {\n    // Use this parser if the file is a Buffer, and has a known binary extension\n    return Buffer.isBuffer(file.data) && BINARY_REGEXP.test(file.url);\n  },\n\n  /**\n   * Parses the given data as a Buffer (byte array).\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {Buffer}\n   */\n  parse(file) {\n    if (Buffer.isBuffer(file.data)) {\n      return file.data;\n    } else {\n      // This will reject if data is anything other than a string or typed array\n      return Buffer.from(file.data);\n    }\n  }\n\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/@apidevtools/json-schema-ref-parser/lib/parsers/binary.js"],"names":["BINARY_REGEXP","module","exports","order","allowEmpty","canParse","file","Buffer","isBuffer","data","test","url","parse","from"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAG,gCAApB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf;AACF;AACA;AACA;AACA;AACEC,EAAAA,KAAK,EAAE,GANQ;;AAQf;AACF;AACA;AACA;AACA;AACEC,EAAAA,UAAU,EAAE,IAbG;;AAef;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,CAAEC,IAAF,EAAQ;AACd;AACA,WAAOC,MAAM,CAACC,QAAP,CAAgBF,IAAI,CAACG,IAArB,KAA8BT,aAAa,CAACU,IAAd,CAAmBJ,IAAI,CAACK,GAAxB,CAArC;AACD,GA9Bc;;AAgCf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,CAAEN,IAAF,EAAQ;AACX,QAAIC,MAAM,CAACC,QAAP,CAAgBF,IAAI,CAACG,IAArB,CAAJ,EAAgC;AAC9B,aAAOH,IAAI,CAACG,IAAZ;AACD,KAFD,MAGK;AACH;AACA,aAAOF,MAAM,CAACM,IAAP,CAAYP,IAAI,CAACG,IAAjB,CAAP;AACD;AACF;;AAjDc,CAAjB","sourcesContent":["\"use strict\";\n\nlet BINARY_REGEXP = /\\.(jpeg|jpg|gif|png|bmp|ico)$/i;\n\nmodule.exports = {\n  /**\n   * The order that this parser will run, in relation to other parsers.\n   *\n   * @type {number}\n   */\n  order: 400,\n\n  /**\n   * Whether to allow \"empty\" files (zero bytes).\n   *\n   * @type {boolean}\n   */\n  allowEmpty: true,\n\n  /**\n   * Determines whether this parser can parse a given file reference.\n   * Parsers that return true will be tried, in order, until one successfully parses the file.\n   * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case\n   * every parser will be tried.\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {boolean}\n   */\n  canParse (file) {\n    // Use this parser if the file is a Buffer, and has a known binary extension\n    return Buffer.isBuffer(file.data) && BINARY_REGEXP.test(file.url);\n  },\n\n  /**\n   * Parses the given data as a Buffer (byte array).\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {Buffer}\n   */\n  parse (file) {\n    if (Buffer.isBuffer(file.data)) {\n      return file.data;\n    }\n    else {\n      // This will reject if data is anything other than a string or typed array\n      return Buffer.from(file.data);\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}