{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst configstore_1 = require(\"../configstore\");\n\nconst utils = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst auth = require(\"../auth\");\n\nconst utils_1 = require(\"../utils\");\n\nmodule.exports = new command_1.Command(\"login\").description(\"log the CLI into Firebase\").option(\"--no-localhost\", \"copy and paste a code instead of starting a local server for authentication\").option(\"--reauth\", \"force reauthentication even if already logged in\").action(async options => {\n  if (options.nonInteractive) {\n    throw new error_1.FirebaseError(\"Cannot run login in non-interactive mode. See \" + clc.bold(\"login:ci\") + \" to generate a token for use in non-interactive environments.\", {\n      exit: 1\n    });\n  }\n\n  const user = options.user;\n  const tokens = options.tokens;\n\n  if (user && tokens && !options.reauth) {\n    logger_1.logger.info(\"Already logged in as\", clc.bold(user.email));\n    return user;\n  }\n\n  if (!options.reauth) {\n    utils.logBullet(\"Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google's privacy policy (https://policies.google.com/privacy) and is not used to identify you.\\n\");\n    const collectUsage = await prompt_1.promptOnce({\n      type: \"confirm\",\n      name: \"collectUsage\",\n      message: \"Allow Firebase to collect CLI usage and error reporting information?\"\n    });\n    configstore_1.configstore.set(\"usage\", collectUsage);\n\n    if (collectUsage) {\n      utils.logBullet(\"To change your data collection preference at any time, run `firebase logout` and log in again.\");\n    }\n  }\n\n  const useLocalhost = utils_1.isCloudEnvironment() ? false : options.localhost;\n  const result = await auth.loginGoogle(useLocalhost, _.get(user, \"email\"));\n  configstore_1.configstore.set(\"user\", result.user);\n  configstore_1.configstore.set(\"tokens\", result.tokens);\n  configstore_1.configstore.set(\"loginScopes\", result.scopes);\n  configstore_1.configstore.delete(\"session\");\n  logger_1.logger.info();\n\n  if (typeof result.user !== \"string\") {\n    utils.logSuccess(\"Success! Logged in as \" + clc.bold(result.user.email));\n  } else {\n    logger_1.logger.debug(\"Unexpected string for UserCredentials.user. Maybe an auth response JWT didn't parse right?\");\n    utils.logSuccess(\"Success! Logged in\");\n  }\n\n  return auth;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/login.js"],"names":["Object","defineProperty","exports","value","_","require","clc","command_1","logger_1","configstore_1","utils","error_1","prompt_1","auth","utils_1","module","Command","description","option","action","options","nonInteractive","FirebaseError","bold","exit","user","tokens","reauth","logger","info","email","logBullet","collectUsage","promptOnce","type","name","message","configstore","set","useLocalhost","isCloudEnvironment","localhost","result","loginGoogle","get","scopes","delete","logSuccess","debug"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst configstore_1 = require(\"../configstore\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst prompt_1 = require(\"../prompt\");\nconst auth = require(\"../auth\");\nconst utils_1 = require(\"../utils\");\nmodule.exports = new command_1.Command(\"login\")\n    .description(\"log the CLI into Firebase\")\n    .option(\"--no-localhost\", \"copy and paste a code instead of starting a local server for authentication\")\n    .option(\"--reauth\", \"force reauthentication even if already logged in\")\n    .action(async (options) => {\n    if (options.nonInteractive) {\n        throw new error_1.FirebaseError(\"Cannot run login in non-interactive mode. See \" +\n            clc.bold(\"login:ci\") +\n            \" to generate a token for use in non-interactive environments.\", { exit: 1 });\n    }\n    const user = options.user;\n    const tokens = options.tokens;\n    if (user && tokens && !options.reauth) {\n        logger_1.logger.info(\"Already logged in as\", clc.bold(user.email));\n        return user;\n    }\n    if (!options.reauth) {\n        utils.logBullet(\"Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google's privacy policy (https://policies.google.com/privacy) and is not used to identify you.\\n\");\n        const collectUsage = await prompt_1.promptOnce({\n            type: \"confirm\",\n            name: \"collectUsage\",\n            message: \"Allow Firebase to collect CLI usage and error reporting information?\",\n        });\n        configstore_1.configstore.set(\"usage\", collectUsage);\n        if (collectUsage) {\n            utils.logBullet(\"To change your data collection preference at any time, run `firebase logout` and log in again.\");\n        }\n    }\n    const useLocalhost = utils_1.isCloudEnvironment() ? false : options.localhost;\n    const result = await auth.loginGoogle(useLocalhost, _.get(user, \"email\"));\n    configstore_1.configstore.set(\"user\", result.user);\n    configstore_1.configstore.set(\"tokens\", result.tokens);\n    configstore_1.configstore.set(\"loginScopes\", result.scopes);\n    configstore_1.configstore.delete(\"session\");\n    logger_1.logger.info();\n    if (typeof result.user !== \"string\") {\n        utils.logSuccess(\"Success! Logged in as \" + clc.bold(result.user.email));\n    }\n    else {\n        logger_1.logger.debug(\"Unexpected string for UserCredentials.user. Maybe an auth response JWT didn't parse right?\");\n        utils.logSuccess(\"Success! Logged in\");\n    }\n    return auth;\n});\n"]},"metadata":{},"sourceType":"script"}