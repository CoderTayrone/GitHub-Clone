{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensure = exports.enable = exports.check = exports.POLL_SETTINGS = void 0;\n\nconst _ = require(\"lodash\");\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst track = require(\"./track\");\n\nconst api = require(\"./api\");\n\nconst utils = require(\"./utils\");\n\nconst error_1 = require(\"./error\");\n\nexports.POLL_SETTINGS = {\n  pollInterval: 10000,\n  pollsBeforeRetry: 12\n};\n\nasync function check(projectId, apiName, prefix, silent = false) {\n  const response = await api.request(\"GET\", `/v1/projects/${projectId}/services/${apiName}`, {\n    auth: true,\n    origin: api.serviceUsageOrigin\n  });\n  const isEnabled = _.get(response.body, \"state\") === \"ENABLED\";\n\n  if (isEnabled && !silent) {\n    utils.logLabeledSuccess(prefix, `required API ${cli_color_1.bold(apiName)} is enabled`);\n  }\n\n  return isEnabled;\n}\n\nexports.check = check;\n\nasync function enable(projectId, apiName) {\n  try {\n    await api.request(\"POST\", `/v1/projects/${projectId}/services/${apiName}:enable`, {\n      auth: true,\n      origin: api.serviceUsageOrigin\n    });\n  } catch (err) {\n    if (error_1.isBillingError(err)) {\n      throw new error_1.FirebaseError(`Your project ${cli_color_1.bold(projectId)} must be on the Blaze (pay-as-you-go) plan to complete this command. Required API ${cli_color_1.bold(apiName)} can't be enabled until the upgrade is complete. To upgrade, visit the following URL:\n\nhttps://console.firebase.google.com/project/${projectId}/usage/details`);\n    }\n\n    throw err;\n  }\n}\n\nexports.enable = enable;\n\nasync function pollCheckEnabled(projectId, apiName, prefix, silent, enablementRetries, pollRetries = 0) {\n  if (pollRetries > exports.POLL_SETTINGS.pollsBeforeRetry) {\n    return enableApiWithRetries(projectId, apiName, prefix, silent, enablementRetries + 1);\n  }\n\n  await new Promise(resolve => {\n    setTimeout(resolve, exports.POLL_SETTINGS.pollInterval);\n  });\n  const isEnabled = await check(projectId, apiName, prefix, silent);\n\n  if (isEnabled) {\n    track(\"api_enabled\", apiName);\n    return;\n  }\n\n  if (!silent) {\n    utils.logLabeledBullet(prefix, `waiting for API ${cli_color_1.bold(apiName)} to activate...`);\n  }\n\n  return pollCheckEnabled(projectId, apiName, prefix, silent, enablementRetries, pollRetries + 1);\n}\n\nasync function enableApiWithRetries(projectId, apiName, prefix, silent, enablementRetries = 0) {\n  if (enablementRetries > 1) {\n    throw new error_1.FirebaseError(`Timed out waiting for API ${cli_color_1.bold(apiName)} to enable. Please try again in a few minutes.`);\n  }\n\n  await enable(projectId, apiName);\n  return pollCheckEnabled(projectId, apiName, prefix, silent, enablementRetries);\n}\n\nasync function ensure(projectId, apiName, prefix, silent = false) {\n  if (!silent) {\n    utils.logLabeledBullet(prefix, `ensuring required API ${cli_color_1.bold(apiName)} is enabled...`);\n  }\n\n  const isEnabled = await check(projectId, apiName, prefix, silent);\n\n  if (isEnabled) {\n    return;\n  }\n\n  if (!silent) {\n    utils.logLabeledWarning(prefix, `missing required API ${cli_color_1.bold(apiName)}. Enabling now...`);\n  }\n\n  return enableApiWithRetries(projectId, apiName, prefix, silent);\n}\n\nexports.ensure = ensure;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/ensureApiEnabled.js"],"names":["Object","defineProperty","exports","value","ensure","enable","check","POLL_SETTINGS","_","require","cli_color_1","track","api","utils","error_1","pollInterval","pollsBeforeRetry","projectId","apiName","prefix","silent","response","request","auth","origin","serviceUsageOrigin","isEnabled","get","body","logLabeledSuccess","bold","err","isBillingError","FirebaseError","pollCheckEnabled","enablementRetries","pollRetries","enableApiWithRetries","Promise","resolve","setTimeout","logLabeledBullet","logLabeledWarning"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ensure = exports.enable = exports.check = exports.POLL_SETTINGS = void 0;\nconst _ = require(\"lodash\");\nconst cli_color_1 = require(\"cli-color\");\nconst track = require(\"./track\");\nconst api = require(\"./api\");\nconst utils = require(\"./utils\");\nconst error_1 = require(\"./error\");\nexports.POLL_SETTINGS = {\n    pollInterval: 10000,\n    pollsBeforeRetry: 12,\n};\nasync function check(projectId, apiName, prefix, silent = false) {\n    const response = await api.request(\"GET\", `/v1/projects/${projectId}/services/${apiName}`, {\n        auth: true,\n        origin: api.serviceUsageOrigin,\n    });\n    const isEnabled = _.get(response.body, \"state\") === \"ENABLED\";\n    if (isEnabled && !silent) {\n        utils.logLabeledSuccess(prefix, `required API ${cli_color_1.bold(apiName)} is enabled`);\n    }\n    return isEnabled;\n}\nexports.check = check;\nasync function enable(projectId, apiName) {\n    try {\n        await api.request(\"POST\", `/v1/projects/${projectId}/services/${apiName}:enable`, {\n            auth: true,\n            origin: api.serviceUsageOrigin,\n        });\n    }\n    catch (err) {\n        if (error_1.isBillingError(err)) {\n            throw new error_1.FirebaseError(`Your project ${cli_color_1.bold(projectId)} must be on the Blaze (pay-as-you-go) plan to complete this command. Required API ${cli_color_1.bold(apiName)} can't be enabled until the upgrade is complete. To upgrade, visit the following URL:\n\nhttps://console.firebase.google.com/project/${projectId}/usage/details`);\n        }\n        throw err;\n    }\n}\nexports.enable = enable;\nasync function pollCheckEnabled(projectId, apiName, prefix, silent, enablementRetries, pollRetries = 0) {\n    if (pollRetries > exports.POLL_SETTINGS.pollsBeforeRetry) {\n        return enableApiWithRetries(projectId, apiName, prefix, silent, enablementRetries + 1);\n    }\n    await new Promise((resolve) => {\n        setTimeout(resolve, exports.POLL_SETTINGS.pollInterval);\n    });\n    const isEnabled = await check(projectId, apiName, prefix, silent);\n    if (isEnabled) {\n        track(\"api_enabled\", apiName);\n        return;\n    }\n    if (!silent) {\n        utils.logLabeledBullet(prefix, `waiting for API ${cli_color_1.bold(apiName)} to activate...`);\n    }\n    return pollCheckEnabled(projectId, apiName, prefix, silent, enablementRetries, pollRetries + 1);\n}\nasync function enableApiWithRetries(projectId, apiName, prefix, silent, enablementRetries = 0) {\n    if (enablementRetries > 1) {\n        throw new error_1.FirebaseError(`Timed out waiting for API ${cli_color_1.bold(apiName)} to enable. Please try again in a few minutes.`);\n    }\n    await enable(projectId, apiName);\n    return pollCheckEnabled(projectId, apiName, prefix, silent, enablementRetries);\n}\nasync function ensure(projectId, apiName, prefix, silent = false) {\n    if (!silent) {\n        utils.logLabeledBullet(prefix, `ensuring required API ${cli_color_1.bold(apiName)} is enabled...`);\n    }\n    const isEnabled = await check(projectId, apiName, prefix, silent);\n    if (isEnabled) {\n        return;\n    }\n    if (!silent) {\n        utils.logLabeledWarning(prefix, `missing required API ${cli_color_1.bold(apiName)}. Enabling now...`);\n    }\n    return enableApiWithRetries(projectId, apiName, prefix, silent);\n}\nexports.ensure = ensure;\n"]},"metadata":{},"sourceType":"script"}