{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst controller = require(\"../emulator/controller\");\n\nconst commandUtils = require(\"../emulator/commandUtils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst registry_1 = require(\"../emulator/registry\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst clc = require(\"cli-color\");\n\nconst constants_1 = require(\"../emulator/constants\");\n\nconst Table = require(\"cli-table\");\n\nfunction stylizeLink(url) {\n  return clc.underline(clc.bold(url));\n}\n\nmodule.exports = new command_1.Command(\"emulators:start\").before(commandUtils.setExportOnExitOptions).before(commandUtils.beforeEmulatorCommand).description(\"start the local Firebase emulators\").option(commandUtils.FLAG_ONLY, commandUtils.DESC_ONLY).option(commandUtils.FLAG_INSPECT_FUNCTIONS, commandUtils.DESC_INSPECT_FUNCTIONS).option(commandUtils.FLAG_IMPORT, commandUtils.DESC_IMPORT).option(commandUtils.FLAG_EXPORT_ON_EXIT, commandUtils.DESC_EXPORT_ON_EXIT).action(async options => {\n  const killSignalPromise = commandUtils.shutdownWhenKilled(options);\n\n  try {\n    await controller.startAll(options);\n  } catch (e) {\n    await controller.cleanShutdown();\n    throw e;\n  }\n\n  const reservedPorts = [];\n\n  for (const internalEmulator of [types_1.Emulators.LOGGING]) {\n    const info = registry_1.EmulatorRegistry.getInfo(internalEmulator);\n\n    if (info) {\n      reservedPorts.push(info.port);\n    }\n  }\n\n  const reservedPortsString = reservedPorts.length > 0 ? reservedPorts.join(\", \") : \"None\";\n  const uiInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.UI);\n  const hubInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.HUB);\n  const uiUrl = uiInfo ? `http://${registry_1.EmulatorRegistry.getInfoHostString(uiInfo)}` : \"unknown\";\n  const head = [\"Emulator\", \"Host:Port\"];\n\n  if (uiInfo) {\n    head.push(`View in ${constants_1.Constants.description(types_1.Emulators.UI)}`);\n  }\n\n  const successMessageTable = new Table();\n  let successMsg = `${clc.green(\"âœ”\")}  ${clc.bold(\"All emulators ready! It is now safe to connect your app.\")}`;\n\n  if (uiInfo) {\n    successMsg += `\\n${clc.cyan(\"i\")}  View Emulator UI at ${stylizeLink(uiUrl)}`;\n  }\n\n  successMessageTable.push([successMsg]);\n  const emulatorsTable = new Table({\n    head: head,\n    style: {\n      head: [\"yellow\"]\n    }\n  });\n  emulatorsTable.push(...controller.filterEmulatorTargets(options).map(emulator => {\n    const info = registry_1.EmulatorRegistry.getInfo(emulator);\n    const emulatorName = constants_1.Constants.description(emulator).replace(/ emulator/i, \"\");\n    const isSupportedByUi = types_1.EMULATORS_SUPPORTED_BY_UI.includes(emulator);\n\n    if (!info) {\n      return [emulatorName, \"Failed to initialize (see above)\", \"\", \"\"];\n    }\n\n    return [emulatorName, registry_1.EmulatorRegistry.getInfoHostString(info), isSupportedByUi && uiInfo ? stylizeLink(`${uiUrl}/${emulator}`) : clc.blackBright(\"n/a\")];\n  }).map(col => col.slice(0, head.length)).filter(v => v));\n  logger_1.logger.info(`\\n${successMessageTable}\n\n${emulatorsTable}\n${hubInfo ? clc.blackBright(\"  Emulator Hub running at \") + registry_1.EmulatorRegistry.getInfoHostString(hubInfo) : clc.blackBright(\"  Emulator Hub not running.\")}\n${clc.blackBright(\"  Other reserved ports:\")} ${reservedPortsString}\n\nIssues? Report them at ${stylizeLink(\"https://github.com/firebase/firebase-tools/issues\")} and attach the *-debug.log files.\n `);\n  await killSignalPromise;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/emulators-start.js"],"names":["Object","defineProperty","exports","value","command_1","require","controller","commandUtils","logger_1","registry_1","types_1","clc","constants_1","Table","stylizeLink","url","underline","bold","module","Command","before","setExportOnExitOptions","beforeEmulatorCommand","description","option","FLAG_ONLY","DESC_ONLY","FLAG_INSPECT_FUNCTIONS","DESC_INSPECT_FUNCTIONS","FLAG_IMPORT","DESC_IMPORT","FLAG_EXPORT_ON_EXIT","DESC_EXPORT_ON_EXIT","action","options","killSignalPromise","shutdownWhenKilled","startAll","e","cleanShutdown","reservedPorts","internalEmulator","Emulators","LOGGING","info","EmulatorRegistry","getInfo","push","port","reservedPortsString","length","join","uiInfo","UI","hubInfo","HUB","uiUrl","getInfoHostString","head","Constants","successMessageTable","successMsg","green","cyan","emulatorsTable","style","filterEmulatorTargets","map","emulator","emulatorName","replace","isSupportedByUi","EMULATORS_SUPPORTED_BY_UI","includes","blackBright","col","slice","filter","v","logger"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst controller = require(\"../emulator/controller\");\nconst commandUtils = require(\"../emulator/commandUtils\");\nconst logger_1 = require(\"../logger\");\nconst registry_1 = require(\"../emulator/registry\");\nconst types_1 = require(\"../emulator/types\");\nconst clc = require(\"cli-color\");\nconst constants_1 = require(\"../emulator/constants\");\nconst Table = require(\"cli-table\");\nfunction stylizeLink(url) {\n    return clc.underline(clc.bold(url));\n}\nmodule.exports = new command_1.Command(\"emulators:start\")\n    .before(commandUtils.setExportOnExitOptions)\n    .before(commandUtils.beforeEmulatorCommand)\n    .description(\"start the local Firebase emulators\")\n    .option(commandUtils.FLAG_ONLY, commandUtils.DESC_ONLY)\n    .option(commandUtils.FLAG_INSPECT_FUNCTIONS, commandUtils.DESC_INSPECT_FUNCTIONS)\n    .option(commandUtils.FLAG_IMPORT, commandUtils.DESC_IMPORT)\n    .option(commandUtils.FLAG_EXPORT_ON_EXIT, commandUtils.DESC_EXPORT_ON_EXIT)\n    .action(async (options) => {\n    const killSignalPromise = commandUtils.shutdownWhenKilled(options);\n    try {\n        await controller.startAll(options);\n    }\n    catch (e) {\n        await controller.cleanShutdown();\n        throw e;\n    }\n    const reservedPorts = [];\n    for (const internalEmulator of [types_1.Emulators.LOGGING]) {\n        const info = registry_1.EmulatorRegistry.getInfo(internalEmulator);\n        if (info) {\n            reservedPorts.push(info.port);\n        }\n    }\n    const reservedPortsString = reservedPorts.length > 0 ? reservedPorts.join(\", \") : \"None\";\n    const uiInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.UI);\n    const hubInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.HUB);\n    const uiUrl = uiInfo ? `http://${registry_1.EmulatorRegistry.getInfoHostString(uiInfo)}` : \"unknown\";\n    const head = [\"Emulator\", \"Host:Port\"];\n    if (uiInfo) {\n        head.push(`View in ${constants_1.Constants.description(types_1.Emulators.UI)}`);\n    }\n    const successMessageTable = new Table();\n    let successMsg = `${clc.green(\"âœ”\")}  ${clc.bold(\"All emulators ready! It is now safe to connect your app.\")}`;\n    if (uiInfo) {\n        successMsg += `\\n${clc.cyan(\"i\")}  View Emulator UI at ${stylizeLink(uiUrl)}`;\n    }\n    successMessageTable.push([successMsg]);\n    const emulatorsTable = new Table({\n        head: head,\n        style: {\n            head: [\"yellow\"],\n        },\n    });\n    emulatorsTable.push(...controller\n        .filterEmulatorTargets(options)\n        .map((emulator) => {\n        const info = registry_1.EmulatorRegistry.getInfo(emulator);\n        const emulatorName = constants_1.Constants.description(emulator).replace(/ emulator/i, \"\");\n        const isSupportedByUi = types_1.EMULATORS_SUPPORTED_BY_UI.includes(emulator);\n        if (!info) {\n            return [emulatorName, \"Failed to initialize (see above)\", \"\", \"\"];\n        }\n        return [\n            emulatorName,\n            registry_1.EmulatorRegistry.getInfoHostString(info),\n            isSupportedByUi && uiInfo\n                ? stylizeLink(`${uiUrl}/${emulator}`)\n                : clc.blackBright(\"n/a\"),\n        ];\n    })\n        .map((col) => col.slice(0, head.length))\n        .filter((v) => v));\n    logger_1.logger.info(`\\n${successMessageTable}\n\n${emulatorsTable}\n${hubInfo\n        ? clc.blackBright(\"  Emulator Hub running at \") + registry_1.EmulatorRegistry.getInfoHostString(hubInfo)\n        : clc.blackBright(\"  Emulator Hub not running.\")}\n${clc.blackBright(\"  Other reserved ports:\")} ${reservedPortsString}\n\nIssues? Report them at ${stylizeLink(\"https://github.com/firebase/firebase-tools/issues\")} and attach the *-debug.log files.\n `);\n    await killSignalPromise;\n});\n"]},"metadata":{},"sourceType":"script"}