{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmulatorUI = void 0;\n\nconst types_1 = require(\"./types\");\n\nconst downloadableEmulators = require(\"./downloadableEmulators\");\n\nconst registry_1 = require(\"./registry\");\n\nconst error_1 = require(\"../error\");\n\nconst constants_1 = require(\"./constants\");\n\nclass EmulatorUI {\n  constructor(args) {\n    this.args = args;\n  }\n\n  start() {\n    if (!registry_1.EmulatorRegistry.isRunning(types_1.Emulators.HUB)) {\n      throw new error_1.FirebaseError(`Cannot start ${constants_1.Constants.description(types_1.Emulators.UI)} without ${constants_1.Constants.description(types_1.Emulators.HUB)}!`);\n    }\n\n    const hubInfo = registry_1.EmulatorRegistry.get(types_1.Emulators.HUB).getInfo();\n    const {\n      auto_download,\n      host,\n      port,\n      projectId\n    } = this.args;\n    const env = {\n      HOST: host.toString(),\n      PORT: port.toString(),\n      GCLOUD_PROJECT: projectId,\n      [constants_1.Constants.FIREBASE_EMULATOR_HUB]: registry_1.EmulatorRegistry.getInfoHostString(hubInfo)\n    };\n    return downloadableEmulators.start(types_1.Emulators.UI, {\n      auto_download\n    }, env);\n  }\n\n  connect() {\n    return Promise.resolve();\n  }\n\n  stop() {\n    return downloadableEmulators.stop(types_1.Emulators.UI);\n  }\n\n  getInfo() {\n    return {\n      name: this.getName(),\n      host: this.args.host,\n      port: this.args.port,\n      pid: downloadableEmulators.getPID(types_1.Emulators.UI)\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.UI;\n  }\n\n}\n\nexports.EmulatorUI = EmulatorUI;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/ui.js"],"names":["Object","defineProperty","exports","value","EmulatorUI","types_1","require","downloadableEmulators","registry_1","error_1","constants_1","constructor","args","start","EmulatorRegistry","isRunning","Emulators","HUB","FirebaseError","Constants","description","UI","hubInfo","get","getInfo","auto_download","host","port","projectId","env","HOST","toString","PORT","GCLOUD_PROJECT","FIREBASE_EMULATOR_HUB","getInfoHostString","connect","Promise","resolve","stop","name","getName","pid","getPID"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMF,UAAN,CAAiB;AACbO,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,QAAI,CAACL,UAAU,CAACM,gBAAX,CAA4BC,SAA5B,CAAsCV,OAAO,CAACW,SAAR,CAAkBC,GAAxD,CAAL,EAAmE;AAC/D,YAAM,IAAIR,OAAO,CAACS,aAAZ,CAA2B,gBAAeR,WAAW,CAACS,SAAZ,CAAsBC,WAAtB,CAAkCf,OAAO,CAACW,SAAR,CAAkBK,EAApD,CAAwD,YAAWX,WAAW,CAACS,SAAZ,CAAsBC,WAAtB,CAAkCf,OAAO,CAACW,SAAR,CAAkBC,GAApD,CAAyD,GAAtK,CAAN;AACH;;AACD,UAAMK,OAAO,GAAGd,UAAU,CAACM,gBAAX,CAA4BS,GAA5B,CAAgClB,OAAO,CAACW,SAAR,CAAkBC,GAAlD,EAAuDO,OAAvD,EAAhB;AACA,UAAM;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA,IAAjB;AAAuBC,MAAAA,IAAvB;AAA6BC,MAAAA;AAA7B,QAA2C,KAAKhB,IAAtD;AACA,UAAMiB,GAAG,GAAG;AACRC,MAAAA,IAAI,EAAEJ,IAAI,CAACK,QAAL,EADE;AAERC,MAAAA,IAAI,EAAEL,IAAI,CAACI,QAAL,EAFE;AAGRE,MAAAA,cAAc,EAAEL,SAHR;AAIR,OAAClB,WAAW,CAACS,SAAZ,CAAsBe,qBAAvB,GAA+C1B,UAAU,CAACM,gBAAX,CAA4BqB,iBAA5B,CAA8Cb,OAA9C;AAJvC,KAAZ;AAMA,WAAOf,qBAAqB,CAACM,KAAtB,CAA4BR,OAAO,CAACW,SAAR,CAAkBK,EAA9C,EAAkD;AAAEI,MAAAA;AAAF,KAAlD,EAAqEI,GAArE,CAAP;AACH;;AACDO,EAAAA,OAAO,GAAG;AACN,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,WAAOhC,qBAAqB,CAACgC,IAAtB,CAA2BlC,OAAO,CAACW,SAAR,CAAkBK,EAA7C,CAAP;AACH;;AACDG,EAAAA,OAAO,GAAG;AACN,WAAO;AACHgB,MAAAA,IAAI,EAAE,KAAKC,OAAL,EADH;AAEHf,MAAAA,IAAI,EAAE,KAAKd,IAAL,CAAUc,IAFb;AAGHC,MAAAA,IAAI,EAAE,KAAKf,IAAL,CAAUe,IAHb;AAIHe,MAAAA,GAAG,EAAEnC,qBAAqB,CAACoC,MAAtB,CAA6BtC,OAAO,CAACW,SAAR,CAAkBK,EAA/C;AAJF,KAAP;AAMH;;AACDoB,EAAAA,OAAO,GAAG;AACN,WAAOpC,OAAO,CAACW,SAAR,CAAkBK,EAAzB;AACH;;AAlCY;;AAoCjBnB,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EmulatorUI = void 0;\nconst types_1 = require(\"./types\");\nconst downloadableEmulators = require(\"./downloadableEmulators\");\nconst registry_1 = require(\"./registry\");\nconst error_1 = require(\"../error\");\nconst constants_1 = require(\"./constants\");\nclass EmulatorUI {\n    constructor(args) {\n        this.args = args;\n    }\n    start() {\n        if (!registry_1.EmulatorRegistry.isRunning(types_1.Emulators.HUB)) {\n            throw new error_1.FirebaseError(`Cannot start ${constants_1.Constants.description(types_1.Emulators.UI)} without ${constants_1.Constants.description(types_1.Emulators.HUB)}!`);\n        }\n        const hubInfo = registry_1.EmulatorRegistry.get(types_1.Emulators.HUB).getInfo();\n        const { auto_download, host, port, projectId } = this.args;\n        const env = {\n            HOST: host.toString(),\n            PORT: port.toString(),\n            GCLOUD_PROJECT: projectId,\n            [constants_1.Constants.FIREBASE_EMULATOR_HUB]: registry_1.EmulatorRegistry.getInfoHostString(hubInfo),\n        };\n        return downloadableEmulators.start(types_1.Emulators.UI, { auto_download }, env);\n    }\n    connect() {\n        return Promise.resolve();\n    }\n    stop() {\n        return downloadableEmulators.stop(types_1.Emulators.UI);\n    }\n    getInfo() {\n        return {\n            name: this.getName(),\n            host: this.args.host,\n            port: this.args.port,\n            pid: downloadableEmulators.getPID(types_1.Emulators.UI),\n        };\n    }\n    getName() {\n        return types_1.Emulators.UI;\n    }\n}\nexports.EmulatorUI = EmulatorUI;\n"]},"metadata":{},"sourceType":"script"}