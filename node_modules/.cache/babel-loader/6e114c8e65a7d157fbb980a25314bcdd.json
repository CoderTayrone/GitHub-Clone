{"ast":null,"code":"'use strict';\n\nvar {\n  fromEvent\n} = require('rxjs');\n\nvar {\n  filter,\n  map,\n  share\n} = require('rxjs/operators');\n\nfunction normalizeKeypressEvents(value, key) {\n  return {\n    value: value,\n    key: key || {}\n  };\n}\n\nmodule.exports = function (rl) {\n  var keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents) // Ignore `enter` key. On the readline, we only care about the `line` event.\n  .pipe(filter(({\n    key\n  }) => key.name !== 'enter' && key.name !== 'return'));\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress: keypress,\n    normalizedUpKey: keypress.pipe(filter(({\n      key\n    }) => key.name === 'up' || key.name === 'k' || key.name === 'p' && key.ctrl), share()),\n    normalizedDownKey: keypress.pipe(filter(({\n      key\n    }) => key.name === 'down' || key.name === 'j' || key.name === 'n' && key.ctrl), share()),\n    numberKey: keypress.pipe(filter(e => e.value && '123456789'.indexOf(e.value) >= 0), map(e => Number(e.value)), share()),\n    spaceKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'space'), share()),\n    aKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'a'), share()),\n    iKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'i'), share())\n  };\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/utils/events.js"],"names":["fromEvent","require","filter","map","share","normalizeKeypressEvents","value","key","module","exports","rl","keypress","input","pipe","name","line","normalizedUpKey","ctrl","normalizedDownKey","numberKey","e","indexOf","Number","spaceKey","aKey","iKey"],"mappings":"AAAA;;AACA,IAAI;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,MAAD,CAA3B;;AACA,IAAI;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,GAAV;AAAeC,EAAAA;AAAf,IAAyBH,OAAO,CAAC,gBAAD,CAApC;;AAEA,SAASI,uBAAT,CAAiCC,KAAjC,EAAwCC,GAAxC,EAA6C;AAC3C,SAAO;AAAED,IAAAA,KAAK,EAAEA,KAAT;AAAgBC,IAAAA,GAAG,EAAEA,GAAG,IAAI;AAA5B,GAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAASC,EAAT,EAAa;AAC5B,MAAIC,QAAQ,GAAGX,SAAS,CAACU,EAAE,CAACE,KAAJ,EAAW,UAAX,EAAuBP,uBAAvB,CAAT,CACb;AADa,GAEZQ,IAFY,CAEPX,MAAM,CAAC,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAaA,GAAG,CAACO,IAAJ,KAAa,OAAb,IAAwBP,GAAG,CAACO,IAAJ,KAAa,QAAnD,CAFC,CAAf;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAEf,SAAS,CAACU,EAAD,EAAK,MAAL,CADV;AAELC,IAAAA,QAAQ,EAAEA,QAFL;AAILK,IAAAA,eAAe,EAAEL,QAAQ,CAACE,IAAT,CACfX,MAAM,CACJ,CAAC;AAAEK,MAAAA;AAAF,KAAD,KACEA,GAAG,CAACO,IAAJ,KAAa,IAAb,IAAqBP,GAAG,CAACO,IAAJ,KAAa,GAAlC,IAA0CP,GAAG,CAACO,IAAJ,KAAa,GAAb,IAAoBP,GAAG,CAACU,IAFhE,CADS,EAKfb,KAAK,EALU,CAJZ;AAYLc,IAAAA,iBAAiB,EAAEP,QAAQ,CAACE,IAAT,CACjBX,MAAM,CACJ,CAAC;AAAEK,MAAAA;AAAF,KAAD,KACEA,GAAG,CAACO,IAAJ,KAAa,MAAb,IAAuBP,GAAG,CAACO,IAAJ,KAAa,GAApC,IAA4CP,GAAG,CAACO,IAAJ,KAAa,GAAb,IAAoBP,GAAG,CAACU,IAFlE,CADW,EAKjBb,KAAK,EALY,CAZd;AAoBLe,IAAAA,SAAS,EAAER,QAAQ,CAACE,IAAT,CACTX,MAAM,CAACkB,CAAC,IAAIA,CAAC,CAACd,KAAF,IAAW,YAAYe,OAAZ,CAAoBD,CAAC,CAACd,KAAtB,KAAgC,CAAjD,CADG,EAETH,GAAG,CAACiB,CAAC,IAAIE,MAAM,CAACF,CAAC,CAACd,KAAH,CAAZ,CAFM,EAGTF,KAAK,EAHI,CApBN;AA0BLmB,IAAAA,QAAQ,EAAEZ,QAAQ,CAACE,IAAT,CACRX,MAAM,CAAC,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAaA,GAAG,IAAIA,GAAG,CAACO,IAAJ,KAAa,OAAlC,CADE,EAERV,KAAK,EAFG,CA1BL;AA8BLoB,IAAAA,IAAI,EAAEb,QAAQ,CAACE,IAAT,CACJX,MAAM,CAAC,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAaA,GAAG,IAAIA,GAAG,CAACO,IAAJ,KAAa,GAAlC,CADF,EAEJV,KAAK,EAFD,CA9BD;AAkCLqB,IAAAA,IAAI,EAAEd,QAAQ,CAACE,IAAT,CACJX,MAAM,CAAC,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAaA,GAAG,IAAIA,GAAG,CAACO,IAAJ,KAAa,GAAlC,CADF,EAEJV,KAAK,EAFD;AAlCD,GAAP;AAuCD,CA5CD","sourcesContent":["'use strict';\nvar { fromEvent } = require('rxjs');\nvar { filter, map, share } = require('rxjs/operators');\n\nfunction normalizeKeypressEvents(value, key) {\n  return { value: value, key: key || {} };\n}\n\nmodule.exports = function(rl) {\n  var keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)\n    // Ignore `enter` key. On the readline, we only care about the `line` event.\n    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));\n\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress: keypress,\n\n    normalizedUpKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)\n      ),\n      share()\n    ),\n\n    normalizedDownKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)\n      ),\n      share()\n    ),\n\n    numberKey: keypress.pipe(\n      filter(e => e.value && '123456789'.indexOf(e.value) >= 0),\n      map(e => Number(e.value)),\n      share()\n    ),\n\n    spaceKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'space'),\n      share()\n    ),\n    aKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'a'),\n      share()\n    ),\n    iKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'i'),\n      share()\n    )\n  };\n};\n"]},"metadata":{},"sourceType":"script"}