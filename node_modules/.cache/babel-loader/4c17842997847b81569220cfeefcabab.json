{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareFieldOverride = exports.compareApiField = exports.compareApiIndex = exports.compareSpecIndex = void 0;\n\nconst API = require(\"./indexes-api\");\n\nconst util = require(\"./util\");\n\nconst QUERY_SCOPE_SEQUENCE = [API.QueryScope.COLLECTION_GROUP, API.QueryScope.COLLECTION, undefined];\nconst ORDER_SEQUENCE = [API.Order.ASCENDING, API.Order.DESCENDING, undefined];\nconst ARRAY_CONFIG_SEQUENCE = [API.ArrayConfig.CONTAINS, undefined];\n\nfunction compareSpecIndex(a, b) {\n  if (a.collectionGroup !== b.collectionGroup) {\n    return a.collectionGroup.localeCompare(b.collectionGroup);\n  }\n\n  if (a.queryScope !== b.queryScope) {\n    return compareQueryScope(a.queryScope, b.queryScope);\n  }\n\n  return compareArrays(a.fields, b.fields, compareIndexField);\n}\n\nexports.compareSpecIndex = compareSpecIndex;\n\nfunction compareApiIndex(a, b) {\n  if (a.name && b.name) {\n    const aName = util.parseIndexName(a.name);\n    const bName = util.parseIndexName(b.name);\n\n    if (aName.collectionGroupId !== bName.collectionGroupId) {\n      return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n    }\n  }\n\n  if (a.queryScope !== b.queryScope) {\n    return compareQueryScope(a.queryScope, b.queryScope);\n  }\n\n  return compareArrays(a.fields, b.fields, compareIndexField);\n}\n\nexports.compareApiIndex = compareApiIndex;\n\nfunction compareApiField(a, b) {\n  const aName = util.parseFieldName(a.name);\n  const bName = util.parseFieldName(b.name);\n\n  if (aName.collectionGroupId !== bName.collectionGroupId) {\n    return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n  }\n\n  if (aName.fieldPath !== bName.fieldPath) {\n    return aName.fieldPath.localeCompare(bName.fieldPath);\n  }\n\n  return compareArraysSorted(a.indexConfig.indexes || [], b.indexConfig.indexes || [], compareApiIndex);\n}\n\nexports.compareApiField = compareApiField;\n\nfunction compareFieldOverride(a, b) {\n  if (a.collectionGroup !== b.collectionGroup) {\n    return a.collectionGroup.localeCompare(b.collectionGroup);\n  }\n\n  if (a.fieldPath !== b.fieldPath) {\n    return a.fieldPath.localeCompare(b.fieldPath);\n  }\n\n  return compareArraysSorted(a.indexes, b.indexes, compareFieldIndex);\n}\n\nexports.compareFieldOverride = compareFieldOverride;\n\nfunction compareIndexField(a, b) {\n  if (a.fieldPath !== b.fieldPath) {\n    return a.fieldPath.localeCompare(b.fieldPath);\n  }\n\n  if (a.order !== b.order) {\n    return compareOrder(a.order, b.order);\n  }\n\n  if (a.arrayConfig !== b.arrayConfig) {\n    return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n  }\n\n  return 0;\n}\n\nfunction compareFieldIndex(a, b) {\n  if (a.queryScope !== b.queryScope) {\n    return compareQueryScope(a.queryScope, b.queryScope);\n  }\n\n  if (a.order !== b.order) {\n    return compareOrder(a.order, b.order);\n  }\n\n  if (a.arrayConfig !== b.arrayConfig) {\n    return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n  }\n\n  return 0;\n}\n\nfunction compareQueryScope(a, b) {\n  return QUERY_SCOPE_SEQUENCE.indexOf(a) - QUERY_SCOPE_SEQUENCE.indexOf(b);\n}\n\nfunction compareOrder(a, b) {\n  return ORDER_SEQUENCE.indexOf(a) - ORDER_SEQUENCE.indexOf(b);\n}\n\nfunction compareArrayConfig(a, b) {\n  return ARRAY_CONFIG_SEQUENCE.indexOf(a) - ARRAY_CONFIG_SEQUENCE.indexOf(b);\n}\n\nfunction compareArrays(a, b, fn) {\n  const minFields = Math.min(a.length, b.length);\n\n  for (let i = 0; i < minFields; i++) {\n    const cmp = fn(a[i], b[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  return a.length - b.length;\n}\n\nfunction compareArraysSorted(a, b, fn) {\n  const aSorted = a.sort(fn);\n  const bSorted = b.sort(fn);\n  return compareArrays(aSorted, bSorted, fn);\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/firestore/indexes-sort.js"],"names":["Object","defineProperty","exports","value","compareFieldOverride","compareApiField","compareApiIndex","compareSpecIndex","API","require","util","QUERY_SCOPE_SEQUENCE","QueryScope","COLLECTION_GROUP","COLLECTION","undefined","ORDER_SEQUENCE","Order","ASCENDING","DESCENDING","ARRAY_CONFIG_SEQUENCE","ArrayConfig","CONTAINS","a","b","collectionGroup","localeCompare","queryScope","compareQueryScope","compareArrays","fields","compareIndexField","name","aName","parseIndexName","bName","collectionGroupId","parseFieldName","fieldPath","compareArraysSorted","indexConfig","indexes","compareFieldIndex","order","compareOrder","arrayConfig","compareArrayConfig","indexOf","fn","minFields","Math","min","length","i","cmp","aSorted","sort","bSorted"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareFieldOverride = exports.compareApiField = exports.compareApiIndex = exports.compareSpecIndex = void 0;\nconst API = require(\"./indexes-api\");\nconst util = require(\"./util\");\nconst QUERY_SCOPE_SEQUENCE = [\n    API.QueryScope.COLLECTION_GROUP,\n    API.QueryScope.COLLECTION,\n    undefined,\n];\nconst ORDER_SEQUENCE = [API.Order.ASCENDING, API.Order.DESCENDING, undefined];\nconst ARRAY_CONFIG_SEQUENCE = [API.ArrayConfig.CONTAINS, undefined];\nfunction compareSpecIndex(a, b) {\n    if (a.collectionGroup !== b.collectionGroup) {\n        return a.collectionGroup.localeCompare(b.collectionGroup);\n    }\n    if (a.queryScope !== b.queryScope) {\n        return compareQueryScope(a.queryScope, b.queryScope);\n    }\n    return compareArrays(a.fields, b.fields, compareIndexField);\n}\nexports.compareSpecIndex = compareSpecIndex;\nfunction compareApiIndex(a, b) {\n    if (a.name && b.name) {\n        const aName = util.parseIndexName(a.name);\n        const bName = util.parseIndexName(b.name);\n        if (aName.collectionGroupId !== bName.collectionGroupId) {\n            return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n        }\n    }\n    if (a.queryScope !== b.queryScope) {\n        return compareQueryScope(a.queryScope, b.queryScope);\n    }\n    return compareArrays(a.fields, b.fields, compareIndexField);\n}\nexports.compareApiIndex = compareApiIndex;\nfunction compareApiField(a, b) {\n    const aName = util.parseFieldName(a.name);\n    const bName = util.parseFieldName(b.name);\n    if (aName.collectionGroupId !== bName.collectionGroupId) {\n        return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n    }\n    if (aName.fieldPath !== bName.fieldPath) {\n        return aName.fieldPath.localeCompare(bName.fieldPath);\n    }\n    return compareArraysSorted(a.indexConfig.indexes || [], b.indexConfig.indexes || [], compareApiIndex);\n}\nexports.compareApiField = compareApiField;\nfunction compareFieldOverride(a, b) {\n    if (a.collectionGroup !== b.collectionGroup) {\n        return a.collectionGroup.localeCompare(b.collectionGroup);\n    }\n    if (a.fieldPath !== b.fieldPath) {\n        return a.fieldPath.localeCompare(b.fieldPath);\n    }\n    return compareArraysSorted(a.indexes, b.indexes, compareFieldIndex);\n}\nexports.compareFieldOverride = compareFieldOverride;\nfunction compareIndexField(a, b) {\n    if (a.fieldPath !== b.fieldPath) {\n        return a.fieldPath.localeCompare(b.fieldPath);\n    }\n    if (a.order !== b.order) {\n        return compareOrder(a.order, b.order);\n    }\n    if (a.arrayConfig !== b.arrayConfig) {\n        return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n    }\n    return 0;\n}\nfunction compareFieldIndex(a, b) {\n    if (a.queryScope !== b.queryScope) {\n        return compareQueryScope(a.queryScope, b.queryScope);\n    }\n    if (a.order !== b.order) {\n        return compareOrder(a.order, b.order);\n    }\n    if (a.arrayConfig !== b.arrayConfig) {\n        return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n    }\n    return 0;\n}\nfunction compareQueryScope(a, b) {\n    return QUERY_SCOPE_SEQUENCE.indexOf(a) - QUERY_SCOPE_SEQUENCE.indexOf(b);\n}\nfunction compareOrder(a, b) {\n    return ORDER_SEQUENCE.indexOf(a) - ORDER_SEQUENCE.indexOf(b);\n}\nfunction compareArrayConfig(a, b) {\n    return ARRAY_CONFIG_SEQUENCE.indexOf(a) - ARRAY_CONFIG_SEQUENCE.indexOf(b);\n}\nfunction compareArrays(a, b, fn) {\n    const minFields = Math.min(a.length, b.length);\n    for (let i = 0; i < minFields; i++) {\n        const cmp = fn(a[i], b[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    return a.length - b.length;\n}\nfunction compareArraysSorted(a, b, fn) {\n    const aSorted = a.sort(fn);\n    const bSorted = b.sort(fn);\n    return compareArrays(aSorted, bSorted, fn);\n}\n"]},"metadata":{},"sourceType":"script"}