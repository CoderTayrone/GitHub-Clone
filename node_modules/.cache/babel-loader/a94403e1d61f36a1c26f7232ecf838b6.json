{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst command_1 = require(\"../command\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst error_1 = require(\"../error\");\n\nconst database_1 = require(\"../management/database\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst api_1 = require(\"../database/api\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst url_1 = require(\"url\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst utils = require(\"../utils\");\n\nexports.default = new command_1.Command(\"database:set <path> [infile]\").description(\"store JSON data at the specified path via STDIN, arg, or file\").option(\"-d, --data <data>\", \"specify escaped JSON directly\").option(\"-y, --confirm\", \"pass this option to bypass confirmation prompt\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(database_1.populateInstanceDetails).before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE).action(async (path, infile, options) => {\n  if (!_.startsWith(path, \"/\")) {\n    throw new error_1.FirebaseError(\"Path must begin with /\");\n  }\n\n  const origin = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n  const dbPath = utils.getDatabaseUrl(origin, options.instance, path);\n  const dbJsonURL = new url_1.URL(utils.getDatabaseUrl(origin, options.instance, path + \".json\"));\n  const confirm = await prompt_1.promptOnce({\n    type: \"confirm\",\n    name: \"confirm\",\n    default: false,\n    message: \"You are about to overwrite all data at \" + clc.cyan(dbPath) + \". Are you sure?\"\n  }, options);\n\n  if (!confirm) {\n    throw new error_1.FirebaseError(\"Command aborted.\");\n  }\n\n  const inStream = utils.stringToStream(options.data) || (infile ? fs.createReadStream(infile) : process.stdin);\n\n  if (!infile && !options.data) {\n    utils.explainStdin();\n  }\n\n  const c = new apiv2_1.Client({\n    urlPrefix: dbJsonURL.origin,\n    auth: true\n  });\n\n  try {\n    await c.request({\n      method: \"PUT\",\n      path: dbJsonURL.pathname,\n      body: inStream\n    });\n  } catch (err) {\n    logger_1.logger.debug(err);\n    throw new error_1.FirebaseError(`Unexpected error while setting data: ${err}`, {\n      exit: 2\n    });\n  }\n\n  utils.logSuccess(\"Data persisted successfully\");\n  logger_1.logger.info();\n  logger_1.logger.info(clc.bold(\"View data at:\"), utils.getDatabaseViewDataUrl(origin, options.project, options.instance, path));\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-set.js"],"names":["Object","defineProperty","exports","value","_","require","clc","fs","apiv2_1","command_1","types_1","error_1","database_1","commandUtils_1","prompt_1","api_1","requirePermissions_1","url_1","logger_1","requireDatabaseInstance_1","utils","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","populateInstanceDetails","printNoticeIfEmulated","Emulators","DATABASE","action","path","infile","options","startsWith","FirebaseError","origin","realtimeOriginOrEmulatorOrCustomUrl","instanceDetails","databaseUrl","dbPath","getDatabaseUrl","instance","dbJsonURL","URL","confirm","promptOnce","type","name","message","cyan","inStream","stringToStream","data","createReadStream","process","stdin","explainStdin","c","Client","urlPrefix","auth","request","method","pathname","body","err","logger","debug","exit","logSuccess","info","bold","getDatabaseViewDataUrl","project"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst apiv2_1 = require(\"../apiv2\");\nconst command_1 = require(\"../command\");\nconst types_1 = require(\"../emulator/types\");\nconst error_1 = require(\"../error\");\nconst database_1 = require(\"../management/database\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst prompt_1 = require(\"../prompt\");\nconst api_1 = require(\"../database/api\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst url_1 = require(\"url\");\nconst logger_1 = require(\"../logger\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst utils = require(\"../utils\");\nexports.default = new command_1.Command(\"database:set <path> [infile]\")\n    .description(\"store JSON data at the specified path via STDIN, arg, or file\")\n    .option(\"-d, --data <data>\", \"specify escaped JSON directly\")\n    .option(\"-y, --confirm\", \"pass this option to bypass confirmation prompt\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(database_1.populateInstanceDetails)\n    .before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE)\n    .action(async (path, infile, options) => {\n    if (!_.startsWith(path, \"/\")) {\n        throw new error_1.FirebaseError(\"Path must begin with /\");\n    }\n    const origin = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n    const dbPath = utils.getDatabaseUrl(origin, options.instance, path);\n    const dbJsonURL = new url_1.URL(utils.getDatabaseUrl(origin, options.instance, path + \".json\"));\n    const confirm = await prompt_1.promptOnce({\n        type: \"confirm\",\n        name: \"confirm\",\n        default: false,\n        message: \"You are about to overwrite all data at \" + clc.cyan(dbPath) + \". Are you sure?\",\n    }, options);\n    if (!confirm) {\n        throw new error_1.FirebaseError(\"Command aborted.\");\n    }\n    const inStream = utils.stringToStream(options.data) || (infile ? fs.createReadStream(infile) : process.stdin);\n    if (!infile && !options.data) {\n        utils.explainStdin();\n    }\n    const c = new apiv2_1.Client({ urlPrefix: dbJsonURL.origin, auth: true });\n    try {\n        await c.request({\n            method: \"PUT\",\n            path: dbJsonURL.pathname,\n            body: inStream,\n        });\n    }\n    catch (err) {\n        logger_1.logger.debug(err);\n        throw new error_1.FirebaseError(`Unexpected error while setting data: ${err}`, { exit: 2 });\n    }\n    utils.logSuccess(\"Data persisted successfully\");\n    logger_1.logger.info();\n    logger_1.logger.info(clc.bold(\"View data at:\"), utils.getDatabaseViewDataUrl(origin, options.project, options.instance, path));\n});\n"]},"metadata":{},"sourceType":"script"}