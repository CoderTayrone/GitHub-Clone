{"ast":null,"code":"import { extendError } from \"./extend-error\";\nimport { normalizeArgs, normalizeOptions } from \"./normalize\";\nimport { toJSON as errorToJSON } from \"./to-json\";\nconst constructor = Ono;\nexport { constructor as Ono };\n/**\n * Creates an `Ono` instance for a specifc error type.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction Ono(ErrorConstructor, options) {\n  options = normalizeOptions(options);\n\n  function ono(...args) {\n    let {\n      originalError,\n      props,\n      message\n    } = normalizeArgs(args, options); // Create a new error of the specified type\n\n    let newError = new ErrorConstructor(message); // Extend the error with the properties of the original error and the `props` object\n\n    return extendError(newError, originalError, props);\n  }\n\n  ono[Symbol.species] = ErrorConstructor;\n  return ono;\n}\n/**\n * Returns an object containing all properties of the given Error object,\n * which can be used with `JSON.stringify()`.\n */\n\n\nOno.toJSON = function toJSON(error) {\n  return errorToJSON.call(error);\n};\n/**\n * Extends the given Error object with enhanced Ono functionality, such as nested stack traces,\n * additional properties, and improved support for `JSON.stringify()`.\n */\n\n\nOno.extend = function extend(error, originalError, props) {\n  if (props || originalError instanceof Error) {\n    return extendError(error, originalError, props);\n  } else if (originalError) {\n    return extendError(error, undefined, originalError);\n  } else {\n    return extendError(error);\n  }\n};","map":{"version":3,"sources":["../src/constructor.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,aAAT,EAAwB,gBAAxB,QAAgD,aAAhD;AACA,SAAS,MAAM,IAAI,WAAnB,QAAsC,WAAtC;AAGA,MAAM,WAAW,GAAG,GAApB;AACA,SAAS,WAAW,IAAI,GAAxB;AAEA;;AAEG;AACH;;AACA,SAAS,GAAT,CAAkC,gBAAlC,EAA6E,OAA7E,EAAiG;AAC/F,EAAA,OAAO,GAAG,gBAAgB,CAAC,OAAD,CAA1B;;AAEA,WAAS,GAAT,CAAoD,GAAG,IAAvD,EAAsE;AACpE,QAAI;AAAE,MAAA,aAAF;AAAiB,MAAA,KAAjB;AAAwB,MAAA;AAAxB,QAAoC,aAAa,CAAO,IAAP,EAAa,OAAb,CAArD,CADoE,CAGpE;;AACA,QAAI,QAAQ,GAAG,IAAK,gBAAL,CAAuD,OAAvD,CAAf,CAJoE,CAMpE;;AACA,WAAO,WAAW,CAAC,QAAD,EAAW,aAAX,EAA0B,KAA1B,CAAlB;AACD;;AAED,EAAA,GAAG,CAAC,MAAM,CAAC,OAAR,CAAH,GAAsB,gBAAtB;AACA,SAAO,GAAP;AACD;AAED;;;AAGG;;;AACH,GAAG,CAAC,MAAJ,GAAa,SAAS,MAAT,CAAgB,KAAhB,EAAgC;AAC3C,SAAO,WAAW,CAAC,IAAZ,CAAiB,KAAjB,CAAP;AACD,CAFD;AAIA;;;AAGG;;;AACH,GAAG,CAAC,MAAJ,GAAa,SAAS,MAAT,CAAgB,KAAhB,EAAkC,aAAlC,EAA6D,KAA7D,EAA2E;AACtF,MAAI,KAAK,IAAI,aAAa,YAAY,KAAtC,EAA6C;AAC3C,WAAO,WAAW,CAAC,KAAD,EAAQ,aAAR,EAAuB,KAAvB,CAAlB;AACD,GAFD,MAGK,IAAI,aAAJ,EAAmB;AACtB,WAAO,WAAW,CAAC,KAAD,EAAQ,SAAR,EAAmB,aAAnB,CAAlB;AACD,GAFI,MAGA;AACH,WAAO,WAAW,CAAC,KAAD,CAAlB;AACD;AACF,CAVD","sourceRoot":"","sourcesContent":["import { extendError } from \"./extend-error\";\nimport { normalizeArgs, normalizeOptions } from \"./normalize\";\nimport { toJSON as errorToJSON } from \"./to-json\";\nconst constructor = Ono;\nexport { constructor as Ono };\n/**\n * Creates an `Ono` instance for a specifc error type.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction Ono(ErrorConstructor, options) {\n    options = normalizeOptions(options);\n    function ono(...args) {\n        let { originalError, props, message } = normalizeArgs(args, options);\n        // Create a new error of the specified type\n        let newError = new ErrorConstructor(message);\n        // Extend the error with the properties of the original error and the `props` object\n        return extendError(newError, originalError, props);\n    }\n    ono[Symbol.species] = ErrorConstructor;\n    return ono;\n}\n/**\n * Returns an object containing all properties of the given Error object,\n * which can be used with `JSON.stringify()`.\n */\nOno.toJSON = function toJSON(error) {\n    return errorToJSON.call(error);\n};\n/**\n * Extends the given Error object with enhanced Ono functionality, such as nested stack traces,\n * additional properties, and improved support for `JSON.stringify()`.\n */\nOno.extend = function extend(error, originalError, props) {\n    if (props || originalError instanceof Error) {\n        return extendError(error, originalError, props);\n    }\n    else if (originalError) {\n        return extendError(error, undefined, originalError);\n    }\n    else {\n        return extendError(error);\n    }\n};\n//# sourceMappingURL=constructor.js.map"]},"metadata":{},"sourceType":"module"}