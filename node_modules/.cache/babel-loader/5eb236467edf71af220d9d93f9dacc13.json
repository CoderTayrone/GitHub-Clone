{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass ExegesisResponseImpl {\n  constructor(res\n  /* | http2.Http2ServerResponse */\n  , responseValidationEnabled) {\n    this._body = undefined;\n    this._afterController = false;\n    this.statusCode = 200;\n    this.statusMessage = undefined;\n    this.headers = Object.create(null);\n    this.ended = false;\n    this.headersSent = false;\n    this.connection = res.connection;\n    this._responseValidationEnabled = responseValidationEnabled;\n  }\n\n  setStatus(status) {\n    if (this.ended) {\n      throw new Error('Trying to set status after response has been ended.');\n    }\n\n    this.statusCode = status;\n    return this;\n  }\n\n  status(status) {\n    return this.setStatus(status);\n  }\n\n  header(header, value) {\n    this.setHeader(header, value);\n    return this;\n  }\n\n  set(header, value) {\n    this.setHeader(header, value);\n    return this;\n  }\n\n  json(json) {\n    this.set('content-type', 'application/json');\n\n    if (this._responseValidationEnabled) {\n      // Must stringify here, since the object or any of it's\n      // nested values could have a toJSON().  Note this means\n      // we'll have to parse it again when we do validation.\n      this.setBody(JSON.stringify(json));\n    } else {\n      this.setBody(json);\n    }\n\n    return this;\n  }\n\n  pureJson(json) {\n    this.set('content-type', 'application/json').setBody(json);\n    return this;\n  }\n\n  setBody(body) {\n    if (this.ended && !this._afterController) {\n      throw new Error('Trying to set body after response has been ended.');\n    }\n\n    this.body = body;\n    return this;\n  }\n\n  set body(body) {\n    this._body = body;\n    this.end();\n  }\n\n  get body() {\n    return this._body;\n  }\n\n  end() {\n    this.headersSent = true;\n    this.ended = true;\n  }\n\n  setHeader(name, value) {\n    if (this.ended && !this._afterController) {\n      throw new Error('Trying to set header after response has been ended.');\n    }\n\n    this.headers[name.toLowerCase()] = value;\n  }\n\n  getHeader(name) {\n    return this.headers[name];\n  }\n\n  getHeaderNames() {\n    return Object.keys(this.headers);\n  }\n\n  getHeaders() {\n    return Object.assign({}, this.headers);\n  }\n\n  hasHeader(name) {\n    return !!this.headers[name];\n  }\n\n  removeHeader(name) {\n    if (this.ended && !this._afterController) {\n      throw new Error('Trying to remove header after response has been ended.');\n    }\n\n    delete this.headers[name];\n  }\n\n  writeHead(statusCode, statusMessage, headers) {\n    if (statusMessage && typeof statusMessage !== 'string') {\n      headers = statusMessage;\n      statusMessage = undefined;\n    }\n\n    this.statusCode = statusCode;\n\n    if (headers) {\n      for (const headerName of Object.keys(headers)) {\n        this.setHeader(headerName, headers[headerName]);\n      }\n    }\n\n    this.headersSent = true;\n  }\n\n}\n\nexports.default = ExegesisResponseImpl;","map":{"version":3,"sources":["../../src/core/ExegesisResponseImpl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ExegesisResponseImpl {\n    constructor(res /* | http2.Http2ServerResponse */, responseValidationEnabled) {\n        this._body = undefined;\n        this._afterController = false;\n        this.statusCode = 200;\n        this.statusMessage = undefined;\n        this.headers = Object.create(null);\n        this.ended = false;\n        this.headersSent = false;\n        this.connection = res.connection;\n        this._responseValidationEnabled = responseValidationEnabled;\n    }\n    setStatus(status) {\n        if (this.ended) {\n            throw new Error('Trying to set status after response has been ended.');\n        }\n        this.statusCode = status;\n        return this;\n    }\n    status(status) {\n        return this.setStatus(status);\n    }\n    header(header, value) {\n        this.setHeader(header, value);\n        return this;\n    }\n    set(header, value) {\n        this.setHeader(header, value);\n        return this;\n    }\n    json(json) {\n        this.set('content-type', 'application/json');\n        if (this._responseValidationEnabled) {\n            // Must stringify here, since the object or any of it's\n            // nested values could have a toJSON().  Note this means\n            // we'll have to parse it again when we do validation.\n            this.setBody(JSON.stringify(json));\n        }\n        else {\n            this.setBody(json);\n        }\n        return this;\n    }\n    pureJson(json) {\n        this.set('content-type', 'application/json').setBody(json);\n        return this;\n    }\n    setBody(body) {\n        if (this.ended && !this._afterController) {\n            throw new Error('Trying to set body after response has been ended.');\n        }\n        this.body = body;\n        return this;\n    }\n    set body(body) {\n        this._body = body;\n        this.end();\n    }\n    get body() {\n        return this._body;\n    }\n    end() {\n        this.headersSent = true;\n        this.ended = true;\n    }\n    setHeader(name, value) {\n        if (this.ended && !this._afterController) {\n            throw new Error('Trying to set header after response has been ended.');\n        }\n        this.headers[name.toLowerCase()] = value;\n    }\n    getHeader(name) {\n        return this.headers[name];\n    }\n    getHeaderNames() {\n        return Object.keys(this.headers);\n    }\n    getHeaders() {\n        return Object.assign({}, this.headers);\n    }\n    hasHeader(name) {\n        return !!this.headers[name];\n    }\n    removeHeader(name) {\n        if (this.ended && !this._afterController) {\n            throw new Error('Trying to remove header after response has been ended.');\n        }\n        delete this.headers[name];\n    }\n    writeHead(statusCode, statusMessage, headers) {\n        if (statusMessage && typeof statusMessage !== 'string') {\n            headers = statusMessage;\n            statusMessage = undefined;\n        }\n        this.statusCode = statusCode;\n        if (headers) {\n            for (const headerName of Object.keys(headers)) {\n                this.setHeader(headerName, headers[headerName]);\n            }\n        }\n        this.headersSent = true;\n    }\n}\nexports.default = ExegesisResponseImpl;\n//# sourceMappingURL=ExegesisResponseImpl.js.map"]},"metadata":{},"sourceType":"script"}