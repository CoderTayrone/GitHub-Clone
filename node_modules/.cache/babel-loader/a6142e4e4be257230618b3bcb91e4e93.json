{"ast":null,"code":"/*!\n * router\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('router:route');\n\nvar flatten = require('array-flatten').flatten;\n\nvar Layer = require('./layer');\n\nvar methods = require('methods');\n/**\n * Module variables.\n * @private\n */\n\n\nvar slice = Array.prototype.slice;\n/**\n * Expose `Route`.\n */\n\nmodule.exports = Route;\n/**\n * Initialize `Route` with the given `path`,\n *\n * @param {String} path\n * @api private\n */\n\nfunction Route(path) {\n  debug('new %o', path);\n  this.path = path;\n  this.stack = []; // route handlers for various http methods\n\n  this.methods = Object.create(null);\n}\n/**\n * @private\n */\n\n\nRoute.prototype._handles_method = function _handles_method(method) {\n  if (this.methods._all) {\n    return true;\n  } // normalize name\n\n\n  var name = method.toLowerCase();\n\n  if (name === 'head' && !this.methods['head']) {\n    name = 'get';\n  }\n\n  return Boolean(this.methods[name]);\n};\n/**\n * @return {array} supported HTTP methods\n * @private\n */\n\n\nRoute.prototype._methods = function _methods() {\n  var methods = Object.keys(this.methods); // append automatic head\n\n  if (this.methods.get && !this.methods.head) {\n    methods.push('head');\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    // make upper case\n    methods[i] = methods[i].toUpperCase();\n  }\n\n  return methods;\n};\n/**\n * dispatch req, res into this route\n *\n * @private\n */\n\n\nRoute.prototype.dispatch = function dispatch(req, res, done) {\n  var idx = 0;\n  var stack = this.stack;\n\n  if (stack.length === 0) {\n    return done();\n  }\n\n  var method = req.method.toLowerCase();\n\n  if (method === 'head' && !this.methods['head']) {\n    method = 'get';\n  }\n\n  req.route = this;\n  next();\n\n  function next(err) {\n    // signal to exit route\n    if (err && err === 'route') {\n      return done();\n    } // signal to exit router\n\n\n    if (err && err === 'router') {\n      return done(err);\n    } // no more matching layers\n\n\n    if (idx >= stack.length) {\n      return done(err);\n    }\n\n    var layer;\n    var match; // find next matching layer\n\n    while (match !== true && idx < stack.length) {\n      layer = stack[idx++];\n      match = !layer.method || layer.method === method;\n    } // no match\n\n\n    if (match !== true) {\n      return done(err);\n    }\n\n    if (err) {\n      layer.handle_error(err, req, res, next);\n    } else {\n      layer.handle_request(req, res, next);\n    }\n  }\n};\n/**\n * Add a handler for all HTTP verbs to this route.\n *\n * Behaves just like middleware and can respond or call `next`\n * to continue processing.\n *\n * You can use multiple `.all` call to add multiple handlers.\n *\n *   function check_something(req, res, next){\n *     next()\n *   }\n *\n *   function validate_user(req, res, next){\n *     next()\n *   }\n *\n *   route\n *   .all(validate_user)\n *   .all(check_something)\n *   .get(function(req, res, next){\n *     res.send('hello world')\n *   })\n *\n * @param {array|function} handler\n * @return {Route} for chaining\n * @api public\n */\n\n\nRoute.prototype.all = function all(handler) {\n  var callbacks = flatten(slice.call(arguments));\n\n  if (callbacks.length === 0) {\n    throw new TypeError('argument handler is required');\n  }\n\n  for (var i = 0; i < callbacks.length; i++) {\n    var fn = callbacks[i];\n\n    if (typeof fn !== 'function') {\n      throw new TypeError('argument handler must be a function');\n    }\n\n    var layer = Layer('/', {}, fn);\n    layer.method = undefined;\n    this.methods._all = true;\n    this.stack.push(layer);\n  }\n\n  return this;\n};\n\nmethods.forEach(function (method) {\n  Route.prototype[method] = function (handler) {\n    var callbacks = flatten(slice.call(arguments));\n\n    if (callbacks.length === 0) {\n      throw new TypeError('argument handler is required');\n    }\n\n    for (var i = 0; i < callbacks.length; i++) {\n      var fn = callbacks[i];\n\n      if (typeof fn !== 'function') {\n        throw new TypeError('argument handler must be a function');\n      }\n\n      debug('%s %s', method, this.path);\n      var layer = Layer('/', {}, fn);\n      layer.method = method;\n      this.methods[method] = true;\n      this.stack.push(layer);\n    }\n\n    return this;\n  };\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/router/lib/route.js"],"names":["debug","require","flatten","Layer","methods","slice","Array","prototype","module","exports","Route","path","stack","Object","create","_handles_method","method","_all","name","toLowerCase","Boolean","_methods","keys","get","head","push","i","length","toUpperCase","dispatch","req","res","done","idx","route","next","err","layer","match","handle_error","handle_request","all","handler","callbacks","call","arguments","TypeError","fn","undefined","forEach"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,cAAjB,CAAZ;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,OAAvC;;AACA,IAAIC,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAArB;AAEA;AACA;AACA;AACA;;;AAEA,IAAII,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBF,KAA5B;AAEA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBX,EAAAA,KAAK,CAAC,QAAD,EAAWW,IAAX,CAAL;AACA,OAAKA,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAa,EAAb,CAHmB,CAKnB;;AACA,OAAKR,OAAL,GAAeS,MAAM,CAACC,MAAP,CAAc,IAAd,CAAf;AACD;AAED;AACA;AACA;;;AAEAJ,KAAK,CAACH,SAAN,CAAgBQ,eAAhB,GAAkC,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;AACjE,MAAI,KAAKZ,OAAL,CAAaa,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD,GAHgE,CAKjE;;;AACA,MAAIC,IAAI,GAAGF,MAAM,CAACG,WAAP,EAAX;;AAEA,MAAID,IAAI,KAAK,MAAT,IAAmB,CAAC,KAAKd,OAAL,CAAa,MAAb,CAAxB,EAA8C;AAC5Cc,IAAAA,IAAI,GAAG,KAAP;AACD;;AAED,SAAOE,OAAO,CAAC,KAAKhB,OAAL,CAAac,IAAb,CAAD,CAAd;AACD,CAbD;AAeA;AACA;AACA;AACA;;;AAEAR,KAAK,CAACH,SAAN,CAAgBc,QAAhB,GAA2B,SAASA,QAAT,GAAoB;AAC7C,MAAIjB,OAAO,GAAGS,MAAM,CAACS,IAAP,CAAY,KAAKlB,OAAjB,CAAd,CAD6C,CAG7C;;AACA,MAAI,KAAKA,OAAL,CAAamB,GAAb,IAAoB,CAAC,KAAKnB,OAAL,CAAaoB,IAAtC,EAA4C;AAC1CpB,IAAAA,OAAO,CAACqB,IAAR,CAAa,MAAb;AACD;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,OAAO,CAACuB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC;AACAtB,IAAAA,OAAO,CAACsB,CAAD,CAAP,GAAatB,OAAO,CAACsB,CAAD,CAAP,CAAWE,WAAX,EAAb;AACD;;AAED,SAAOxB,OAAP;AACD,CAdD;AAgBA;AACA;AACA;AACA;AACA;;;AAEAM,KAAK,CAACH,SAAN,CAAgBsB,QAAhB,GAA2B,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC3D,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIrB,KAAK,GAAG,KAAKA,KAAjB;;AACA,MAAIA,KAAK,CAACe,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAOK,IAAI,EAAX;AACD;;AAED,MAAIhB,MAAM,GAAGc,GAAG,CAACd,MAAJ,CAAWG,WAAX,EAAb;;AACA,MAAIH,MAAM,KAAK,MAAX,IAAqB,CAAC,KAAKZ,OAAL,CAAa,MAAb,CAA1B,EAAgD;AAC9CY,IAAAA,MAAM,GAAG,KAAT;AACD;;AAEDc,EAAAA,GAAG,CAACI,KAAJ,GAAY,IAAZ;AAEAC,EAAAA,IAAI;;AAEJ,WAASA,IAAT,CAAcC,GAAd,EAAmB;AACjB;AACA,QAAIA,GAAG,IAAIA,GAAG,KAAK,OAAnB,EAA4B;AAC1B,aAAOJ,IAAI,EAAX;AACD,KAJgB,CAMjB;;;AACA,QAAII,GAAG,IAAIA,GAAG,KAAK,QAAnB,EAA6B;AAC3B,aAAOJ,IAAI,CAACI,GAAD,CAAX;AACD,KATgB,CAWjB;;;AACA,QAAIH,GAAG,IAAIrB,KAAK,CAACe,MAAjB,EAAyB;AACvB,aAAOK,IAAI,CAACI,GAAD,CAAX;AACD;;AAED,QAAIC,KAAJ;AACA,QAAIC,KAAJ,CAjBiB,CAmBjB;;AACA,WAAOA,KAAK,KAAK,IAAV,IAAkBL,GAAG,GAAGrB,KAAK,CAACe,MAArC,EAA6C;AAC3CU,MAAAA,KAAK,GAAGzB,KAAK,CAACqB,GAAG,EAAJ,CAAb;AACAK,MAAAA,KAAK,GAAG,CAACD,KAAK,CAACrB,MAAP,IAAiBqB,KAAK,CAACrB,MAAN,KAAiBA,MAA1C;AACD,KAvBgB,CAyBjB;;;AACA,QAAIsB,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAON,IAAI,CAACI,GAAD,CAAX;AACD;;AAED,QAAIA,GAAJ,EAAS;AACPC,MAAAA,KAAK,CAACE,YAAN,CAAmBH,GAAnB,EAAwBN,GAAxB,EAA6BC,GAA7B,EAAkCI,IAAlC;AACD,KAFD,MAEO;AACLE,MAAAA,KAAK,CAACG,cAAN,CAAqBV,GAArB,EAA0BC,GAA1B,EAA+BI,IAA/B;AACD;AACF;AACF,CApDD;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzB,KAAK,CAACH,SAAN,CAAgBkC,GAAhB,GAAsB,SAASA,GAAT,CAAaC,OAAb,EAAsB;AAC1C,MAAIC,SAAS,GAAGzC,OAAO,CAACG,KAAK,CAACuC,IAAN,CAAWC,SAAX,CAAD,CAAvB;;AAEA,MAAIF,SAAS,CAAChB,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAImB,SAAJ,CAAc,8BAAd,CAAN;AACD;;AAED,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,SAAS,CAAChB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIqB,EAAE,GAAGJ,SAAS,CAACjB,CAAD,CAAlB;;AAEA,QAAI,OAAOqB,EAAP,KAAc,UAAlB,EAA8B;AAC5B,YAAM,IAAID,SAAJ,CAAc,qCAAd,CAAN;AACD;;AAED,QAAIT,KAAK,GAAGlC,KAAK,CAAC,GAAD,EAAM,EAAN,EAAU4C,EAAV,CAAjB;AACAV,IAAAA,KAAK,CAACrB,MAAN,GAAegC,SAAf;AAEA,SAAK5C,OAAL,CAAaa,IAAb,GAAoB,IAApB;AACA,SAAKL,KAAL,CAAWa,IAAX,CAAgBY,KAAhB;AACD;;AAED,SAAO,IAAP;AACD,CAtBD;;AAwBAjC,OAAO,CAAC6C,OAAR,CAAgB,UAAUjC,MAAV,EAAkB;AAChCN,EAAAA,KAAK,CAACH,SAAN,CAAgBS,MAAhB,IAA0B,UAAU0B,OAAV,EAAmB;AAC3C,QAAIC,SAAS,GAAGzC,OAAO,CAACG,KAAK,CAACuC,IAAN,CAAWC,SAAX,CAAD,CAAvB;;AAEA,QAAIF,SAAS,CAAChB,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,YAAM,IAAImB,SAAJ,CAAc,8BAAd,CAAN;AACD;;AAED,SAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,SAAS,CAAChB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIqB,EAAE,GAAGJ,SAAS,CAACjB,CAAD,CAAlB;;AAEA,UAAI,OAAOqB,EAAP,KAAc,UAAlB,EAA8B;AAC5B,cAAM,IAAID,SAAJ,CAAc,qCAAd,CAAN;AACD;;AAED9C,MAAAA,KAAK,CAAC,OAAD,EAAUgB,MAAV,EAAkB,KAAKL,IAAvB,CAAL;AAEA,UAAI0B,KAAK,GAAGlC,KAAK,CAAC,GAAD,EAAM,EAAN,EAAU4C,EAAV,CAAjB;AACAV,MAAAA,KAAK,CAACrB,MAAN,GAAeA,MAAf;AAEA,WAAKZ,OAAL,CAAaY,MAAb,IAAuB,IAAvB;AACA,WAAKJ,KAAL,CAAWa,IAAX,CAAgBY,KAAhB;AACD;;AAED,WAAO,IAAP;AACD,GAxBD;AAyBD,CA1BD","sourcesContent":["/*!\n * router\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('router:route')\nvar flatten = require('array-flatten').flatten\nvar Layer = require('./layer')\nvar methods = require('methods')\n\n/**\n * Module variables.\n * @private\n */\n\nvar slice = Array.prototype.slice\n\n/**\n * Expose `Route`.\n */\n\nmodule.exports = Route\n\n/**\n * Initialize `Route` with the given `path`,\n *\n * @param {String} path\n * @api private\n */\n\nfunction Route(path) {\n  debug('new %o', path)\n  this.path = path\n  this.stack = []\n\n  // route handlers for various http methods\n  this.methods = Object.create(null)\n}\n\n/**\n * @private\n */\n\nRoute.prototype._handles_method = function _handles_method(method) {\n  if (this.methods._all) {\n    return true\n  }\n\n  // normalize name\n  var name = method.toLowerCase()\n\n  if (name === 'head' && !this.methods['head']) {\n    name = 'get'\n  }\n\n  return Boolean(this.methods[name])\n}\n\n/**\n * @return {array} supported HTTP methods\n * @private\n */\n\nRoute.prototype._methods = function _methods() {\n  var methods = Object.keys(this.methods)\n\n  // append automatic head\n  if (this.methods.get && !this.methods.head) {\n    methods.push('head')\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    // make upper case\n    methods[i] = methods[i].toUpperCase()\n  }\n\n  return methods\n}\n\n/**\n * dispatch req, res into this route\n *\n * @private\n */\n\nRoute.prototype.dispatch = function dispatch(req, res, done) {\n  var idx = 0\n  var stack = this.stack\n  if (stack.length === 0) {\n    return done()\n  }\n\n  var method = req.method.toLowerCase()\n  if (method === 'head' && !this.methods['head']) {\n    method = 'get'\n  }\n\n  req.route = this\n\n  next()\n\n  function next(err) {\n    // signal to exit route\n    if (err && err === 'route') {\n      return done()\n    }\n\n    // signal to exit router\n    if (err && err === 'router') {\n      return done(err)\n    }\n\n    // no more matching layers\n    if (idx >= stack.length) {\n      return done(err)\n    }\n\n    var layer\n    var match\n\n    // find next matching layer\n    while (match !== true && idx < stack.length) {\n      layer = stack[idx++]\n      match = !layer.method || layer.method === method\n    }\n\n    // no match\n    if (match !== true) {\n      return done(err)\n    }\n\n    if (err) {\n      layer.handle_error(err, req, res, next)\n    } else {\n      layer.handle_request(req, res, next)\n    }\n  }\n}\n\n/**\n * Add a handler for all HTTP verbs to this route.\n *\n * Behaves just like middleware and can respond or call `next`\n * to continue processing.\n *\n * You can use multiple `.all` call to add multiple handlers.\n *\n *   function check_something(req, res, next){\n *     next()\n *   }\n *\n *   function validate_user(req, res, next){\n *     next()\n *   }\n *\n *   route\n *   .all(validate_user)\n *   .all(check_something)\n *   .get(function(req, res, next){\n *     res.send('hello world')\n *   })\n *\n * @param {array|function} handler\n * @return {Route} for chaining\n * @api public\n */\n\nRoute.prototype.all = function all(handler) {\n  var callbacks = flatten(slice.call(arguments))\n\n  if (callbacks.length === 0) {\n    throw new TypeError('argument handler is required')\n  }\n\n  for (var i = 0; i < callbacks.length; i++) {\n    var fn = callbacks[i]\n\n    if (typeof fn !== 'function') {\n      throw new TypeError('argument handler must be a function')\n    }\n\n    var layer = Layer('/', {}, fn)\n    layer.method = undefined\n\n    this.methods._all = true\n    this.stack.push(layer)\n  }\n\n  return this\n}\n\nmethods.forEach(function (method) {\n  Route.prototype[method] = function (handler) {\n    var callbacks = flatten(slice.call(arguments))\n\n    if (callbacks.length === 0) {\n      throw new TypeError('argument handler is required')\n    }\n\n    for (var i = 0; i < callbacks.length; i++) {\n      var fn = callbacks[i]\n\n      if (typeof fn !== 'function') {\n        throw new TypeError('argument handler must be a function')\n      }\n\n      debug('%s %s', method, this.path)\n\n      var layer = Layer('/', {}, fn)\n      layer.method = method\n\n      this.methods[method] = true\n      this.stack.push(layer)\n    }\n\n    return this\n  }\n})\n"]},"metadata":{},"sourceType":"script"}