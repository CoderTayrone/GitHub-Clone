{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logger_1 = require(\"../logger\");\n\nconst rcVersion = require(\"../remoteconfig/versionslist\");\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst Table = require(\"cli-table\");\n\nconst tableHead = [\"Update User\", \"Version Number\", \"Update Time\"];\n\nfunction pushTableContents(table, version) {\n  var _a;\n\n  return table.push([(_a = version === null || version === void 0 ? void 0 : version.updateUser) === null || _a === void 0 ? void 0 : _a.email, version === null || version === void 0 ? void 0 : version.versionNumber, version === null || version === void 0 ? void 0 : version.updateTime]);\n}\n\nmodule.exports = new command_1.Command(\"remoteconfig:versions:list\").description(\"get a list of Remote Config template versions that have been published for a Firebase project\").option(\"--limit <maxResults>\", \"limit the number of versions being returned. Pass '0' to fetch all versions.\").before(requireAuth_1.requireAuth).before(requirePermissions_1.requirePermissions, [\"cloudconfig.configs.get\"]).action(async options => {\n  const versionsList = await rcVersion.getVersions(projectUtils_1.needProjectId(options), options.limit);\n  const table = new Table({\n    head: tableHead,\n    style: {\n      head: [\"green\"]\n    }\n  });\n\n  for (let item = 0; item < versionsList.versions.length; item++) {\n    pushTableContents(table, versionsList.versions[item]);\n  }\n\n  logger_1.logger.info(table.toString());\n  return versionsList;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/remoteconfig-versions-list.js"],"names":["Object","defineProperty","exports","value","logger_1","require","rcVersion","command_1","projectUtils_1","requireAuth_1","requirePermissions_1","Table","tableHead","pushTableContents","table","version","_a","push","updateUser","email","versionNumber","updateTime","module","Command","description","option","before","requireAuth","requirePermissions","action","options","versionsList","getVersions","needProjectId","limit","head","style","item","versions","length","logger","info","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,8BAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,WAAD,CAArB;;AACA,MAAMO,SAAS,GAAG,CAAC,aAAD,EAAgB,gBAAhB,EAAkC,aAAlC,CAAlB;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,OAAlC,EAA2C;AACvC,MAAIC,EAAJ;;AACA,SAAOF,KAAK,CAACG,IAAN,CAAW,CAAC,CAACD,EAAE,GAAGD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,UAAhE,MAAgF,IAAhF,IAAwFF,EAAE,KAAK,KAAK,CAApG,GAAwG,KAAK,CAA7G,GAAiHA,EAAE,CAACG,KAArH,EAA4HJ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACK,aAAtL,EAAqML,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACM,UAA/P,CAAX,CAAP;AACH;;AACDC,MAAM,CAACpB,OAAP,GAAiB,IAAIK,SAAS,CAACgB,OAAd,CAAsB,4BAAtB,EACZC,WADY,CACA,+FADA,EAEZC,MAFY,CAEL,sBAFK,EAEmB,8EAFnB,EAGZC,MAHY,CAGLjB,aAAa,CAACkB,WAHT,EAIZD,MAJY,CAILhB,oBAAoB,CAACkB,kBAJhB,EAIoC,CAAC,yBAAD,CAJpC,EAKZC,MALY,CAKL,MAAOC,OAAP,IAAmB;AAC3B,QAAMC,YAAY,GAAG,MAAMzB,SAAS,CAAC0B,WAAV,CAAsBxB,cAAc,CAACyB,aAAf,CAA6BH,OAA7B,CAAtB,EAA6DA,OAAO,CAACI,KAArE,CAA3B;AACA,QAAMpB,KAAK,GAAG,IAAIH,KAAJ,CAAU;AAAEwB,IAAAA,IAAI,EAAEvB,SAAR;AAAmBwB,IAAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAE,CAAC,OAAD;AAAR;AAA1B,GAAV,CAAd;;AACA,OAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGN,YAAY,CAACO,QAAb,CAAsBC,MAAhD,EAAwDF,IAAI,EAA5D,EAAgE;AAC5DxB,IAAAA,iBAAiB,CAACC,KAAD,EAAQiB,YAAY,CAACO,QAAb,CAAsBD,IAAtB,CAAR,CAAjB;AACH;;AACDjC,EAAAA,QAAQ,CAACoC,MAAT,CAAgBC,IAAhB,CAAqB3B,KAAK,CAAC4B,QAAN,EAArB;AACA,SAAOX,YAAP;AACH,CAbgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"../logger\");\nconst rcVersion = require(\"../remoteconfig/versionslist\");\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst Table = require(\"cli-table\");\nconst tableHead = [\"Update User\", \"Version Number\", \"Update Time\"];\nfunction pushTableContents(table, version) {\n    var _a;\n    return table.push([(_a = version === null || version === void 0 ? void 0 : version.updateUser) === null || _a === void 0 ? void 0 : _a.email, version === null || version === void 0 ? void 0 : version.versionNumber, version === null || version === void 0 ? void 0 : version.updateTime]);\n}\nmodule.exports = new command_1.Command(\"remoteconfig:versions:list\")\n    .description(\"get a list of Remote Config template versions that have been published for a Firebase project\")\n    .option(\"--limit <maxResults>\", \"limit the number of versions being returned. Pass '0' to fetch all versions.\")\n    .before(requireAuth_1.requireAuth)\n    .before(requirePermissions_1.requirePermissions, [\"cloudconfig.configs.get\"])\n    .action(async (options) => {\n    const versionsList = await rcVersion.getVersions(projectUtils_1.needProjectId(options), options.limit);\n    const table = new Table({ head: tableHead, style: { head: [\"green\"] } });\n    for (let item = 0; item < versionsList.versions.length; item++) {\n        pushTableContents(table, versionsList.versions[item]);\n    }\n    logger_1.logger.info(table.toString());\n    return versionsList;\n});\n"]},"metadata":{},"sourceType":"script"}