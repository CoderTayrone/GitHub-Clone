{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst api_1 = require(\"../hosting/api\");\n\nconst command_1 = require(\"../command\");\n\nconst expireUtils_1 = require(\"../hosting/expireUtils\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireConfig = require(\"../requireConfig\");\n\nconst marked = require(\"marked\");\n\nconst requireHostingSite_1 = require(\"../requireHostingSite\");\n\nconst LOG_TAG = \"hosting:channel\";\nexports.default = new command_1.Command(\"hosting:channel:create [channelId]\").description(\"create a Firebase Hosting channel\").option(\"-e, --expires <duration>\", \"duration string (e.g. 12h or 30d) for channel expiration, max 30d\").option(\"--site <siteId>\", \"site for which to create the channel\").before(requireConfig).before(requirePermissions_1.requirePermissions, [\"firebasehosting.sites.update\"]).before(requireHostingSite_1.requireHostingSite).action(async (channelId, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const site = options.site;\n  let expireTTL = expireUtils_1.DEFAULT_DURATION;\n\n  if (options.expires) {\n    expireTTL = expireUtils_1.calculateChannelExpireTTL(options.expires);\n  }\n\n  if (channelId) {\n    options.channelId = channelId;\n  }\n\n  channelId = channelId || (await prompt_1.promptOnce({\n    type: \"input\",\n    message: \"Please provide a URL-friendly name for the channel:\",\n    validate: s => s.length > 0\n  }));\n  channelId = api_1.normalizeName(channelId);\n  let channel;\n\n  try {\n    channel = await api_1.createChannel(projectId, site, channelId, expireTTL);\n  } catch (e) {\n    if (e.status === 409) {\n      throw new error_1.FirebaseError(`Channel ${cli_color_1.bold(channelId)} already exists on site ${cli_color_1.bold(site)}. Deploy to ${cli_color_1.bold(channelId)} with: ${cli_color_1.yellow(`firebase hosting:channel:deploy ${channelId}`)}`, {\n        original: e\n      });\n    }\n\n    throw e;\n  }\n\n  try {\n    await api_1.addAuthDomains(projectId, [channel.url]);\n  } catch (e) {\n    utils_1.logLabeledWarning(LOG_TAG, marked(`Unable to add channel domain to Firebase Auth. Visit the Firebase Console at ${utils_1.consoleUrl(projectId, \"/authentication/providers\")}`));\n    logger_1.logger.debug(\"[hosting] unable to add auth domain\", e);\n  }\n\n  logger_1.logger.info();\n  utils_1.logLabeledSuccess(LOG_TAG, `Channel ${cli_color_1.bold(channelId)} has been created on site ${cli_color_1.bold(site)}.`);\n  utils_1.logLabeledSuccess(LOG_TAG, `Channel ${cli_color_1.bold(channelId)} will expire at ${cli_color_1.bold(utils_1.datetimeString(new Date(channel.expireTime)))}.`);\n  utils_1.logLabeledSuccess(LOG_TAG, `Channel URL: ${channel.url}`);\n  logger_1.logger.info();\n  logger_1.logger.info(`To deploy to this channel, use ${cli_color_1.yellow(`firebase hosting:channel:deploy ${channelId}`)}.`);\n  return channel;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/hosting-channel-create.js"],"names":["Object","defineProperty","exports","value","cli_color_1","require","api_1","command_1","expireUtils_1","error_1","utils_1","prompt_1","requirePermissions_1","projectUtils_1","logger_1","requireConfig","marked","requireHostingSite_1","LOG_TAG","default","Command","description","option","before","requirePermissions","requireHostingSite","action","channelId","options","projectId","needProjectId","site","expireTTL","DEFAULT_DURATION","expires","calculateChannelExpireTTL","promptOnce","type","message","validate","s","length","normalizeName","channel","createChannel","e","status","FirebaseError","bold","yellow","original","addAuthDomains","url","logLabeledWarning","consoleUrl","logger","debug","info","logLabeledSuccess","datetimeString","Date","expireTime"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cli_color_1 = require(\"cli-color\");\nconst api_1 = require(\"../hosting/api\");\nconst command_1 = require(\"../command\");\nconst expireUtils_1 = require(\"../hosting/expireUtils\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst prompt_1 = require(\"../prompt\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst logger_1 = require(\"../logger\");\nconst requireConfig = require(\"../requireConfig\");\nconst marked = require(\"marked\");\nconst requireHostingSite_1 = require(\"../requireHostingSite\");\nconst LOG_TAG = \"hosting:channel\";\nexports.default = new command_1.Command(\"hosting:channel:create [channelId]\")\n    .description(\"create a Firebase Hosting channel\")\n    .option(\"-e, --expires <duration>\", \"duration string (e.g. 12h or 30d) for channel expiration, max 30d\")\n    .option(\"--site <siteId>\", \"site for which to create the channel\")\n    .before(requireConfig)\n    .before(requirePermissions_1.requirePermissions, [\"firebasehosting.sites.update\"])\n    .before(requireHostingSite_1.requireHostingSite)\n    .action(async (channelId, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const site = options.site;\n    let expireTTL = expireUtils_1.DEFAULT_DURATION;\n    if (options.expires) {\n        expireTTL = expireUtils_1.calculateChannelExpireTTL(options.expires);\n    }\n    if (channelId) {\n        options.channelId = channelId;\n    }\n    channelId =\n        channelId ||\n            (await prompt_1.promptOnce({\n                type: \"input\",\n                message: \"Please provide a URL-friendly name for the channel:\",\n                validate: (s) => s.length > 0,\n            }));\n    channelId = api_1.normalizeName(channelId);\n    let channel;\n    try {\n        channel = await api_1.createChannel(projectId, site, channelId, expireTTL);\n    }\n    catch (e) {\n        if (e.status === 409) {\n            throw new error_1.FirebaseError(`Channel ${cli_color_1.bold(channelId)} already exists on site ${cli_color_1.bold(site)}. Deploy to ${cli_color_1.bold(channelId)} with: ${cli_color_1.yellow(`firebase hosting:channel:deploy ${channelId}`)}`, { original: e });\n        }\n        throw e;\n    }\n    try {\n        await api_1.addAuthDomains(projectId, [channel.url]);\n    }\n    catch (e) {\n        utils_1.logLabeledWarning(LOG_TAG, marked(`Unable to add channel domain to Firebase Auth. Visit the Firebase Console at ${utils_1.consoleUrl(projectId, \"/authentication/providers\")}`));\n        logger_1.logger.debug(\"[hosting] unable to add auth domain\", e);\n    }\n    logger_1.logger.info();\n    utils_1.logLabeledSuccess(LOG_TAG, `Channel ${cli_color_1.bold(channelId)} has been created on site ${cli_color_1.bold(site)}.`);\n    utils_1.logLabeledSuccess(LOG_TAG, `Channel ${cli_color_1.bold(channelId)} will expire at ${cli_color_1.bold(utils_1.datetimeString(new Date(channel.expireTime)))}.`);\n    utils_1.logLabeledSuccess(LOG_TAG, `Channel URL: ${channel.url}`);\n    logger_1.logger.info();\n    logger_1.logger.info(`To deploy to this channel, use ${cli_color_1.yellow(`firebase hosting:channel:deploy ${channelId}`)}.`);\n    return channel;\n});\n"]},"metadata":{},"sourceType":"script"}