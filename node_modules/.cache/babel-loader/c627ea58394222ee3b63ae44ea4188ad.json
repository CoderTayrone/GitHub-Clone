{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoggingEmulator = void 0;\n\nconst types_1 = require(\"./types\");\n\nconst constants_1 = require(\"./constants\");\n\nconst triple_beam_1 = require(\"triple-beam\");\n\nconst WebSocket = require(\"ws\");\n\nconst TransportStream = require(\"winston-transport\");\n\nconst logger_1 = require(\"../logger\");\n\nconst ansiStrip = require(\"cli-color/strip\");\n\nclass LoggingEmulator {\n  constructor(args) {\n    this.args = args;\n  }\n\n  start() {\n    this.transport = new WebSocketTransport();\n    this.transport.start(this.getInfo());\n    logger_1.logger.add(this.transport);\n    return Promise.resolve();\n  }\n\n  connect() {\n    return Promise.resolve();\n  }\n\n  async stop() {\n    if (this.transport) {\n      logger_1.logger.remove(this.transport);\n      return this.transport.stop();\n    }\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.LOGGING);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.LOGGING);\n    return {\n      name: this.getName(),\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.LOGGING;\n  }\n\n}\n\nexports.LoggingEmulator = LoggingEmulator;\nLoggingEmulator.LOGGING_EMULATOR_ENV = \"FIREBASE_LOGGING_EMULATOR_HOST\";\n\nclass WebSocketTransport extends TransportStream {\n  constructor(options = {}) {\n    super(options);\n    this.connections = new Set();\n    this.history = [];\n    this.setMaxListeners(30);\n  }\n\n  start(options) {\n    this.wss = new WebSocket.Server(options);\n    this.wss.on(\"connection\", ws => {\n      this.connections.add(ws);\n      ws.once(\"close\", () => this.connections.delete(ws));\n      this.history.forEach(bundle => {\n        ws.send(JSON.stringify(bundle));\n      });\n    });\n  }\n\n  stop() {\n    return new Promise((resolve, reject) => {\n      if (!this.wss) {\n        return resolve();\n      }\n\n      this.wss.close(err => {\n        if (err) return reject(err);\n        resolve();\n      });\n      this.connections.forEach(socket => socket.terminate());\n    });\n  }\n\n  log(info, next) {\n    setImmediate(() => this.emit(\"logged\", info));\n    const bundle = {\n      level: info.level,\n      data: {},\n      timestamp: new Date().getTime(),\n      message: \"\"\n    };\n    const splat = [info.message, ...(info[triple_beam_1.SPLAT] || [])].map(value => {\n      if (typeof value == \"string\") {\n        try {\n          bundle.data = Object.assign(Object.assign({}, bundle.data), JSON.parse(value));\n          return null;\n        } catch (err) {\n          return value;\n        }\n      } else {\n        bundle.data = Object.assign(Object.assign({}, bundle.data), value);\n      }\n    }).filter(v => v);\n    bundle.message = splat.join(\" \");\n\n    if (bundle.data && bundle.data.metadata && bundle.data.metadata.level) {\n      bundle.level = bundle.data.metadata.level.toLowerCase();\n    } else {\n      bundle.level = bundle.level.toLowerCase();\n    }\n\n    if (bundle.data && bundle.data.metadata && bundle.data.metadata.message) {\n      bundle.message = bundle.data.metadata.message;\n    }\n\n    bundle.message = ansiStrip(bundle.message);\n    this.history.push(bundle);\n    this.connections.forEach(ws => {\n      ws.send(JSON.stringify(bundle));\n    });\n\n    if (next) {\n      next();\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/loggingEmulator.js"],"names":["Object","defineProperty","exports","value","LoggingEmulator","types_1","require","constants_1","triple_beam_1","WebSocket","TransportStream","logger_1","ansiStrip","constructor","args","start","transport","WebSocketTransport","getInfo","logger","add","Promise","resolve","connect","stop","remove","host","Constants","getDefaultHost","Emulators","LOGGING","port","getDefaultPort","name","getName","LOGGING_EMULATOR_ENV","options","connections","Set","history","setMaxListeners","wss","Server","on","ws","once","delete","forEach","bundle","send","JSON","stringify","reject","close","err","socket","terminate","log","info","next","setImmediate","emit","level","data","timestamp","Date","getTime","message","splat","SPLAT","map","assign","parse","filter","v","join","metadata","toLowerCase","push"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingEmulator = void 0;\nconst types_1 = require(\"./types\");\nconst constants_1 = require(\"./constants\");\nconst triple_beam_1 = require(\"triple-beam\");\nconst WebSocket = require(\"ws\");\nconst TransportStream = require(\"winston-transport\");\nconst logger_1 = require(\"../logger\");\nconst ansiStrip = require(\"cli-color/strip\");\nclass LoggingEmulator {\n    constructor(args) {\n        this.args = args;\n    }\n    start() {\n        this.transport = new WebSocketTransport();\n        this.transport.start(this.getInfo());\n        logger_1.logger.add(this.transport);\n        return Promise.resolve();\n    }\n    connect() {\n        return Promise.resolve();\n    }\n    async stop() {\n        if (this.transport) {\n            logger_1.logger.remove(this.transport);\n            return this.transport.stop();\n        }\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.LOGGING);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.LOGGING);\n        return {\n            name: this.getName(),\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.LOGGING;\n    }\n}\nexports.LoggingEmulator = LoggingEmulator;\nLoggingEmulator.LOGGING_EMULATOR_ENV = \"FIREBASE_LOGGING_EMULATOR_HOST\";\nclass WebSocketTransport extends TransportStream {\n    constructor(options = {}) {\n        super(options);\n        this.connections = new Set();\n        this.history = [];\n        this.setMaxListeners(30);\n    }\n    start(options) {\n        this.wss = new WebSocket.Server(options);\n        this.wss.on(\"connection\", (ws) => {\n            this.connections.add(ws);\n            ws.once(\"close\", () => this.connections.delete(ws));\n            this.history.forEach((bundle) => {\n                ws.send(JSON.stringify(bundle));\n            });\n        });\n    }\n    stop() {\n        return new Promise((resolve, reject) => {\n            if (!this.wss) {\n                return resolve();\n            }\n            this.wss.close((err) => {\n                if (err)\n                    return reject(err);\n                resolve();\n            });\n            this.connections.forEach((socket) => socket.terminate());\n        });\n    }\n    log(info, next) {\n        setImmediate(() => this.emit(\"logged\", info));\n        const bundle = {\n            level: info.level,\n            data: {},\n            timestamp: new Date().getTime(),\n            message: \"\",\n        };\n        const splat = [info.message, ...(info[triple_beam_1.SPLAT] || [])]\n            .map((value) => {\n            if (typeof value == \"string\") {\n                try {\n                    bundle.data = Object.assign(Object.assign({}, bundle.data), JSON.parse(value));\n                    return null;\n                }\n                catch (err) {\n                    return value;\n                }\n            }\n            else {\n                bundle.data = Object.assign(Object.assign({}, bundle.data), value);\n            }\n        })\n            .filter((v) => v);\n        bundle.message = splat.join(\" \");\n        if (bundle.data && bundle.data.metadata && bundle.data.metadata.level) {\n            bundle.level = bundle.data.metadata.level.toLowerCase();\n        }\n        else {\n            bundle.level = bundle.level.toLowerCase();\n        }\n        if (bundle.data && bundle.data.metadata && bundle.data.metadata.message) {\n            bundle.message = bundle.data.metadata.message;\n        }\n        bundle.message = ansiStrip(bundle.message);\n        this.history.push(bundle);\n        this.connections.forEach((ws) => {\n            ws.send(JSON.stringify(bundle));\n        });\n        if (next) {\n            next();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}