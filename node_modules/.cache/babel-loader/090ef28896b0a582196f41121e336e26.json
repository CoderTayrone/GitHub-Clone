{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectState = exports.SIGNIN_METHOD_EMAIL_LINK = exports.PROVIDER_CUSTOM = exports.PROVIDER_ANONYMOUS = exports.PROVIDER_PHONE = exports.PROVIDER_PASSWORD = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst cloudFunctions_1 = require(\"./cloudFunctions\");\n\nconst errors_1 = require(\"./errors\");\n\nexports.PROVIDER_PASSWORD = \"password\";\nexports.PROVIDER_PHONE = \"phone\";\nexports.PROVIDER_ANONYMOUS = \"anonymous\";\nexports.PROVIDER_CUSTOM = \"custom\";\nexports.SIGNIN_METHOD_EMAIL_LINK = \"emailLink\";\n\nclass ProjectState {\n  constructor(projectId) {\n    this.projectId = projectId;\n    this.users = new Map();\n    this.localIdForEmail = new Map();\n    this.localIdForInitialEmail = new Map();\n    this.localIdForPhoneNumber = new Map();\n    this.localIdsForProviderEmail = new Map();\n    this.userIdForProviderRawId = new Map();\n    this.refreshTokens = new Map();\n    this.refreshTokensForLocalId = new Map();\n    this.oobs = new Map();\n    this.verificationCodes = new Map();\n    this.temporaryProofs = new Map();\n    this.oneAccountPerEmail = true;\n    this.authCloudFunction = new cloudFunctions_1.AuthCloudFunction(projectId);\n  }\n\n  get projectNumber() {\n    return \"12345\";\n  }\n\n  createUser(props) {\n    for (let i = 0; i < 10; i++) {\n      const localId = utils_1.randomId(28);\n      const user = this.createUserWithLocalId(localId, props);\n\n      if (user) {\n        return user;\n      }\n    }\n\n    throw new Error(\"Cannot generate a random unique localId after 10 tries.\");\n  }\n\n  createUserWithLocalId(localId, props) {\n    if (this.users.has(localId)) {\n      return undefined;\n    }\n\n    const timestamp = new Date();\n    this.users.set(localId, {\n      localId,\n      createdAt: props.createdAt || timestamp.getTime().toString(),\n      lastLoginAt: timestamp.getTime().toString()\n    });\n    const user = this.updateUserByLocalId(localId, props, {\n      upsertProviders: props.providerUserInfo\n    });\n    this.authCloudFunction.dispatch(\"create\", user);\n    return user;\n  }\n\n  overwriteUserWithLocalId(localId, props) {\n    const userInfoBefore = this.users.get(localId);\n\n    if (userInfoBefore) {\n      this.removeUserFromIndex(userInfoBefore);\n    }\n\n    const timestamp = new Date();\n    this.users.set(localId, {\n      localId,\n      createdAt: props.createdAt || timestamp.getTime().toString(),\n      lastLoginAt: timestamp.getTime().toString()\n    });\n    const user = this.updateUserByLocalId(localId, props, {\n      upsertProviders: props.providerUserInfo\n    });\n    return user;\n  }\n\n  deleteUser(user) {\n    this.users.delete(user.localId);\n    this.removeUserFromIndex(user);\n    const refreshTokens = this.refreshTokensForLocalId.get(user.localId);\n\n    if (refreshTokens) {\n      this.refreshTokensForLocalId.delete(user.localId);\n\n      for (const refreshToken of refreshTokens) {\n        this.refreshTokens.delete(refreshToken);\n      }\n    }\n\n    this.authCloudFunction.dispatch(\"delete\", user);\n  }\n\n  updateUserByLocalId(localId, fields, options = {}) {\n    var _a, _b;\n\n    const upsertProviders = (_a = options.upsertProviders) !== null && _a !== void 0 ? _a : [];\n    const deleteProviders = (_b = options.deleteProviders) !== null && _b !== void 0 ? _b : [];\n    const user = this.users.get(localId);\n\n    if (!user) {\n      throw new Error(`Internal assertion error: trying to update nonexistent user: ${localId}`);\n    }\n\n    const oldEmail = user.email;\n    const oldPhoneNumber = user.phoneNumber;\n\n    for (const field of Object.keys(fields)) {\n      utils_1.mirrorFieldTo(user, field, fields);\n    }\n\n    if (oldEmail && oldEmail !== user.email) {\n      this.localIdForEmail.delete(oldEmail);\n    }\n\n    if (user.email) {\n      this.localIdForEmail.set(user.email, user.localId);\n    }\n\n    if (user.email && (user.passwordHash || user.emailLinkSignin)) {\n      upsertProviders.push({\n        providerId: exports.PROVIDER_PASSWORD,\n        email: user.email,\n        federatedId: user.email,\n        rawId: user.email,\n        displayName: user.displayName,\n        photoUrl: user.photoUrl\n      });\n    } else {\n      deleteProviders.push(exports.PROVIDER_PASSWORD);\n    }\n\n    if (user.initialEmail) {\n      this.localIdForInitialEmail.set(user.initialEmail, user.localId);\n    }\n\n    if (oldPhoneNumber && oldPhoneNumber !== user.phoneNumber) {\n      this.localIdForPhoneNumber.delete(oldPhoneNumber);\n    }\n\n    if (user.phoneNumber) {\n      this.localIdForPhoneNumber.set(user.phoneNumber, user.localId);\n      upsertProviders.push({\n        providerId: exports.PROVIDER_PHONE,\n        phoneNumber: user.phoneNumber,\n        rawId: user.phoneNumber\n      });\n    } else {\n      deleteProviders.push(exports.PROVIDER_PHONE);\n    }\n\n    if (user.mfaInfo) {\n      this.validateMfaEnrollments(user.mfaInfo);\n    }\n\n    return this.updateUserProviderInfo(user, upsertProviders, deleteProviders);\n  }\n\n  validateMfaEnrollments(enrollments) {\n    const phoneNumbers = new Set();\n    const enrollmentIds = new Set();\n\n    for (const enrollment of enrollments) {\n      errors_1.assert(enrollment.phoneInfo && utils_1.isValidPhoneNumber(enrollment.phoneInfo), \"INVALID_MFA_PHONE_NUMBER : Invalid format.\");\n      errors_1.assert(enrollment.mfaEnrollmentId, \"INVALID_MFA_ENROLLMENT_ID : mfaEnrollmentId must be defined.\");\n      errors_1.assert(!enrollmentIds.has(enrollment.mfaEnrollmentId), \"DUPLICATE_MFA_ENROLLMENT_ID\");\n      errors_1.assert(!phoneNumbers.has(enrollment.phoneInfo), \"INTERNAL_ERROR : MFA Enrollment Phone Numbers must be unique.\");\n      phoneNumbers.add(enrollment.phoneInfo);\n      enrollmentIds.add(enrollment.mfaEnrollmentId);\n    }\n\n    return enrollments;\n  }\n\n  updateUserProviderInfo(user, upsertProviders, deleteProviders) {\n    var _a, _b;\n\n    const oldProviderEmails = getProviderEmailsForUser(user);\n\n    if (user.providerUserInfo) {\n      const updatedProviderUserInfo = [];\n\n      for (const info of user.providerUserInfo) {\n        if (deleteProviders.includes(info.providerId)) {\n          (_a = this.userIdForProviderRawId.get(info.providerId)) === null || _a === void 0 ? void 0 : _a.delete(info.rawId);\n        } else {\n          updatedProviderUserInfo.push(info);\n        }\n      }\n\n      user.providerUserInfo = updatedProviderUserInfo;\n    }\n\n    if (upsertProviders.length) {\n      user.providerUserInfo = (_b = user.providerUserInfo) !== null && _b !== void 0 ? _b : [];\n\n      for (const upsert of upsertProviders) {\n        const providerId = upsert.providerId;\n        let users = this.userIdForProviderRawId.get(providerId);\n\n        if (!users) {\n          users = new Map();\n          this.userIdForProviderRawId.set(providerId, users);\n        }\n\n        users.set(upsert.rawId, user.localId);\n        const index = user.providerUserInfo.findIndex(info => info.providerId === upsert.providerId);\n\n        if (index < 0) {\n          user.providerUserInfo.push(upsert);\n        } else {\n          user.providerUserInfo[index] = upsert;\n        }\n      }\n    }\n\n    for (const email of getProviderEmailsForUser(user)) {\n      oldProviderEmails.delete(email);\n      let localIds = this.localIdsForProviderEmail.get(email);\n\n      if (!localIds) {\n        localIds = new Set();\n        this.localIdsForProviderEmail.set(email, localIds);\n      }\n\n      localIds.add(user.localId);\n    }\n\n    for (const oldEmail of oldProviderEmails) {\n      this.removeProviderEmailForUser(oldEmail, user.localId);\n    }\n\n    return user;\n  }\n\n  getUserByEmail(email) {\n    const localId = this.localIdForEmail.get(email);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  getUserByInitialEmail(initialEmail) {\n    const localId = this.localIdForInitialEmail.get(initialEmail);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  getUserByLocalIdAssertingExists(localId) {\n    const userInfo = this.getUserByLocalId(localId);\n\n    if (!userInfo) {\n      throw new Error(`Internal state invariant broken: no user with ID: ${localId}`);\n    }\n\n    return userInfo;\n  }\n\n  getUsersByEmailOrProviderEmail(email) {\n    var _a;\n\n    const users = [];\n    const seenLocalIds = new Set();\n    const localId = this.localIdForEmail.get(email);\n\n    if (localId) {\n      users.push(this.getUserByLocalIdAssertingExists(localId));\n      seenLocalIds.add(localId);\n    }\n\n    for (const localId of (_a = this.localIdsForProviderEmail.get(email)) !== null && _a !== void 0 ? _a : []) {\n      if (!seenLocalIds.has(localId)) {\n        users.push(this.getUserByLocalIdAssertingExists(localId));\n        seenLocalIds.add(localId);\n      }\n    }\n\n    return users;\n  }\n\n  getUserByPhoneNumber(phoneNumber) {\n    const localId = this.localIdForPhoneNumber.get(phoneNumber);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  removeProviderEmailForUser(email, localId) {\n    const localIds = this.localIdsForProviderEmail.get(email);\n\n    if (!localIds) {\n      return;\n    }\n\n    localIds.delete(localId);\n\n    if (localIds.size === 0) {\n      this.localIdsForProviderEmail.delete(email);\n    }\n  }\n\n  getUserByProviderRawId(provider, rawId) {\n    var _a;\n\n    const localId = (_a = this.userIdForProviderRawId.get(provider)) === null || _a === void 0 ? void 0 : _a.get(rawId);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  listProviderInfosByProviderId(provider) {\n    var _a;\n\n    const users = this.userIdForProviderRawId.get(provider);\n\n    if (!users) {\n      return [];\n    }\n\n    const infos = [];\n\n    for (const localId of users.values()) {\n      const user = this.getUserByLocalIdAssertingExists(localId);\n      const info = (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.find(info => info.providerId === provider);\n\n      if (!info) {\n        throw new Error(`Internal assertion error: User ${localId} does not have providerInfo ${provider}.`);\n      }\n\n      infos.push(info);\n    }\n\n    return infos;\n  }\n\n  getUserByLocalId(localId) {\n    return this.users.get(localId);\n  }\n\n  createRefreshTokenFor(userInfo, provider, extraClaims = {}) {\n    const localId = userInfo.localId;\n    const refreshToken = utils_1.randomBase64UrlStr(204);\n    this.refreshTokens.set(refreshToken, {\n      localId,\n      provider,\n      extraClaims\n    });\n    let refreshTokens = this.refreshTokensForLocalId.get(localId);\n\n    if (!refreshTokens) {\n      refreshTokens = new Set();\n      this.refreshTokensForLocalId.set(localId, refreshTokens);\n    }\n\n    refreshTokens.add(refreshToken);\n    return refreshToken;\n  }\n\n  validateRefreshToken(refreshToken) {\n    const record = this.refreshTokens.get(refreshToken);\n\n    if (!record) {\n      return undefined;\n    }\n\n    return {\n      user: this.getUserByLocalIdAssertingExists(record.localId),\n      provider: record.provider,\n      extraClaims: record.extraClaims\n    };\n  }\n\n  createOob(email, requestType, generateLink) {\n    const oobCode = utils_1.randomBase64UrlStr(54);\n    const oobLink = generateLink(oobCode);\n    const oob = {\n      email,\n      requestType,\n      oobCode,\n      oobLink\n    };\n    this.oobs.set(oobCode, oob);\n    return oob;\n  }\n\n  validateOobCode(oobCode) {\n    return this.oobs.get(oobCode);\n  }\n\n  deleteOobCode(oobCode) {\n    return this.oobs.delete(oobCode);\n  }\n\n  listOobCodes() {\n    return this.oobs.values();\n  }\n\n  createVerificationCode(phoneNumber) {\n    const sessionInfo = utils_1.randomBase64UrlStr(226);\n    const verification = {\n      code: utils_1.randomDigits(6),\n      phoneNumber,\n      sessionInfo\n    };\n    this.verificationCodes.set(sessionInfo, verification);\n    return verification;\n  }\n\n  getVerificationCodeBySessionInfo(sessionInfo) {\n    return this.verificationCodes.get(sessionInfo);\n  }\n\n  deleteVerificationCodeBySessionInfo(sessionInfo) {\n    return this.verificationCodes.delete(sessionInfo);\n  }\n\n  listVerificationCodes() {\n    return this.verificationCodes.values();\n  }\n\n  deleteAllAccounts() {\n    this.users.clear();\n    this.localIdForEmail.clear();\n    this.localIdForPhoneNumber.clear();\n    this.localIdsForProviderEmail.clear();\n    this.userIdForProviderRawId.clear();\n    this.refreshTokens.clear();\n    this.refreshTokensForLocalId.clear();\n  }\n\n  getUserCount() {\n    return this.users.size;\n  }\n\n  queryUsers(filter, options) {\n    const users = [];\n\n    for (const user of this.users.values()) {\n      if (!options.startToken || user.localId > options.startToken) {\n        filter;\n        users.push(user);\n      }\n    }\n\n    users.sort((a, b) => {\n      if (options.sortByField === \"localId\") {\n        if (a.localId < b.localId) {\n          return -1;\n        } else if (a.localId > b.localId) {\n          return 1;\n        }\n      }\n\n      return 0;\n    });\n    return options.order === \"DESC\" ? users.reverse() : users;\n  }\n\n  createTemporaryProof(phoneNumber) {\n    const record = {\n      phoneNumber,\n      temporaryProof: utils_1.randomBase64UrlStr(119),\n      temporaryProofExpiresIn: \"3600\"\n    };\n    this.temporaryProofs.set(record.temporaryProof, record);\n    return record;\n  }\n\n  validateTemporaryProof(temporaryProof, phoneNumber) {\n    const record = this.temporaryProofs.get(temporaryProof);\n\n    if (!record || record.phoneNumber !== phoneNumber) {\n      return undefined;\n    }\n\n    return record;\n  }\n\n  removeUserFromIndex(user) {\n    var _a, _b;\n\n    if (user.email) {\n      this.localIdForEmail.delete(user.email);\n    }\n\n    if (user.initialEmail) {\n      this.localIdForInitialEmail.delete(user.initialEmail);\n    }\n\n    if (user.phoneNumber) {\n      this.localIdForPhoneNumber.delete(user.phoneNumber);\n    }\n\n    for (const info of (_a = user.providerUserInfo) !== null && _a !== void 0 ? _a : []) {\n      (_b = this.userIdForProviderRawId.get(info.providerId)) === null || _b === void 0 ? void 0 : _b.delete(info.rawId);\n\n      if (info.email) {\n        this.removeProviderEmailForUser(info.email, user.localId);\n      }\n    }\n  }\n\n}\n\nexports.ProjectState = ProjectState;\n\nfunction getProviderEmailsForUser(user) {\n  var _a;\n\n  const emails = new Set();\n  (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.forEach(({\n    email\n  }) => {\n    if (email) {\n      emails.add(email);\n    }\n  });\n  return emails;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/auth/state.js"],"names":["Object","defineProperty","exports","value","ProjectState","SIGNIN_METHOD_EMAIL_LINK","PROVIDER_CUSTOM","PROVIDER_ANONYMOUS","PROVIDER_PHONE","PROVIDER_PASSWORD","utils_1","require","cloudFunctions_1","errors_1","constructor","projectId","users","Map","localIdForEmail","localIdForInitialEmail","localIdForPhoneNumber","localIdsForProviderEmail","userIdForProviderRawId","refreshTokens","refreshTokensForLocalId","oobs","verificationCodes","temporaryProofs","oneAccountPerEmail","authCloudFunction","AuthCloudFunction","projectNumber","createUser","props","i","localId","randomId","user","createUserWithLocalId","Error","has","undefined","timestamp","Date","set","createdAt","getTime","toString","lastLoginAt","updateUserByLocalId","upsertProviders","providerUserInfo","dispatch","overwriteUserWithLocalId","userInfoBefore","get","removeUserFromIndex","deleteUser","delete","refreshToken","fields","options","_a","_b","deleteProviders","oldEmail","email","oldPhoneNumber","phoneNumber","field","keys","mirrorFieldTo","passwordHash","emailLinkSignin","push","providerId","federatedId","rawId","displayName","photoUrl","initialEmail","mfaInfo","validateMfaEnrollments","updateUserProviderInfo","enrollments","phoneNumbers","Set","enrollmentIds","enrollment","assert","phoneInfo","isValidPhoneNumber","mfaEnrollmentId","add","oldProviderEmails","getProviderEmailsForUser","updatedProviderUserInfo","info","includes","length","upsert","index","findIndex","localIds","removeProviderEmailForUser","getUserByEmail","getUserByLocalIdAssertingExists","getUserByInitialEmail","userInfo","getUserByLocalId","getUsersByEmailOrProviderEmail","seenLocalIds","getUserByPhoneNumber","size","getUserByProviderRawId","provider","listProviderInfosByProviderId","infos","values","find","createRefreshTokenFor","extraClaims","randomBase64UrlStr","validateRefreshToken","record","createOob","requestType","generateLink","oobCode","oobLink","oob","validateOobCode","deleteOobCode","listOobCodes","createVerificationCode","sessionInfo","verification","code","randomDigits","getVerificationCodeBySessionInfo","deleteVerificationCodeBySessionInfo","listVerificationCodes","deleteAllAccounts","clear","getUserCount","queryUsers","filter","startToken","sort","a","b","sortByField","order","reverse","createTemporaryProof","temporaryProof","temporaryProofExpiresIn","validateTemporaryProof","emails","forEach"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectState = exports.SIGNIN_METHOD_EMAIL_LINK = exports.PROVIDER_CUSTOM = exports.PROVIDER_ANONYMOUS = exports.PROVIDER_PHONE = exports.PROVIDER_PASSWORD = void 0;\nconst utils_1 = require(\"./utils\");\nconst cloudFunctions_1 = require(\"./cloudFunctions\");\nconst errors_1 = require(\"./errors\");\nexports.PROVIDER_PASSWORD = \"password\";\nexports.PROVIDER_PHONE = \"phone\";\nexports.PROVIDER_ANONYMOUS = \"anonymous\";\nexports.PROVIDER_CUSTOM = \"custom\";\nexports.SIGNIN_METHOD_EMAIL_LINK = \"emailLink\";\nclass ProjectState {\n    constructor(projectId) {\n        this.projectId = projectId;\n        this.users = new Map();\n        this.localIdForEmail = new Map();\n        this.localIdForInitialEmail = new Map();\n        this.localIdForPhoneNumber = new Map();\n        this.localIdsForProviderEmail = new Map();\n        this.userIdForProviderRawId = new Map();\n        this.refreshTokens = new Map();\n        this.refreshTokensForLocalId = new Map();\n        this.oobs = new Map();\n        this.verificationCodes = new Map();\n        this.temporaryProofs = new Map();\n        this.oneAccountPerEmail = true;\n        this.authCloudFunction = new cloudFunctions_1.AuthCloudFunction(projectId);\n    }\n    get projectNumber() {\n        return \"12345\";\n    }\n    createUser(props) {\n        for (let i = 0; i < 10; i++) {\n            const localId = utils_1.randomId(28);\n            const user = this.createUserWithLocalId(localId, props);\n            if (user) {\n                return user;\n            }\n        }\n        throw new Error(\"Cannot generate a random unique localId after 10 tries.\");\n    }\n    createUserWithLocalId(localId, props) {\n        if (this.users.has(localId)) {\n            return undefined;\n        }\n        const timestamp = new Date();\n        this.users.set(localId, {\n            localId,\n            createdAt: props.createdAt || timestamp.getTime().toString(),\n            lastLoginAt: timestamp.getTime().toString(),\n        });\n        const user = this.updateUserByLocalId(localId, props, {\n            upsertProviders: props.providerUserInfo,\n        });\n        this.authCloudFunction.dispatch(\"create\", user);\n        return user;\n    }\n    overwriteUserWithLocalId(localId, props) {\n        const userInfoBefore = this.users.get(localId);\n        if (userInfoBefore) {\n            this.removeUserFromIndex(userInfoBefore);\n        }\n        const timestamp = new Date();\n        this.users.set(localId, {\n            localId,\n            createdAt: props.createdAt || timestamp.getTime().toString(),\n            lastLoginAt: timestamp.getTime().toString(),\n        });\n        const user = this.updateUserByLocalId(localId, props, {\n            upsertProviders: props.providerUserInfo,\n        });\n        return user;\n    }\n    deleteUser(user) {\n        this.users.delete(user.localId);\n        this.removeUserFromIndex(user);\n        const refreshTokens = this.refreshTokensForLocalId.get(user.localId);\n        if (refreshTokens) {\n            this.refreshTokensForLocalId.delete(user.localId);\n            for (const refreshToken of refreshTokens) {\n                this.refreshTokens.delete(refreshToken);\n            }\n        }\n        this.authCloudFunction.dispatch(\"delete\", user);\n    }\n    updateUserByLocalId(localId, fields, options = {}) {\n        var _a, _b;\n        const upsertProviders = (_a = options.upsertProviders) !== null && _a !== void 0 ? _a : [];\n        const deleteProviders = (_b = options.deleteProviders) !== null && _b !== void 0 ? _b : [];\n        const user = this.users.get(localId);\n        if (!user) {\n            throw new Error(`Internal assertion error: trying to update nonexistent user: ${localId}`);\n        }\n        const oldEmail = user.email;\n        const oldPhoneNumber = user.phoneNumber;\n        for (const field of Object.keys(fields)) {\n            utils_1.mirrorFieldTo(user, field, fields);\n        }\n        if (oldEmail && oldEmail !== user.email) {\n            this.localIdForEmail.delete(oldEmail);\n        }\n        if (user.email) {\n            this.localIdForEmail.set(user.email, user.localId);\n        }\n        if (user.email && (user.passwordHash || user.emailLinkSignin)) {\n            upsertProviders.push({\n                providerId: exports.PROVIDER_PASSWORD,\n                email: user.email,\n                federatedId: user.email,\n                rawId: user.email,\n                displayName: user.displayName,\n                photoUrl: user.photoUrl,\n            });\n        }\n        else {\n            deleteProviders.push(exports.PROVIDER_PASSWORD);\n        }\n        if (user.initialEmail) {\n            this.localIdForInitialEmail.set(user.initialEmail, user.localId);\n        }\n        if (oldPhoneNumber && oldPhoneNumber !== user.phoneNumber) {\n            this.localIdForPhoneNumber.delete(oldPhoneNumber);\n        }\n        if (user.phoneNumber) {\n            this.localIdForPhoneNumber.set(user.phoneNumber, user.localId);\n            upsertProviders.push({\n                providerId: exports.PROVIDER_PHONE,\n                phoneNumber: user.phoneNumber,\n                rawId: user.phoneNumber,\n            });\n        }\n        else {\n            deleteProviders.push(exports.PROVIDER_PHONE);\n        }\n        if (user.mfaInfo) {\n            this.validateMfaEnrollments(user.mfaInfo);\n        }\n        return this.updateUserProviderInfo(user, upsertProviders, deleteProviders);\n    }\n    validateMfaEnrollments(enrollments) {\n        const phoneNumbers = new Set();\n        const enrollmentIds = new Set();\n        for (const enrollment of enrollments) {\n            errors_1.assert(enrollment.phoneInfo && utils_1.isValidPhoneNumber(enrollment.phoneInfo), \"INVALID_MFA_PHONE_NUMBER : Invalid format.\");\n            errors_1.assert(enrollment.mfaEnrollmentId, \"INVALID_MFA_ENROLLMENT_ID : mfaEnrollmentId must be defined.\");\n            errors_1.assert(!enrollmentIds.has(enrollment.mfaEnrollmentId), \"DUPLICATE_MFA_ENROLLMENT_ID\");\n            errors_1.assert(!phoneNumbers.has(enrollment.phoneInfo), \"INTERNAL_ERROR : MFA Enrollment Phone Numbers must be unique.\");\n            phoneNumbers.add(enrollment.phoneInfo);\n            enrollmentIds.add(enrollment.mfaEnrollmentId);\n        }\n        return enrollments;\n    }\n    updateUserProviderInfo(user, upsertProviders, deleteProviders) {\n        var _a, _b;\n        const oldProviderEmails = getProviderEmailsForUser(user);\n        if (user.providerUserInfo) {\n            const updatedProviderUserInfo = [];\n            for (const info of user.providerUserInfo) {\n                if (deleteProviders.includes(info.providerId)) {\n                    (_a = this.userIdForProviderRawId.get(info.providerId)) === null || _a === void 0 ? void 0 : _a.delete(info.rawId);\n                }\n                else {\n                    updatedProviderUserInfo.push(info);\n                }\n            }\n            user.providerUserInfo = updatedProviderUserInfo;\n        }\n        if (upsertProviders.length) {\n            user.providerUserInfo = (_b = user.providerUserInfo) !== null && _b !== void 0 ? _b : [];\n            for (const upsert of upsertProviders) {\n                const providerId = upsert.providerId;\n                let users = this.userIdForProviderRawId.get(providerId);\n                if (!users) {\n                    users = new Map();\n                    this.userIdForProviderRawId.set(providerId, users);\n                }\n                users.set(upsert.rawId, user.localId);\n                const index = user.providerUserInfo.findIndex((info) => info.providerId === upsert.providerId);\n                if (index < 0) {\n                    user.providerUserInfo.push(upsert);\n                }\n                else {\n                    user.providerUserInfo[index] = upsert;\n                }\n            }\n        }\n        for (const email of getProviderEmailsForUser(user)) {\n            oldProviderEmails.delete(email);\n            let localIds = this.localIdsForProviderEmail.get(email);\n            if (!localIds) {\n                localIds = new Set();\n                this.localIdsForProviderEmail.set(email, localIds);\n            }\n            localIds.add(user.localId);\n        }\n        for (const oldEmail of oldProviderEmails) {\n            this.removeProviderEmailForUser(oldEmail, user.localId);\n        }\n        return user;\n    }\n    getUserByEmail(email) {\n        const localId = this.localIdForEmail.get(email);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    getUserByInitialEmail(initialEmail) {\n        const localId = this.localIdForInitialEmail.get(initialEmail);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    getUserByLocalIdAssertingExists(localId) {\n        const userInfo = this.getUserByLocalId(localId);\n        if (!userInfo) {\n            throw new Error(`Internal state invariant broken: no user with ID: ${localId}`);\n        }\n        return userInfo;\n    }\n    getUsersByEmailOrProviderEmail(email) {\n        var _a;\n        const users = [];\n        const seenLocalIds = new Set();\n        const localId = this.localIdForEmail.get(email);\n        if (localId) {\n            users.push(this.getUserByLocalIdAssertingExists(localId));\n            seenLocalIds.add(localId);\n        }\n        for (const localId of (_a = this.localIdsForProviderEmail.get(email)) !== null && _a !== void 0 ? _a : []) {\n            if (!seenLocalIds.has(localId)) {\n                users.push(this.getUserByLocalIdAssertingExists(localId));\n                seenLocalIds.add(localId);\n            }\n        }\n        return users;\n    }\n    getUserByPhoneNumber(phoneNumber) {\n        const localId = this.localIdForPhoneNumber.get(phoneNumber);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    removeProviderEmailForUser(email, localId) {\n        const localIds = this.localIdsForProviderEmail.get(email);\n        if (!localIds) {\n            return;\n        }\n        localIds.delete(localId);\n        if (localIds.size === 0) {\n            this.localIdsForProviderEmail.delete(email);\n        }\n    }\n    getUserByProviderRawId(provider, rawId) {\n        var _a;\n        const localId = (_a = this.userIdForProviderRawId.get(provider)) === null || _a === void 0 ? void 0 : _a.get(rawId);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    listProviderInfosByProviderId(provider) {\n        var _a;\n        const users = this.userIdForProviderRawId.get(provider);\n        if (!users) {\n            return [];\n        }\n        const infos = [];\n        for (const localId of users.values()) {\n            const user = this.getUserByLocalIdAssertingExists(localId);\n            const info = (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.find((info) => info.providerId === provider);\n            if (!info) {\n                throw new Error(`Internal assertion error: User ${localId} does not have providerInfo ${provider}.`);\n            }\n            infos.push(info);\n        }\n        return infos;\n    }\n    getUserByLocalId(localId) {\n        return this.users.get(localId);\n    }\n    createRefreshTokenFor(userInfo, provider, extraClaims = {}) {\n        const localId = userInfo.localId;\n        const refreshToken = utils_1.randomBase64UrlStr(204);\n        this.refreshTokens.set(refreshToken, { localId, provider, extraClaims });\n        let refreshTokens = this.refreshTokensForLocalId.get(localId);\n        if (!refreshTokens) {\n            refreshTokens = new Set();\n            this.refreshTokensForLocalId.set(localId, refreshTokens);\n        }\n        refreshTokens.add(refreshToken);\n        return refreshToken;\n    }\n    validateRefreshToken(refreshToken) {\n        const record = this.refreshTokens.get(refreshToken);\n        if (!record) {\n            return undefined;\n        }\n        return {\n            user: this.getUserByLocalIdAssertingExists(record.localId),\n            provider: record.provider,\n            extraClaims: record.extraClaims,\n        };\n    }\n    createOob(email, requestType, generateLink) {\n        const oobCode = utils_1.randomBase64UrlStr(54);\n        const oobLink = generateLink(oobCode);\n        const oob = {\n            email,\n            requestType,\n            oobCode,\n            oobLink,\n        };\n        this.oobs.set(oobCode, oob);\n        return oob;\n    }\n    validateOobCode(oobCode) {\n        return this.oobs.get(oobCode);\n    }\n    deleteOobCode(oobCode) {\n        return this.oobs.delete(oobCode);\n    }\n    listOobCodes() {\n        return this.oobs.values();\n    }\n    createVerificationCode(phoneNumber) {\n        const sessionInfo = utils_1.randomBase64UrlStr(226);\n        const verification = {\n            code: utils_1.randomDigits(6),\n            phoneNumber,\n            sessionInfo,\n        };\n        this.verificationCodes.set(sessionInfo, verification);\n        return verification;\n    }\n    getVerificationCodeBySessionInfo(sessionInfo) {\n        return this.verificationCodes.get(sessionInfo);\n    }\n    deleteVerificationCodeBySessionInfo(sessionInfo) {\n        return this.verificationCodes.delete(sessionInfo);\n    }\n    listVerificationCodes() {\n        return this.verificationCodes.values();\n    }\n    deleteAllAccounts() {\n        this.users.clear();\n        this.localIdForEmail.clear();\n        this.localIdForPhoneNumber.clear();\n        this.localIdsForProviderEmail.clear();\n        this.userIdForProviderRawId.clear();\n        this.refreshTokens.clear();\n        this.refreshTokensForLocalId.clear();\n    }\n    getUserCount() {\n        return this.users.size;\n    }\n    queryUsers(filter, options) {\n        const users = [];\n        for (const user of this.users.values()) {\n            if (!options.startToken || user.localId > options.startToken) {\n                filter;\n                users.push(user);\n            }\n        }\n        users.sort((a, b) => {\n            if (options.sortByField === \"localId\") {\n                if (a.localId < b.localId) {\n                    return -1;\n                }\n                else if (a.localId > b.localId) {\n                    return 1;\n                }\n            }\n            return 0;\n        });\n        return options.order === \"DESC\" ? users.reverse() : users;\n    }\n    createTemporaryProof(phoneNumber) {\n        const record = {\n            phoneNumber,\n            temporaryProof: utils_1.randomBase64UrlStr(119),\n            temporaryProofExpiresIn: \"3600\",\n        };\n        this.temporaryProofs.set(record.temporaryProof, record);\n        return record;\n    }\n    validateTemporaryProof(temporaryProof, phoneNumber) {\n        const record = this.temporaryProofs.get(temporaryProof);\n        if (!record || record.phoneNumber !== phoneNumber) {\n            return undefined;\n        }\n        return record;\n    }\n    removeUserFromIndex(user) {\n        var _a, _b;\n        if (user.email) {\n            this.localIdForEmail.delete(user.email);\n        }\n        if (user.initialEmail) {\n            this.localIdForInitialEmail.delete(user.initialEmail);\n        }\n        if (user.phoneNumber) {\n            this.localIdForPhoneNumber.delete(user.phoneNumber);\n        }\n        for (const info of (_a = user.providerUserInfo) !== null && _a !== void 0 ? _a : []) {\n            (_b = this.userIdForProviderRawId.get(info.providerId)) === null || _b === void 0 ? void 0 : _b.delete(info.rawId);\n            if (info.email) {\n                this.removeProviderEmailForUser(info.email, user.localId);\n            }\n        }\n    }\n}\nexports.ProjectState = ProjectState;\nfunction getProviderEmailsForUser(user) {\n    var _a;\n    const emails = new Set();\n    (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.forEach(({ email }) => {\n        if (email) {\n            emails.add(email);\n        }\n    });\n    return emails;\n}\n"]},"metadata":{},"sourceType":"script"}