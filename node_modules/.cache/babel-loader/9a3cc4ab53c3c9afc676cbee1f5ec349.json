{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.schedulerDeploymentHandler = exports.deleteTopicTask = exports.deleteScheduleTask = exports.upsertScheduleTask = exports.runRegionalFunctionDeployment = exports.functionsDeploymentHandler = exports.deleteFunctionTask = exports.updateFunctionTask = exports.createFunctionTask = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst operation_poller_1 = require(\"../../operation-poller\");\n\nconst api_1 = require(\"../../api\");\n\nconst runtimes_1 = require(\"./runtimes\");\n\nconst backend = require(\"./backend\");\n\nconst cloudscheduler = require(\"../../gcp/cloudscheduler\");\n\nconst deploymentTool = require(\"../../deploymentTool\");\n\nconst gcf = require(\"../../gcp/cloudfunctions\");\n\nconst gcfV2 = require(\"../../gcp/cloudfunctionsv2\");\n\nconst cloudrun = require(\"../../gcp/run\");\n\nconst helper = require(\"./functionsDeployHelper\");\n\nconst pubsub = require(\"../../gcp/pubsub\");\n\nconst utils = require(\"../../utils\");\n\nconst error_1 = require(\"../../error\");\n\nconst track_1 = require(\"../../track\");\n\nconst gcfV1PollerOptions = {\n  apiOrigin: api_1.functionsOrigin,\n  apiVersion: gcf.API_VERSION,\n  masterTimeout: 25 * 60 * 1000\n};\nconst gcfV2PollerOptions = {\n  apiOrigin: api_1.functionsV2Origin,\n  apiVersion: gcfV2.API_VERSION,\n  masterTimeout: 25 * 60 * 1000\n};\nconst pollerOptionsByPlatform = {\n  gcfv1: gcfV1PollerOptions,\n  gcfv2: gcfV2PollerOptions\n};\n\nfunction createFunctionTask(params, fn, sourceToken, onPoll) {\n  const fnName = backend.functionName(fn);\n\n  const run = async () => {\n    var _a;\n\n    utils.logBullet(clc.bold.cyan(\"functions: \") + \"creating \" + runtimes_1.getHumanFriendlyRuntimeName(fn.runtime) + \" function \" + clc.bold(helper.getFunctionLabel(fn)) + \"...\");\n    let op;\n\n    if (fn.platform === \"gcfv1\") {\n      const apiFunction = gcf.functionFromSpec(fn, params.sourceUrl);\n\n      if (sourceToken) {\n        apiFunction.sourceToken = sourceToken;\n      }\n\n      op = await gcf.createFunction(apiFunction);\n    } else {\n      const apiFunction = gcfV2.functionFromSpec(fn, params.storage[fn.region]);\n\n      if ((_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic) {\n        try {\n          await pubsub.getTopic(apiFunction.eventTrigger.pubsubTopic);\n        } catch (err) {\n          if (err.status !== 404) {\n            throw new error_1.FirebaseError(\"Unexpected error looking for Pub/Sub topic\", {\n              original: err\n            });\n          }\n\n          await pubsub.createTopic({\n            name: apiFunction.eventTrigger.pubsubTopic\n          });\n        }\n      }\n\n      op = await gcfV2.createFunction(apiFunction);\n    }\n\n    const cloudFunction = await operation_poller_1.pollOperation(Object.assign(Object.assign({}, pollerOptionsByPlatform[fn.platform]), {\n      pollerName: `create-${fnName}`,\n      operationResourceName: op.name,\n      onPoll\n    }));\n\n    if (!backend.isEventTrigger(fn.trigger)) {\n      const invoker = fn.trigger.invoker || [\"public\"];\n\n      if (invoker[0] !== \"private\") {\n        try {\n          if (fn.platform === \"gcfv1\") {\n            await gcf.setInvokerCreate(params.projectId, fnName, invoker);\n          } else {\n            const serviceName = cloudFunction.serviceConfig.service;\n            cloudrun.setInvokerCreate(params.projectId, serviceName, invoker);\n          }\n        } catch (err) {\n          params.errorHandler.record(\"error\", fnName, \"set invoker\", err.message);\n        }\n      }\n    }\n\n    if (fn.platform !== \"gcfv1\") {\n      await setConcurrency(cloudFunction.serviceConfig.service, fn.concurrency || 80);\n    }\n  };\n\n  return {\n    run,\n    data: fn,\n    operationType: \"create\"\n  };\n}\n\nexports.createFunctionTask = createFunctionTask;\n\nfunction updateFunctionTask(params, fn, sourceToken, onPoll) {\n  const fnName = backend.functionName(fn);\n\n  const run = async () => {\n    var _a;\n\n    utils.logBullet(clc.bold.cyan(\"functions: \") + \"updating \" + runtimes_1.getHumanFriendlyRuntimeName(fn.runtime) + \" function \" + clc.bold(helper.getFunctionLabel(fn)) + \"...\");\n    let opName;\n\n    if (fn.platform == \"gcfv1\") {\n      const apiFunction = gcf.functionFromSpec(fn, params.sourceUrl);\n\n      if (sourceToken) {\n        apiFunction.sourceToken = sourceToken;\n      }\n\n      opName = (await gcf.updateFunction(apiFunction)).name;\n    } else {\n      const apiFunction = gcfV2.functionFromSpec(fn, params.storage[fn.region]);\n\n      if ((_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic) {\n        delete apiFunction.eventTrigger.pubsubTopic;\n      }\n\n      opName = (await gcfV2.updateFunction(apiFunction)).name;\n    }\n\n    const pollerOptions = Object.assign(Object.assign({}, pollerOptionsByPlatform[fn.platform]), {\n      pollerName: `update-${fnName}`,\n      operationResourceName: opName,\n      onPoll\n    });\n    const cloudFunction = await operation_poller_1.pollOperation(pollerOptions);\n\n    if (!backend.isEventTrigger(fn.trigger) && fn.trigger.invoker) {\n      try {\n        if (fn.platform === \"gcfv1\") {\n          await gcf.setInvokerUpdate(params.projectId, fnName, fn.trigger.invoker);\n        } else {\n          const serviceName = cloudFunction.serviceConfig.service;\n          cloudrun.setInvokerUpdate(params.projectId, serviceName, fn.trigger.invoker);\n        }\n      } catch (err) {\n        params.errorHandler.record(\"error\", fnName, \"set invoker\", err.message);\n      }\n    }\n\n    if (\"concurrency\" in fn) {\n      if (fn.platform === \"gcfv1\") {\n        throw new error_1.FirebaseError(\"Precondition failed: GCFv1 does not support concurrency\");\n      } else {\n        await setConcurrency(cloudFunction.serviceConfig.service, fn.concurrency || 80);\n      }\n    }\n  };\n\n  return {\n    run,\n    data: fn,\n    operationType: \"update\"\n  };\n}\n\nexports.updateFunctionTask = updateFunctionTask;\n\nfunction deleteFunctionTask(params, fn) {\n  const fnName = backend.functionName(fn);\n\n  const run = async () => {\n    utils.logBullet(clc.bold.cyan(\"functions: \") + \"deleting function \" + clc.bold(helper.getFunctionLabel(fnName)) + \"...\");\n    let res;\n\n    if (fn.platform == \"gcfv1\") {\n      res = await gcf.deleteFunction(fnName);\n    } else {\n      res = await gcfV2.deleteFunction(fnName);\n    }\n\n    const pollerOptions = Object.assign(Object.assign({}, pollerOptionsByPlatform[fn.platform]), {\n      pollerName: `delete-${fnName}`,\n      operationResourceName: res.name\n    });\n    await operation_poller_1.pollOperation(pollerOptions);\n  };\n\n  return {\n    run,\n    data: fn,\n    operationType: \"delete\"\n  };\n}\n\nexports.deleteFunctionTask = deleteFunctionTask;\n\nasync function setConcurrency(name, concurrency) {\n  const err = null;\n\n  while (true) {\n    const service = await cloudrun.getService(name);\n    delete service.status;\n    delete service.spec.template.metadata.name;\n    service.spec.template.spec.containerConcurrency = concurrency;\n\n    try {\n      await cloudrun.replaceService(name, service);\n      return;\n    } catch (err) {\n      if (err.status !== 409) {\n        throw new error_1.FirebaseError(\"Unexpected error while trying to set concurrency\", {\n          original: err\n        });\n      }\n    }\n  }\n}\n\nfunction functionsDeploymentHandler(timer, errorHandler) {\n  return async task => {\n    var _a, _b, _c, _d;\n\n    let result;\n    const fnName = backend.functionName(task.data);\n\n    try {\n      timer.startTimer(fnName, task.operationType);\n      result = await task.run();\n      helper.printSuccess(task.data, task.operationType);\n      const duration = timer.endTimer(fnName);\n      track_1.track(\"function_deploy_success\", backend.triggerTag(task.data), duration);\n    } catch (err) {\n      if (((_c = (_b = (_a = err.original) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.response) === null || _c === void 0 ? void 0 : _c.statusCode) === 429) {\n        throw err;\n      }\n\n      errorHandler.record(\"error\", fnName, task.operationType, ((_d = err.original) === null || _d === void 0 ? void 0 : _d.message) || \"\");\n      const duration = timer.endTimer(fnName);\n      track_1.track(\"function_deploy_failure\", backend.triggerTag(task.data), duration);\n    }\n\n    return result;\n  };\n}\n\nexports.functionsDeploymentHandler = functionsDeploymentHandler;\n\nasync function runRegionalFunctionDeployment(params, region, regionalDeployment, queue) {\n  let resolveToken;\n  const getRealToken = new Promise(resolve => resolveToken = resolve);\n  let firstToken = true;\n\n  const getToken = () => {\n    if (firstToken) {\n      firstToken = false;\n      return Promise.resolve(undefined);\n    }\n\n    return getRealToken;\n  };\n\n  const onPollFn = op => {\n    var _a, _b;\n\n    if (((_a = op.metadata) === null || _a === void 0 ? void 0 : _a.sourceToken) || op.done) {\n      logger_1.logger.debug(`Got sourceToken ${op.metadata.sourceToken} for region ${region}`);\n      resolveToken((_b = op.metadata) === null || _b === void 0 ? void 0 : _b.sourceToken);\n    }\n  };\n\n  const deploy = async (functionSpec, createTask) => {\n    functionSpec.labels = Object.assign(Object.assign({}, functionSpec.labels || {}), deploymentTool.labels());\n    let task;\n\n    if (functionSpec.platform == \"gcfv2\") {\n      task = createTask(params, functionSpec, undefined, () => undefined);\n    } else {\n      const sourceToken = await getToken();\n      task = createTask(params, functionSpec, sourceToken, onPollFn);\n    }\n\n    return queue.run(task);\n  };\n\n  const deploys = [];\n  deploys.push(...regionalDeployment.functionsToCreate.map(fn => deploy(fn, createFunctionTask)));\n  deploys.push(...regionalDeployment.functionsToUpdate.map(async update => {\n    if (update.deleteAndRecreate) {\n      await queue.run(deleteFunctionTask(params, update.func));\n      return deploy(update.func, createFunctionTask);\n    } else {\n      return deploy(update.func, updateFunctionTask);\n    }\n  }));\n  await Promise.all(deploys);\n  const deletes = regionalDeployment.functionsToDelete.map(async fn => {\n    const task = deleteFunctionTask(params, fn);\n    await queue.run(task);\n  });\n  await Promise.all(deletes);\n}\n\nexports.runRegionalFunctionDeployment = runRegionalFunctionDeployment;\n\nfunction upsertScheduleTask(params, schedule, appEngineLocation) {\n  const run = async () => {\n    const job = cloudscheduler.jobFromSpec(schedule, appEngineLocation);\n    await cloudscheduler.createOrReplaceJob(job);\n  };\n\n  return {\n    run,\n    data: schedule,\n    operationType: \"upsert schedule\"\n  };\n}\n\nexports.upsertScheduleTask = upsertScheduleTask;\n\nfunction deleteScheduleTask(params, schedule, appEngineLocation) {\n  const run = async () => {\n    const jobName = backend.scheduleName(schedule, appEngineLocation);\n    await cloudscheduler.deleteJob(jobName);\n  };\n\n  return {\n    run,\n    data: schedule,\n    operationType: \"delete schedule\"\n  };\n}\n\nexports.deleteScheduleTask = deleteScheduleTask;\n\nfunction deleteTopicTask(params, topic) {\n  const run = async () => {\n    const topicName = backend.topicName(topic);\n    await pubsub.deleteTopic(topicName);\n  };\n\n  return {\n    run,\n    data: topic,\n    operationType: \"delete topic\"\n  };\n}\n\nexports.deleteTopicTask = deleteTopicTask;\n\nexports.schedulerDeploymentHandler = errorHandler => async task => {\n  try {\n    const result = await task.run();\n    helper.printSuccess(task.data.targetService, task.operationType);\n    return result;\n  } catch (err) {\n    if (err.status === 429) {\n      throw err;\n    } else if (err.status !== 404) {\n      errorHandler.record(\"error\", backend.functionName(task.data.targetService), task.operationType, err.message || \"\");\n    }\n  }\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/tasks.js"],"names":["Object","defineProperty","exports","value","schedulerDeploymentHandler","deleteTopicTask","deleteScheduleTask","upsertScheduleTask","runRegionalFunctionDeployment","functionsDeploymentHandler","deleteFunctionTask","updateFunctionTask","createFunctionTask","clc","require","logger_1","operation_poller_1","api_1","runtimes_1","backend","cloudscheduler","deploymentTool","gcf","gcfV2","cloudrun","helper","pubsub","utils","error_1","track_1","gcfV1PollerOptions","apiOrigin","functionsOrigin","apiVersion","API_VERSION","masterTimeout","gcfV2PollerOptions","functionsV2Origin","pollerOptionsByPlatform","gcfv1","gcfv2","params","fn","sourceToken","onPoll","fnName","functionName","run","_a","logBullet","bold","cyan","getHumanFriendlyRuntimeName","runtime","getFunctionLabel","op","platform","apiFunction","functionFromSpec","sourceUrl","createFunction","storage","region","eventTrigger","pubsubTopic","getTopic","err","status","FirebaseError","original","createTopic","name","cloudFunction","pollOperation","assign","pollerName","operationResourceName","isEventTrigger","trigger","invoker","setInvokerCreate","projectId","serviceName","serviceConfig","service","errorHandler","record","message","setConcurrency","concurrency","data","operationType","opName","updateFunction","pollerOptions","setInvokerUpdate","res","deleteFunction","getService","spec","template","metadata","containerConcurrency","replaceService","timer","task","_b","_c","_d","result","startTimer","printSuccess","duration","endTimer","track","triggerTag","context","response","statusCode","regionalDeployment","queue","resolveToken","getRealToken","Promise","resolve","firstToken","getToken","undefined","onPollFn","done","logger","debug","deploy","functionSpec","createTask","labels","deploys","push","functionsToCreate","map","functionsToUpdate","update","deleteAndRecreate","func","all","deletes","functionsToDelete","schedule","appEngineLocation","job","jobFromSpec","createOrReplaceJob","jobName","scheduleName","deleteJob","topic","topicName","deleteTopic","targetService"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.schedulerDeploymentHandler = exports.deleteTopicTask = exports.deleteScheduleTask = exports.upsertScheduleTask = exports.runRegionalFunctionDeployment = exports.functionsDeploymentHandler = exports.deleteFunctionTask = exports.updateFunctionTask = exports.createFunctionTask = void 0;\nconst clc = require(\"cli-color\");\nconst logger_1 = require(\"../../logger\");\nconst operation_poller_1 = require(\"../../operation-poller\");\nconst api_1 = require(\"../../api\");\nconst runtimes_1 = require(\"./runtimes\");\nconst backend = require(\"./backend\");\nconst cloudscheduler = require(\"../../gcp/cloudscheduler\");\nconst deploymentTool = require(\"../../deploymentTool\");\nconst gcf = require(\"../../gcp/cloudfunctions\");\nconst gcfV2 = require(\"../../gcp/cloudfunctionsv2\");\nconst cloudrun = require(\"../../gcp/run\");\nconst helper = require(\"./functionsDeployHelper\");\nconst pubsub = require(\"../../gcp/pubsub\");\nconst utils = require(\"../../utils\");\nconst error_1 = require(\"../../error\");\nconst track_1 = require(\"../../track\");\nconst gcfV1PollerOptions = {\n    apiOrigin: api_1.functionsOrigin,\n    apiVersion: gcf.API_VERSION,\n    masterTimeout: 25 * 60 * 1000,\n};\nconst gcfV2PollerOptions = {\n    apiOrigin: api_1.functionsV2Origin,\n    apiVersion: gcfV2.API_VERSION,\n    masterTimeout: 25 * 60 * 1000,\n};\nconst pollerOptionsByPlatform = {\n    gcfv1: gcfV1PollerOptions,\n    gcfv2: gcfV2PollerOptions,\n};\nfunction createFunctionTask(params, fn, sourceToken, onPoll) {\n    const fnName = backend.functionName(fn);\n    const run = async () => {\n        var _a;\n        utils.logBullet(clc.bold.cyan(\"functions: \") +\n            \"creating \" +\n            runtimes_1.getHumanFriendlyRuntimeName(fn.runtime) +\n            \" function \" +\n            clc.bold(helper.getFunctionLabel(fn)) +\n            \"...\");\n        let op;\n        if (fn.platform === \"gcfv1\") {\n            const apiFunction = gcf.functionFromSpec(fn, params.sourceUrl);\n            if (sourceToken) {\n                apiFunction.sourceToken = sourceToken;\n            }\n            op = await gcf.createFunction(apiFunction);\n        }\n        else {\n            const apiFunction = gcfV2.functionFromSpec(fn, params.storage[fn.region]);\n            if ((_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic) {\n                try {\n                    await pubsub.getTopic(apiFunction.eventTrigger.pubsubTopic);\n                }\n                catch (err) {\n                    if (err.status !== 404) {\n                        throw new error_1.FirebaseError(\"Unexpected error looking for Pub/Sub topic\", {\n                            original: err,\n                        });\n                    }\n                    await pubsub.createTopic({\n                        name: apiFunction.eventTrigger.pubsubTopic,\n                    });\n                }\n            }\n            op = await gcfV2.createFunction(apiFunction);\n        }\n        const cloudFunction = await operation_poller_1.pollOperation(Object.assign(Object.assign({}, pollerOptionsByPlatform[fn.platform]), { pollerName: `create-${fnName}`, operationResourceName: op.name, onPoll }));\n        if (!backend.isEventTrigger(fn.trigger)) {\n            const invoker = fn.trigger.invoker || [\"public\"];\n            if (invoker[0] !== \"private\") {\n                try {\n                    if (fn.platform === \"gcfv1\") {\n                        await gcf.setInvokerCreate(params.projectId, fnName, invoker);\n                    }\n                    else {\n                        const serviceName = cloudFunction.serviceConfig.service;\n                        cloudrun.setInvokerCreate(params.projectId, serviceName, invoker);\n                    }\n                }\n                catch (err) {\n                    params.errorHandler.record(\"error\", fnName, \"set invoker\", err.message);\n                }\n            }\n        }\n        if (fn.platform !== \"gcfv1\") {\n            await setConcurrency(cloudFunction.serviceConfig.service, fn.concurrency || 80);\n        }\n    };\n    return {\n        run,\n        data: fn,\n        operationType: \"create\",\n    };\n}\nexports.createFunctionTask = createFunctionTask;\nfunction updateFunctionTask(params, fn, sourceToken, onPoll) {\n    const fnName = backend.functionName(fn);\n    const run = async () => {\n        var _a;\n        utils.logBullet(clc.bold.cyan(\"functions: \") +\n            \"updating \" +\n            runtimes_1.getHumanFriendlyRuntimeName(fn.runtime) +\n            \" function \" +\n            clc.bold(helper.getFunctionLabel(fn)) +\n            \"...\");\n        let opName;\n        if (fn.platform == \"gcfv1\") {\n            const apiFunction = gcf.functionFromSpec(fn, params.sourceUrl);\n            if (sourceToken) {\n                apiFunction.sourceToken = sourceToken;\n            }\n            opName = (await gcf.updateFunction(apiFunction)).name;\n        }\n        else {\n            const apiFunction = gcfV2.functionFromSpec(fn, params.storage[fn.region]);\n            if ((_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic) {\n                delete apiFunction.eventTrigger.pubsubTopic;\n            }\n            opName = (await gcfV2.updateFunction(apiFunction)).name;\n        }\n        const pollerOptions = Object.assign(Object.assign({}, pollerOptionsByPlatform[fn.platform]), { pollerName: `update-${fnName}`, operationResourceName: opName, onPoll });\n        const cloudFunction = await operation_poller_1.pollOperation(pollerOptions);\n        if (!backend.isEventTrigger(fn.trigger) && fn.trigger.invoker) {\n            try {\n                if (fn.platform === \"gcfv1\") {\n                    await gcf.setInvokerUpdate(params.projectId, fnName, fn.trigger.invoker);\n                }\n                else {\n                    const serviceName = cloudFunction.serviceConfig.service;\n                    cloudrun.setInvokerUpdate(params.projectId, serviceName, fn.trigger.invoker);\n                }\n            }\n            catch (err) {\n                params.errorHandler.record(\"error\", fnName, \"set invoker\", err.message);\n            }\n        }\n        if (\"concurrency\" in fn) {\n            if (fn.platform === \"gcfv1\") {\n                throw new error_1.FirebaseError(\"Precondition failed: GCFv1 does not support concurrency\");\n            }\n            else {\n                await setConcurrency(cloudFunction.serviceConfig.service, fn.concurrency || 80);\n            }\n        }\n    };\n    return {\n        run,\n        data: fn,\n        operationType: \"update\",\n    };\n}\nexports.updateFunctionTask = updateFunctionTask;\nfunction deleteFunctionTask(params, fn) {\n    const fnName = backend.functionName(fn);\n    const run = async () => {\n        utils.logBullet(clc.bold.cyan(\"functions: \") +\n            \"deleting function \" +\n            clc.bold(helper.getFunctionLabel(fnName)) +\n            \"...\");\n        let res;\n        if (fn.platform == \"gcfv1\") {\n            res = await gcf.deleteFunction(fnName);\n        }\n        else {\n            res = await gcfV2.deleteFunction(fnName);\n        }\n        const pollerOptions = Object.assign(Object.assign({}, pollerOptionsByPlatform[fn.platform]), { pollerName: `delete-${fnName}`, operationResourceName: res.name });\n        await operation_poller_1.pollOperation(pollerOptions);\n    };\n    return {\n        run,\n        data: fn,\n        operationType: \"delete\",\n    };\n}\nexports.deleteFunctionTask = deleteFunctionTask;\nasync function setConcurrency(name, concurrency) {\n    const err = null;\n    while (true) {\n        const service = await cloudrun.getService(name);\n        delete service.status;\n        delete service.spec.template.metadata.name;\n        service.spec.template.spec.containerConcurrency = concurrency;\n        try {\n            await cloudrun.replaceService(name, service);\n            return;\n        }\n        catch (err) {\n            if (err.status !== 409) {\n                throw new error_1.FirebaseError(\"Unexpected error while trying to set concurrency\", {\n                    original: err,\n                });\n            }\n        }\n    }\n}\nfunction functionsDeploymentHandler(timer, errorHandler) {\n    return async (task) => {\n        var _a, _b, _c, _d;\n        let result;\n        const fnName = backend.functionName(task.data);\n        try {\n            timer.startTimer(fnName, task.operationType);\n            result = await task.run();\n            helper.printSuccess(task.data, task.operationType);\n            const duration = timer.endTimer(fnName);\n            track_1.track(\"function_deploy_success\", backend.triggerTag(task.data), duration);\n        }\n        catch (err) {\n            if (((_c = (_b = (_a = err.original) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.response) === null || _c === void 0 ? void 0 : _c.statusCode) === 429) {\n                throw err;\n            }\n            errorHandler.record(\"error\", fnName, task.operationType, ((_d = err.original) === null || _d === void 0 ? void 0 : _d.message) || \"\");\n            const duration = timer.endTimer(fnName);\n            track_1.track(\"function_deploy_failure\", backend.triggerTag(task.data), duration);\n        }\n        return result;\n    };\n}\nexports.functionsDeploymentHandler = functionsDeploymentHandler;\nasync function runRegionalFunctionDeployment(params, region, regionalDeployment, queue) {\n    let resolveToken;\n    const getRealToken = new Promise((resolve) => (resolveToken = resolve));\n    let firstToken = true;\n    const getToken = () => {\n        if (firstToken) {\n            firstToken = false;\n            return Promise.resolve(undefined);\n        }\n        return getRealToken;\n    };\n    const onPollFn = (op) => {\n        var _a, _b;\n        if (((_a = op.metadata) === null || _a === void 0 ? void 0 : _a.sourceToken) || op.done) {\n            logger_1.logger.debug(`Got sourceToken ${op.metadata.sourceToken} for region ${region}`);\n            resolveToken((_b = op.metadata) === null || _b === void 0 ? void 0 : _b.sourceToken);\n        }\n    };\n    const deploy = async (functionSpec, createTask) => {\n        functionSpec.labels = Object.assign(Object.assign({}, (functionSpec.labels || {})), deploymentTool.labels());\n        let task;\n        if (functionSpec.platform == \"gcfv2\") {\n            task = createTask(params, functionSpec, undefined, () => undefined);\n        }\n        else {\n            const sourceToken = await getToken();\n            task = createTask(params, functionSpec, sourceToken, onPollFn);\n        }\n        return queue.run(task);\n    };\n    const deploys = [];\n    deploys.push(...regionalDeployment.functionsToCreate.map((fn) => deploy(fn, createFunctionTask)));\n    deploys.push(...regionalDeployment.functionsToUpdate.map(async (update) => {\n        if (update.deleteAndRecreate) {\n            await queue.run(deleteFunctionTask(params, update.func));\n            return deploy(update.func, createFunctionTask);\n        }\n        else {\n            return deploy(update.func, updateFunctionTask);\n        }\n    }));\n    await Promise.all(deploys);\n    const deletes = regionalDeployment.functionsToDelete.map(async (fn) => {\n        const task = deleteFunctionTask(params, fn);\n        await queue.run(task);\n    });\n    await Promise.all(deletes);\n}\nexports.runRegionalFunctionDeployment = runRegionalFunctionDeployment;\nfunction upsertScheduleTask(params, schedule, appEngineLocation) {\n    const run = async () => {\n        const job = cloudscheduler.jobFromSpec(schedule, appEngineLocation);\n        await cloudscheduler.createOrReplaceJob(job);\n    };\n    return {\n        run,\n        data: schedule,\n        operationType: \"upsert schedule\",\n    };\n}\nexports.upsertScheduleTask = upsertScheduleTask;\nfunction deleteScheduleTask(params, schedule, appEngineLocation) {\n    const run = async () => {\n        const jobName = backend.scheduleName(schedule, appEngineLocation);\n        await cloudscheduler.deleteJob(jobName);\n    };\n    return {\n        run,\n        data: schedule,\n        operationType: \"delete schedule\",\n    };\n}\nexports.deleteScheduleTask = deleteScheduleTask;\nfunction deleteTopicTask(params, topic) {\n    const run = async () => {\n        const topicName = backend.topicName(topic);\n        await pubsub.deleteTopic(topicName);\n    };\n    return {\n        run,\n        data: topic,\n        operationType: \"delete topic\",\n    };\n}\nexports.deleteTopicTask = deleteTopicTask;\nexports.schedulerDeploymentHandler = (errorHandler) => async (task) => {\n    try {\n        const result = await task.run();\n        helper.printSuccess(task.data.targetService, task.operationType);\n        return result;\n    }\n    catch (err) {\n        if (err.status === 429) {\n            throw err;\n        }\n        else if (err.status !== 404) {\n            errorHandler.record(\"error\", backend.functionName(task.data.targetService), task.operationType, err.message || \"\");\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}