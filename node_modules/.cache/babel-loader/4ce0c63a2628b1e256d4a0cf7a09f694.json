{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar {\n  from,\n  of\n} = require('rxjs');\n\nvar runAsync = require('run-async');\n/**\n * Resolve a question property value if it is passed as a function.\n * This method will overwrite the property on the question object with the received value.\n * @param  {Object} question - Question object\n * @param  {String} prop     - Property to fetch name\n * @param  {Object} answers  - Answers object\n * @return {Rx.Observable}   - Observable emitting once value is known\n */\n\n\nexports.fetchAsyncQuestionProperty = function (question, prop, answers) {\n  if (!_.isFunction(question[prop])) {\n    return of(question);\n  }\n\n  return from(runAsync(question[prop])(answers).then(value => {\n    question[prop] = value;\n    return question;\n  }));\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/utils/utils.js"],"names":["_","require","from","of","runAsync","exports","fetchAsyncQuestionProperty","question","prop","answers","isFunction","then","value"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAI;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAeF,OAAO,CAAC,MAAD,CAA1B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,OAAO,CAACC,0BAAR,GAAqC,UAASC,QAAT,EAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;AACrE,MAAI,CAACT,CAAC,CAACU,UAAF,CAAaH,QAAQ,CAACC,IAAD,CAArB,CAAL,EAAmC;AACjC,WAAOL,EAAE,CAACI,QAAD,CAAT;AACD;;AAED,SAAOL,IAAI,CACTE,QAAQ,CAACG,QAAQ,CAACC,IAAD,CAAT,CAAR,CAAyBC,OAAzB,EAAkCE,IAAlC,CAAuCC,KAAK,IAAI;AAC9CL,IAAAA,QAAQ,CAACC,IAAD,CAAR,GAAiBI,KAAjB;AACA,WAAOL,QAAP;AACD,GAHD,CADS,CAAX;AAMD,CAXD","sourcesContent":["'use strict';\nvar _ = require('lodash');\nvar { from, of } = require('rxjs');\nvar runAsync = require('run-async');\n\n/**\n * Resolve a question property value if it is passed as a function.\n * This method will overwrite the property on the question object with the received value.\n * @param  {Object} question - Question object\n * @param  {String} prop     - Property to fetch name\n * @param  {Object} answers  - Answers object\n * @return {Rx.Observable}   - Observable emitting once value is known\n */\n\nexports.fetchAsyncQuestionProperty = function(question, prop, answers) {\n  if (!_.isFunction(question[prop])) {\n    return of(question);\n  }\n\n  return from(\n    runAsync(question[prop])(answers).then(value => {\n      question[prop] = value;\n      return question;\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"script"}