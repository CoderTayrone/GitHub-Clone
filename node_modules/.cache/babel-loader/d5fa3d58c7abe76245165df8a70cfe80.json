{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar {\n  FirebaseError\n} = require(\"./error\");\n\nmodule.exports = function (options) {\n  function numFilters(targetTypes) {\n    return _.filter(options.only, function (opt) {\n      var optChunks = opt.split(\":\");\n      return _.includes(targetTypes, optChunks[0]) && optChunks.length > 1;\n    }).length;\n  }\n\n  function targetContainsFilter(targetTypes) {\n    return numFilters(targetTypes) > 1;\n  }\n\n  function targetDoesNotContainFilter(targetTypes) {\n    return numFilters(targetTypes) === 0;\n  }\n\n  return new Promise(function (resolve, reject) {\n    if (!options.only) {\n      return resolve();\n    }\n\n    if (options.except) {\n      return reject(new FirebaseError(\"Cannot specify both --only and --except\", {\n        exit: 1\n      }));\n    }\n\n    if (targetContainsFilter([\"database\", \"storage\", \"hosting\"])) {\n      return reject(new FirebaseError(\"Filters specified with colons (e.g. --only functions:func1,functions:func2) are only supported for functions\", {\n        exit: 1\n      }));\n    }\n\n    if (targetContainsFilter([\"functions\"]) && targetDoesNotContainFilter([\"functions\"])) {\n      return reject(new FirebaseError('Cannot specify \"--only functions\" and \"--only functions:<filter>\" at the same time', {\n        exit: 1\n      }));\n    }\n\n    return resolve();\n  });\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/checkValidTargetFilters.js"],"names":["_","require","FirebaseError","module","exports","options","numFilters","targetTypes","filter","only","opt","optChunks","split","includes","length","targetContainsFilter","targetDoesNotContainFilter","Promise","resolve","reject","except","exit"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAoBD,OAAO,CAAC,SAAD,CAA/B;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AAChC,WAASC,UAAT,CAAoBC,WAApB,EAAiC;AAC7B,WAAOP,CAAC,CAACQ,MAAF,CAASH,OAAO,CAACI,IAAjB,EAAuB,UAAUC,GAAV,EAAe;AACzC,UAAIC,SAAS,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAhB;AACA,aAAOZ,CAAC,CAACa,QAAF,CAAWN,WAAX,EAAwBI,SAAS,CAAC,CAAD,CAAjC,KAAyCA,SAAS,CAACG,MAAV,GAAmB,CAAnE;AACH,KAHM,EAGJA,MAHH;AAIH;;AACD,WAASC,oBAAT,CAA8BR,WAA9B,EAA2C;AACvC,WAAOD,UAAU,CAACC,WAAD,CAAV,GAA0B,CAAjC;AACH;;AACD,WAASS,0BAAT,CAAoCT,WAApC,EAAiD;AAC7C,WAAOD,UAAU,CAACC,WAAD,CAAV,KAA4B,CAAnC;AACH;;AACD,SAAO,IAAIU,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,QAAI,CAACd,OAAO,CAACI,IAAb,EAAmB;AACf,aAAOS,OAAO,EAAd;AACH;;AACD,QAAIb,OAAO,CAACe,MAAZ,EAAoB;AAChB,aAAOD,MAAM,CAAC,IAAIjB,aAAJ,CAAkB,yCAAlB,EAA6D;AACvEmB,QAAAA,IAAI,EAAE;AADiE,OAA7D,CAAD,CAAb;AAGH;;AACD,QAAIN,oBAAoB,CAAC,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,CAAD,CAAxB,EAA8D;AAC1D,aAAOI,MAAM,CAAC,IAAIjB,aAAJ,CAAkB,8GAAlB,EAAkI;AAAEmB,QAAAA,IAAI,EAAE;AAAR,OAAlI,CAAD,CAAb;AACH;;AACD,QAAIN,oBAAoB,CAAC,CAAC,WAAD,CAAD,CAApB,IAAuCC,0BAA0B,CAAC,CAAC,WAAD,CAAD,CAArE,EAAsF;AAClF,aAAOG,MAAM,CAAC,IAAIjB,aAAJ,CAAkB,oFAAlB,EAAwG;AAAEmB,QAAAA,IAAI,EAAE;AAAR,OAAxG,CAAD,CAAb;AACH;;AACD,WAAOH,OAAO,EAAd;AACH,GAhBM,CAAP;AAiBH,CA9BD","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar { FirebaseError } = require(\"./error\");\nmodule.exports = function (options) {\n    function numFilters(targetTypes) {\n        return _.filter(options.only, function (opt) {\n            var optChunks = opt.split(\":\");\n            return _.includes(targetTypes, optChunks[0]) && optChunks.length > 1;\n        }).length;\n    }\n    function targetContainsFilter(targetTypes) {\n        return numFilters(targetTypes) > 1;\n    }\n    function targetDoesNotContainFilter(targetTypes) {\n        return numFilters(targetTypes) === 0;\n    }\n    return new Promise(function (resolve, reject) {\n        if (!options.only) {\n            return resolve();\n        }\n        if (options.except) {\n            return reject(new FirebaseError(\"Cannot specify both --only and --except\", {\n                exit: 1,\n            }));\n        }\n        if (targetContainsFilter([\"database\", \"storage\", \"hosting\"])) {\n            return reject(new FirebaseError(\"Filters specified with colons (e.g. --only functions:func1,functions:func2) are only supported for functions\", { exit: 1 }));\n        }\n        if (targetContainsFilter([\"functions\"]) && targetDoesNotContainFilter([\"functions\"])) {\n            return reject(new FirebaseError('Cannot specify \"--only functions\" and \"--only functions:<filter>\" at the same time', { exit: 1 }));\n        }\n        return resolve();\n    });\n};\n"]},"metadata":{},"sourceType":"script"}