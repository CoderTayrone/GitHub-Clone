{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../utils\");\n\nconst clc = require(\"cli-color\");\n\nconst command_1 = require(\"../command\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst error_1 = require(\"../error\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nmodule.exports = new command_1.Command(\"ext:dev:delete <extensionRef>\").description(\"delete an extension\").help(\"use this command to delete an extension, and make it unavailable for developers to install or reconfigure. \" + \"Specify the extension you want to delete using the format '<publisherId>/<extensionId>.\").before(requireAuth_1.requireAuth).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\").action(async extensionRef => {\n  const {\n    publisherId,\n    extensionId,\n    version\n  } = extensionsApi_1.parseRef(extensionRef);\n\n  if (version) {\n    throw new error_1.FirebaseError(`Deleting a single version is not currently supported. You can only delete ${clc.bold(\"ALL versions\")} of an extension. To delete all versions, please remove the version from the reference.`);\n  }\n\n  utils.logLabeledWarning(extensionsHelper_1.logPrefix, \"If you delete this extension, developers won't be able to install it. \" + \"For developers who currently have this extension installed, \" + \"it will continue to run and will appear as unpublished when \" + \"listed in the Firebase console or Firebase CLI.\");\n  utils.logLabeledWarning(\"This is a permanent action\", `Once deleted, you may never use the extension name '${clc.bold(extensionId)}' again.`);\n  await extensionsApi_1.getExtension(extensionRef);\n  const consent = await confirmDelete(publisherId, extensionId);\n\n  if (!consent) {\n    throw new error_1.FirebaseError(\"deletion cancelled.\");\n  }\n\n  await extensionsApi_1.deleteExtension(extensionRef);\n  utils.logLabeledSuccess(extensionsHelper_1.logPrefix, \"successfully deleted all versions of this extension.\");\n});\n\nasync function confirmDelete(publisherId, extensionId) {\n  const message = `You are about to delete ALL versions of ${clc.green(`${publisherId}/${extensionId}`)}.\\nDo you wish to continue? `;\n  return prompt_1.promptOnce({\n    type: \"confirm\",\n    message,\n    default: false\n  });\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-dev-extension-delete.js"],"names":["Object","defineProperty","exports","value","utils","require","clc","command_1","extensionsHelper_1","extensionsApi_1","prompt_1","requireAuth_1","error_1","checkMinRequiredVersion_1","module","Command","description","help","before","requireAuth","checkMinRequiredVersion","action","extensionRef","publisherId","extensionId","version","parseRef","FirebaseError","bold","logLabeledWarning","logPrefix","getExtension","consent","confirmDelete","deleteExtension","logLabeledSuccess","message","green","promptOnce","type","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMQ,yBAAyB,GAAGR,OAAO,CAAC,4BAAD,CAAzC;;AACAS,MAAM,CAACZ,OAAP,GAAiB,IAAIK,SAAS,CAACQ,OAAd,CAAsB,+BAAtB,EACZC,WADY,CACA,qBADA,EAEZC,IAFY,CAEP,gHACN,yFAHa,EAIZC,MAJY,CAILP,aAAa,CAACQ,WAJT,EAKZD,MALY,CAKLL,yBAAyB,CAACO,uBALrB,EAK8C,kBAL9C,EAMZC,MANY,CAML,MAAOC,YAAP,IAAwB;AAChC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,MAAwChB,eAAe,CAACiB,QAAhB,CAAyBJ,YAAzB,CAA9C;;AACA,MAAIG,OAAJ,EAAa;AACT,UAAM,IAAIb,OAAO,CAACe,aAAZ,CAA2B,6EAA4ErB,GAAG,CAACsB,IAAJ,CAAS,cAAT,CAAyB,yFAAhI,CAAN;AACH;;AACDxB,EAAAA,KAAK,CAACyB,iBAAN,CAAwBrB,kBAAkB,CAACsB,SAA3C,EAAsD,2EAClD,8DADkD,GAElD,8DAFkD,GAGlD,iDAHJ;AAIA1B,EAAAA,KAAK,CAACyB,iBAAN,CAAwB,4BAAxB,EAAuD,uDAAsDvB,GAAG,CAACsB,IAAJ,CAASJ,WAAT,CAAsB,UAAnI;AACA,QAAMf,eAAe,CAACsB,YAAhB,CAA6BT,YAA7B,CAAN;AACA,QAAMU,OAAO,GAAG,MAAMC,aAAa,CAACV,WAAD,EAAcC,WAAd,CAAnC;;AACA,MAAI,CAACQ,OAAL,EAAc;AACV,UAAM,IAAIpB,OAAO,CAACe,aAAZ,CAA0B,qBAA1B,CAAN;AACH;;AACD,QAAMlB,eAAe,CAACyB,eAAhB,CAAgCZ,YAAhC,CAAN;AACAlB,EAAAA,KAAK,CAAC+B,iBAAN,CAAwB3B,kBAAkB,CAACsB,SAA3C,EAAsD,sDAAtD;AACH,CAvBgB,CAAjB;;AAwBA,eAAeG,aAAf,CAA6BV,WAA7B,EAA0CC,WAA1C,EAAuD;AACnD,QAAMY,OAAO,GAAI,2CAA0C9B,GAAG,CAAC+B,KAAJ,CAAW,GAAEd,WAAY,IAAGC,WAAY,EAAxC,CAA2C,8BAAtG;AACA,SAAOd,QAAQ,CAAC4B,UAAT,CAAoB;AACvBC,IAAAA,IAAI,EAAE,SADiB;AAEvBH,IAAAA,OAFuB;AAGvBI,IAAAA,OAAO,EAAE;AAHc,GAApB,CAAP;AAKH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../utils\");\nconst clc = require(\"cli-color\");\nconst command_1 = require(\"../command\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\nconst prompt_1 = require(\"../prompt\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst error_1 = require(\"../error\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nmodule.exports = new command_1.Command(\"ext:dev:delete <extensionRef>\")\n    .description(\"delete an extension\")\n    .help(\"use this command to delete an extension, and make it unavailable for developers to install or reconfigure. \" +\n    \"Specify the extension you want to delete using the format '<publisherId>/<extensionId>.\")\n    .before(requireAuth_1.requireAuth)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\")\n    .action(async (extensionRef) => {\n    const { publisherId, extensionId, version } = extensionsApi_1.parseRef(extensionRef);\n    if (version) {\n        throw new error_1.FirebaseError(`Deleting a single version is not currently supported. You can only delete ${clc.bold(\"ALL versions\")} of an extension. To delete all versions, please remove the version from the reference.`);\n    }\n    utils.logLabeledWarning(extensionsHelper_1.logPrefix, \"If you delete this extension, developers won't be able to install it. \" +\n        \"For developers who currently have this extension installed, \" +\n        \"it will continue to run and will appear as unpublished when \" +\n        \"listed in the Firebase console or Firebase CLI.\");\n    utils.logLabeledWarning(\"This is a permanent action\", `Once deleted, you may never use the extension name '${clc.bold(extensionId)}' again.`);\n    await extensionsApi_1.getExtension(extensionRef);\n    const consent = await confirmDelete(publisherId, extensionId);\n    if (!consent) {\n        throw new error_1.FirebaseError(\"deletion cancelled.\");\n    }\n    await extensionsApi_1.deleteExtension(extensionRef);\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, \"successfully deleted all versions of this extension.\");\n});\nasync function confirmDelete(publisherId, extensionId) {\n    const message = `You are about to delete ALL versions of ${clc.green(`${publisherId}/${extensionId}`)}.\\nDo you wish to continue? `;\n    return prompt_1.promptOnce({\n        type: \"confirm\",\n        message,\n        default: false,\n    });\n}\n"]},"metadata":{},"sourceType":"script"}