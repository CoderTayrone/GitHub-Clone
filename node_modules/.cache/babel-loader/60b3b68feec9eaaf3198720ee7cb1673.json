{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requireAuth = void 0;\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst clc = require(\"cli-color\");\n\nconst api = require(\"./api\");\n\nconst apiv2 = require(\"./apiv2\");\n\nconst error_1 = require(\"./error\");\n\nconst logger_1 = require(\"./logger\");\n\nconst utils = require(\"./utils\");\n\nconst scopes = require(\"./scopes\");\n\nconst auth_1 = require(\"./auth\");\n\nconst AUTH_ERROR_MESSAGE = `Command requires authentication, please run ${clc.bold(\"firebase login\")}`;\nlet authClient;\n\nfunction getAuthClient(config) {\n  if (authClient) {\n    return authClient;\n  }\n\n  authClient = new google_auth_library_1.GoogleAuth(config);\n  return authClient;\n}\n\nasync function autoAuth(options, authScopes) {\n  const client = getAuthClient({\n    scopes: authScopes,\n    projectId: options.project\n  });\n  const token = await client.getAccessToken();\n  api.setAccessToken(token);\n  token !== null ? apiv2.setAccessToken(token) : false;\n}\n\nasync function requireAuth(options) {\n  api.setScopes([scopes.CLOUD_PLATFORM, scopes.FIREBASE_PLATFORM]);\n  options.authScopes = api.getScopes();\n  const tokens = options.tokens;\n  const user = options.user;\n  let tokenOpt = utils.getInheritedOption(options, \"token\");\n\n  if (tokenOpt) {\n    logger_1.logger.debug(\"> authorizing via --token option\");\n  } else if (process.env.FIREBASE_TOKEN) {\n    logger_1.logger.debug(\"> authorizing via FIREBASE_TOKEN environment variable\");\n  } else if (user) {\n    logger_1.logger.debug(`> authorizing via signed-in user (${user.email})`);\n  } else {\n    try {\n      return await autoAuth(options, options.authScopes);\n    } catch (e) {\n      throw new error_1.FirebaseError(`Failed to authenticate, have you run ${clc.bold(\"firebase login\")}?`, {\n        original: e\n      });\n    }\n  }\n\n  tokenOpt = tokenOpt || process.env.FIREBASE_TOKEN;\n\n  if (tokenOpt) {\n    auth_1.setRefreshToken(tokenOpt);\n    return;\n  }\n\n  if (!user || !tokens) {\n    throw new error_1.FirebaseError(AUTH_ERROR_MESSAGE);\n  }\n\n  auth_1.setActiveAccount(options, {\n    user,\n    tokens\n  });\n}\n\nexports.requireAuth = requireAuth;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/requireAuth.js"],"names":["Object","defineProperty","exports","value","requireAuth","google_auth_library_1","require","clc","api","apiv2","error_1","logger_1","utils","scopes","auth_1","AUTH_ERROR_MESSAGE","bold","authClient","getAuthClient","config","GoogleAuth","autoAuth","options","authScopes","client","projectId","project","token","getAccessToken","setAccessToken","setScopes","CLOUD_PLATFORM","FIREBASE_PLATFORM","getScopes","tokens","user","tokenOpt","getInheritedOption","logger","debug","process","env","FIREBASE_TOKEN","email","e","FirebaseError","original","setRefreshToken","setActiveAccount"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requireAuth = void 0;\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst clc = require(\"cli-color\");\nconst api = require(\"./api\");\nconst apiv2 = require(\"./apiv2\");\nconst error_1 = require(\"./error\");\nconst logger_1 = require(\"./logger\");\nconst utils = require(\"./utils\");\nconst scopes = require(\"./scopes\");\nconst auth_1 = require(\"./auth\");\nconst AUTH_ERROR_MESSAGE = `Command requires authentication, please run ${clc.bold(\"firebase login\")}`;\nlet authClient;\nfunction getAuthClient(config) {\n    if (authClient) {\n        return authClient;\n    }\n    authClient = new google_auth_library_1.GoogleAuth(config);\n    return authClient;\n}\nasync function autoAuth(options, authScopes) {\n    const client = getAuthClient({ scopes: authScopes, projectId: options.project });\n    const token = await client.getAccessToken();\n    api.setAccessToken(token);\n    token !== null ? apiv2.setAccessToken(token) : false;\n}\nasync function requireAuth(options) {\n    api.setScopes([scopes.CLOUD_PLATFORM, scopes.FIREBASE_PLATFORM]);\n    options.authScopes = api.getScopes();\n    const tokens = options.tokens;\n    const user = options.user;\n    let tokenOpt = utils.getInheritedOption(options, \"token\");\n    if (tokenOpt) {\n        logger_1.logger.debug(\"> authorizing via --token option\");\n    }\n    else if (process.env.FIREBASE_TOKEN) {\n        logger_1.logger.debug(\"> authorizing via FIREBASE_TOKEN environment variable\");\n    }\n    else if (user) {\n        logger_1.logger.debug(`> authorizing via signed-in user (${user.email})`);\n    }\n    else {\n        try {\n            return await autoAuth(options, options.authScopes);\n        }\n        catch (e) {\n            throw new error_1.FirebaseError(`Failed to authenticate, have you run ${clc.bold(\"firebase login\")}?`, { original: e });\n        }\n    }\n    tokenOpt = tokenOpt || process.env.FIREBASE_TOKEN;\n    if (tokenOpt) {\n        auth_1.setRefreshToken(tokenOpt);\n        return;\n    }\n    if (!user || !tokens) {\n        throw new error_1.FirebaseError(AUTH_ERROR_MESSAGE);\n    }\n    auth_1.setActiveAccount(options, { user, tokens });\n}\nexports.requireAuth = requireAuth;\n"]},"metadata":{},"sourceType":"script"}