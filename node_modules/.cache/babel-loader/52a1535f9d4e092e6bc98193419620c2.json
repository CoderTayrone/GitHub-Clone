{"ast":null,"code":"'use strict';\n\nvar tweetSodium = module.exports;\nimport nacl from 'tweetnacl';\nimport { blake2bInit, blake2bUpdate, blake2bFinal } from 'blakejs'; // Authenticated sealing only prepends the nonce to the ciphertext. Anonymous\n// sealing also prepends a random public key.\n\ntweetSodium.overheadLength = nacl.box.overheadLength + nacl.box.publicKeyLength; // Generates a 24 byte nonce that is a blake2b digest of the ephemeral\n// public key and the reipient's public key.\n//\n// Returns a 24-byte Uint8Array\n//\n// Parameters:\n// - epk - ephemeral public key Uint8Array\n// - publicKey - recipient's public key Uint8Array\n\nfunction sealNonce(epk, publicKey) {\n  var hash = blake2bInit(nacl.box.nonceLength, false);\n  blake2bUpdate(hash, epk);\n  blake2bUpdate(hash, publicKey);\n  return blake2bFinal(hash);\n} // Encrypt a message for a recipient.\n//\n// Returns a Uint8Array whose length is 48 bytes greater than the message's.\n//\n// Parameters:\n// - message - message Uint8Array to encrypt.\n// - publicKey - recipient's public key Uint8Array.\n\n\ntweetSodium.seal = function (message, publicKey) {\n  var ekp = nacl.box.keyPair();\n  var out = new Uint8Array(message.length + tweetSodium.overheadLength);\n  out.set(ekp.publicKey, 0);\n  var nonce = sealNonce(ekp.publicKey, publicKey);\n  var ct = nacl.box(message, nonce, publicKey, ekp.secretKey);\n  out.set(ct, nacl.box.publicKeyLength);\n  return out;\n}; // Decrypt the ciphertext message using the secret key.\n//\n// Returns a Uint8Array whose length is 48 bytes less than the ciphertext's.\n//\n// Parameters:\n// - ciphertext - encrypted message Uint8Array.\n// - secretKey - secret key Uint8Array.\n\n\ntweetSodium.sealOpen = function (ciphertext, publicKey, secretKey) {\n  var epk = ciphertext.slice(0, nacl.box.publicKeyLength);\n  var nonce = sealNonce(epk, publicKey);\n  ciphertext = ciphertext.slice(nacl.box.publicKeyLength);\n  return nacl.box.open(ciphertext, nonce, epk, secretKey);\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/tweetsodium/dist/index.esm.js"],"names":["tweetSodium","module","exports","nacl","blake2bInit","blake2bUpdate","blake2bFinal","overheadLength","box","publicKeyLength","sealNonce","epk","publicKey","hash","nonceLength","seal","message","ekp","keyPair","out","Uint8Array","length","set","nonce","ct","secretKey","sealOpen","ciphertext","slice","open"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,MAAM,CAACC,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,YAArC,QAAyD,SAAzD,C,CAAoE;AACpE;;AAEAN,WAAW,CAACO,cAAZ,GAA6BJ,IAAI,CAACK,GAAL,CAASD,cAAT,GAA0BJ,IAAI,CAACK,GAAL,CAASC,eAAhE,C,CAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,SAAxB,EAAmC;AACjC,MAAIC,IAAI,GAAGT,WAAW,CAACD,IAAI,CAACK,GAAL,CAASM,WAAV,EAAuB,KAAvB,CAAtB;AACAT,EAAAA,aAAa,CAACQ,IAAD,EAAOF,GAAP,CAAb;AACAN,EAAAA,aAAa,CAACQ,IAAD,EAAOD,SAAP,CAAb;AACA,SAAON,YAAY,CAACO,IAAD,CAAnB;AACD,C,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGAb,WAAW,CAACe,IAAZ,GAAmB,UAAUC,OAAV,EAAmBJ,SAAnB,EAA8B;AAC/C,MAAIK,GAAG,GAAGd,IAAI,CAACK,GAAL,CAASU,OAAT,EAAV;AACA,MAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeJ,OAAO,CAACK,MAAR,GAAiBrB,WAAW,CAACO,cAA5C,CAAV;AACAY,EAAAA,GAAG,CAACG,GAAJ,CAAQL,GAAG,CAACL,SAAZ,EAAuB,CAAvB;AACA,MAAIW,KAAK,GAAGb,SAAS,CAACO,GAAG,CAACL,SAAL,EAAgBA,SAAhB,CAArB;AACA,MAAIY,EAAE,GAAGrB,IAAI,CAACK,GAAL,CAASQ,OAAT,EAAkBO,KAAlB,EAAyBX,SAAzB,EAAoCK,GAAG,CAACQ,SAAxC,CAAT;AACAN,EAAAA,GAAG,CAACG,GAAJ,CAAQE,EAAR,EAAYrB,IAAI,CAACK,GAAL,CAASC,eAArB;AACA,SAAOU,GAAP;AACD,CARD,C,CAQG;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGAnB,WAAW,CAAC0B,QAAZ,GAAuB,UAAUC,UAAV,EAAsBf,SAAtB,EAAiCa,SAAjC,EAA4C;AACjE,MAAId,GAAG,GAAGgB,UAAU,CAACC,KAAX,CAAiB,CAAjB,EAAoBzB,IAAI,CAACK,GAAL,CAASC,eAA7B,CAAV;AACA,MAAIc,KAAK,GAAGb,SAAS,CAACC,GAAD,EAAMC,SAAN,CAArB;AACAe,EAAAA,UAAU,GAAGA,UAAU,CAACC,KAAX,CAAiBzB,IAAI,CAACK,GAAL,CAASC,eAA1B,CAAb;AACA,SAAON,IAAI,CAACK,GAAL,CAASqB,IAAT,CAAcF,UAAd,EAA0BJ,KAA1B,EAAiCZ,GAAjC,EAAsCc,SAAtC,CAAP;AACD,CALD","sourcesContent":["'use strict';\n\nvar tweetSodium = module.exports;\nimport nacl from 'tweetnacl';\nimport { blake2bInit, blake2bUpdate, blake2bFinal } from 'blakejs'; // Authenticated sealing only prepends the nonce to the ciphertext. Anonymous\n// sealing also prepends a random public key.\n\ntweetSodium.overheadLength = nacl.box.overheadLength + nacl.box.publicKeyLength; // Generates a 24 byte nonce that is a blake2b digest of the ephemeral\n// public key and the reipient's public key.\n//\n// Returns a 24-byte Uint8Array\n//\n// Parameters:\n// - epk - ephemeral public key Uint8Array\n// - publicKey - recipient's public key Uint8Array\n\nfunction sealNonce(epk, publicKey) {\n  var hash = blake2bInit(nacl.box.nonceLength, false);\n  blake2bUpdate(hash, epk);\n  blake2bUpdate(hash, publicKey);\n  return blake2bFinal(hash);\n} // Encrypt a message for a recipient.\n//\n// Returns a Uint8Array whose length is 48 bytes greater than the message's.\n//\n// Parameters:\n// - message - message Uint8Array to encrypt.\n// - publicKey - recipient's public key Uint8Array.\n\n\ntweetSodium.seal = function (message, publicKey) {\n  var ekp = nacl.box.keyPair();\n  var out = new Uint8Array(message.length + tweetSodium.overheadLength);\n  out.set(ekp.publicKey, 0);\n  var nonce = sealNonce(ekp.publicKey, publicKey);\n  var ct = nacl.box(message, nonce, publicKey, ekp.secretKey);\n  out.set(ct, nacl.box.publicKeyLength);\n  return out;\n}; // Decrypt the ciphertext message using the secret key.\n//\n// Returns a Uint8Array whose length is 48 bytes less than the ciphertext's.\n//\n// Parameters:\n// - ciphertext - encrypted message Uint8Array.\n// - secretKey - secret key Uint8Array.\n\n\ntweetSodium.sealOpen = function (ciphertext, publicKey, secretKey) {\n  var epk = ciphertext.slice(0, nacl.box.publicKeyLength);\n  var nonce = sealNonce(epk, publicKey);\n  ciphertext = ciphertext.slice(nacl.box.publicKeyLength);\n  return nacl.box.open(ciphertext, nonce, epk, secretKey);\n};\n"]},"metadata":{},"sourceType":"module"}