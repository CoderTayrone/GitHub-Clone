{"ast":null,"code":"'use strict';\n/**\n * `rawlist` type prompt\n */\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n\nvar {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Base = require('./base');\n\nvar Separator = require('../objects/separator');\n\nvar observe = require('../utils/events');\n\nvar Paginator = require('../utils/paginator');\n\nclass ExpandPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.validateChoices(this.opt.choices); // Add the default `help` (/expand) option\n\n    this.opt.choices.push({\n      key: 'h',\n      name: 'Help, list all options',\n      value: 'help'\n    });\n\n    this.opt.validate = choice => {\n      if (choice == null) {\n        return 'Please enter a valid command';\n      }\n\n      return choice !== 'help';\n    }; // Setup the default string (capitalize the default key)\n\n\n    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);\n    this.paginator = new Paginator(this.screen);\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb; // Save user answer and update prompt to show selected option.\n\n    var events = observe(this.rl);\n    var validation = this.handleSubmitEvents(events.line.pipe(map(this.getCurrentValue.bind(this))));\n    validation.success.forEach(this.onSubmit.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    this.keypressObs = events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init the prompt\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {ExpandPrompt} self\n   */\n\n\n  render(error, hint) {\n    var message = this.getQuestion();\n    var bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.answer);\n    } else if (this.status === 'expanded') {\n      var choicesStr = renderChoices(this.opt.choices, this.selectedKey);\n      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    if (hint) {\n      bottomContent = chalk.cyan('>> ') + hint;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getCurrentValue(input) {\n    if (!input) {\n      input = this.rawDefault;\n    }\n\n    var selected = this.opt.choices.where({\n      key: input.toLowerCase().trim()\n    })[0];\n\n    if (!selected) {\n      return null;\n    }\n\n    return selected.value;\n  }\n  /**\n   * Generate the prompt choices string\n   * @return {String}  Choices string\n   */\n\n\n  getChoices() {\n    var output = '';\n    this.opt.choices.forEach(choice => {\n      output += '\\n  ';\n\n      if (choice.type === 'separator') {\n        output += ' ' + choice;\n        return;\n      }\n\n      var choiceStr = choice.key + ') ' + choice.name;\n\n      if (this.selectedKey === choice.key) {\n        choiceStr = chalk.cyan(choiceStr);\n      }\n\n      output += choiceStr;\n    });\n    return output;\n  }\n\n  onError(state) {\n    if (state.value === 'help') {\n      this.selectedKey = '';\n      this.status = 'expanded';\n      this.render();\n      return;\n    }\n\n    this.render(state.isValid);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onSubmit(state) {\n    this.status = 'answered';\n    var choice = this.opt.choices.where({\n      value: state.value\n    })[0];\n    this.answer = choice.short || choice.name; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onKeypress() {\n    this.selectedKey = this.rl.line.toLowerCase();\n    var selected = this.opt.choices.where({\n      key: this.selectedKey\n    })[0];\n\n    if (this.status === 'expanded') {\n      this.render();\n    } else {\n      this.render(null, selected ? selected.name : null);\n    }\n  }\n  /**\n   * Validate the choices\n   * @param {Array} choices\n   */\n\n\n  validateChoices(choices) {\n    var formatError;\n    var errors = [];\n    var keymap = {};\n    choices.filter(Separator.exclude).forEach(choice => {\n      if (!choice.key || choice.key.length !== 1) {\n        formatError = true;\n      }\n\n      if (keymap[choice.key]) {\n        errors.push(choice.key);\n      }\n\n      keymap[choice.key] = true;\n      choice.key = String(choice.key).toLowerCase();\n    });\n\n    if (formatError) {\n      throw new Error('Format error: `key` param must be a single letter and is required.');\n    }\n\n    if (keymap.h) {\n      throw new Error('Reserved key error: `key` param cannot be `h` - this value is reserved.');\n    }\n\n    if (errors.length) {\n      throw new Error('Duplicate key error: `key` param must be unique. Duplicates: ' + _.uniq(errors).join(', '));\n    }\n  }\n  /**\n   * Generate a string out of the choices keys\n   * @param  {Array}  choices\n   * @param  {Number|String} default - the choice index or name to capitalize\n   * @return {String} The rendered choices key string\n   */\n\n\n  generateChoicesString(choices, defaultChoice) {\n    var defIndex = choices.realLength - 1;\n\n    if (_.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) {\n      defIndex = defaultChoice;\n    } else if (_.isString(defaultChoice)) {\n      let index = _.findIndex(choices.realChoices, ({\n        value\n      }) => value === defaultChoice);\n\n      defIndex = index === -1 ? defIndex : index;\n    }\n\n    var defStr = this.opt.choices.pluck('key');\n    this.rawDefault = defStr[defIndex];\n    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();\n    return defStr.join('');\n  }\n\n}\n/**\n * Function for rendering checkbox choices\n * @param  {String} pointer Selected key\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n  choices.forEach(choice => {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      output += ' ' + choice;\n      return;\n    }\n\n    var choiceStr = choice.key + ') ' + choice.name;\n\n    if (pointer === choice.key) {\n      choiceStr = chalk.cyan(choiceStr);\n    }\n\n    output += choiceStr;\n  });\n  return output;\n}\n\nmodule.exports = ExpandPrompt;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/prompts/expand.js"],"names":["_","require","chalk","map","takeUntil","Base","Separator","observe","Paginator","ExpandPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","validateChoices","push","key","name","value","validate","choice","default","generateChoicesString","paginator","screen","_run","cb","done","events","validation","handleSubmitEvents","line","pipe","getCurrentValue","bind","success","forEach","onSubmit","error","onError","keypressObs","keypress","onKeypress","render","hint","message","getQuestion","bottomContent","status","cyan","answer","choicesStr","renderChoices","selectedKey","paginate","pageSize","red","input","rawDefault","selected","where","toLowerCase","trim","getChoices","output","type","choiceStr","state","isValid","short","formatError","errors","keymap","filter","exclude","length","String","Error","h","uniq","join","defaultChoice","defIndex","realLength","isNumber","getChoice","isString","index","findIndex","realChoices","defStr","pluck","toUpperCase","pointer","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `rawlist` type prompt\n */\n\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar { map, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar Separator = require('../objects/separator');\nvar observe = require('../utils/events');\nvar Paginator = require('../utils/paginator');\n\nclass ExpandPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.validateChoices(this.opt.choices);\n\n    // Add the default `help` (/expand) option\n    this.opt.choices.push({\n      key: 'h',\n      name: 'Help, list all options',\n      value: 'help'\n    });\n\n    this.opt.validate = choice => {\n      if (choice == null) {\n        return 'Please enter a valid command';\n      }\n\n      return choice !== 'help';\n    };\n\n    // Setup the default string (capitalize the default key)\n    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);\n\n    this.paginator = new Paginator(this.screen);\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Save user answer and update prompt to show selected option.\n    var events = observe(this.rl);\n    var validation = this.handleSubmitEvents(\n      events.line.pipe(map(this.getCurrentValue.bind(this)))\n    );\n    validation.success.forEach(this.onSubmit.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    this.keypressObs = events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init the prompt\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ExpandPrompt} self\n   */\n\n  render(error, hint) {\n    var message = this.getQuestion();\n    var bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.answer);\n    } else if (this.status === 'expanded') {\n      var choicesStr = renderChoices(this.opt.choices, this.selectedKey);\n      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    if (hint) {\n      bottomContent = chalk.cyan('>> ') + hint;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getCurrentValue(input) {\n    if (!input) {\n      input = this.rawDefault;\n    }\n\n    var selected = this.opt.choices.where({ key: input.toLowerCase().trim() })[0];\n    if (!selected) {\n      return null;\n    }\n\n    return selected.value;\n  }\n\n  /**\n   * Generate the prompt choices string\n   * @return {String}  Choices string\n   */\n\n  getChoices() {\n    var output = '';\n\n    this.opt.choices.forEach(choice => {\n      output += '\\n  ';\n\n      if (choice.type === 'separator') {\n        output += ' ' + choice;\n        return;\n      }\n\n      var choiceStr = choice.key + ') ' + choice.name;\n      if (this.selectedKey === choice.key) {\n        choiceStr = chalk.cyan(choiceStr);\n      }\n\n      output += choiceStr;\n    });\n\n    return output;\n  }\n\n  onError(state) {\n    if (state.value === 'help') {\n      this.selectedKey = '';\n      this.status = 'expanded';\n      this.render();\n      return;\n    }\n\n    this.render(state.isValid);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(state) {\n    this.status = 'answered';\n    var choice = this.opt.choices.where({ value: state.value })[0];\n    this.answer = choice.short || choice.name;\n\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.selectedKey = this.rl.line.toLowerCase();\n    var selected = this.opt.choices.where({ key: this.selectedKey })[0];\n    if (this.status === 'expanded') {\n      this.render();\n    } else {\n      this.render(null, selected ? selected.name : null);\n    }\n  }\n\n  /**\n   * Validate the choices\n   * @param {Array} choices\n   */\n\n  validateChoices(choices) {\n    var formatError;\n    var errors = [];\n    var keymap = {};\n    choices.filter(Separator.exclude).forEach(choice => {\n      if (!choice.key || choice.key.length !== 1) {\n        formatError = true;\n      }\n\n      if (keymap[choice.key]) {\n        errors.push(choice.key);\n      }\n\n      keymap[choice.key] = true;\n      choice.key = String(choice.key).toLowerCase();\n    });\n\n    if (formatError) {\n      throw new Error(\n        'Format error: `key` param must be a single letter and is required.'\n      );\n    }\n\n    if (keymap.h) {\n      throw new Error(\n        'Reserved key error: `key` param cannot be `h` - this value is reserved.'\n      );\n    }\n\n    if (errors.length) {\n      throw new Error(\n        'Duplicate key error: `key` param must be unique. Duplicates: ' +\n          _.uniq(errors).join(', ')\n      );\n    }\n  }\n\n  /**\n   * Generate a string out of the choices keys\n   * @param  {Array}  choices\n   * @param  {Number|String} default - the choice index or name to capitalize\n   * @return {String} The rendered choices key string\n   */\n  generateChoicesString(choices, defaultChoice) {\n    var defIndex = choices.realLength - 1;\n    if (_.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) {\n      defIndex = defaultChoice;\n    } else if (_.isString(defaultChoice)) {\n      let index = _.findIndex(\n        choices.realChoices,\n        ({ value }) => value === defaultChoice\n      );\n      defIndex = index === -1 ? defIndex : index;\n    }\n\n    var defStr = this.opt.choices.pluck('key');\n    this.rawDefault = defStr[defIndex];\n    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();\n    return defStr.join('');\n  }\n}\n\n/**\n * Function for rendering checkbox choices\n * @param  {String} pointer Selected key\n * @return {String}         Rendered content\n */\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n\n  choices.forEach(choice => {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      output += ' ' + choice;\n      return;\n    }\n\n    var choiceStr = choice.key + ') ' + choice.name;\n    if (pointer === choice.key) {\n      choiceStr = chalk.cyan(choiceStr);\n    }\n\n    output += choiceStr;\n  });\n\n  return output;\n}\n\nmodule.exports = ExpandPrompt;\n"]},"metadata":{},"sourceType":"script"}