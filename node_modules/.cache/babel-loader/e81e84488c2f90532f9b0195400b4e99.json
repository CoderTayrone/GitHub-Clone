{"ast":null,"code":"var util = require('util'),\n    Match = require('../match');\n/**\n * This is a superclass for the individual detectors for\n * each of the detectable members of the ISO 2022 family\n * of encodings.\n */\n\n\nfunction ISO_2022() {}\n\nISO_2022.prototype.match = function (det) {\n  /**\n   * Matching function shared among the 2022 detectors JP, CN and KR\n   * Counts up the number of legal an unrecognized escape sequences in\n   * the sample of text, and computes a score based on the total number &\n   * the proportion that fit the encoding.\n   *\n   *\n   * @param text the byte buffer containing text to analyse\n   * @param textLen  the size of the text in the byte.\n   * @param escapeSequences the byte escape sequences to test for.\n   * @return match quality, in the range of 0-100.\n   */\n  var i, j;\n  var escN;\n  var hits = 0;\n  var misses = 0;\n  var shifts = 0;\n  var quality; // TODO: refactor me\n\n  var text = det.fInputBytes;\n  var textLen = det.fInputLen;\n\n  scanInput: for (i = 0; i < textLen; i++) {\n    if (text[i] == 0x1b) {\n      checkEscapes: for (escN = 0; escN < this.escapeSequences.length; escN++) {\n        var seq = this.escapeSequences[escN];\n        if (textLen - i < seq.length) continue checkEscapes;\n\n        for (j = 1; j < seq.length; j++) if (seq[j] != text[i + j]) continue checkEscapes;\n\n        hits++;\n        i += seq.length - 1;\n        continue scanInput;\n      }\n\n      misses++;\n    } // Shift in/out\n\n\n    if (text[i] == 0x0e || text[i] == 0x0f) shifts++;\n  }\n\n  if (hits == 0) return null; //\n  // Initial quality is based on relative proportion of recongized vs.\n  //   unrecognized escape sequences.\n  //   All good:  quality = 100;\n  //   half or less good: quality = 0;\n  //   linear inbetween.\n\n  quality = (100 * hits - 100 * misses) / (hits + misses); // Back off quality if there were too few escape sequences seen.\n  //   Include shifts in this computation, so that KR does not get penalized\n  //   for having only a single Escape sequence, but many shifts.\n\n  if (hits + shifts < 5) quality -= (5 - (hits + shifts)) * 10;\n  return quality <= 0 ? null : new Match(det, this, quality);\n};\n\nmodule.exports.ISO_2022_JP = function () {\n  this.name = function () {\n    return 'ISO-2022-JP';\n  };\n\n  this.escapeSequences = [[0x1b, 0x24, 0x28, 0x43], // KS X 1001:1992\n  [0x1b, 0x24, 0x28, 0x44], // JIS X 212-1990\n  [0x1b, 0x24, 0x40], // JIS C 6226-1978\n  [0x1b, 0x24, 0x41], // GB 2312-80\n  [0x1b, 0x24, 0x42], // JIS X 208-1983\n  [0x1b, 0x26, 0x40], // JIS X 208 1990, 1997\n  [0x1b, 0x28, 0x42], // ASCII\n  [0x1b, 0x28, 0x48], // JIS-Roman\n  [0x1b, 0x28, 0x49], // Half-width katakana\n  [0x1b, 0x28, 0x4a], // JIS-Roman\n  [0x1b, 0x2e, 0x41], // ISO 8859-1\n  [0x1b, 0x2e, 0x46] // ISO 8859-7\n  ];\n};\n\nutil.inherits(module.exports.ISO_2022_JP, ISO_2022);\n\nmodule.exports.ISO_2022_KR = function () {\n  this.name = function () {\n    return 'ISO-2022-KR';\n  };\n\n  this.escapeSequences = [[0x1b, 0x24, 0x29, 0x43]];\n};\n\nutil.inherits(module.exports.ISO_2022_KR, ISO_2022);\n\nmodule.exports.ISO_2022_CN = function () {\n  this.name = function () {\n    return 'ISO-2022-CN';\n  };\n\n  this.escapeSequences = [[0x1b, 0x24, 0x29, 0x41], // GB 2312-80\n  [0x1b, 0x24, 0x29, 0x47], // CNS 11643-1992 Plane 1\n  [0x1b, 0x24, 0x2A, 0x48], // CNS 11643-1992 Plane 2\n  [0x1b, 0x24, 0x29, 0x45], // ISO-IR-165\n  [0x1b, 0x24, 0x2B, 0x49], // CNS 11643-1992 Plane 3\n  [0x1b, 0x24, 0x2B, 0x4A], // CNS 11643-1992 Plane 4\n  [0x1b, 0x24, 0x2B, 0x4B], // CNS 11643-1992 Plane 5\n  [0x1b, 0x24, 0x2B, 0x4C], // CNS 11643-1992 Plane 6\n  [0x1b, 0x24, 0x2B, 0x4D], // CNS 11643-1992 Plane 7\n  [0x1b, 0x4e], // SS2\n  [0x1b, 0x4f] // SS3\n  ];\n};\n\nutil.inherits(module.exports.ISO_2022_CN, ISO_2022);","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/chardet/encoding/iso2022.js"],"names":["util","require","Match","ISO_2022","prototype","match","det","i","j","escN","hits","misses","shifts","quality","text","fInputBytes","textLen","fInputLen","scanInput","checkEscapes","escapeSequences","length","seq","module","exports","ISO_2022_JP","name","inherits","ISO_2022_KR","ISO_2022_CN"],"mappings":"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","sourcesContent":["var util = require('util'),\n  Match = require ('../match');\n\n\n/**\n * This is a superclass for the individual detectors for\n * each of the detectable members of the ISO 2022 family\n * of encodings.\n */\n\nfunction ISO_2022() {}\n\nISO_2022.prototype.match = function(det) {\n\n  /**\n   * Matching function shared among the 2022 detectors JP, CN and KR\n   * Counts up the number of legal an unrecognized escape sequences in\n   * the sample of text, and computes a score based on the total number &\n   * the proportion that fit the encoding.\n   *\n   *\n   * @param text the byte buffer containing text to analyse\n   * @param textLen  the size of the text in the byte.\n   * @param escapeSequences the byte escape sequences to test for.\n   * @return match quality, in the range of 0-100.\n   */\n\n  var i, j;\n  var escN;\n  var hits   = 0;\n  var misses = 0;\n  var shifts = 0;\n  var quality;\n\n  // TODO: refactor me\n  var text = det.fInputBytes;\n  var textLen = det.fInputLen;\n\n  scanInput:\n    for (i = 0; i < textLen; i++) {\n      if (text[i] == 0x1b) {\n        checkEscapes:\n          for (escN = 0; escN < this.escapeSequences.length; escN++) {\n            var seq = this.escapeSequences[escN];\n\n            if ((textLen - i) < seq.length)\n              continue checkEscapes;\n\n            for (j = 1; j < seq.length; j++)\n              if (seq[j] != text[i + j])\n                continue checkEscapes;\n\n\n            hits++;\n            i += seq.length - 1;\n            continue scanInput;\n          }\n\n          misses++;\n      }\n\n      // Shift in/out\n      if (text[i] == 0x0e || text[i] == 0x0f)\n        shifts++;\n\n    }\n\n  if (hits == 0)\n    return null;\n\n  //\n  // Initial quality is based on relative proportion of recongized vs.\n  //   unrecognized escape sequences.\n  //   All good:  quality = 100;\n  //   half or less good: quality = 0;\n  //   linear inbetween.\n  quality = (100 * hits - 100 * misses) / (hits + misses);\n\n  // Back off quality if there were too few escape sequences seen.\n  //   Include shifts in this computation, so that KR does not get penalized\n  //   for having only a single Escape sequence, but many shifts.\n  if (hits + shifts < 5)\n    quality -= (5 - (hits + shifts)) * 10;\n\n  return quality <= 0 ? null : new Match(det, this, quality);\n};\n\nmodule.exports.ISO_2022_JP = function() {\n  this.name = function() {\n    return 'ISO-2022-JP';\n  };\n  this.escapeSequences = [\n    [ 0x1b, 0x24, 0x28, 0x43 ],   // KS X 1001:1992\n    [ 0x1b, 0x24, 0x28, 0x44 ],   // JIS X 212-1990\n    [ 0x1b, 0x24, 0x40 ],         // JIS C 6226-1978\n    [ 0x1b, 0x24, 0x41 ],         // GB 2312-80\n    [ 0x1b, 0x24, 0x42 ],         // JIS X 208-1983\n    [ 0x1b, 0x26, 0x40 ],         // JIS X 208 1990, 1997\n    [ 0x1b, 0x28, 0x42 ],         // ASCII\n    [ 0x1b, 0x28, 0x48 ],         // JIS-Roman\n    [ 0x1b, 0x28, 0x49 ],         // Half-width katakana\n    [ 0x1b, 0x28, 0x4a ],         // JIS-Roman\n    [ 0x1b, 0x2e, 0x41 ],         // ISO 8859-1\n    [ 0x1b, 0x2e, 0x46 ]          // ISO 8859-7\n  ];\n};\nutil.inherits(module.exports.ISO_2022_JP, ISO_2022);\n\n\n\nmodule.exports.ISO_2022_KR = function() {\n  this.name = function() {\n    return 'ISO-2022-KR';\n  };\n  this.escapeSequences = [\n    [ 0x1b, 0x24, 0x29, 0x43 ]\n  ];\n};\nutil.inherits(module.exports.ISO_2022_KR, ISO_2022);\n\n\n\nmodule.exports.ISO_2022_CN = function() {\n  this.name = function() {\n    return 'ISO-2022-CN';\n  };\n  this.escapeSequences = [\n    [ 0x1b, 0x24, 0x29, 0x41 ],   // GB 2312-80\n    [ 0x1b, 0x24, 0x29, 0x47 ],   // CNS 11643-1992 Plane 1\n    [ 0x1b, 0x24, 0x2A, 0x48 ],   // CNS 11643-1992 Plane 2\n    [ 0x1b, 0x24, 0x29, 0x45 ],   // ISO-IR-165\n    [ 0x1b, 0x24, 0x2B, 0x49 ],   // CNS 11643-1992 Plane 3\n    [ 0x1b, 0x24, 0x2B, 0x4A ],   // CNS 11643-1992 Plane 4\n    [ 0x1b, 0x24, 0x2B, 0x4B ],   // CNS 11643-1992 Plane 5\n    [ 0x1b, 0x24, 0x2B, 0x4C ],   // CNS 11643-1992 Plane 6\n    [ 0x1b, 0x24, 0x2B, 0x4D ],   // CNS 11643-1992 Plane 7\n    [ 0x1b, 0x4e ],               // SS2\n    [ 0x1b, 0x4f ]                // SS3\n  ];\n};\nutil.inherits(module.exports.ISO_2022_CN, ISO_2022);\n"]},"metadata":{},"sourceType":"script"}