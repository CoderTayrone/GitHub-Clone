{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initGitHub = void 0;\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst yaml = require(\"js-yaml\");\n\nconst js_yaml_1 = require(\"js-yaml\");\n\nconst ora = require(\"ora\");\n\nconst path = require(\"path\");\n\nconst sodium = require(\"tweetsodium\");\n\nconst auth_1 = require(\"../../../auth\");\n\nconst fsutils_1 = require(\"../../../fsutils\");\n\nconst iam_1 = require(\"../../../gcp/iam\");\n\nconst resourceManager_1 = require(\"../../../gcp/resourceManager\");\n\nconst logger_1 = require(\"../../../logger\");\n\nconst prompt_1 = require(\"../../../prompt\");\n\nconst utils_1 = require(\"../../../utils\");\n\nconst api_1 = require(\"../../../api\");\n\nconst apiv2_1 = require(\"../../../apiv2\");\n\nlet GIT_DIR;\nlet GITHUB_DIR;\nlet WORKFLOW_DIR;\nlet YML_FULL_PATH_PULL_REQUEST;\nlet YML_FULL_PATH_MERGE;\nconst YML_PULL_REQUEST_FILENAME = \"firebase-hosting-pull-request.yml\";\nconst YML_MERGE_FILENAME = \"firebase-hosting-merge.yml\";\nconst CHECKOUT_GITHUB_ACTION_NAME = \"actions/checkout@v2\";\nconst HOSTING_GITHUB_ACTION_NAME = \"FirebaseExtended/action-hosting-deploy@v0\";\nconst githubApiClient = new apiv2_1.Client({\n  urlPrefix: api_1.githubApiOrigin,\n  auth: false\n});\n\nasync function initGitHub(setup, config, options) {\n  if (!setup.projectId) {\n    return utils_1.reject(\"Could not determine Project ID, can't set up GitHub workflow.\", {\n      exit: 1\n    });\n  }\n\n  logger_1.logger.info();\n  const gitRoot = getGitFolderPath();\n  GIT_DIR = path.join(gitRoot, \".git\");\n  GITHUB_DIR = path.join(gitRoot, \".github\");\n  WORKFLOW_DIR = `${GITHUB_DIR}/workflows`;\n  YML_FULL_PATH_PULL_REQUEST = `${WORKFLOW_DIR}/${YML_PULL_REQUEST_FILENAME}`;\n  YML_FULL_PATH_MERGE = `${WORKFLOW_DIR}/${YML_MERGE_FILENAME}`;\n  utils_1.logBullet(\"Authorizing with GitHub to upload your service account to a GitHub repository's secrets store.\");\n  const ghAccessToken = await signInWithGitHub();\n  const userDetails = await getGitHubUserDetails(ghAccessToken);\n  const ghUserName = userDetails.login;\n  logger_1.logger.info();\n  utils_1.logSuccess(`Success! Logged into GitHub as ${cli_color_1.bold(ghUserName)}`);\n  logger_1.logger.info();\n  const {\n    repo,\n    key,\n    keyId\n  } = await promptForRepo(setup, ghAccessToken);\n  const {\n    default_branch: defaultBranch,\n    id: repoId\n  } = await getRepoDetails(repo, ghAccessToken);\n  const githubSecretName = `FIREBASE_SERVICE_ACCOUNT_${setup.projectId.replace(/-/g, \"_\").toUpperCase()}`;\n  const serviceAccountName = `github-action-${repoId}`;\n  const serviceAccountJSON = await createServiceAccountAndKeyWithRetry(setup, repo, serviceAccountName);\n  logger_1.logger.info();\n  utils_1.logSuccess(`Created service account ${cli_color_1.bold(serviceAccountName)} with Firebase Hosting admin permissions.`);\n  const spinnerSecrets = ora.default(`Uploading service account secrets to repository: ${repo}`);\n  spinnerSecrets.start();\n  const encryptedServiceAccountJSON = encryptServiceAccountJSON(serviceAccountJSON, key);\n  await uploadSecretToGitHub(repo, ghAccessToken, encryptedServiceAccountJSON, keyId, githubSecretName);\n  spinnerSecrets.stop();\n  utils_1.logSuccess(`Uploaded service account JSON to GitHub as secret ${cli_color_1.bold(githubSecretName)}.`);\n  utils_1.logBullet(`You can manage your secrets at https://github.com/${repo}/settings/secrets.`);\n  logger_1.logger.info();\n\n  if (setup.config.hosting.predeploy) {\n    utils_1.logBullet(`You have a predeploy script configured in firebase.json.`);\n  }\n\n  const {\n    script\n  } = await promptForBuildScript();\n  const ymlDeployDoc = loadYMLDeploy();\n  let shouldWriteYMLHostingFile = true;\n  let shouldWriteYMLDeployFile = false;\n\n  if (fs.existsSync(YML_FULL_PATH_PULL_REQUEST)) {\n    const {\n      overwrite\n    } = await promptForWriteYMLFile({\n      message: `GitHub workflow file for PR previews exists. Overwrite? ${YML_PULL_REQUEST_FILENAME}`\n    });\n    shouldWriteYMLHostingFile = overwrite;\n  }\n\n  if (shouldWriteYMLHostingFile) {\n    writeChannelActionYMLFile(YML_FULL_PATH_PULL_REQUEST, githubSecretName, setup.projectId, script);\n    logger_1.logger.info();\n    utils_1.logSuccess(`Created workflow file ${cli_color_1.bold(YML_FULL_PATH_PULL_REQUEST)}`);\n  }\n\n  const {\n    setupDeploys,\n    branch\n  } = await promptToSetupDeploys(ymlDeployDoc.branch || defaultBranch);\n\n  if (setupDeploys) {\n    if (ymlDeployDoc.exists) {\n      if (ymlDeployDoc.branch !== branch) {\n        shouldWriteYMLDeployFile = true;\n      } else {\n        const {\n          overwrite\n        } = await promptForWriteYMLFile({\n          message: `The GitHub workflow file for deploying to the live channel already exists. Overwrite? ${YML_MERGE_FILENAME}`\n        });\n        shouldWriteYMLDeployFile = overwrite;\n      }\n    } else {\n      shouldWriteYMLDeployFile = true;\n    }\n\n    if (shouldWriteYMLDeployFile) {\n      writeDeployToProdActionYMLFile(YML_FULL_PATH_MERGE, branch, githubSecretName, setup.projectId, script);\n      logger_1.logger.info();\n      utils_1.logSuccess(`Created workflow file ${cli_color_1.bold(YML_FULL_PATH_MERGE)}`);\n    }\n  }\n\n  logger_1.logger.info();\n  utils_1.logLabeledBullet(\"Action required\", `Visit this URL to revoke authorization for the Firebase CLI GitHub OAuth App:`);\n  logger_1.logger.info(cli_color_1.bold.underline(`https://github.com/settings/connections/applications/${api_1.githubClientId}`));\n  utils_1.logLabeledBullet(\"Action required\", `Push any new workflow file(s) to your repo`);\n}\n\nexports.initGitHub = initGitHub;\n\nfunction getGitFolderPath() {\n  const commandDir = process.cwd();\n  let projectRootDir = commandDir;\n\n  while (!fs.existsSync(path.resolve(projectRootDir, \".git\"))) {\n    const parentDir = path.dirname(projectRootDir);\n\n    if (parentDir === projectRootDir) {\n      utils_1.logBullet(`Didn't detect a .git folder. Assuming ${commandDir} is the project root.`);\n      return commandDir;\n    }\n\n    projectRootDir = parentDir;\n  }\n\n  utils_1.logBullet(`Detected a .git folder at ${projectRootDir}`);\n  return projectRootDir;\n}\n\nfunction defaultGithubRepo() {\n  const gitConfigPath = path.join(GIT_DIR, \"config\");\n\n  if (fs.existsSync(gitConfigPath)) {\n    const gitConfig = fs.readFileSync(gitConfigPath, \"utf8\");\n    const match = /github\\.com:(.+)\\.git/.exec(gitConfig);\n\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return undefined;\n}\n\nfunction loadYMLDeploy() {\n  if (fs.existsSync(YML_FULL_PATH_MERGE)) {\n    const {\n      on\n    } = loadYML(YML_FULL_PATH_MERGE);\n    const branch = on.push.branches[0];\n    return {\n      exists: true,\n      branch\n    };\n  } else {\n    return {\n      exists: false\n    };\n  }\n}\n\nfunction loadYML(ymlPath) {\n  return js_yaml_1.safeLoad(fs.readFileSync(ymlPath, \"utf8\"));\n}\n\nfunction mkdirNotExists(dir) {\n  if (!fsutils_1.dirExistsSync(dir)) {\n    fs.mkdirSync(dir);\n  }\n}\n\nfunction writeChannelActionYMLFile(ymlPath, secretName, projectId, script) {\n  const workflowConfig = {\n    name: \"Deploy to Firebase Hosting on PR\",\n    on: \"pull_request\",\n    jobs: {\n      [\"build_and_preview\"]: {\n        if: \"${{ github.event.pull_request.head.repo.full_name == github.repository }}\",\n        \"runs-on\": \"ubuntu-latest\",\n        steps: [{\n          uses: CHECKOUT_GITHUB_ACTION_NAME\n        }]\n      }\n    }\n  };\n\n  if (script) {\n    workflowConfig.jobs.build_and_preview.steps.push({\n      run: script\n    });\n  }\n\n  workflowConfig.jobs.build_and_preview.steps.push({\n    uses: HOSTING_GITHUB_ACTION_NAME,\n    with: {\n      repoToken: \"${{ secrets.GITHUB_TOKEN }}\",\n      firebaseServiceAccount: `\\${{ secrets.${secretName} }}`,\n      projectId: projectId\n    }\n  });\n  const ymlContents = `# This file was auto-generated by the Firebase CLI\n# https://github.com/firebase/firebase-tools\n\n${yaml.safeDump(workflowConfig)}`;\n  mkdirNotExists(GITHUB_DIR);\n  mkdirNotExists(WORKFLOW_DIR);\n  fs.writeFileSync(ymlPath, ymlContents, \"utf8\");\n}\n\nfunction writeDeployToProdActionYMLFile(ymlPath, branch, secretName, projectId, script) {\n  const workflowConfig = {\n    name: \"Deploy to Firebase Hosting on merge\",\n    on: {\n      push: {\n        branches: [branch || \"master\"]\n      }\n    },\n    jobs: {\n      [\"build_and_deploy\"]: {\n        \"runs-on\": \"ubuntu-latest\",\n        steps: [{\n          uses: CHECKOUT_GITHUB_ACTION_NAME\n        }]\n      }\n    }\n  };\n\n  if (script) {\n    workflowConfig.jobs.build_and_deploy.steps.push({\n      run: script\n    });\n  }\n\n  workflowConfig.jobs.build_and_deploy.steps.push({\n    uses: HOSTING_GITHUB_ACTION_NAME,\n    with: {\n      repoToken: \"${{ secrets.GITHUB_TOKEN }}\",\n      firebaseServiceAccount: `\\${{ secrets.${secretName} }}`,\n      channelId: \"live\",\n      projectId: projectId\n    }\n  });\n  const ymlContents = `# This file was auto-generated by the Firebase CLI\n# https://github.com/firebase/firebase-tools\n\n${yaml.safeDump(workflowConfig)}`;\n  mkdirNotExists(GITHUB_DIR);\n  mkdirNotExists(WORKFLOW_DIR);\n  fs.writeFileSync(ymlPath, ymlContents, \"utf8\");\n}\n\nasync function uploadSecretToGitHub(repo, ghAccessToken, encryptedServiceAccountJSON, keyId, secretName) {\n  const data = {\n    [\"encrypted_value\"]: encryptedServiceAccountJSON,\n    [\"key_id\"]: keyId\n  };\n  const headers = {\n    Authorization: `token ${ghAccessToken}`,\n    \"User-Agent\": \"Firebase CLI\"\n  };\n  return await githubApiClient.put(`/repos/${repo}/actions/secrets/${secretName}`, data, {\n    headers\n  });\n}\n\nasync function promptForRepo(options, ghAccessToken) {\n  let key = \"\";\n  let keyId = \"\";\n  const {\n    repo\n  } = await prompt_1.prompt(options, [{\n    type: \"input\",\n    name: \"repo\",\n    default: defaultGithubRepo(),\n    message: \"For which GitHub repository would you like to set up a GitHub workflow? (format: user/repository)\",\n    validate: async repo => {\n      try {\n        const {\n          body\n        } = await githubApiClient.get(`/repos/${repo}/actions/secrets/public-key`, {\n          headers: {\n            Authorization: `token ${ghAccessToken}`,\n            \"User-Agent\": \"Firebase CLI\"\n          },\n          queryParams: {\n            type: \"owner\"\n          }\n        });\n        key = body.key;\n        keyId = body.key_id;\n      } catch (e) {\n        if (e.status === 403) {\n          logger_1.logger.info();\n          logger_1.logger.info();\n          utils_1.logWarning(\"The provided authorization cannot be used with this repository. If this repository is in an organization, did you remember to grant access?\", \"error\");\n          logger_1.logger.info();\n          utils_1.logLabeledBullet(\"Action required\", `Visit this URL to ensure access has been granted to the appropriate organization(s) for the Firebase CLI GitHub OAuth App:`);\n          logger_1.logger.info(cli_color_1.bold.underline(`https://github.com/settings/connections/applications/${api_1.githubClientId}`));\n          logger_1.logger.info();\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n  return {\n    repo,\n    key,\n    keyId\n  };\n}\n\nasync function promptForBuildScript() {\n  const {\n    shouldSetupScript\n  } = await prompt_1.prompt({}, [{\n    type: \"confirm\",\n    name: \"shouldSetupScript\",\n    default: false,\n    message: \"Set up the workflow to run a build script before every deploy?\"\n  }]);\n\n  if (!shouldSetupScript) {\n    return {\n      script: undefined\n    };\n  }\n\n  const {\n    script\n  } = await prompt_1.prompt({}, [{\n    type: \"input\",\n    name: \"script\",\n    default: \"npm ci && npm run build\",\n    message: \"What script should be run before every deploy?\"\n  }]);\n  return {\n    script\n  };\n}\n\nasync function promptToSetupDeploys(defaultBranch) {\n  const {\n    setupDeploys\n  } = await prompt_1.prompt({}, [{\n    type: \"confirm\",\n    name: \"setupDeploys\",\n    default: true,\n    message: \"Set up automatic deployment to your site's live channel when a PR is merged?\"\n  }]);\n\n  if (!setupDeploys) {\n    return {\n      setupDeploys\n    };\n  }\n\n  const {\n    branch\n  } = await prompt_1.prompt({}, [{\n    type: \"input\",\n    name: \"branch\",\n    default: defaultBranch,\n    message: \"What is the name of the GitHub branch associated with your site's live channel?\"\n  }]);\n  return {\n    branch,\n    setupDeploys\n  };\n}\n\nasync function promptForWriteYMLFile({\n  message\n}) {\n  return await prompt_1.prompt({}, [{\n    type: \"confirm\",\n    name: \"overwrite\",\n    default: false,\n    message\n  }]);\n}\n\nasync function getGitHubUserDetails(ghAccessToken) {\n  const {\n    body: ghUserDetails\n  } = await githubApiClient.get(\"/user\", {\n    headers: {\n      Authorization: `token ${ghAccessToken}`,\n      \"User-Agent\": \"Firebase CLI\"\n    }\n  });\n  return ghUserDetails;\n}\n\nasync function getRepoDetails(repo, ghAccessToken) {\n  const {\n    body\n  } = await githubApiClient.get(`/repos/${repo}`, {\n    headers: {\n      Authorization: `token ${ghAccessToken}`,\n      \"User-Agent\": \"Firebase CLI\"\n    }\n  });\n  return body;\n}\n\nasync function signInWithGitHub() {\n  return await auth_1.loginGithub();\n}\n\nasync function createServiceAccountAndKeyWithRetry(options, repo, accountId) {\n  const spinnerServiceAccount = ora.default(\"Retrieving a service account.\");\n  spinnerServiceAccount.start();\n\n  try {\n    const serviceAccountJSON = await createServiceAccountAndKey(options, repo, accountId);\n    spinnerServiceAccount.stop();\n    return serviceAccountJSON;\n  } catch (e) {\n    spinnerServiceAccount.stop();\n\n    if (!e.message.includes(\"429\")) {\n      throw e;\n    }\n\n    spinnerServiceAccount.start();\n    await iam_1.deleteServiceAccount(options.projectId, `${accountId}@${options.projectId}.iam.gserviceaccount.com`);\n    const serviceAccountJSON = await createServiceAccountAndKey(options, repo, accountId);\n    spinnerServiceAccount.stop();\n    return serviceAccountJSON;\n  }\n}\n\nasync function createServiceAccountAndKey(options, repo, accountId) {\n  try {\n    await iam_1.createServiceAccount(options.projectId, accountId, `A service account with permission to deploy to Firebase Hosting for the GitHub repository ${repo}`, `GitHub Actions (${repo})`);\n  } catch (e) {\n    if (!e.message.includes(\"409\")) {\n      throw e;\n    }\n  }\n\n  const requiredRoles = [resourceManager_1.firebaseRoles.authAdmin, resourceManager_1.firebaseRoles.apiKeysViewer, resourceManager_1.firebaseRoles.hostingAdmin, resourceManager_1.firebaseRoles.runViewer];\n  await resourceManager_1.addServiceAccountToRoles(options.projectId, accountId, requiredRoles);\n  const serviceAccountKey = await iam_1.createServiceAccountKey(options.projectId, accountId);\n  const buf = Buffer.from(serviceAccountKey.privateKeyData, \"base64\");\n  const serviceAccountJSON = buf.toString();\n  return serviceAccountJSON;\n}\n\nfunction encryptServiceAccountJSON(serviceAccountJSON, key) {\n  const messageBytes = Buffer.from(serviceAccountJSON);\n  const keyBytes = Buffer.from(key, \"base64\");\n  const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n  return Buffer.from(encryptedBytes).toString(\"base64\");\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/hosting/github.js"],"names":["Object","defineProperty","exports","value","initGitHub","cli_color_1","require","fs","yaml","js_yaml_1","ora","path","sodium","auth_1","fsutils_1","iam_1","resourceManager_1","logger_1","prompt_1","utils_1","api_1","apiv2_1","GIT_DIR","GITHUB_DIR","WORKFLOW_DIR","YML_FULL_PATH_PULL_REQUEST","YML_FULL_PATH_MERGE","YML_PULL_REQUEST_FILENAME","YML_MERGE_FILENAME","CHECKOUT_GITHUB_ACTION_NAME","HOSTING_GITHUB_ACTION_NAME","githubApiClient","Client","urlPrefix","githubApiOrigin","auth","setup","config","options","projectId","reject","exit","logger","info","gitRoot","getGitFolderPath","join","logBullet","ghAccessToken","signInWithGitHub","userDetails","getGitHubUserDetails","ghUserName","login","logSuccess","bold","repo","key","keyId","promptForRepo","default_branch","defaultBranch","id","repoId","getRepoDetails","githubSecretName","replace","toUpperCase","serviceAccountName","serviceAccountJSON","createServiceAccountAndKeyWithRetry","spinnerSecrets","default","start","encryptedServiceAccountJSON","encryptServiceAccountJSON","uploadSecretToGitHub","stop","hosting","predeploy","script","promptForBuildScript","ymlDeployDoc","loadYMLDeploy","shouldWriteYMLHostingFile","shouldWriteYMLDeployFile","existsSync","overwrite","promptForWriteYMLFile","message","writeChannelActionYMLFile","setupDeploys","branch","promptToSetupDeploys","exists","writeDeployToProdActionYMLFile","logLabeledBullet","underline","githubClientId","commandDir","process","cwd","projectRootDir","resolve","parentDir","dirname","defaultGithubRepo","gitConfigPath","gitConfig","readFileSync","match","exec","undefined","on","loadYML","push","branches","ymlPath","safeLoad","mkdirNotExists","dir","dirExistsSync","mkdirSync","secretName","workflowConfig","name","jobs","if","steps","uses","build_and_preview","run","with","repoToken","firebaseServiceAccount","ymlContents","safeDump","writeFileSync","build_and_deploy","channelId","data","headers","Authorization","put","prompt","type","validate","body","get","queryParams","key_id","e","status","logWarning","shouldSetupScript","ghUserDetails","loginGithub","accountId","spinnerServiceAccount","createServiceAccountAndKey","includes","deleteServiceAccount","createServiceAccount","requiredRoles","firebaseRoles","authAdmin","apiKeysViewer","hostingAdmin","runViewer","addServiceAccountToRoles","serviceAccountKey","createServiceAccountKey","buf","Buffer","from","privateKeyData","toString","messageBytes","keyBytes","encryptedBytes","seal"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initGitHub = void 0;\nconst cli_color_1 = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst yaml = require(\"js-yaml\");\nconst js_yaml_1 = require(\"js-yaml\");\nconst ora = require(\"ora\");\nconst path = require(\"path\");\nconst sodium = require(\"tweetsodium\");\nconst auth_1 = require(\"../../../auth\");\nconst fsutils_1 = require(\"../../../fsutils\");\nconst iam_1 = require(\"../../../gcp/iam\");\nconst resourceManager_1 = require(\"../../../gcp/resourceManager\");\nconst logger_1 = require(\"../../../logger\");\nconst prompt_1 = require(\"../../../prompt\");\nconst utils_1 = require(\"../../../utils\");\nconst api_1 = require(\"../../../api\");\nconst apiv2_1 = require(\"../../../apiv2\");\nlet GIT_DIR;\nlet GITHUB_DIR;\nlet WORKFLOW_DIR;\nlet YML_FULL_PATH_PULL_REQUEST;\nlet YML_FULL_PATH_MERGE;\nconst YML_PULL_REQUEST_FILENAME = \"firebase-hosting-pull-request.yml\";\nconst YML_MERGE_FILENAME = \"firebase-hosting-merge.yml\";\nconst CHECKOUT_GITHUB_ACTION_NAME = \"actions/checkout@v2\";\nconst HOSTING_GITHUB_ACTION_NAME = \"FirebaseExtended/action-hosting-deploy@v0\";\nconst githubApiClient = new apiv2_1.Client({ urlPrefix: api_1.githubApiOrigin, auth: false });\nasync function initGitHub(setup, config, options) {\n    if (!setup.projectId) {\n        return utils_1.reject(\"Could not determine Project ID, can't set up GitHub workflow.\", { exit: 1 });\n    }\n    logger_1.logger.info();\n    const gitRoot = getGitFolderPath();\n    GIT_DIR = path.join(gitRoot, \".git\");\n    GITHUB_DIR = path.join(gitRoot, \".github\");\n    WORKFLOW_DIR = `${GITHUB_DIR}/workflows`;\n    YML_FULL_PATH_PULL_REQUEST = `${WORKFLOW_DIR}/${YML_PULL_REQUEST_FILENAME}`;\n    YML_FULL_PATH_MERGE = `${WORKFLOW_DIR}/${YML_MERGE_FILENAME}`;\n    utils_1.logBullet(\"Authorizing with GitHub to upload your service account to a GitHub repository's secrets store.\");\n    const ghAccessToken = await signInWithGitHub();\n    const userDetails = await getGitHubUserDetails(ghAccessToken);\n    const ghUserName = userDetails.login;\n    logger_1.logger.info();\n    utils_1.logSuccess(`Success! Logged into GitHub as ${cli_color_1.bold(ghUserName)}`);\n    logger_1.logger.info();\n    const { repo, key, keyId } = await promptForRepo(setup, ghAccessToken);\n    const { default_branch: defaultBranch, id: repoId } = await getRepoDetails(repo, ghAccessToken);\n    const githubSecretName = `FIREBASE_SERVICE_ACCOUNT_${setup.projectId\n        .replace(/-/g, \"_\")\n        .toUpperCase()}`;\n    const serviceAccountName = `github-action-${repoId}`;\n    const serviceAccountJSON = await createServiceAccountAndKeyWithRetry(setup, repo, serviceAccountName);\n    logger_1.logger.info();\n    utils_1.logSuccess(`Created service account ${cli_color_1.bold(serviceAccountName)} with Firebase Hosting admin permissions.`);\n    const spinnerSecrets = ora.default(`Uploading service account secrets to repository: ${repo}`);\n    spinnerSecrets.start();\n    const encryptedServiceAccountJSON = encryptServiceAccountJSON(serviceAccountJSON, key);\n    await uploadSecretToGitHub(repo, ghAccessToken, encryptedServiceAccountJSON, keyId, githubSecretName);\n    spinnerSecrets.stop();\n    utils_1.logSuccess(`Uploaded service account JSON to GitHub as secret ${cli_color_1.bold(githubSecretName)}.`);\n    utils_1.logBullet(`You can manage your secrets at https://github.com/${repo}/settings/secrets.`);\n    logger_1.logger.info();\n    if (setup.config.hosting.predeploy) {\n        utils_1.logBullet(`You have a predeploy script configured in firebase.json.`);\n    }\n    const { script } = await promptForBuildScript();\n    const ymlDeployDoc = loadYMLDeploy();\n    let shouldWriteYMLHostingFile = true;\n    let shouldWriteYMLDeployFile = false;\n    if (fs.existsSync(YML_FULL_PATH_PULL_REQUEST)) {\n        const { overwrite } = await promptForWriteYMLFile({\n            message: `GitHub workflow file for PR previews exists. Overwrite? ${YML_PULL_REQUEST_FILENAME}`,\n        });\n        shouldWriteYMLHostingFile = overwrite;\n    }\n    if (shouldWriteYMLHostingFile) {\n        writeChannelActionYMLFile(YML_FULL_PATH_PULL_REQUEST, githubSecretName, setup.projectId, script);\n        logger_1.logger.info();\n        utils_1.logSuccess(`Created workflow file ${cli_color_1.bold(YML_FULL_PATH_PULL_REQUEST)}`);\n    }\n    const { setupDeploys, branch } = await promptToSetupDeploys(ymlDeployDoc.branch || defaultBranch);\n    if (setupDeploys) {\n        if (ymlDeployDoc.exists) {\n            if (ymlDeployDoc.branch !== branch) {\n                shouldWriteYMLDeployFile = true;\n            }\n            else {\n                const { overwrite } = await promptForWriteYMLFile({\n                    message: `The GitHub workflow file for deploying to the live channel already exists. Overwrite? ${YML_MERGE_FILENAME}`,\n                });\n                shouldWriteYMLDeployFile = overwrite;\n            }\n        }\n        else {\n            shouldWriteYMLDeployFile = true;\n        }\n        if (shouldWriteYMLDeployFile) {\n            writeDeployToProdActionYMLFile(YML_FULL_PATH_MERGE, branch, githubSecretName, setup.projectId, script);\n            logger_1.logger.info();\n            utils_1.logSuccess(`Created workflow file ${cli_color_1.bold(YML_FULL_PATH_MERGE)}`);\n        }\n    }\n    logger_1.logger.info();\n    utils_1.logLabeledBullet(\"Action required\", `Visit this URL to revoke authorization for the Firebase CLI GitHub OAuth App:`);\n    logger_1.logger.info(cli_color_1.bold.underline(`https://github.com/settings/connections/applications/${api_1.githubClientId}`));\n    utils_1.logLabeledBullet(\"Action required\", `Push any new workflow file(s) to your repo`);\n}\nexports.initGitHub = initGitHub;\nfunction getGitFolderPath() {\n    const commandDir = process.cwd();\n    let projectRootDir = commandDir;\n    while (!fs.existsSync(path.resolve(projectRootDir, \".git\"))) {\n        const parentDir = path.dirname(projectRootDir);\n        if (parentDir === projectRootDir) {\n            utils_1.logBullet(`Didn't detect a .git folder. Assuming ${commandDir} is the project root.`);\n            return commandDir;\n        }\n        projectRootDir = parentDir;\n    }\n    utils_1.logBullet(`Detected a .git folder at ${projectRootDir}`);\n    return projectRootDir;\n}\nfunction defaultGithubRepo() {\n    const gitConfigPath = path.join(GIT_DIR, \"config\");\n    if (fs.existsSync(gitConfigPath)) {\n        const gitConfig = fs.readFileSync(gitConfigPath, \"utf8\");\n        const match = /github\\.com:(.+)\\.git/.exec(gitConfig);\n        if (match) {\n            return match[1];\n        }\n    }\n    return undefined;\n}\nfunction loadYMLDeploy() {\n    if (fs.existsSync(YML_FULL_PATH_MERGE)) {\n        const { on } = loadYML(YML_FULL_PATH_MERGE);\n        const branch = on.push.branches[0];\n        return { exists: true, branch };\n    }\n    else {\n        return { exists: false };\n    }\n}\nfunction loadYML(ymlPath) {\n    return js_yaml_1.safeLoad(fs.readFileSync(ymlPath, \"utf8\"));\n}\nfunction mkdirNotExists(dir) {\n    if (!fsutils_1.dirExistsSync(dir)) {\n        fs.mkdirSync(dir);\n    }\n}\nfunction writeChannelActionYMLFile(ymlPath, secretName, projectId, script) {\n    const workflowConfig = {\n        name: \"Deploy to Firebase Hosting on PR\",\n        on: \"pull_request\",\n        jobs: {\n            [\"build_and_preview\"]: {\n                if: \"${{ github.event.pull_request.head.repo.full_name == github.repository }}\",\n                \"runs-on\": \"ubuntu-latest\",\n                steps: [{ uses: CHECKOUT_GITHUB_ACTION_NAME }],\n            },\n        },\n    };\n    if (script) {\n        workflowConfig.jobs.build_and_preview.steps.push({\n            run: script,\n        });\n    }\n    workflowConfig.jobs.build_and_preview.steps.push({\n        uses: HOSTING_GITHUB_ACTION_NAME,\n        with: {\n            repoToken: \"${{ secrets.GITHUB_TOKEN }}\",\n            firebaseServiceAccount: `\\${{ secrets.${secretName} }}`,\n            projectId: projectId,\n        },\n    });\n    const ymlContents = `# This file was auto-generated by the Firebase CLI\n# https://github.com/firebase/firebase-tools\n\n${yaml.safeDump(workflowConfig)}`;\n    mkdirNotExists(GITHUB_DIR);\n    mkdirNotExists(WORKFLOW_DIR);\n    fs.writeFileSync(ymlPath, ymlContents, \"utf8\");\n}\nfunction writeDeployToProdActionYMLFile(ymlPath, branch, secretName, projectId, script) {\n    const workflowConfig = {\n        name: \"Deploy to Firebase Hosting on merge\",\n        on: { push: { branches: [branch || \"master\"] } },\n        jobs: {\n            [\"build_and_deploy\"]: {\n                \"runs-on\": \"ubuntu-latest\",\n                steps: [{ uses: CHECKOUT_GITHUB_ACTION_NAME }],\n            },\n        },\n    };\n    if (script) {\n        workflowConfig.jobs.build_and_deploy.steps.push({\n            run: script,\n        });\n    }\n    workflowConfig.jobs.build_and_deploy.steps.push({\n        uses: HOSTING_GITHUB_ACTION_NAME,\n        with: {\n            repoToken: \"${{ secrets.GITHUB_TOKEN }}\",\n            firebaseServiceAccount: `\\${{ secrets.${secretName} }}`,\n            channelId: \"live\",\n            projectId: projectId,\n        },\n    });\n    const ymlContents = `# This file was auto-generated by the Firebase CLI\n# https://github.com/firebase/firebase-tools\n\n${yaml.safeDump(workflowConfig)}`;\n    mkdirNotExists(GITHUB_DIR);\n    mkdirNotExists(WORKFLOW_DIR);\n    fs.writeFileSync(ymlPath, ymlContents, \"utf8\");\n}\nasync function uploadSecretToGitHub(repo, ghAccessToken, encryptedServiceAccountJSON, keyId, secretName) {\n    const data = {\n        [\"encrypted_value\"]: encryptedServiceAccountJSON,\n        [\"key_id\"]: keyId,\n    };\n    const headers = { Authorization: `token ${ghAccessToken}`, \"User-Agent\": \"Firebase CLI\" };\n    return await githubApiClient.put(`/repos/${repo}/actions/secrets/${secretName}`, data, { headers });\n}\nasync function promptForRepo(options, ghAccessToken) {\n    let key = \"\";\n    let keyId = \"\";\n    const { repo } = await prompt_1.prompt(options, [\n        {\n            type: \"input\",\n            name: \"repo\",\n            default: defaultGithubRepo(),\n            message: \"For which GitHub repository would you like to set up a GitHub workflow? (format: user/repository)\",\n            validate: async (repo) => {\n                try {\n                    const { body } = await githubApiClient.get(`/repos/${repo}/actions/secrets/public-key`, {\n                        headers: { Authorization: `token ${ghAccessToken}`, \"User-Agent\": \"Firebase CLI\" },\n                        queryParams: { type: \"owner\" },\n                    });\n                    key = body.key;\n                    keyId = body.key_id;\n                }\n                catch (e) {\n                    if (e.status === 403) {\n                        logger_1.logger.info();\n                        logger_1.logger.info();\n                        utils_1.logWarning(\"The provided authorization cannot be used with this repository. If this repository is in an organization, did you remember to grant access?\", \"error\");\n                        logger_1.logger.info();\n                        utils_1.logLabeledBullet(\"Action required\", `Visit this URL to ensure access has been granted to the appropriate organization(s) for the Firebase CLI GitHub OAuth App:`);\n                        logger_1.logger.info(cli_color_1.bold.underline(`https://github.com/settings/connections/applications/${api_1.githubClientId}`));\n                        logger_1.logger.info();\n                    }\n                    return false;\n                }\n                return true;\n            },\n        },\n    ]);\n    return { repo, key, keyId };\n}\nasync function promptForBuildScript() {\n    const { shouldSetupScript } = await prompt_1.prompt({}, [\n        {\n            type: \"confirm\",\n            name: \"shouldSetupScript\",\n            default: false,\n            message: \"Set up the workflow to run a build script before every deploy?\",\n        },\n    ]);\n    if (!shouldSetupScript) {\n        return { script: undefined };\n    }\n    const { script } = await prompt_1.prompt({}, [\n        {\n            type: \"input\",\n            name: \"script\",\n            default: \"npm ci && npm run build\",\n            message: \"What script should be run before every deploy?\",\n        },\n    ]);\n    return { script };\n}\nasync function promptToSetupDeploys(defaultBranch) {\n    const { setupDeploys } = await prompt_1.prompt({}, [\n        {\n            type: \"confirm\",\n            name: \"setupDeploys\",\n            default: true,\n            message: \"Set up automatic deployment to your site's live channel when a PR is merged?\",\n        },\n    ]);\n    if (!setupDeploys) {\n        return { setupDeploys };\n    }\n    const { branch } = await prompt_1.prompt({}, [\n        {\n            type: \"input\",\n            name: \"branch\",\n            default: defaultBranch,\n            message: \"What is the name of the GitHub branch associated with your site's live channel?\",\n        },\n    ]);\n    return { branch, setupDeploys };\n}\nasync function promptForWriteYMLFile({ message }) {\n    return await prompt_1.prompt({}, [\n        {\n            type: \"confirm\",\n            name: \"overwrite\",\n            default: false,\n            message,\n        },\n    ]);\n}\nasync function getGitHubUserDetails(ghAccessToken) {\n    const { body: ghUserDetails } = await githubApiClient.get(\"/user\", {\n        headers: { Authorization: `token ${ghAccessToken}`, \"User-Agent\": \"Firebase CLI\" },\n    });\n    return ghUserDetails;\n}\nasync function getRepoDetails(repo, ghAccessToken) {\n    const { body } = await githubApiClient.get(`/repos/${repo}`, {\n        headers: { Authorization: `token ${ghAccessToken}`, \"User-Agent\": \"Firebase CLI\" },\n    });\n    return body;\n}\nasync function signInWithGitHub() {\n    return await auth_1.loginGithub();\n}\nasync function createServiceAccountAndKeyWithRetry(options, repo, accountId) {\n    const spinnerServiceAccount = ora.default(\"Retrieving a service account.\");\n    spinnerServiceAccount.start();\n    try {\n        const serviceAccountJSON = await createServiceAccountAndKey(options, repo, accountId);\n        spinnerServiceAccount.stop();\n        return serviceAccountJSON;\n    }\n    catch (e) {\n        spinnerServiceAccount.stop();\n        if (!e.message.includes(\"429\")) {\n            throw e;\n        }\n        spinnerServiceAccount.start();\n        await iam_1.deleteServiceAccount(options.projectId, `${accountId}@${options.projectId}.iam.gserviceaccount.com`);\n        const serviceAccountJSON = await createServiceAccountAndKey(options, repo, accountId);\n        spinnerServiceAccount.stop();\n        return serviceAccountJSON;\n    }\n}\nasync function createServiceAccountAndKey(options, repo, accountId) {\n    try {\n        await iam_1.createServiceAccount(options.projectId, accountId, `A service account with permission to deploy to Firebase Hosting for the GitHub repository ${repo}`, `GitHub Actions (${repo})`);\n    }\n    catch (e) {\n        if (!e.message.includes(\"409\")) {\n            throw e;\n        }\n    }\n    const requiredRoles = [\n        resourceManager_1.firebaseRoles.authAdmin,\n        resourceManager_1.firebaseRoles.apiKeysViewer,\n        resourceManager_1.firebaseRoles.hostingAdmin,\n        resourceManager_1.firebaseRoles.runViewer,\n    ];\n    await resourceManager_1.addServiceAccountToRoles(options.projectId, accountId, requiredRoles);\n    const serviceAccountKey = await iam_1.createServiceAccountKey(options.projectId, accountId);\n    const buf = Buffer.from(serviceAccountKey.privateKeyData, \"base64\");\n    const serviceAccountJSON = buf.toString();\n    return serviceAccountJSON;\n}\nfunction encryptServiceAccountJSON(serviceAccountJSON, key) {\n    const messageBytes = Buffer.from(serviceAccountJSON);\n    const keyBytes = Buffer.from(key, \"base64\");\n    const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n    return Buffer.from(encryptedBytes).toString(\"base64\");\n}\n"]},"metadata":{},"sourceType":"script"}