{"ast":null,"code":"var FS = require('fs');\n\nvar jju = require('../'); // this function registers json5 extension, so you\n// can do `require(\"./config.json5\")` kind of thing\n\n\nmodule.exports.register = function () {\n  var r = require,\n      e = 'extensions';\n\n  r[e]['.json5'] = function (m, f) {\n    /*eslint no-sync:0*/\n    m.exports = jju.parse(FS.readFileSync(f, 'utf8'));\n  };\n}; // this function monkey-patches JSON.parse, so it\n// will return an exact position of error in case\n// of parse failure\n\n\nmodule.exports.patch_JSON_parse = function () {\n  var _parse = JSON.parse;\n\n  JSON.parse = function (text, rev) {\n    try {\n      return _parse(text, rev);\n    } catch (err) {\n      // this call should always throw\n      require('jju').parse(text, {\n        mode: 'json',\n        legacy: true,\n        reviver: rev,\n        reserved_keys: 'replace',\n        null_prototype: false\n      }); // if it didn't throw, but original parser did,\n      // this is an error in this library and should be reported\n\n\n      throw err;\n    }\n  };\n}; // this function is an express/connect middleware\n// that accepts uploads in application/json5 format\n\n\nmodule.exports.middleware = function () {\n  return function (req, res, next) {\n    throw Error('this function is removed, use express-json5 instead');\n  };\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/jju/lib/utils.js"],"names":["FS","require","jju","module","exports","register","r","e","m","f","parse","readFileSync","patch_JSON_parse","_parse","JSON","text","rev","err","mode","legacy","reviver","reserved_keys","null_prototype","middleware","req","res","next","Error"],"mappings":"AAAA,IAAIA,EAAE,GAAIC,OAAO,CAAC,IAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAjB,C,CAEA;AACA;;;AACAE,MAAM,CAACC,OAAP,CAAeC,QAAf,GAA0B,YAAW;AACnC,MAAIC,CAAC,GAAGL,OAAR;AAAA,MAAiBM,CAAC,GAAG,YAArB;;AACAD,EAAAA,CAAC,CAACC,CAAD,CAAD,CAAK,QAAL,IAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9B;AACAD,IAAAA,CAAC,CAACJ,OAAF,GAAYF,GAAG,CAACQ,KAAJ,CAAUV,EAAE,CAACW,YAAH,CAAgBF,CAAhB,EAAmB,MAAnB,CAAV,CAAZ;AACD,GAHD;AAID,CAND,C,CAQA;AACA;AACA;;;AACAN,MAAM,CAACC,OAAP,CAAeQ,gBAAf,GAAkC,YAAW;AAC3C,MAAIC,MAAM,GAAGC,IAAI,CAACJ,KAAlB;;AACAI,EAAAA,IAAI,CAACJ,KAAL,GAAa,UAASK,IAAT,EAAeC,GAAf,EAAoB;AAC/B,QAAI;AACF,aAAOH,MAAM,CAACE,IAAD,EAAOC,GAAP,CAAb;AACD,KAFD,CAEE,OAAMC,GAAN,EAAW;AACX;AACAhB,MAAAA,OAAO,CAAC,KAAD,CAAP,CAAeS,KAAf,CAAqBK,IAArB,EAA2B;AACzBG,QAAAA,IAAI,EAAE,MADmB;AAEzBC,QAAAA,MAAM,EAAE,IAFiB;AAGzBC,QAAAA,OAAO,EAAEJ,GAHgB;AAIzBK,QAAAA,aAAa,EAAE,SAJU;AAKzBC,QAAAA,cAAc,EAAE;AALS,OAA3B,EAFW,CAUX;AACA;;;AACA,YAAML,GAAN;AACD;AACF,GAjBD;AAkBD,CApBD,C,CAsBA;AACA;;;AACAd,MAAM,CAACC,OAAP,CAAemB,UAAf,GAA4B,YAAW;AACrC,SAAO,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC9B,UAAMC,KAAK,CAAC,qDAAD,CAAX;AACD,GAFD;AAGD,CAJD","sourcesContent":["var FS  = require('fs')\nvar jju = require('../')\n\n// this function registers json5 extension, so you\n// can do `require(\"./config.json5\")` kind of thing\nmodule.exports.register = function() {\n  var r = require, e = 'extensions'\n  r[e]['.json5'] = function(m, f) {\n    /*eslint no-sync:0*/\n    m.exports = jju.parse(FS.readFileSync(f, 'utf8'))\n  }\n}\n\n// this function monkey-patches JSON.parse, so it\n// will return an exact position of error in case\n// of parse failure\nmodule.exports.patch_JSON_parse = function() {\n  var _parse = JSON.parse\n  JSON.parse = function(text, rev) {\n    try {\n      return _parse(text, rev)\n    } catch(err) {\n      // this call should always throw\n      require('jju').parse(text, {\n        mode: 'json',\n        legacy: true,\n        reviver: rev,\n        reserved_keys: 'replace',\n        null_prototype: false,\n      })\n\n      // if it didn't throw, but original parser did,\n      // this is an error in this library and should be reported\n      throw err\n    }\n  }\n}\n\n// this function is an express/connect middleware\n// that accepts uploads in application/json5 format\nmodule.exports.middleware = function() {\n  return function(req, res, next) {\n    throw Error('this function is removed, use express-json5 instead')\n  }\n}\n\n"]},"metadata":{},"sourceType":"script"}