{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nexports.default = new command_1.Command(\"ext:sources:create <sourceLocation>\").description(`create a extension source from sourceLocation`).help(\"sourceLocation can be a local directory containing an extension, or URL pointing to a zipped extension. \" + 'If using a URL, you can specify a root folder for the extension by adding \"#<extensionRoot>\". ' + \"For example, if your extension.yaml is in the my/extension directory of the archive, \" + \"you should use sourceUrl#my/extension. If no extensionRoot is specified, / is assumed.\").before(requirePermissions_1.requirePermissions, [\"firebaseextensions.sources.create\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\").action(async (sourceLocation, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const res = await extensionsHelper_1.createSourceFromLocation(projectId, sourceLocation);\n  logger_1.logger.info(`Extension source creation successful for ${res.spec.name}! Your new source is ${res.name}`);\n  return res;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-sources-create.js"],"names":["Object","defineProperty","exports","value","checkMinRequiredVersion_1","require","command_1","projectUtils_1","logger_1","extensionsHelper_1","requirePermissions_1","default","Command","description","help","before","requirePermissions","ensureExtensionsApiEnabled","checkMinRequiredVersion","action","sourceLocation","options","projectId","needProjectId","res","createSourceFromLocation","logger","info","spec","name"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,4BAAD,CAAzC;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,uBAAD,CAApC;;AACAH,OAAO,CAACS,OAAR,GAAkB,IAAIL,SAAS,CAACM,OAAd,CAAsB,qCAAtB,EACbC,WADa,CACA,+CADA,EAEbC,IAFa,CAER,6GACN,gGADM,GAEN,uFAFM,GAGN,wFALc,EAMbC,MANa,CAMNL,oBAAoB,CAACM,kBANf,EAMmC,CAAC,mCAAD,CANnC,EAObD,MAPa,CAONN,kBAAkB,CAACQ,0BAPb,EAQbF,MARa,CAQNX,yBAAyB,CAACc,uBARpB,EAQ6C,kBAR7C,EASbC,MATa,CASN,OAAOC,cAAP,EAAuBC,OAAvB,KAAmC;AAC3C,QAAMC,SAAS,GAAGf,cAAc,CAACgB,aAAf,CAA6BF,OAA7B,CAAlB;AACA,QAAMG,GAAG,GAAG,MAAMf,kBAAkB,CAACgB,wBAAnB,CAA4CH,SAA5C,EAAuDF,cAAvD,CAAlB;AACAZ,EAAAA,QAAQ,CAACkB,MAAT,CAAgBC,IAAhB,CAAsB,4CAA2CH,GAAG,CAACI,IAAJ,CAASC,IAAK,wBAAuBL,GAAG,CAACK,IAAK,EAA/G;AACA,SAAOL,GAAP;AACH,CAdiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst logger_1 = require(\"../logger\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nexports.default = new command_1.Command(\"ext:sources:create <sourceLocation>\")\n    .description(`create a extension source from sourceLocation`)\n    .help(\"sourceLocation can be a local directory containing an extension, or URL pointing to a zipped extension. \" +\n    'If using a URL, you can specify a root folder for the extension by adding \"#<extensionRoot>\". ' +\n    \"For example, if your extension.yaml is in the my/extension directory of the archive, \" +\n    \"you should use sourceUrl#my/extension. If no extensionRoot is specified, / is assumed.\")\n    .before(requirePermissions_1.requirePermissions, [\"firebaseextensions.sources.create\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\")\n    .action(async (sourceLocation, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const res = await extensionsHelper_1.createSourceFromLocation(projectId, sourceLocation);\n    logger_1.logger.info(`Extension source creation successful for ${res.spec.name}! Your new source is ${res.name}`);\n    return res;\n});\n"]},"metadata":{},"sourceType":"script"}