{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listDatabaseInstances = exports.parseDatabaseLocation = exports.checkInstanceNameAvailable = exports.createInstance = exports.getDatabaseInstanceDetails = exports.populateInstanceDetails = exports.DatabaseLocation = exports.DatabaseInstanceState = exports.DatabaseInstanceType = void 0;\n\nconst api = require(\"../api\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst constants_1 = require(\"../emulator/constants\");\n\nconst MGMT_API_VERSION = \"v1beta\";\nconst TIMEOUT_MILLIS = 10000;\nconst APP_LIST_PAGE_SIZE = 100;\nconst INSTANCE_RESOURCE_NAME_REGEX = /projects\\/([^/]+?)\\/locations\\/([^/]+?)\\/instances\\/([^/]*)/;\nvar DatabaseInstanceType;\n\n(function (DatabaseInstanceType) {\n  DatabaseInstanceType[\"DATABASE_INSTANCE_TYPE_UNSPECIFIED\"] = \"unspecified\";\n  DatabaseInstanceType[\"DEFAULT_DATABASE\"] = \"default_database\";\n  DatabaseInstanceType[\"USER_DATABASE\"] = \"user_database\";\n})(DatabaseInstanceType = exports.DatabaseInstanceType || (exports.DatabaseInstanceType = {}));\n\nvar DatabaseInstanceState;\n\n(function (DatabaseInstanceState) {\n  DatabaseInstanceState[\"LIFECYCLE_STATE_UNSPECIFIED\"] = \"unspecified\";\n  DatabaseInstanceState[\"ACTIVE\"] = \"active\";\n  DatabaseInstanceState[\"DISABLED\"] = \"disabled\";\n  DatabaseInstanceState[\"DELETED\"] = \"deleted\";\n})(DatabaseInstanceState = exports.DatabaseInstanceState || (exports.DatabaseInstanceState = {}));\n\nvar DatabaseLocation;\n\n(function (DatabaseLocation) {\n  DatabaseLocation[\"US_CENTRAL1\"] = \"us-central1\";\n  DatabaseLocation[\"EUROPE_WEST1\"] = \"europe-west1\";\n  DatabaseLocation[\"ASIA_SOUTHEAST1\"] = \"asia-southeast1\";\n  DatabaseLocation[\"ANY\"] = \"-\";\n})(DatabaseLocation = exports.DatabaseLocation || (exports.DatabaseLocation = {}));\n\nasync function populateInstanceDetails(options) {\n  options.instanceDetails = await getDatabaseInstanceDetails(options.project, options.instance);\n  return Promise.resolve();\n}\n\nexports.populateInstanceDetails = populateInstanceDetails;\n\nasync function getDatabaseInstanceDetails(projectId, instanceName) {\n  try {\n    const response = await api.request(\"GET\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/-/instances/${instanceName}`, {\n      auth: true,\n      origin: api.rtdbManagementOrigin,\n      timeout: TIMEOUT_MILLIS\n    });\n    return convertDatabaseInstance(response.body);\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    const emulatorHost = process.env[constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST];\n\n    if (emulatorHost) {\n      return Promise.resolve({\n        name: instanceName,\n        project: projectId,\n        location: DatabaseLocation.ANY,\n        databaseUrl: utils.getDatabaseUrl(emulatorHost, instanceName, \"\"),\n        type: DatabaseInstanceType.DEFAULT_DATABASE,\n        state: DatabaseInstanceState.ACTIVE\n      });\n    }\n\n    return utils.reject(`Failed to get instance details for instance: ${instanceName}. See firebase-debug.log for more details.`, {\n      code: 2,\n      original: err\n    });\n  }\n}\n\nexports.getDatabaseInstanceDetails = getDatabaseInstanceDetails;\n\nasync function createInstance(projectId, instanceName, location, databaseType) {\n  try {\n    const response = await api.request(\"POST\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/${location}/instances?databaseId=${instanceName}`, {\n      auth: true,\n      origin: api.rtdbManagementOrigin,\n      timeout: TIMEOUT_MILLIS,\n      data: {\n        type: databaseType\n      }\n    });\n    return convertDatabaseInstance(response.body);\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    return utils.reject(`Failed to create instance: ${instanceName}. See firebase-debug.log for more details.`, {\n      code: 2,\n      original: err\n    });\n  }\n}\n\nexports.createInstance = createInstance;\n\nasync function checkInstanceNameAvailable(projectId, instanceName, databaseType, location) {\n  var _a, _b, _c;\n\n  if (!location) {\n    location = DatabaseLocation.US_CENTRAL1;\n  }\n\n  try {\n    await api.request(\"POST\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/${location}/instances?databaseId=${instanceName}&validateOnly=true`, {\n      auth: true,\n      origin: api.rtdbManagementOrigin,\n      timeout: TIMEOUT_MILLIS,\n      data: {\n        type: databaseType\n      }\n    });\n    return {\n      available: true\n    };\n  } catch (err) {\n    logger_1.logger.debug(`Invalid Realtime Database instance name: ${instanceName}.${err.message ? \" \" + err.message : \"\"}`);\n    const errBody = err.context.body.error;\n\n    if ((_c = (_b = (_a = errBody === null || errBody === void 0 ? void 0 : errBody.details) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.metadata) === null || _c === void 0 ? void 0 : _c.suggested_database_ids) {\n      return {\n        available: false,\n        suggestedIds: errBody.details[0].metadata.suggested_database_ids.split(\",\")\n      };\n    }\n\n    throw new error_1.FirebaseError(`Failed to validate Realtime Database instance name: ${instanceName}.`, {\n      original: err\n    });\n  }\n}\n\nexports.checkInstanceNameAvailable = checkInstanceNameAvailable;\n\nfunction parseDatabaseLocation(location, defaultLocation) {\n  if (!location) {\n    return defaultLocation;\n  }\n\n  switch (location.toLowerCase()) {\n    case \"us-central1\":\n      return DatabaseLocation.US_CENTRAL1;\n\n    case \"europe-west1\":\n      return DatabaseLocation.EUROPE_WEST1;\n\n    case \"asia-southeast1\":\n      return DatabaseLocation.ASIA_SOUTHEAST1;\n\n    case \"\":\n      return defaultLocation;\n\n    default:\n      throw new error_1.FirebaseError(`Unexpected location value: ${location}. Only us-central1, europe-west1, and asia-southeast1 locations are supported`);\n  }\n}\n\nexports.parseDatabaseLocation = parseDatabaseLocation;\n\nasync function listDatabaseInstances(projectId, location, pageSize = APP_LIST_PAGE_SIZE) {\n  const instances = [];\n\n  try {\n    let nextPageToken = \"\";\n\n    do {\n      const pageTokenQueryString = nextPageToken ? `&pageToken=${nextPageToken}` : \"\";\n      const response = await api.request(\"GET\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/${location}/instances?pageSize=${pageSize}${pageTokenQueryString}`, {\n        auth: true,\n        origin: api.rtdbManagementOrigin,\n        timeout: TIMEOUT_MILLIS\n      });\n\n      if (response.body.instances) {\n        instances.push(...response.body.instances.map(convertDatabaseInstance));\n      }\n\n      nextPageToken = response.body.nextPageToken;\n    } while (nextPageToken);\n\n    return instances;\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    throw new error_1.FirebaseError(`Failed to list Firebase Realtime Database instances${location === DatabaseLocation.ANY ? \"\" : ` for location ${location}`}` + \". See firebase-debug.log for more info.\", {\n      exit: 2,\n      original: err\n    });\n  }\n}\n\nexports.listDatabaseInstances = listDatabaseInstances;\n\nfunction convertDatabaseInstance(serverInstance) {\n  if (!serverInstance.name) {\n    throw new error_1.FirebaseError(`DatabaseInstance response is missing field \"name\"`);\n  }\n\n  const m = serverInstance.name.match(INSTANCE_RESOURCE_NAME_REGEX);\n\n  if (!m || m.length != 4) {\n    throw new error_1.FirebaseError(`Error parsing instance resource name: ${serverInstance.name}, matches: ${m}`);\n  }\n\n  return {\n    name: m[3],\n    location: parseDatabaseLocation(m[2], DatabaseLocation.ANY),\n    project: serverInstance.project,\n    databaseUrl: serverInstance.databaseUrl,\n    type: serverInstance.type,\n    state: serverInstance.state\n  };\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/management/database.js"],"names":["Object","defineProperty","exports","value","listDatabaseInstances","parseDatabaseLocation","checkInstanceNameAvailable","createInstance","getDatabaseInstanceDetails","populateInstanceDetails","DatabaseLocation","DatabaseInstanceState","DatabaseInstanceType","api","require","logger_1","utils","error_1","constants_1","MGMT_API_VERSION","TIMEOUT_MILLIS","APP_LIST_PAGE_SIZE","INSTANCE_RESOURCE_NAME_REGEX","options","instanceDetails","project","instance","Promise","resolve","projectId","instanceName","response","request","auth","origin","rtdbManagementOrigin","timeout","convertDatabaseInstance","body","err","logger","debug","message","emulatorHost","process","env","Constants","FIREBASE_DATABASE_EMULATOR_HOST","name","location","ANY","databaseUrl","getDatabaseUrl","type","DEFAULT_DATABASE","state","ACTIVE","reject","code","original","databaseType","data","_a","_b","_c","US_CENTRAL1","available","errBody","context","error","details","metadata","suggested_database_ids","suggestedIds","split","FirebaseError","defaultLocation","toLowerCase","EUROPE_WEST1","ASIA_SOUTHEAST1","pageSize","instances","nextPageToken","pageTokenQueryString","push","map","exit","serverInstance","m","match","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.listDatabaseInstances = exports.parseDatabaseLocation = exports.checkInstanceNameAvailable = exports.createInstance = exports.getDatabaseInstanceDetails = exports.populateInstanceDetails = exports.DatabaseLocation = exports.DatabaseInstanceState = exports.DatabaseInstanceType = void 0;\nconst api = require(\"../api\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst constants_1 = require(\"../emulator/constants\");\nconst MGMT_API_VERSION = \"v1beta\";\nconst TIMEOUT_MILLIS = 10000;\nconst APP_LIST_PAGE_SIZE = 100;\nconst INSTANCE_RESOURCE_NAME_REGEX = /projects\\/([^/]+?)\\/locations\\/([^/]+?)\\/instances\\/([^/]*)/;\nvar DatabaseInstanceType;\n(function (DatabaseInstanceType) {\n    DatabaseInstanceType[\"DATABASE_INSTANCE_TYPE_UNSPECIFIED\"] = \"unspecified\";\n    DatabaseInstanceType[\"DEFAULT_DATABASE\"] = \"default_database\";\n    DatabaseInstanceType[\"USER_DATABASE\"] = \"user_database\";\n})(DatabaseInstanceType = exports.DatabaseInstanceType || (exports.DatabaseInstanceType = {}));\nvar DatabaseInstanceState;\n(function (DatabaseInstanceState) {\n    DatabaseInstanceState[\"LIFECYCLE_STATE_UNSPECIFIED\"] = \"unspecified\";\n    DatabaseInstanceState[\"ACTIVE\"] = \"active\";\n    DatabaseInstanceState[\"DISABLED\"] = \"disabled\";\n    DatabaseInstanceState[\"DELETED\"] = \"deleted\";\n})(DatabaseInstanceState = exports.DatabaseInstanceState || (exports.DatabaseInstanceState = {}));\nvar DatabaseLocation;\n(function (DatabaseLocation) {\n    DatabaseLocation[\"US_CENTRAL1\"] = \"us-central1\";\n    DatabaseLocation[\"EUROPE_WEST1\"] = \"europe-west1\";\n    DatabaseLocation[\"ASIA_SOUTHEAST1\"] = \"asia-southeast1\";\n    DatabaseLocation[\"ANY\"] = \"-\";\n})(DatabaseLocation = exports.DatabaseLocation || (exports.DatabaseLocation = {}));\nasync function populateInstanceDetails(options) {\n    options.instanceDetails = await getDatabaseInstanceDetails(options.project, options.instance);\n    return Promise.resolve();\n}\nexports.populateInstanceDetails = populateInstanceDetails;\nasync function getDatabaseInstanceDetails(projectId, instanceName) {\n    try {\n        const response = await api.request(\"GET\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/-/instances/${instanceName}`, {\n            auth: true,\n            origin: api.rtdbManagementOrigin,\n            timeout: TIMEOUT_MILLIS,\n        });\n        return convertDatabaseInstance(response.body);\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        const emulatorHost = process.env[constants_1.Constants.FIREBASE_DATABASE_EMULATOR_HOST];\n        if (emulatorHost) {\n            return Promise.resolve({\n                name: instanceName,\n                project: projectId,\n                location: DatabaseLocation.ANY,\n                databaseUrl: utils.getDatabaseUrl(emulatorHost, instanceName, \"\"),\n                type: DatabaseInstanceType.DEFAULT_DATABASE,\n                state: DatabaseInstanceState.ACTIVE,\n            });\n        }\n        return utils.reject(`Failed to get instance details for instance: ${instanceName}. See firebase-debug.log for more details.`, {\n            code: 2,\n            original: err,\n        });\n    }\n}\nexports.getDatabaseInstanceDetails = getDatabaseInstanceDetails;\nasync function createInstance(projectId, instanceName, location, databaseType) {\n    try {\n        const response = await api.request(\"POST\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/${location}/instances?databaseId=${instanceName}`, {\n            auth: true,\n            origin: api.rtdbManagementOrigin,\n            timeout: TIMEOUT_MILLIS,\n            data: {\n                type: databaseType,\n            },\n        });\n        return convertDatabaseInstance(response.body);\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        return utils.reject(`Failed to create instance: ${instanceName}. See firebase-debug.log for more details.`, {\n            code: 2,\n            original: err,\n        });\n    }\n}\nexports.createInstance = createInstance;\nasync function checkInstanceNameAvailable(projectId, instanceName, databaseType, location) {\n    var _a, _b, _c;\n    if (!location) {\n        location = DatabaseLocation.US_CENTRAL1;\n    }\n    try {\n        await api.request(\"POST\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/${location}/instances?databaseId=${instanceName}&validateOnly=true`, {\n            auth: true,\n            origin: api.rtdbManagementOrigin,\n            timeout: TIMEOUT_MILLIS,\n            data: {\n                type: databaseType,\n            },\n        });\n        return {\n            available: true,\n        };\n    }\n    catch (err) {\n        logger_1.logger.debug(`Invalid Realtime Database instance name: ${instanceName}.${err.message ? \" \" + err.message : \"\"}`);\n        const errBody = err.context.body.error;\n        if ((_c = (_b = (_a = errBody === null || errBody === void 0 ? void 0 : errBody.details) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.metadata) === null || _c === void 0 ? void 0 : _c.suggested_database_ids) {\n            return {\n                available: false,\n                suggestedIds: errBody.details[0].metadata.suggested_database_ids.split(\",\"),\n            };\n        }\n        throw new error_1.FirebaseError(`Failed to validate Realtime Database instance name: ${instanceName}.`, {\n            original: err,\n        });\n    }\n}\nexports.checkInstanceNameAvailable = checkInstanceNameAvailable;\nfunction parseDatabaseLocation(location, defaultLocation) {\n    if (!location) {\n        return defaultLocation;\n    }\n    switch (location.toLowerCase()) {\n        case \"us-central1\":\n            return DatabaseLocation.US_CENTRAL1;\n        case \"europe-west1\":\n            return DatabaseLocation.EUROPE_WEST1;\n        case \"asia-southeast1\":\n            return DatabaseLocation.ASIA_SOUTHEAST1;\n        case \"\":\n            return defaultLocation;\n        default:\n            throw new error_1.FirebaseError(`Unexpected location value: ${location}. Only us-central1, europe-west1, and asia-southeast1 locations are supported`);\n    }\n}\nexports.parseDatabaseLocation = parseDatabaseLocation;\nasync function listDatabaseInstances(projectId, location, pageSize = APP_LIST_PAGE_SIZE) {\n    const instances = [];\n    try {\n        let nextPageToken = \"\";\n        do {\n            const pageTokenQueryString = nextPageToken ? `&pageToken=${nextPageToken}` : \"\";\n            const response = await api.request(\"GET\", `/${MGMT_API_VERSION}/projects/${projectId}/locations/${location}/instances?pageSize=${pageSize}${pageTokenQueryString}`, {\n                auth: true,\n                origin: api.rtdbManagementOrigin,\n                timeout: TIMEOUT_MILLIS,\n            });\n            if (response.body.instances) {\n                instances.push(...response.body.instances.map(convertDatabaseInstance));\n            }\n            nextPageToken = response.body.nextPageToken;\n        } while (nextPageToken);\n        return instances;\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        throw new error_1.FirebaseError(`Failed to list Firebase Realtime Database instances${location === DatabaseLocation.ANY ? \"\" : ` for location ${location}`}` + \". See firebase-debug.log for more info.\", {\n            exit: 2,\n            original: err,\n        });\n    }\n}\nexports.listDatabaseInstances = listDatabaseInstances;\nfunction convertDatabaseInstance(serverInstance) {\n    if (!serverInstance.name) {\n        throw new error_1.FirebaseError(`DatabaseInstance response is missing field \"name\"`);\n    }\n    const m = serverInstance.name.match(INSTANCE_RESOURCE_NAME_REGEX);\n    if (!m || m.length != 4) {\n        throw new error_1.FirebaseError(`Error parsing instance resource name: ${serverInstance.name}, matches: ${m}`);\n    }\n    return {\n        name: m[3],\n        location: parseDatabaseLocation(m[2], DatabaseLocation.ANY),\n        project: serverInstance.project,\n        databaseUrl: serverInstance.databaseUrl,\n        type: serverInstance.type,\n        state: serverInstance.state,\n    };\n}\n"]},"metadata":{},"sourceType":"script"}