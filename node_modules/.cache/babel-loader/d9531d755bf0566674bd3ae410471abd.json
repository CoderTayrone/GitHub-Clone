{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst content_type_1 = __importDefault(require(\"content-type\"));\n\nconst raw_body_1 = __importDefault(require(\"raw-body\"));\n\nconst httpUtils_1 = require(\"../utils/httpUtils\");\n\nclass BodyParserWrapper {\n  constructor(parser, maxBodySize) {\n    this._parser = parser;\n    this._maxBodySize = maxBodySize;\n  }\n\n  parseString(value) {\n    return this._parser.parseString(value);\n  }\n\n  parseReq(req, _res, done) {\n    if (req.body) {\n      // Already parsed;\n      return done();\n    } // Make sure we have a body to parse\n\n\n    if (!httpUtils_1.httpHasBody(req.headers)) {\n      return done();\n    } // Work out the encoding\n\n\n    let encoding = 'utf-8';\n    const parsedContentType = content_type_1.default.parse(req);\n\n    if (parsedContentType && parsedContentType.parameters) {\n      encoding = (parsedContentType.parameters.encoding || encoding).toLowerCase();\n    } // Read the body\n\n\n    raw_body_1.default(req, {\n      limit: this._maxBodySize,\n      encoding\n    }, (err, str) => {\n      if (err) {\n        return done(err);\n      }\n\n      req.body = this._parser.parseString(str);\n      done(null, req.body);\n    });\n  }\n\n}\n\nexports.default = BodyParserWrapper;","map":{"version":3,"sources":["../../src/bodyParsers/BodyParserWrapper.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAGA,MAAqB,iBAArB,CAAsC;AAIlC,EAAA,WAAA,CAAY,MAAZ,EAAkC,WAAlC,EAAqD;AACjD,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,YAAL,GAAoB,WAApB;AACH;;AAED,EAAA,WAAW,CAAC,KAAD,EAAc;AACrB,WAAO,KAAK,OAAL,CAAa,WAAb,CAAyB,KAAzB,CAAP;AACH;;AAED,EAAA,QAAQ,CAAC,GAAD,EAA2B,IAA3B,EAAsD,IAAtD,EAAyE;AAC7E,QAAI,GAAG,CAAC,IAAR,EAAc;AACV;AACA,aAAO,IAAI,EAAX;AACH,KAJ4E,CAM7E;;;AACA,QAAI,CAAC,WAAA,CAAA,WAAA,CAAY,GAAG,CAAC,OAAhB,CAAL,EAA+B;AAC3B,aAAO,IAAI,EAAX;AACH,KAT4E,CAW7E;;;AACA,QAAI,QAAQ,GAAG,OAAf;AACA,UAAM,iBAAiB,GAAG,cAAA,CAAA,OAAA,CAAY,KAAZ,CAAkB,GAAlB,CAA1B;;AACA,QAAI,iBAAiB,IAAI,iBAAiB,CAAC,UAA3C,EAAuD;AACnD,MAAA,QAAQ,GAAG,CAAC,iBAAiB,CAAC,UAAlB,CAA6B,QAA7B,IAAyC,QAA1C,EAAoD,WAApD,EAAX;AACH,KAhB4E,CAkB7E;;;AACA,IAAA,UAAA,CAAA,OAAA,CAAW,GAAX,EAAgB;AAAE,MAAA,KAAK,EAAE,KAAK,YAAd;AAA4B,MAAA;AAA5B,KAAhB,EAAwD,CAAC,GAAD,EAAM,GAAN,KAAa;AACjE,UAAI,GAAJ,EAAS;AACL,eAAO,IAAI,CAAC,GAAD,CAAX;AACH;;AAED,MAAA,GAAG,CAAC,IAAJ,GAAW,KAAK,OAAL,CAAa,WAAb,CAAyB,GAAzB,CAAX;AACA,MAAA,IAAI,CAAC,IAAD,EAAO,GAAG,CAAC,IAAX,CAAJ;AACH,KAPD;AAQH;;AAxCiC;;AAAtC,OAAA,CAAA,OAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst content_type_1 = __importDefault(require(\"content-type\"));\nconst raw_body_1 = __importDefault(require(\"raw-body\"));\nconst httpUtils_1 = require(\"../utils/httpUtils\");\nclass BodyParserWrapper {\n    constructor(parser, maxBodySize) {\n        this._parser = parser;\n        this._maxBodySize = maxBodySize;\n    }\n    parseString(value) {\n        return this._parser.parseString(value);\n    }\n    parseReq(req, _res, done) {\n        if (req.body) {\n            // Already parsed;\n            return done();\n        }\n        // Make sure we have a body to parse\n        if (!httpUtils_1.httpHasBody(req.headers)) {\n            return done();\n        }\n        // Work out the encoding\n        let encoding = 'utf-8';\n        const parsedContentType = content_type_1.default.parse(req);\n        if (parsedContentType && parsedContentType.parameters) {\n            encoding = (parsedContentType.parameters.encoding || encoding).toLowerCase();\n        }\n        // Read the body\n        raw_body_1.default(req, { limit: this._maxBodySize, encoding }, (err, str) => {\n            if (err) {\n                return done(err);\n            }\n            req.body = this._parser.parseString(str);\n            done(null, req.body);\n        });\n    }\n}\nexports.default = BodyParserWrapper;\n//# sourceMappingURL=BodyParserWrapper.js.map"]},"metadata":{},"sourceType":"script"}