{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst pathLib = require(\"path\");\n\nconst removeRemote_1 = require(\"./removeRemote\");\n\nconst listRemote_1 = require(\"./listRemote\");\n\nconst stack_1 = require(\"../throttler/stack\");\n\nfunction chunkList(ls, chunkSize) {\n  const chunks = [];\n\n  for (let i = 0; i < ls.length; i += chunkSize) {\n    chunks.push(ls.slice(i, i + chunkSize));\n  }\n\n  return chunks;\n}\n\nconst INITIAL_DELETE_BATCH_SIZE = 25;\nconst INITIAL_LIST_NUM_SUB_PATH = 100;\nconst MAX_LIST_NUM_SUB_PATH = 204800;\n\nclass DatabaseRemove {\n  constructor(instance, path, host) {\n    this.path = path;\n    this.remote = new removeRemote_1.RTDBRemoveRemote(instance, host);\n    this.deleteJobStack = new stack_1.Stack({\n      name: \"delete stack\",\n      concurrency: 1,\n      retries: 3\n    });\n    this.listRemote = new listRemote_1.RTDBListRemote(instance, host);\n    this.listStack = new stack_1.Stack({\n      name: \"list stack\",\n      concurrency: 1,\n      retries: 3\n    });\n  }\n\n  async execute() {\n    await this.deletePath(this.path);\n  }\n\n  async deletePath(path) {\n    if (await this.deleteJobStack.run(() => this.remote.deletePath(path))) {\n      return true;\n    }\n\n    let listNumSubPath = INITIAL_LIST_NUM_SUB_PATH;\n    let batchSizeLow = 1;\n    let batchSizeHigh = MAX_LIST_NUM_SUB_PATH + 1;\n    let batchSize = INITIAL_DELETE_BATCH_SIZE;\n\n    while (true) {\n      const subPathList = await this.listStack.run(() => this.listRemote.listPath(path, listNumSubPath));\n\n      if (subPathList.length === 0) {\n        return false;\n      }\n\n      const chunks = chunkList(subPathList, batchSize);\n      let nSmallChunks = 0;\n\n      for (const chunk of chunks) {\n        if (await this.deleteSubPath(path, chunk)) {\n          nSmallChunks += 1;\n        }\n      }\n\n      if (nSmallChunks > chunks.length / 2) {\n        batchSizeLow = batchSize;\n        batchSize = Math.floor(Math.min(batchSize * 2, (batchSizeHigh + batchSize) / 2));\n      } else {\n        batchSizeHigh = batchSize;\n        batchSize = Math.floor((batchSizeLow + batchSize) / 2);\n      }\n\n      if (listNumSubPath * 2 <= MAX_LIST_NUM_SUB_PATH) {\n        listNumSubPath = listNumSubPath * 2;\n      } else {\n        listNumSubPath = Math.floor(MAX_LIST_NUM_SUB_PATH / batchSize) * batchSize;\n      }\n    }\n  }\n\n  async deleteSubPath(path, subPaths) {\n    if (subPaths.length === 0) {\n      throw new Error(\"deleteSubPath is called with empty subPaths list\");\n    }\n\n    if (subPaths.length === 1) {\n      return this.deletePath(pathLib.join(path, subPaths[0]));\n    }\n\n    if (await this.deleteJobStack.run(() => this.remote.deleteSubPath(path, subPaths))) {\n      return true;\n    }\n\n    const mid = Math.floor(subPaths.length / 2);\n    await this.deleteSubPath(path, subPaths.slice(0, mid));\n    await this.deleteSubPath(path, subPaths.slice(mid));\n    return false;\n  }\n\n}\n\nexports.default = DatabaseRemove;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/database/remove.js"],"names":["Object","defineProperty","exports","value","pathLib","require","removeRemote_1","listRemote_1","stack_1","chunkList","ls","chunkSize","chunks","i","length","push","slice","INITIAL_DELETE_BATCH_SIZE","INITIAL_LIST_NUM_SUB_PATH","MAX_LIST_NUM_SUB_PATH","DatabaseRemove","constructor","instance","path","host","remote","RTDBRemoveRemote","deleteJobStack","Stack","name","concurrency","retries","listRemote","RTDBListRemote","listStack","execute","deletePath","run","listNumSubPath","batchSizeLow","batchSizeHigh","batchSize","subPathList","listPath","nSmallChunks","chunk","deleteSubPath","Math","floor","min","subPaths","Error","join","mid","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,MAAD,CAAvB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAAvB;;AACA,SAASI,SAAT,CAAmBC,EAAnB,EAAuBC,SAAvB,EAAkC;AAC9B,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,EAAE,CAACI,MAAvB,EAA+BD,CAAC,IAAIF,SAApC,EAA+C;AAC3CC,IAAAA,MAAM,CAACG,IAAP,CAAYL,EAAE,CAACM,KAAH,CAASH,CAAT,EAAYA,CAAC,GAAGF,SAAhB,CAAZ;AACH;;AACD,SAAOC,MAAP;AACH;;AACD,MAAMK,yBAAyB,GAAG,EAAlC;AACA,MAAMC,yBAAyB,GAAG,GAAlC;AACA,MAAMC,qBAAqB,GAAG,MAA9B;;AACA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAjB,EAAuB;AAC9B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKE,MAAL,GAAc,IAAInB,cAAc,CAACoB,gBAAnB,CAAoCJ,QAApC,EAA8CE,IAA9C,CAAd;AACA,SAAKG,cAAL,GAAsB,IAAInB,OAAO,CAACoB,KAAZ,CAAkB;AACpCC,MAAAA,IAAI,EAAE,cAD8B;AAEpCC,MAAAA,WAAW,EAAE,CAFuB;AAGpCC,MAAAA,OAAO,EAAE;AAH2B,KAAlB,CAAtB;AAKA,SAAKC,UAAL,GAAkB,IAAIzB,YAAY,CAAC0B,cAAjB,CAAgCX,QAAhC,EAA0CE,IAA1C,CAAlB;AACA,SAAKU,SAAL,GAAiB,IAAI1B,OAAO,CAACoB,KAAZ,CAAkB;AAC/BC,MAAAA,IAAI,EAAE,YADyB;AAE/BC,MAAAA,WAAW,EAAE,CAFkB;AAG/BC,MAAAA,OAAO,EAAE;AAHsB,KAAlB,CAAjB;AAKH;;AACY,QAAPI,OAAO,GAAG;AACZ,UAAM,KAAKC,UAAL,CAAgB,KAAKb,IAArB,CAAN;AACH;;AACe,QAAVa,UAAU,CAACb,IAAD,EAAO;AACnB,QAAI,MAAM,KAAKI,cAAL,CAAoBU,GAApB,CAAwB,MAAM,KAAKZ,MAAL,CAAYW,UAAZ,CAAuBb,IAAvB,CAA9B,CAAV,EAAuE;AACnE,aAAO,IAAP;AACH;;AACD,QAAIe,cAAc,GAAGpB,yBAArB;AACA,QAAIqB,YAAY,GAAG,CAAnB;AACA,QAAIC,aAAa,GAAGrB,qBAAqB,GAAG,CAA5C;AACA,QAAIsB,SAAS,GAAGxB,yBAAhB;;AACA,WAAO,IAAP,EAAa;AACT,YAAMyB,WAAW,GAAG,MAAM,KAAKR,SAAL,CAAeG,GAAf,CAAmB,MAAM,KAAKL,UAAL,CAAgBW,QAAhB,CAAyBpB,IAAzB,EAA+Be,cAA/B,CAAzB,CAA1B;;AACA,UAAII,WAAW,CAAC5B,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,eAAO,KAAP;AACH;;AACD,YAAMF,MAAM,GAAGH,SAAS,CAACiC,WAAD,EAAcD,SAAd,CAAxB;AACA,UAAIG,YAAY,GAAG,CAAnB;;AACA,WAAK,MAAMC,KAAX,IAAoBjC,MAApB,EAA4B;AACxB,YAAI,MAAM,KAAKkC,aAAL,CAAmBvB,IAAnB,EAAyBsB,KAAzB,CAAV,EAA2C;AACvCD,UAAAA,YAAY,IAAI,CAAhB;AACH;AACJ;;AACD,UAAIA,YAAY,GAAGhC,MAAM,CAACE,MAAP,GAAgB,CAAnC,EAAsC;AAClCyB,QAAAA,YAAY,GAAGE,SAAf;AACAA,QAAAA,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASR,SAAS,GAAG,CAArB,EAAwB,CAACD,aAAa,GAAGC,SAAjB,IAA8B,CAAtD,CAAX,CAAZ;AACH,OAHD,MAIK;AACDD,QAAAA,aAAa,GAAGC,SAAhB;AACAA,QAAAA,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAW,CAACT,YAAY,GAAGE,SAAhB,IAA6B,CAAxC,CAAZ;AACH;;AACD,UAAIH,cAAc,GAAG,CAAjB,IAAsBnB,qBAA1B,EAAiD;AAC7CmB,QAAAA,cAAc,GAAGA,cAAc,GAAG,CAAlC;AACH,OAFD,MAGK;AACDA,QAAAA,cAAc,GAAGS,IAAI,CAACC,KAAL,CAAW7B,qBAAqB,GAAGsB,SAAnC,IAAgDA,SAAjE;AACH;AACJ;AACJ;;AACkB,QAAbK,aAAa,CAACvB,IAAD,EAAO2B,QAAP,EAAiB;AAChC,QAAIA,QAAQ,CAACpC,MAAT,KAAoB,CAAxB,EAA2B;AACvB,YAAM,IAAIqC,KAAJ,CAAU,kDAAV,CAAN;AACH;;AACD,QAAID,QAAQ,CAACpC,MAAT,KAAoB,CAAxB,EAA2B;AACvB,aAAO,KAAKsB,UAAL,CAAgBhC,OAAO,CAACgD,IAAR,CAAa7B,IAAb,EAAmB2B,QAAQ,CAAC,CAAD,CAA3B,CAAhB,CAAP;AACH;;AACD,QAAI,MAAM,KAAKvB,cAAL,CAAoBU,GAApB,CAAwB,MAAM,KAAKZ,MAAL,CAAYqB,aAAZ,CAA0BvB,IAA1B,EAAgC2B,QAAhC,CAA9B,CAAV,EAAoF;AAChF,aAAO,IAAP;AACH;;AACD,UAAMG,GAAG,GAAGN,IAAI,CAACC,KAAL,CAAWE,QAAQ,CAACpC,MAAT,GAAkB,CAA7B,CAAZ;AACA,UAAM,KAAKgC,aAAL,CAAmBvB,IAAnB,EAAyB2B,QAAQ,CAAClC,KAAT,CAAe,CAAf,EAAkBqC,GAAlB,CAAzB,CAAN;AACA,UAAM,KAAKP,aAAL,CAAmBvB,IAAnB,EAAyB2B,QAAQ,CAAClC,KAAT,CAAeqC,GAAf,CAAzB,CAAN;AACA,WAAO,KAAP;AACH;;AArEgB;;AAuErBnD,OAAO,CAACoD,OAAR,GAAkBlC,cAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pathLib = require(\"path\");\nconst removeRemote_1 = require(\"./removeRemote\");\nconst listRemote_1 = require(\"./listRemote\");\nconst stack_1 = require(\"../throttler/stack\");\nfunction chunkList(ls, chunkSize) {\n    const chunks = [];\n    for (let i = 0; i < ls.length; i += chunkSize) {\n        chunks.push(ls.slice(i, i + chunkSize));\n    }\n    return chunks;\n}\nconst INITIAL_DELETE_BATCH_SIZE = 25;\nconst INITIAL_LIST_NUM_SUB_PATH = 100;\nconst MAX_LIST_NUM_SUB_PATH = 204800;\nclass DatabaseRemove {\n    constructor(instance, path, host) {\n        this.path = path;\n        this.remote = new removeRemote_1.RTDBRemoveRemote(instance, host);\n        this.deleteJobStack = new stack_1.Stack({\n            name: \"delete stack\",\n            concurrency: 1,\n            retries: 3,\n        });\n        this.listRemote = new listRemote_1.RTDBListRemote(instance, host);\n        this.listStack = new stack_1.Stack({\n            name: \"list stack\",\n            concurrency: 1,\n            retries: 3,\n        });\n    }\n    async execute() {\n        await this.deletePath(this.path);\n    }\n    async deletePath(path) {\n        if (await this.deleteJobStack.run(() => this.remote.deletePath(path))) {\n            return true;\n        }\n        let listNumSubPath = INITIAL_LIST_NUM_SUB_PATH;\n        let batchSizeLow = 1;\n        let batchSizeHigh = MAX_LIST_NUM_SUB_PATH + 1;\n        let batchSize = INITIAL_DELETE_BATCH_SIZE;\n        while (true) {\n            const subPathList = await this.listStack.run(() => this.listRemote.listPath(path, listNumSubPath));\n            if (subPathList.length === 0) {\n                return false;\n            }\n            const chunks = chunkList(subPathList, batchSize);\n            let nSmallChunks = 0;\n            for (const chunk of chunks) {\n                if (await this.deleteSubPath(path, chunk)) {\n                    nSmallChunks += 1;\n                }\n            }\n            if (nSmallChunks > chunks.length / 2) {\n                batchSizeLow = batchSize;\n                batchSize = Math.floor(Math.min(batchSize * 2, (batchSizeHigh + batchSize) / 2));\n            }\n            else {\n                batchSizeHigh = batchSize;\n                batchSize = Math.floor((batchSizeLow + batchSize) / 2);\n            }\n            if (listNumSubPath * 2 <= MAX_LIST_NUM_SUB_PATH) {\n                listNumSubPath = listNumSubPath * 2;\n            }\n            else {\n                listNumSubPath = Math.floor(MAX_LIST_NUM_SUB_PATH / batchSize) * batchSize;\n            }\n        }\n    }\n    async deleteSubPath(path, subPaths) {\n        if (subPaths.length === 0) {\n            throw new Error(\"deleteSubPath is called with empty subPaths list\");\n        }\n        if (subPaths.length === 1) {\n            return this.deletePath(pathLib.join(path, subPaths[0]));\n        }\n        if (await this.deleteJobStack.run(() => this.remote.deleteSubPath(path, subPaths))) {\n            return true;\n        }\n        const mid = Math.floor(subPaths.length / 2);\n        await this.deleteSubPath(path, subPaths.slice(0, mid));\n        await this.deleteSubPath(path, subPaths.slice(mid));\n        return false;\n    }\n}\nexports.default = DatabaseRemove;\n"]},"metadata":{},"sourceType":"script"}