{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jsonSchema_1 = require(\"../utils/jsonSchema\");\n\nconst validators_1 = require(\"./Schema/validators\");\n\nconst oasUtils_1 = require(\"./oasUtils\");\n\nconst parameterParsers_1 = require(\"./parameterParsers\");\n\nconst urlEncodedBodyParser = __importStar(require(\"./urlEncodedBodyParser\"));\n\nconst DEFAULT_STYLE = {\n  path: 'simple',\n  query: 'form',\n  cookie: 'form',\n  header: 'simple'\n};\n\nfunction getDefaultExplode(style) {\n  return style === 'form';\n}\n\nfunction generateSchemaParser(self, schema) {\n  const style = self.oaParameter.style || DEFAULT_STYLE[self.oaParameter.in];\n  const explode = self.oaParameter.explode === null || self.oaParameter.explode === undefined ? getDefaultExplode(style) : self.oaParameter.explode;\n  const allowReserved = self.oaParameter.allowReserved || false;\n  return parameterParsers_1.generateParser({\n    required: self.oaParameter.required,\n    style,\n    explode,\n    allowReserved,\n    schema\n  });\n}\n\nclass Parameter {\n  constructor(context, oaParameter) {\n    const resOaParameter = oasUtils_1.isReferenceObject(oaParameter) ? context.resolveRef(oaParameter.$ref) : oaParameter;\n    this.location = {\n      in: resOaParameter.in,\n      name: resOaParameter.name,\n      docPath: context.jsonPointer,\n      path: ''\n    };\n    this.name = resOaParameter.name;\n    this.context = context;\n    this.oaParameter = resOaParameter;\n\n    this.validate = value => ({\n      errors: null,\n      value\n    }); // Find the schema for this parameter.\n\n\n    if (resOaParameter.schema) {\n      const schemaContext = context.childContext('schema');\n      const schema = jsonSchema_1.extractSchema(context.openApiDoc, schemaContext.jsonPointer, {\n        resolveRef: context.resolveRef.bind(context)\n      });\n      this.parser = generateSchemaParser(this, schema);\n      this.validate = validators_1.generateRequestValidator(schemaContext, this.location, resOaParameter.required || false, 'application/x-www-form-urlencoded');\n    } else if (resOaParameter.content) {\n      // `parameter.content` must have exactly one key\n      const mediaTypeString = Object.keys(resOaParameter.content)[0];\n      const oaMediaType = resOaParameter.content[mediaTypeString];\n      const mediaTypeContext = context.childContext(['content', mediaTypeString]);\n      let parser = context.options.parameterParsers.get(mediaTypeString); // OAS3 has special handling for 'application/x-www-form-urlencoded'.\n\n      if (!parser && mediaTypeString === 'application/x-www-form-urlencoded') {\n        parser = urlEncodedBodyParser.generateStringParser(mediaTypeContext, oaMediaType, this.location);\n      }\n\n      if (!parser) {\n        throw new Error('Unable to find suitable mime type parser for ' + `type ${mediaTypeString} in ${context.jsonPointer}/content`);\n      } // FIXME: We don't handle 'application/x-www-form-urlencoded' here\n      // correctly.\n\n\n      this.parser = parameterParsers_1.generateParser({\n        required: resOaParameter.required || false,\n        schema: oaMediaType.schema,\n        contentType: mediaTypeString,\n        parser,\n        uriEncoded: ['query', 'path'].includes(resOaParameter.in)\n      });\n\n      if (oaMediaType.schema) {\n        this.validate = validators_1.generateRequestValidator(mediaTypeContext.childContext('schema'), this.location, resOaParameter.required || false, mediaTypeString);\n      }\n    } else {\n      throw new Error(`Parameter ${resOaParameter.name} should have a 'schema' or a 'content'`);\n    }\n  }\n\n}\n\nexports.default = Parameter;","map":{"version":3,"sources":["../../src/oas3/Parameter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonSchema_1 = require(\"../utils/jsonSchema\");\nconst validators_1 = require(\"./Schema/validators\");\nconst oasUtils_1 = require(\"./oasUtils\");\nconst parameterParsers_1 = require(\"./parameterParsers\");\nconst urlEncodedBodyParser = __importStar(require(\"./urlEncodedBodyParser\"));\nconst DEFAULT_STYLE = {\n    path: 'simple',\n    query: 'form',\n    cookie: 'form',\n    header: 'simple',\n};\nfunction getDefaultExplode(style) {\n    return style === 'form';\n}\nfunction generateSchemaParser(self, schema) {\n    const style = self.oaParameter.style || DEFAULT_STYLE[self.oaParameter.in];\n    const explode = self.oaParameter.explode === null || self.oaParameter.explode === undefined\n        ? getDefaultExplode(style)\n        : self.oaParameter.explode;\n    const allowReserved = self.oaParameter.allowReserved || false;\n    return parameterParsers_1.generateParser({\n        required: self.oaParameter.required,\n        style,\n        explode,\n        allowReserved,\n        schema,\n    });\n}\nclass Parameter {\n    constructor(context, oaParameter) {\n        const resOaParameter = oasUtils_1.isReferenceObject(oaParameter)\n            ? context.resolveRef(oaParameter.$ref)\n            : oaParameter;\n        this.location = {\n            in: resOaParameter.in,\n            name: resOaParameter.name,\n            docPath: context.jsonPointer,\n            path: '',\n        };\n        this.name = resOaParameter.name;\n        this.context = context;\n        this.oaParameter = resOaParameter;\n        this.validate = (value) => ({ errors: null, value });\n        // Find the schema for this parameter.\n        if (resOaParameter.schema) {\n            const schemaContext = context.childContext('schema');\n            const schema = jsonSchema_1.extractSchema(context.openApiDoc, schemaContext.jsonPointer, {\n                resolveRef: context.resolveRef.bind(context),\n            });\n            this.parser = generateSchemaParser(this, schema);\n            this.validate = validators_1.generateRequestValidator(schemaContext, this.location, resOaParameter.required || false, 'application/x-www-form-urlencoded');\n        }\n        else if (resOaParameter.content) {\n            // `parameter.content` must have exactly one key\n            const mediaTypeString = Object.keys(resOaParameter.content)[0];\n            const oaMediaType = resOaParameter.content[mediaTypeString];\n            const mediaTypeContext = context.childContext(['content', mediaTypeString]);\n            let parser = context.options.parameterParsers.get(mediaTypeString);\n            // OAS3 has special handling for 'application/x-www-form-urlencoded'.\n            if (!parser && mediaTypeString === 'application/x-www-form-urlencoded') {\n                parser = urlEncodedBodyParser.generateStringParser(mediaTypeContext, oaMediaType, this.location);\n            }\n            if (!parser) {\n                throw new Error('Unable to find suitable mime type parser for ' +\n                    `type ${mediaTypeString} in ${context.jsonPointer}/content`);\n            }\n            // FIXME: We don't handle 'application/x-www-form-urlencoded' here\n            // correctly.\n            this.parser = parameterParsers_1.generateParser({\n                required: resOaParameter.required || false,\n                schema: oaMediaType.schema,\n                contentType: mediaTypeString,\n                parser,\n                uriEncoded: ['query', 'path'].includes(resOaParameter.in),\n            });\n            if (oaMediaType.schema) {\n                this.validate = validators_1.generateRequestValidator(mediaTypeContext.childContext('schema'), this.location, resOaParameter.required || false, mediaTypeString);\n            }\n        }\n        else {\n            throw new Error(`Parameter ${resOaParameter.name} should have a 'schema' or a 'content'`);\n        }\n    }\n}\nexports.default = Parameter;\n//# sourceMappingURL=Parameter.js.map"]},"metadata":{},"sourceType":"script"}