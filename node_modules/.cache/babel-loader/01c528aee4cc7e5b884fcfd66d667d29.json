{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DockerHelper = exports.deleteGcfArtifacts = exports.listGcfPaths = exports.ContainerRegistryCleaner = exports.cleanupBuildImages = exports.SUBDOMAIN_MAPPING = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst api_1 = require(\"../../api\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst docker = require(\"../../gcp/docker\");\n\nconst backend = require(\"./backend\");\n\nconst utils = require(\"../../utils\");\n\nconst error_1 = require(\"../../error\");\n\nexports.SUBDOMAIN_MAPPING = {\n  \"us-west2\": \"us\",\n  \"us-west3\": \"us\",\n  \"us-west4\": \"us\",\n  \"us-central1\": \"us\",\n  \"us-central2\": \"us\",\n  \"us-east1\": \"us\",\n  \"us-east4\": \"us\",\n  \"northamerica-northeast1\": \"us\",\n  \"southamerica-east1\": \"us\",\n  \"europe-west1\": \"eu\",\n  \"europe-west2\": \"eu\",\n  \"europe-west3\": \"eu\",\n  \"europe-west5\": \"eu\",\n  \"europe-west6\": \"eu\",\n  \"europe-central2\": \"eu\",\n  \"asia-east1\": \"asia\",\n  \"asia-east2\": \"asia\",\n  \"asia-northeast1\": \"asia\",\n  \"asia-northeast2\": \"asia\",\n  \"asia-northeast3\": \"asia\",\n  \"asia-south1\": \"asia\",\n  \"asia-southeast2\": \"asia\",\n  \"australia-southeast1\": \"asia\"\n};\n\nasync function retry(func) {\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  const MAX_RETRIES = 3;\n  const INITIAL_BACKOFF = 100;\n  let retry = 0;\n\n  while (true) {\n    try {\n      return await func();\n    } catch (error) {\n      logger_1.logger.debug(\"Failed docker command with error\", error);\n      retry += 1;\n\n      if (retry >= MAX_RETRIES) {\n        throw new error_1.FirebaseError(\"Failed to clean up artifacts\", {\n          original: error\n        });\n      }\n\n      await sleep(Math.pow(INITIAL_BACKOFF, retry - 1));\n    }\n  }\n}\n\nasync function cleanupBuildImages(functions) {\n  utils.logBullet(clc.bold.cyan(\"functions: \") + \"cleaning up build files...\");\n  const gcrCleaner = new ContainerRegistryCleaner();\n  const failedDomains = new Set();\n  await Promise.all(functions.map(func => (async () => {\n    try {\n      await gcrCleaner.cleanupFunction(func);\n    } catch (err) {\n      const path = `${func.project}/${exports.SUBDOMAIN_MAPPING[func.region]}/gcf`;\n      failedDomains.add(`https://console.cloud.google.com/gcr/images/${path}`);\n    }\n  })()));\n\n  if (failedDomains.size) {\n    let message = \"Unhandled error cleaning up build images. This could result in a small monthly bill if not corrected. \";\n    message += \"You can attempt to delete these images by redeploying or you can delete them manually at\";\n\n    if (failedDomains.size == 1) {\n      message += \" \" + failedDomains.values().next().value;\n    } else {\n      message += [...failedDomains].map(domain => \"\\n\\t\" + domain).join(\"\");\n    }\n\n    utils.logLabeledWarning(\"functions\", message);\n  }\n}\n\nexports.cleanupBuildImages = cleanupBuildImages;\n\nclass ContainerRegistryCleaner {\n  constructor() {\n    this.helpers = {};\n  }\n\n  helper(location) {\n    const subdomain = exports.SUBDOMAIN_MAPPING[location] || \"us\";\n\n    if (!this.helpers[subdomain]) {\n      const origin = `https://${subdomain}.${api_1.containerRegistryDomain}`;\n      this.helpers[subdomain] = new DockerHelper(origin);\n    }\n\n    return this.helpers[subdomain];\n  }\n\n  async cleanupFunction(func) {\n    const helper = this.helper(func.region);\n    const uuids = (await helper.ls(`${func.project}/gcf/${func.region}`)).children;\n    const uuidTags = {};\n    const loadUuidTags = [];\n\n    for (const uuid of uuids) {\n      loadUuidTags.push((async () => {\n        const path = `${func.project}/gcf/${func.region}/${uuid}`;\n        const tags = (await helper.ls(path)).tags;\n        uuidTags[path] = tags;\n      })());\n    }\n\n    await Promise.all(loadUuidTags);\n    const extractFunction = /^(.*)_version-\\d+$/;\n    const entry = Object.entries(uuidTags).find(([, tags]) => {\n      return tags.find(tag => {\n        var _a;\n\n        return ((_a = extractFunction.exec(tag)) === null || _a === void 0 ? void 0 : _a[1]) === func.id;\n      });\n    });\n\n    if (!entry) {\n      logger_1.logger.debug(\"Could not find image for function\", backend.functionName(func));\n      return;\n    }\n\n    await helper.rm(entry[0]);\n  }\n\n}\n\nexports.ContainerRegistryCleaner = ContainerRegistryCleaner;\n\nfunction getHelper(cache, subdomain) {\n  if (!cache[subdomain]) {\n    cache[subdomain] = new DockerHelper(`https://${subdomain}.${api_1.containerRegistryDomain}`);\n  }\n\n  return cache[subdomain];\n}\n\nasync function listGcfPaths(projectId, locations, dockerHelpers = {}) {\n  if (!locations) {\n    locations = Object.keys(exports.SUBDOMAIN_MAPPING);\n  }\n\n  const invalidRegion = locations.find(loc => !exports.SUBDOMAIN_MAPPING[loc]);\n\n  if (invalidRegion) {\n    throw new error_1.FirebaseError(`Invalid region ${invalidRegion} supplied`);\n  }\n\n  const locationsSet = new Set(locations);\n  const subdomains = new Set(Object.values(exports.SUBDOMAIN_MAPPING));\n  const failedSubdomains = [];\n  const listAll = [];\n\n  for (const subdomain of subdomains) {\n    listAll.push((async () => {\n      try {\n        return getHelper(dockerHelpers, subdomain).ls(`${projectId}/gcf`);\n      } catch (err) {\n        failedSubdomains.push(subdomain);\n        logger_1.logger.debug(err);\n        const stat = {\n          children: [],\n          digests: [],\n          tags: []\n        };\n        return Promise.resolve(stat);\n      }\n    })());\n  }\n\n  const gcfDirs = (await Promise.all(listAll)).map(results => results.children).reduce((acc, val) => [...acc, ...val], []).filter(loc => locationsSet.has(loc));\n\n  if (failedSubdomains.length == subdomains.size) {\n    throw new error_1.FirebaseError(\"Failed to search all subdomains.\");\n  } else if (failedSubdomains.length > 0) {\n    throw new error_1.FirebaseError(`Failed to search the following subdomains: ${failedSubdomains.join(\",\")}`);\n  }\n\n  return gcfDirs.map(loc => {\n    return `${exports.SUBDOMAIN_MAPPING[loc]}.${api_1.containerRegistryDomain}/${projectId}/gcf/${loc}`;\n  });\n}\n\nexports.listGcfPaths = listGcfPaths;\n\nasync function deleteGcfArtifacts(projectId, locations, dockerHelpers = {}) {\n  if (!locations) {\n    locations = Object.keys(exports.SUBDOMAIN_MAPPING);\n  }\n\n  const invalidRegion = locations.find(loc => !exports.SUBDOMAIN_MAPPING[loc]);\n\n  if (invalidRegion) {\n    throw new error_1.FirebaseError(`Invalid region ${invalidRegion} supplied`);\n  }\n\n  const subdomains = new Set(Object.values(exports.SUBDOMAIN_MAPPING));\n  const failedSubdomains = [];\n  const deleteLocations = locations.map(loc => {\n    try {\n      return getHelper(dockerHelpers, exports.SUBDOMAIN_MAPPING[loc]).rm(`${projectId}/gcf/${loc}`);\n    } catch (err) {\n      failedSubdomains.push(exports.SUBDOMAIN_MAPPING[loc]);\n      logger_1.logger.debug(err);\n    }\n  });\n  await Promise.all(deleteLocations);\n\n  if (failedSubdomains.length == subdomains.size) {\n    throw new error_1.FirebaseError(\"Failed to search all subdomains.\");\n  } else if (failedSubdomains.length > 0) {\n    throw new error_1.FirebaseError(`Failed to search the following subdomains: ${failedSubdomains.join(\",\")}`);\n  }\n}\n\nexports.deleteGcfArtifacts = deleteGcfArtifacts;\n\nclass DockerHelper {\n  constructor(origin) {\n    this.cache = {};\n    this.client = new docker.Client(origin);\n  }\n\n  async ls(path) {\n    if (!this.cache[path]) {\n      const raw = await retry(() => this.client.listTags(path));\n      this.cache[path] = {\n        tags: raw.tags,\n        digests: Object.keys(raw.manifest),\n        children: raw.child\n      };\n    }\n\n    return this.cache[path];\n  }\n\n  async rm(path) {\n    let toThrowLater = undefined;\n    const stat = await this.ls(path);\n    const recursive = stat.children.map(child => (async () => {\n      try {\n        await this.rm(`${path}/${child}`);\n        stat.children.splice(stat.children.indexOf(child), 1);\n      } catch (err) {\n        toThrowLater = err;\n      }\n    })());\n    const deleteTags = stat.tags.map(tag => (async () => {\n      try {\n        await retry(() => this.client.deleteTag(path, tag));\n        stat.tags.splice(stat.tags.indexOf(tag), 1);\n      } catch (err) {\n        logger_1.logger.debug(\"Got error trying to remove docker tag:\", err);\n        toThrowLater = err;\n      }\n    })());\n    await Promise.all(deleteTags);\n    const deleteImages = stat.digests.map(digest => (async () => {\n      try {\n        await retry(() => this.client.deleteImage(path, digest));\n        stat.digests.splice(stat.digests.indexOf(digest), 1);\n      } catch (err) {\n        logger_1.logger.debug(\"Got error trying to remove docker image:\", err);\n        toThrowLater = err;\n      }\n    })());\n    await Promise.all(deleteImages);\n    await Promise.all(recursive);\n\n    if (toThrowLater) {\n      throw toThrowLater;\n    }\n  }\n\n}\n\nexports.DockerHelper = DockerHelper;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/containerCleaner.js"],"names":["Object","defineProperty","exports","value","DockerHelper","deleteGcfArtifacts","listGcfPaths","ContainerRegistryCleaner","cleanupBuildImages","SUBDOMAIN_MAPPING","clc","require","api_1","logger_1","docker","backend","utils","error_1","retry","func","sleep","ms","Promise","resolve","setTimeout","MAX_RETRIES","INITIAL_BACKOFF","error","logger","debug","FirebaseError","original","Math","pow","functions","logBullet","bold","cyan","gcrCleaner","failedDomains","Set","all","map","cleanupFunction","err","path","project","region","add","size","message","values","next","domain","join","logLabeledWarning","constructor","helpers","helper","location","subdomain","origin","containerRegistryDomain","uuids","ls","children","uuidTags","loadUuidTags","uuid","push","tags","extractFunction","entry","entries","find","tag","_a","exec","id","functionName","rm","getHelper","cache","projectId","locations","dockerHelpers","keys","invalidRegion","loc","locationsSet","subdomains","failedSubdomains","listAll","stat","digests","gcfDirs","results","reduce","acc","val","filter","has","length","deleteLocations","client","Client","raw","listTags","manifest","child","toThrowLater","undefined","recursive","splice","indexOf","deleteTags","deleteTag","deleteImages","digest","deleteImage"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DockerHelper = exports.deleteGcfArtifacts = exports.listGcfPaths = exports.ContainerRegistryCleaner = exports.cleanupBuildImages = exports.SUBDOMAIN_MAPPING = void 0;\nconst clc = require(\"cli-color\");\nconst api_1 = require(\"../../api\");\nconst logger_1 = require(\"../../logger\");\nconst docker = require(\"../../gcp/docker\");\nconst backend = require(\"./backend\");\nconst utils = require(\"../../utils\");\nconst error_1 = require(\"../../error\");\nexports.SUBDOMAIN_MAPPING = {\n    \"us-west2\": \"us\",\n    \"us-west3\": \"us\",\n    \"us-west4\": \"us\",\n    \"us-central1\": \"us\",\n    \"us-central2\": \"us\",\n    \"us-east1\": \"us\",\n    \"us-east4\": \"us\",\n    \"northamerica-northeast1\": \"us\",\n    \"southamerica-east1\": \"us\",\n    \"europe-west1\": \"eu\",\n    \"europe-west2\": \"eu\",\n    \"europe-west3\": \"eu\",\n    \"europe-west5\": \"eu\",\n    \"europe-west6\": \"eu\",\n    \"europe-central2\": \"eu\",\n    \"asia-east1\": \"asia\",\n    \"asia-east2\": \"asia\",\n    \"asia-northeast1\": \"asia\",\n    \"asia-northeast2\": \"asia\",\n    \"asia-northeast3\": \"asia\",\n    \"asia-south1\": \"asia\",\n    \"asia-southeast2\": \"asia\",\n    \"australia-southeast1\": \"asia\",\n};\nasync function retry(func) {\n    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n    const MAX_RETRIES = 3;\n    const INITIAL_BACKOFF = 100;\n    let retry = 0;\n    while (true) {\n        try {\n            return await func();\n        }\n        catch (error) {\n            logger_1.logger.debug(\"Failed docker command with error\", error);\n            retry += 1;\n            if (retry >= MAX_RETRIES) {\n                throw new error_1.FirebaseError(\"Failed to clean up artifacts\", { original: error });\n            }\n            await sleep(Math.pow(INITIAL_BACKOFF, retry - 1));\n        }\n    }\n}\nasync function cleanupBuildImages(functions) {\n    utils.logBullet(clc.bold.cyan(\"functions: \") + \"cleaning up build files...\");\n    const gcrCleaner = new ContainerRegistryCleaner();\n    const failedDomains = new Set();\n    await Promise.all(functions.map((func) => (async () => {\n        try {\n            await gcrCleaner.cleanupFunction(func);\n        }\n        catch (err) {\n            const path = `${func.project}/${exports.SUBDOMAIN_MAPPING[func.region]}/gcf`;\n            failedDomains.add(`https://console.cloud.google.com/gcr/images/${path}`);\n        }\n    })()));\n    if (failedDomains.size) {\n        let message = \"Unhandled error cleaning up build images. This could result in a small monthly bill if not corrected. \";\n        message +=\n            \"You can attempt to delete these images by redeploying or you can delete them manually at\";\n        if (failedDomains.size == 1) {\n            message += \" \" + failedDomains.values().next().value;\n        }\n        else {\n            message += [...failedDomains].map((domain) => \"\\n\\t\" + domain).join(\"\");\n        }\n        utils.logLabeledWarning(\"functions\", message);\n    }\n}\nexports.cleanupBuildImages = cleanupBuildImages;\nclass ContainerRegistryCleaner {\n    constructor() {\n        this.helpers = {};\n    }\n    helper(location) {\n        const subdomain = exports.SUBDOMAIN_MAPPING[location] || \"us\";\n        if (!this.helpers[subdomain]) {\n            const origin = `https://${subdomain}.${api_1.containerRegistryDomain}`;\n            this.helpers[subdomain] = new DockerHelper(origin);\n        }\n        return this.helpers[subdomain];\n    }\n    async cleanupFunction(func) {\n        const helper = this.helper(func.region);\n        const uuids = (await helper.ls(`${func.project}/gcf/${func.region}`)).children;\n        const uuidTags = {};\n        const loadUuidTags = [];\n        for (const uuid of uuids) {\n            loadUuidTags.push((async () => {\n                const path = `${func.project}/gcf/${func.region}/${uuid}`;\n                const tags = (await helper.ls(path)).tags;\n                uuidTags[path] = tags;\n            })());\n        }\n        await Promise.all(loadUuidTags);\n        const extractFunction = /^(.*)_version-\\d+$/;\n        const entry = Object.entries(uuidTags).find(([, tags]) => {\n            return tags.find((tag) => { var _a; return ((_a = extractFunction.exec(tag)) === null || _a === void 0 ? void 0 : _a[1]) === func.id; });\n        });\n        if (!entry) {\n            logger_1.logger.debug(\"Could not find image for function\", backend.functionName(func));\n            return;\n        }\n        await helper.rm(entry[0]);\n    }\n}\nexports.ContainerRegistryCleaner = ContainerRegistryCleaner;\nfunction getHelper(cache, subdomain) {\n    if (!cache[subdomain]) {\n        cache[subdomain] = new DockerHelper(`https://${subdomain}.${api_1.containerRegistryDomain}`);\n    }\n    return cache[subdomain];\n}\nasync function listGcfPaths(projectId, locations, dockerHelpers = {}) {\n    if (!locations) {\n        locations = Object.keys(exports.SUBDOMAIN_MAPPING);\n    }\n    const invalidRegion = locations.find((loc) => !exports.SUBDOMAIN_MAPPING[loc]);\n    if (invalidRegion) {\n        throw new error_1.FirebaseError(`Invalid region ${invalidRegion} supplied`);\n    }\n    const locationsSet = new Set(locations);\n    const subdomains = new Set(Object.values(exports.SUBDOMAIN_MAPPING));\n    const failedSubdomains = [];\n    const listAll = [];\n    for (const subdomain of subdomains) {\n        listAll.push((async () => {\n            try {\n                return getHelper(dockerHelpers, subdomain).ls(`${projectId}/gcf`);\n            }\n            catch (err) {\n                failedSubdomains.push(subdomain);\n                logger_1.logger.debug(err);\n                const stat = {\n                    children: [],\n                    digests: [],\n                    tags: [],\n                };\n                return Promise.resolve(stat);\n            }\n        })());\n    }\n    const gcfDirs = (await Promise.all(listAll))\n        .map((results) => results.children)\n        .reduce((acc, val) => [...acc, ...val], [])\n        .filter((loc) => locationsSet.has(loc));\n    if (failedSubdomains.length == subdomains.size) {\n        throw new error_1.FirebaseError(\"Failed to search all subdomains.\");\n    }\n    else if (failedSubdomains.length > 0) {\n        throw new error_1.FirebaseError(`Failed to search the following subdomains: ${failedSubdomains.join(\",\")}`);\n    }\n    return gcfDirs.map((loc) => {\n        return `${exports.SUBDOMAIN_MAPPING[loc]}.${api_1.containerRegistryDomain}/${projectId}/gcf/${loc}`;\n    });\n}\nexports.listGcfPaths = listGcfPaths;\nasync function deleteGcfArtifacts(projectId, locations, dockerHelpers = {}) {\n    if (!locations) {\n        locations = Object.keys(exports.SUBDOMAIN_MAPPING);\n    }\n    const invalidRegion = locations.find((loc) => !exports.SUBDOMAIN_MAPPING[loc]);\n    if (invalidRegion) {\n        throw new error_1.FirebaseError(`Invalid region ${invalidRegion} supplied`);\n    }\n    const subdomains = new Set(Object.values(exports.SUBDOMAIN_MAPPING));\n    const failedSubdomains = [];\n    const deleteLocations = locations.map((loc) => {\n        try {\n            return getHelper(dockerHelpers, exports.SUBDOMAIN_MAPPING[loc]).rm(`${projectId}/gcf/${loc}`);\n        }\n        catch (err) {\n            failedSubdomains.push(exports.SUBDOMAIN_MAPPING[loc]);\n            logger_1.logger.debug(err);\n        }\n    });\n    await Promise.all(deleteLocations);\n    if (failedSubdomains.length == subdomains.size) {\n        throw new error_1.FirebaseError(\"Failed to search all subdomains.\");\n    }\n    else if (failedSubdomains.length > 0) {\n        throw new error_1.FirebaseError(`Failed to search the following subdomains: ${failedSubdomains.join(\",\")}`);\n    }\n}\nexports.deleteGcfArtifacts = deleteGcfArtifacts;\nclass DockerHelper {\n    constructor(origin) {\n        this.cache = {};\n        this.client = new docker.Client(origin);\n    }\n    async ls(path) {\n        if (!this.cache[path]) {\n            const raw = await retry(() => this.client.listTags(path));\n            this.cache[path] = {\n                tags: raw.tags,\n                digests: Object.keys(raw.manifest),\n                children: raw.child,\n            };\n        }\n        return this.cache[path];\n    }\n    async rm(path) {\n        let toThrowLater = undefined;\n        const stat = await this.ls(path);\n        const recursive = stat.children.map((child) => (async () => {\n            try {\n                await this.rm(`${path}/${child}`);\n                stat.children.splice(stat.children.indexOf(child), 1);\n            }\n            catch (err) {\n                toThrowLater = err;\n            }\n        })());\n        const deleteTags = stat.tags.map((tag) => (async () => {\n            try {\n                await retry(() => this.client.deleteTag(path, tag));\n                stat.tags.splice(stat.tags.indexOf(tag), 1);\n            }\n            catch (err) {\n                logger_1.logger.debug(\"Got error trying to remove docker tag:\", err);\n                toThrowLater = err;\n            }\n        })());\n        await Promise.all(deleteTags);\n        const deleteImages = stat.digests.map((digest) => (async () => {\n            try {\n                await retry(() => this.client.deleteImage(path, digest));\n                stat.digests.splice(stat.digests.indexOf(digest), 1);\n            }\n            catch (err) {\n                logger_1.logger.debug(\"Got error trying to remove docker image:\", err);\n                toThrowLater = err;\n            }\n        })());\n        await Promise.all(deleteImages);\n        await Promise.all(recursive);\n        if (toThrowLater) {\n            throw toThrowLater;\n        }\n    }\n}\nexports.DockerHelper = DockerHelper;\n"]},"metadata":{},"sourceType":"script"}