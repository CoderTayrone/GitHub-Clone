{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst ora = require(\"ora\");\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst error_1 = require(\"../error\");\n\nconst apps_1 = require(\"../management/apps\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst logger_1 = require(\"../logger\");\n\nconst DISPLAY_NAME_QUESTION = {\n  type: \"input\",\n  name: \"displayName\",\n  default: \"\",\n  message: \"What would you like to call your app?\"\n};\n\nfunction logPostAppCreationInformation(appMetadata, appPlatform) {\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(`ðŸŽ‰ðŸŽ‰ðŸŽ‰ Your Firebase ${appPlatform} App is ready! ðŸŽ‰ðŸŽ‰ðŸŽ‰`);\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(\"App information:\");\n  logger_1.logger.info(`  - App ID: ${appMetadata.appId}`);\n\n  if (appMetadata.displayName) {\n    logger_1.logger.info(`  - Display name: ${appMetadata.displayName}`);\n  }\n\n  if (appPlatform === apps_1.AppPlatform.IOS) {\n    const iosAppMetadata = appMetadata;\n    logger_1.logger.info(`  - Bundle ID: ${iosAppMetadata.bundleId}`);\n\n    if (iosAppMetadata.appStoreId) {\n      logger_1.logger.info(`  - App Store ID: ${iosAppMetadata.appStoreId}`);\n    }\n  } else if (appPlatform === apps_1.AppPlatform.ANDROID) {\n    logger_1.logger.info(`  - Package name: ${appMetadata.packageName}`);\n  }\n\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(\"You can run this command to print out your new app's Google Services config:\");\n  logger_1.logger.info(`  firebase apps:sdkconfig ${appPlatform} ${appMetadata.appId}`);\n}\n\nasync function initiateIosAppCreation(options) {\n  if (!options.nonInteractive) {\n    await prompt_1.prompt(options, [DISPLAY_NAME_QUESTION, {\n      type: \"input\",\n      default: \"\",\n      name: \"bundleId\",\n      message: \"Please specify your iOS app bundle ID:\"\n    }, {\n      type: \"input\",\n      default: \"\",\n      name: \"appStoreId\",\n      message: \"Please specify your iOS app App Store ID:\"\n    }]);\n  }\n\n  if (!options.bundleId) {\n    throw new error_1.FirebaseError(\"Bundle ID for iOS app cannot be empty\");\n  }\n\n  const spinner = ora(\"Creating your iOS app\").start();\n\n  try {\n    const appData = await apps_1.createIosApp(options.project, {\n      displayName: options.displayName,\n      bundleId: options.bundleId,\n      appStoreId: options.appStoreId\n    });\n    spinner.succeed();\n    return appData;\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n}\n\nasync function initiateAndroidAppCreation(options) {\n  if (!options.nonInteractive) {\n    await prompt_1.prompt(options, [DISPLAY_NAME_QUESTION, {\n      type: \"input\",\n      default: \"\",\n      name: \"packageName\",\n      message: \"Please specify your Android app package name:\"\n    }]);\n  }\n\n  if (!options.packageName) {\n    throw new error_1.FirebaseError(\"Package name for Android app cannot be empty\");\n  }\n\n  const spinner = ora(\"Creating your Android app\").start();\n\n  try {\n    const appData = await apps_1.createAndroidApp(options.project, {\n      displayName: options.displayName,\n      packageName: options.packageName\n    });\n    spinner.succeed();\n    return appData;\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n}\n\nasync function initiateWebAppCreation(options) {\n  if (!options.nonInteractive) {\n    await prompt_1.prompt(options, [DISPLAY_NAME_QUESTION]);\n  }\n\n  if (!options.displayName) {\n    throw new error_1.FirebaseError(\"Display name for Web app cannot be empty\");\n  }\n\n  const spinner = ora(\"Creating your Web app\").start();\n\n  try {\n    const appData = await apps_1.createWebApp(options.project, {\n      displayName: options.displayName\n    });\n    spinner.succeed();\n    return appData;\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n}\n\nmodule.exports = new command_1.Command(\"apps:create [platform] [displayName]\").description(\"create a new Firebase app. [platform] can be IOS, ANDROID or WEB (case insensitive).\").option(\"-a, --package-name <packageName>\", \"required package name for the Android app\").option(\"-b, --bundle-id <bundleId>\", \"required bundle id for the iOS app\").option(\"-s, --app-store-id <appStoreId>\", \"(optional) app store id for the iOS app\").before(requireAuth_1.requireAuth).action(async (platform = \"\", displayName, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n\n  if (!options.nonInteractive && !platform) {\n    platform = await prompt_1.promptOnce({\n      type: \"list\",\n      message: \"Please choose the platform of the app:\",\n      choices: [{\n        name: \"iOS\",\n        value: apps_1.AppPlatform.IOS\n      }, {\n        name: \"Android\",\n        value: apps_1.AppPlatform.ANDROID\n      }, {\n        name: \"Web\",\n        value: apps_1.AppPlatform.WEB\n      }]\n    });\n  }\n\n  const appPlatform = apps_1.getAppPlatform(platform);\n\n  if (appPlatform === apps_1.AppPlatform.ANY) {\n    throw new error_1.FirebaseError(\"App platform must be provided\");\n  }\n\n  logger_1.logger.info(`Create your ${appPlatform} app in project ${clc.bold(projectId)}:`);\n  options.displayName = displayName;\n  let appData;\n\n  switch (appPlatform) {\n    case apps_1.AppPlatform.IOS:\n      appData = await initiateIosAppCreation(options);\n      break;\n\n    case apps_1.AppPlatform.ANDROID:\n      appData = await initiateAndroidAppCreation(options);\n      break;\n\n    case apps_1.AppPlatform.WEB:\n      appData = await initiateWebAppCreation(options);\n      break;\n\n    default:\n      throw new error_1.FirebaseError(\"Unexpected error. This should not happen\");\n  }\n\n  logPostAppCreationInformation(appData, appPlatform);\n  return appData;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/apps-create.js"],"names":["Object","defineProperty","exports","value","clc","require","ora","command_1","projectUtils_1","error_1","apps_1","prompt_1","requireAuth_1","logger_1","DISPLAY_NAME_QUESTION","type","name","default","message","logPostAppCreationInformation","appMetadata","appPlatform","logger","info","appId","displayName","AppPlatform","IOS","iosAppMetadata","bundleId","appStoreId","ANDROID","packageName","initiateIosAppCreation","options","nonInteractive","prompt","FirebaseError","spinner","start","appData","createIosApp","project","succeed","err","fail","initiateAndroidAppCreation","createAndroidApp","initiateWebAppCreation","createWebApp","module","Command","description","option","before","requireAuth","action","platform","projectId","needProjectId","promptOnce","choices","WEB","getAppPlatform","ANY","bold"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst ora = require(\"ora\");\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst error_1 = require(\"../error\");\nconst apps_1 = require(\"../management/apps\");\nconst prompt_1 = require(\"../prompt\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst logger_1 = require(\"../logger\");\nconst DISPLAY_NAME_QUESTION = {\n    type: \"input\",\n    name: \"displayName\",\n    default: \"\",\n    message: \"What would you like to call your app?\",\n};\nfunction logPostAppCreationInformation(appMetadata, appPlatform) {\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(`ðŸŽ‰ðŸŽ‰ðŸŽ‰ Your Firebase ${appPlatform} App is ready! ðŸŽ‰ðŸŽ‰ðŸŽ‰`);\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(\"App information:\");\n    logger_1.logger.info(`  - App ID: ${appMetadata.appId}`);\n    if (appMetadata.displayName) {\n        logger_1.logger.info(`  - Display name: ${appMetadata.displayName}`);\n    }\n    if (appPlatform === apps_1.AppPlatform.IOS) {\n        const iosAppMetadata = appMetadata;\n        logger_1.logger.info(`  - Bundle ID: ${iosAppMetadata.bundleId}`);\n        if (iosAppMetadata.appStoreId) {\n            logger_1.logger.info(`  - App Store ID: ${iosAppMetadata.appStoreId}`);\n        }\n    }\n    else if (appPlatform === apps_1.AppPlatform.ANDROID) {\n        logger_1.logger.info(`  - Package name: ${appMetadata.packageName}`);\n    }\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(\"You can run this command to print out your new app's Google Services config:\");\n    logger_1.logger.info(`  firebase apps:sdkconfig ${appPlatform} ${appMetadata.appId}`);\n}\nasync function initiateIosAppCreation(options) {\n    if (!options.nonInteractive) {\n        await prompt_1.prompt(options, [\n            DISPLAY_NAME_QUESTION,\n            {\n                type: \"input\",\n                default: \"\",\n                name: \"bundleId\",\n                message: \"Please specify your iOS app bundle ID:\",\n            },\n            {\n                type: \"input\",\n                default: \"\",\n                name: \"appStoreId\",\n                message: \"Please specify your iOS app App Store ID:\",\n            },\n        ]);\n    }\n    if (!options.bundleId) {\n        throw new error_1.FirebaseError(\"Bundle ID for iOS app cannot be empty\");\n    }\n    const spinner = ora(\"Creating your iOS app\").start();\n    try {\n        const appData = await apps_1.createIosApp(options.project, {\n            displayName: options.displayName,\n            bundleId: options.bundleId,\n            appStoreId: options.appStoreId,\n        });\n        spinner.succeed();\n        return appData;\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n}\nasync function initiateAndroidAppCreation(options) {\n    if (!options.nonInteractive) {\n        await prompt_1.prompt(options, [\n            DISPLAY_NAME_QUESTION,\n            {\n                type: \"input\",\n                default: \"\",\n                name: \"packageName\",\n                message: \"Please specify your Android app package name:\",\n            },\n        ]);\n    }\n    if (!options.packageName) {\n        throw new error_1.FirebaseError(\"Package name for Android app cannot be empty\");\n    }\n    const spinner = ora(\"Creating your Android app\").start();\n    try {\n        const appData = await apps_1.createAndroidApp(options.project, {\n            displayName: options.displayName,\n            packageName: options.packageName,\n        });\n        spinner.succeed();\n        return appData;\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n}\nasync function initiateWebAppCreation(options) {\n    if (!options.nonInteractive) {\n        await prompt_1.prompt(options, [DISPLAY_NAME_QUESTION]);\n    }\n    if (!options.displayName) {\n        throw new error_1.FirebaseError(\"Display name for Web app cannot be empty\");\n    }\n    const spinner = ora(\"Creating your Web app\").start();\n    try {\n        const appData = await apps_1.createWebApp(options.project, { displayName: options.displayName });\n        spinner.succeed();\n        return appData;\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n}\nmodule.exports = new command_1.Command(\"apps:create [platform] [displayName]\")\n    .description(\"create a new Firebase app. [platform] can be IOS, ANDROID or WEB (case insensitive).\")\n    .option(\"-a, --package-name <packageName>\", \"required package name for the Android app\")\n    .option(\"-b, --bundle-id <bundleId>\", \"required bundle id for the iOS app\")\n    .option(\"-s, --app-store-id <appStoreId>\", \"(optional) app store id for the iOS app\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (platform = \"\", displayName, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    if (!options.nonInteractive && !platform) {\n        platform = await prompt_1.promptOnce({\n            type: \"list\",\n            message: \"Please choose the platform of the app:\",\n            choices: [\n                { name: \"iOS\", value: apps_1.AppPlatform.IOS },\n                { name: \"Android\", value: apps_1.AppPlatform.ANDROID },\n                { name: \"Web\", value: apps_1.AppPlatform.WEB },\n            ],\n        });\n    }\n    const appPlatform = apps_1.getAppPlatform(platform);\n    if (appPlatform === apps_1.AppPlatform.ANY) {\n        throw new error_1.FirebaseError(\"App platform must be provided\");\n    }\n    logger_1.logger.info(`Create your ${appPlatform} app in project ${clc.bold(projectId)}:`);\n    options.displayName = displayName;\n    let appData;\n    switch (appPlatform) {\n        case apps_1.AppPlatform.IOS:\n            appData = await initiateIosAppCreation(options);\n            break;\n        case apps_1.AppPlatform.ANDROID:\n            appData = await initiateAndroidAppCreation(options);\n            break;\n        case apps_1.AppPlatform.WEB:\n            appData = await initiateWebAppCreation(options);\n            break;\n        default:\n            throw new error_1.FirebaseError(\"Unexpected error. This should not happen\");\n    }\n    logPostAppCreationInformation(appData, appPlatform);\n    return appData;\n});\n"]},"metadata":{},"sourceType":"script"}