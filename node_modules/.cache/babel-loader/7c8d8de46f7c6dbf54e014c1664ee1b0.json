{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mirrorFieldTo = exports.authEmulatorUrl = exports.logError = exports.toUnixTimestamp = exports.randomDigits = exports.randomBase64UrlStr = exports.randomId = exports.parseAbsoluteUri = exports.canonicalizeEmailAddress = exports.isValidPhoneNumber = exports.isValidEmailAddress = void 0;\n\nconst url_1 = require(\"url\");\n\nconst registry_1 = require(\"../registry\");\n\nconst types_1 = require(\"../types\");\n\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\n\nfunction isValidEmailAddress(email) {\n  return /^[^@]+@[^@]+$/.test(email);\n}\n\nexports.isValidEmailAddress = isValidEmailAddress;\n\nfunction isValidPhoneNumber(phoneNumber) {\n  return /^\\+/.test(phoneNumber);\n}\n\nexports.isValidPhoneNumber = isValidPhoneNumber;\n\nfunction canonicalizeEmailAddress(email) {\n  return email.toLowerCase();\n}\n\nexports.canonicalizeEmailAddress = canonicalizeEmailAddress;\n\nfunction parseAbsoluteUri(uri) {\n  try {\n    return new url_1.URL(uri);\n  } catch (_a) {\n    return undefined;\n  }\n}\n\nexports.parseAbsoluteUri = parseAbsoluteUri;\n\nfunction randomId(len) {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let autoId = \"\";\n\n  for (let i = 0; i < len; i++) {\n    autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n\n  return autoId;\n}\n\nexports.randomId = randomId;\n\nfunction randomBase64UrlStr(len) {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-\";\n  let autoId = \"\";\n\n  for (let i = 0; i < len; i++) {\n    autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n\n  return autoId;\n}\n\nexports.randomBase64UrlStr = randomBase64UrlStr;\n\nfunction randomDigits(len) {\n  let digits = \"\";\n\n  for (let i = 0; i < len; i++) {\n    digits += Math.floor(Math.random() * 10);\n  }\n\n  return digits;\n}\n\nexports.randomDigits = randomDigits;\n\nfunction toUnixTimestamp(date) {\n  return Math.floor(date.getTime() / 1000);\n}\n\nexports.toUnixTimestamp = toUnixTimestamp;\n\nfunction logError(err) {\n  if (!registry_1.EmulatorRegistry.isRunning(types_1.Emulators.AUTH)) {\n    console.error(err);\n  }\n\n  emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.AUTH).log(\"WARN\", err.stack || err.message || err.constructor.name);\n}\n\nexports.logError = logError;\n\nfunction authEmulatorUrl(req) {\n  const url = new url_1.URL(\"http://localhost/\");\n  const info = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.AUTH);\n\n  if (info) {\n    if (info.host === \"0.0.0.0\") {\n      url.hostname = \"127.0.0.1\";\n    } else if (info.host === \"::\") {\n      url.hostname = \"[::1]\";\n    } else if (info.host.includes(\":\")) {\n      url.hostname = `[${info.host}]`;\n    } else {\n      url.hostname = info.host;\n    }\n\n    url.port = info.port.toString();\n  } else {\n    const host = req.headers.host;\n    url.protocol = req.protocol;\n\n    if (host) {\n      url.host = host;\n    } else {\n      console.warn(\"Cannot determine host and port of auth emulator server.\");\n    }\n  }\n\n  return url;\n}\n\nexports.authEmulatorUrl = authEmulatorUrl;\n\nfunction mirrorFieldTo(dest, field, source) {\n  const value = source[field];\n\n  if (value === undefined) {\n    delete dest[field];\n  } else {\n    dest[field] = value;\n  }\n}\n\nexports.mirrorFieldTo = mirrorFieldTo;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/auth/utils.js"],"names":["Object","defineProperty","exports","value","mirrorFieldTo","authEmulatorUrl","logError","toUnixTimestamp","randomDigits","randomBase64UrlStr","randomId","parseAbsoluteUri","canonicalizeEmailAddress","isValidPhoneNumber","isValidEmailAddress","url_1","require","registry_1","types_1","emulatorLogger_1","email","test","phoneNumber","toLowerCase","uri","URL","_a","undefined","len","chars","autoId","i","charAt","Math","floor","random","length","digits","date","getTime","err","EmulatorRegistry","isRunning","Emulators","AUTH","console","error","EmulatorLogger","forEmulator","log","stack","message","constructor","name","req","url","info","getInfo","host","hostname","includes","port","toString","headers","protocol","warn","dest","field","source"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mirrorFieldTo = exports.authEmulatorUrl = exports.logError = exports.toUnixTimestamp = exports.randomDigits = exports.randomBase64UrlStr = exports.randomId = exports.parseAbsoluteUri = exports.canonicalizeEmailAddress = exports.isValidPhoneNumber = exports.isValidEmailAddress = void 0;\nconst url_1 = require(\"url\");\nconst registry_1 = require(\"../registry\");\nconst types_1 = require(\"../types\");\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\nfunction isValidEmailAddress(email) {\n    return /^[^@]+@[^@]+$/.test(email);\n}\nexports.isValidEmailAddress = isValidEmailAddress;\nfunction isValidPhoneNumber(phoneNumber) {\n    return /^\\+/.test(phoneNumber);\n}\nexports.isValidPhoneNumber = isValidPhoneNumber;\nfunction canonicalizeEmailAddress(email) {\n    return email.toLowerCase();\n}\nexports.canonicalizeEmailAddress = canonicalizeEmailAddress;\nfunction parseAbsoluteUri(uri) {\n    try {\n        return new url_1.URL(uri);\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\nexports.parseAbsoluteUri = parseAbsoluteUri;\nfunction randomId(len) {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let autoId = \"\";\n    for (let i = 0; i < len; i++) {\n        autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return autoId;\n}\nexports.randomId = randomId;\nfunction randomBase64UrlStr(len) {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-\";\n    let autoId = \"\";\n    for (let i = 0; i < len; i++) {\n        autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return autoId;\n}\nexports.randomBase64UrlStr = randomBase64UrlStr;\nfunction randomDigits(len) {\n    let digits = \"\";\n    for (let i = 0; i < len; i++) {\n        digits += Math.floor(Math.random() * 10);\n    }\n    return digits;\n}\nexports.randomDigits = randomDigits;\nfunction toUnixTimestamp(date) {\n    return Math.floor(date.getTime() / 1000);\n}\nexports.toUnixTimestamp = toUnixTimestamp;\nfunction logError(err) {\n    if (!registry_1.EmulatorRegistry.isRunning(types_1.Emulators.AUTH)) {\n        console.error(err);\n    }\n    emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.AUTH).log(\"WARN\", err.stack || err.message || err.constructor.name);\n}\nexports.logError = logError;\nfunction authEmulatorUrl(req) {\n    const url = new url_1.URL(\"http://localhost/\");\n    const info = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.AUTH);\n    if (info) {\n        if (info.host === \"0.0.0.0\") {\n            url.hostname = \"127.0.0.1\";\n        }\n        else if (info.host === \"::\") {\n            url.hostname = \"[::1]\";\n        }\n        else if (info.host.includes(\":\")) {\n            url.hostname = `[${info.host}]`;\n        }\n        else {\n            url.hostname = info.host;\n        }\n        url.port = info.port.toString();\n    }\n    else {\n        const host = req.headers.host;\n        url.protocol = req.protocol;\n        if (host) {\n            url.host = host;\n        }\n        else {\n            console.warn(\"Cannot determine host and port of auth emulator server.\");\n        }\n    }\n    return url;\n}\nexports.authEmulatorUrl = authEmulatorUrl;\nfunction mirrorFieldTo(dest, field, source) {\n    const value = source[field];\n    if (value === undefined) {\n        delete dest[field];\n    }\n    else {\n        dest[field] = value;\n    }\n}\nexports.mirrorFieldTo = mirrorFieldTo;\n"]},"metadata":{},"sourceType":"script"}