{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs-extra\");\n\nconst command_1 = require(\"../command\");\n\nconst utils = require(\"../utils\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst client_1 = require(\"../appdistribution/client\");\n\nconst error_1 = require(\"../error\");\n\nconst distribution_1 = require(\"../appdistribution/distribution\");\n\nfunction ensureFileExists(file, message = \"\") {\n  if (!fs.existsSync(file)) {\n    throw new error_1.FirebaseError(`File ${file} does not exist: ${message}`);\n  }\n}\n\nfunction getAppId(appId) {\n  if (!appId) {\n    throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n  }\n\n  return appId;\n}\n\nfunction getReleaseNotes(releaseNotes, releaseNotesFile) {\n  if (releaseNotes) {\n    return releaseNotes.replace(/\\\\n/g, \"\\n\");\n  } else if (releaseNotesFile) {\n    ensureFileExists(releaseNotesFile);\n    return fs.readFileSync(releaseNotesFile, \"utf8\");\n  }\n\n  return \"\";\n}\n\nfunction getTestersOrGroups(value, file) {\n  if (!value && file) {\n    ensureFileExists(file);\n    value = fs.readFileSync(file, \"utf8\");\n  }\n\n  if (value) {\n    return value.split(/,|\\n/).map(entry => entry.trim()).filter(entry => !!entry);\n  }\n\n  return [];\n}\n\nmodule.exports = new command_1.Command(\"appdistribution:distribute <distribution-file>\").description(\"upload a distribution\").option(\"--app <app_id>\", \"the app id of your Firebase app\").option(\"--release-notes <string>\", \"release notes to include with this distribution\").option(\"--release-notes-file <file>\", \"path to file with release notes to include with this distribution\").option(\"--testers <string>\", \"a comma separated list of tester emails to distribute to\").option(\"--testers-file <file>\", \"path to file with a comma separated list of tester emails to distribute to\").option(\"--groups <string>\", \"a comma separated list of group aliases to distribute to\").option(\"--groups-file <file>\", \"path to file with a comma separated list of group aliases to distribute to\").before(requireAuth_1.requireAuth).action(async (file, options) => {\n  const appId = getAppId(options.app);\n  const distribution = new distribution_1.Distribution(file);\n  const releaseNotes = getReleaseNotes(options.releaseNotes, options.releaseNotesFile);\n  const testers = getTestersOrGroups(options.testers, options.testersFile);\n  const groups = getTestersOrGroups(options.groups, options.groupsFile);\n  const requests = new client_1.AppDistributionClient(appId);\n  let app;\n\n  try {\n    const appView = distribution.distributionFileType() === distribution_1.DistributionFileType.AAB ? client_1.AppView.FULL : client_1.AppView.BASIC;\n    app = await requests.getApp(appView);\n  } catch (err) {\n    if (err.status === 404) {\n      throw new error_1.FirebaseError(`App Distribution could not find your app ${appId}. ` + `Make sure to onboard your app by pressing the \"Get started\" ` + \"button on the App Distribution page in the Firebase console: \" + \"https://console.firebase.google.com/project/_/appdistribution\", {\n        exit: 1\n      });\n    }\n\n    throw new error_1.FirebaseError(`failed to fetch app information. ${err.message}`, {\n      exit: 1\n    });\n  }\n\n  if (!app.contactEmail) {\n    throw new error_1.FirebaseError(`We could not find a contact email for app ${appId}. Please visit App Distribution within ` + \"the Firebase Console to set one up.\", {\n      exit: 1\n    });\n  }\n\n  if (distribution.distributionFileType() === distribution_1.DistributionFileType.AAB && app.aabState !== client_1.AabState.ACTIVE && app.aabState !== client_1.AabState.AAB_STATE_UNAVAILABLE) {\n    switch (app.aabState) {\n      case client_1.AabState.PLAY_ACCOUNT_NOT_LINKED:\n        {\n          throw new error_1.FirebaseError(\"This project is not linked to a Google Play account.\");\n        }\n\n      case client_1.AabState.APP_NOT_PUBLISHED:\n        {\n          throw new error_1.FirebaseError('\"This app is not published in the Google Play console.');\n        }\n\n      case client_1.AabState.NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT:\n        {\n          throw new error_1.FirebaseError(\"App with matching package name does not exist in Google Play.\");\n        }\n\n      case client_1.AabState.PLAY_IAS_TERMS_NOT_ACCEPTED:\n        {\n          throw new error_1.FirebaseError(\"You must accept the Play Internal App Sharing (IAS) terms to upload AABs.\");\n        }\n\n      default:\n        {\n          throw new error_1.FirebaseError(\"App Distribution failed to process the AAB: \" + app.aabState);\n        }\n    }\n  }\n\n  let binaryName = await distribution.binaryName(app);\n  let releaseId;\n  const uploadStatus = await requests.getUploadStatus(binaryName);\n\n  if (uploadStatus.status === client_1.UploadStatus.SUCCESS) {\n    utils.logWarning(\"this distribution has been uploaded before, skipping upload\");\n    releaseId = uploadStatus.release.id;\n  } else {\n    utils.logBullet(\"uploading distribution...\");\n\n    try {\n      binaryName = await requests.uploadDistribution(distribution);\n      releaseId = await requests.pollUploadStatus(binaryName);\n      utils.logSuccess(\"uploaded distribution successfully!\");\n    } catch (err) {\n      throw new error_1.FirebaseError(`failed to upload distribution. ${err.message}`, {\n        exit: 1\n      });\n    }\n  }\n\n  if (distribution.distributionFileType() === distribution_1.DistributionFileType.AAB && !app.aabCertificate) {\n    const updatedApp = await requests.getApp();\n\n    if (updatedApp.aabCertificate) {\n      utils.logBullet(\"After you upload an AAB for the first time, App Distribution \" + \"generates a new test certificate. All AAB uploads are re-signed with this test \" + \"certificate. Use the certificate fingerprints below to register your app \" + \"signing key with API providers, such as Google Sign-In and Google Maps.\\n\" + `MD-1 certificate fingerprint: ${updatedApp.aabCertificate.certificateHashMd5}\\n` + `SHA-1 certificate fingerprint: ${updatedApp.aabCertificate.certificateHashSha1}\\n` + `SHA-256 certificate fingerprint: ${updatedApp.aabCertificate.certificateHashSha256}`);\n    }\n  }\n\n  await requests.addReleaseNotes(releaseId, releaseNotes);\n  await requests.enableAccess(releaseId, testers, groups);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/appdistribution-distribute.js"],"names":["Object","defineProperty","exports","value","fs","require","command_1","utils","requireAuth_1","client_1","error_1","distribution_1","ensureFileExists","file","message","existsSync","FirebaseError","getAppId","appId","getReleaseNotes","releaseNotes","releaseNotesFile","replace","readFileSync","getTestersOrGroups","split","map","entry","trim","filter","module","Command","description","option","before","requireAuth","action","options","app","distribution","Distribution","testers","testersFile","groups","groupsFile","requests","AppDistributionClient","appView","distributionFileType","DistributionFileType","AAB","AppView","FULL","BASIC","getApp","err","status","exit","contactEmail","aabState","AabState","ACTIVE","AAB_STATE_UNAVAILABLE","PLAY_ACCOUNT_NOT_LINKED","APP_NOT_PUBLISHED","NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT","PLAY_IAS_TERMS_NOT_ACCEPTED","binaryName","releaseId","uploadStatus","getUploadStatus","UploadStatus","SUCCESS","logWarning","release","id","logBullet","uploadDistribution","pollUploadStatus","logSuccess","aabCertificate","updatedApp","certificateHashMd5","certificateHashSha1","certificateHashSha256","addReleaseNotes","enableAccess"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs-extra\");\nconst command_1 = require(\"../command\");\nconst utils = require(\"../utils\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst client_1 = require(\"../appdistribution/client\");\nconst error_1 = require(\"../error\");\nconst distribution_1 = require(\"../appdistribution/distribution\");\nfunction ensureFileExists(file, message = \"\") {\n    if (!fs.existsSync(file)) {\n        throw new error_1.FirebaseError(`File ${file} does not exist: ${message}`);\n    }\n}\nfunction getAppId(appId) {\n    if (!appId) {\n        throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n    }\n    return appId;\n}\nfunction getReleaseNotes(releaseNotes, releaseNotesFile) {\n    if (releaseNotes) {\n        return releaseNotes.replace(/\\\\n/g, \"\\n\");\n    }\n    else if (releaseNotesFile) {\n        ensureFileExists(releaseNotesFile);\n        return fs.readFileSync(releaseNotesFile, \"utf8\");\n    }\n    return \"\";\n}\nfunction getTestersOrGroups(value, file) {\n    if (!value && file) {\n        ensureFileExists(file);\n        value = fs.readFileSync(file, \"utf8\");\n    }\n    if (value) {\n        return value\n            .split(/,|\\n/)\n            .map((entry) => entry.trim())\n            .filter((entry) => !!entry);\n    }\n    return [];\n}\nmodule.exports = new command_1.Command(\"appdistribution:distribute <distribution-file>\")\n    .description(\"upload a distribution\")\n    .option(\"--app <app_id>\", \"the app id of your Firebase app\")\n    .option(\"--release-notes <string>\", \"release notes to include with this distribution\")\n    .option(\"--release-notes-file <file>\", \"path to file with release notes to include with this distribution\")\n    .option(\"--testers <string>\", \"a comma separated list of tester emails to distribute to\")\n    .option(\"--testers-file <file>\", \"path to file with a comma separated list of tester emails to distribute to\")\n    .option(\"--groups <string>\", \"a comma separated list of group aliases to distribute to\")\n    .option(\"--groups-file <file>\", \"path to file with a comma separated list of group aliases to distribute to\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (file, options) => {\n    const appId = getAppId(options.app);\n    const distribution = new distribution_1.Distribution(file);\n    const releaseNotes = getReleaseNotes(options.releaseNotes, options.releaseNotesFile);\n    const testers = getTestersOrGroups(options.testers, options.testersFile);\n    const groups = getTestersOrGroups(options.groups, options.groupsFile);\n    const requests = new client_1.AppDistributionClient(appId);\n    let app;\n    try {\n        const appView = distribution.distributionFileType() === distribution_1.DistributionFileType.AAB\n            ? client_1.AppView.FULL\n            : client_1.AppView.BASIC;\n        app = await requests.getApp(appView);\n    }\n    catch (err) {\n        if (err.status === 404) {\n            throw new error_1.FirebaseError(`App Distribution could not find your app ${appId}. ` +\n                `Make sure to onboard your app by pressing the \"Get started\" ` +\n                \"button on the App Distribution page in the Firebase console: \" +\n                \"https://console.firebase.google.com/project/_/appdistribution\", { exit: 1 });\n        }\n        throw new error_1.FirebaseError(`failed to fetch app information. ${err.message}`, { exit: 1 });\n    }\n    if (!app.contactEmail) {\n        throw new error_1.FirebaseError(`We could not find a contact email for app ${appId}. Please visit App Distribution within ` +\n            \"the Firebase Console to set one up.\", { exit: 1 });\n    }\n    if (distribution.distributionFileType() === distribution_1.DistributionFileType.AAB &&\n        app.aabState !== client_1.AabState.ACTIVE &&\n        app.aabState !== client_1.AabState.AAB_STATE_UNAVAILABLE) {\n        switch (app.aabState) {\n            case client_1.AabState.PLAY_ACCOUNT_NOT_LINKED: {\n                throw new error_1.FirebaseError(\"This project is not linked to a Google Play account.\");\n            }\n            case client_1.AabState.APP_NOT_PUBLISHED: {\n                throw new error_1.FirebaseError('\"This app is not published in the Google Play console.');\n            }\n            case client_1.AabState.NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT: {\n                throw new error_1.FirebaseError(\"App with matching package name does not exist in Google Play.\");\n            }\n            case client_1.AabState.PLAY_IAS_TERMS_NOT_ACCEPTED: {\n                throw new error_1.FirebaseError(\"You must accept the Play Internal App Sharing (IAS) terms to upload AABs.\");\n            }\n            default: {\n                throw new error_1.FirebaseError(\"App Distribution failed to process the AAB: \" + app.aabState);\n            }\n        }\n    }\n    let binaryName = await distribution.binaryName(app);\n    let releaseId;\n    const uploadStatus = await requests.getUploadStatus(binaryName);\n    if (uploadStatus.status === client_1.UploadStatus.SUCCESS) {\n        utils.logWarning(\"this distribution has been uploaded before, skipping upload\");\n        releaseId = uploadStatus.release.id;\n    }\n    else {\n        utils.logBullet(\"uploading distribution...\");\n        try {\n            binaryName = await requests.uploadDistribution(distribution);\n            releaseId = await requests.pollUploadStatus(binaryName);\n            utils.logSuccess(\"uploaded distribution successfully!\");\n        }\n        catch (err) {\n            throw new error_1.FirebaseError(`failed to upload distribution. ${err.message}`, { exit: 1 });\n        }\n    }\n    if (distribution.distributionFileType() === distribution_1.DistributionFileType.AAB && !app.aabCertificate) {\n        const updatedApp = await requests.getApp();\n        if (updatedApp.aabCertificate) {\n            utils.logBullet(\"After you upload an AAB for the first time, App Distribution \" +\n                \"generates a new test certificate. All AAB uploads are re-signed with this test \" +\n                \"certificate. Use the certificate fingerprints below to register your app \" +\n                \"signing key with API providers, such as Google Sign-In and Google Maps.\\n\" +\n                `MD-1 certificate fingerprint: ${updatedApp.aabCertificate.certificateHashMd5}\\n` +\n                `SHA-1 certificate fingerprint: ${updatedApp.aabCertificate.certificateHashSha1}\\n` +\n                `SHA-256 certificate fingerprint: ${updatedApp.aabCertificate.certificateHashSha256}`);\n        }\n    }\n    await requests.addReleaseNotes(releaseId, releaseNotes);\n    await requests.enableAccess(releaseId, testers, groups);\n});\n"]},"metadata":{},"sourceType":"script"}