{"ast":null,"code":"\"use strict\";\n\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nconst {\n  logger\n} = require(\"../../logger\");\n\nfunction cachePath(cwd, name) {\n  return path.resolve(cwd, \".firebase/hosting.\" + name + \".cache\");\n}\n\nexports.load = function (cwd, name) {\n  try {\n    const out = {};\n    const lines = fs.readFileSync(cachePath(cwd, name), {\n      encoding: \"utf8\"\n    });\n    lines.split(\"\\n\").forEach(function (line) {\n      const d = line.split(\",\");\n\n      if (d.length === 3) {\n        out[d[0]] = {\n          mtime: parseInt(d[1]),\n          hash: d[2]\n        };\n      }\n    });\n    return out;\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      logger.debug(\"[hosting] hash cache [\" + name + \"] not populated\");\n    } else {\n      logger.debug(\"[hosting] hash cache [\" + name + \"] load error:\", e.message);\n    }\n\n    return {};\n  }\n};\n\nexports.dump = function (cwd, name, data) {\n  let st = \"\";\n  let count = 0;\n\n  for (const [path, d] of data) {\n    count++;\n    st += path + \",\" + d.mtime + \",\" + d.hash + \"\\n\";\n  }\n\n  try {\n    fs.outputFileSync(cachePath(cwd, name), st, {\n      encoding: \"utf8\"\n    });\n    logger.debug(\"[hosting] hash cache [\" + name + \"] stored for\", count, \"files\");\n  } catch (e) {\n    logger.debug(\"[hosting] unable to store hash cache [\" + name + \"]\", e.stack);\n  }\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/hosting/hashcache.js"],"names":["fs","require","path","logger","cachePath","cwd","name","resolve","exports","load","out","lines","readFileSync","encoding","split","forEach","line","d","length","mtime","parseInt","hash","e","code","debug","message","dump","data","st","count","outputFileSync","stack"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,cAAD,CAA1B;;AACA,SAASG,SAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC1B,SAAOJ,IAAI,CAACK,OAAL,CAAaF,GAAb,EAAkB,uBAAuBC,IAAvB,GAA8B,QAAhD,CAAP;AACH;;AACDE,OAAO,CAACC,IAAR,GAAe,UAAUJ,GAAV,EAAeC,IAAf,EAAqB;AAChC,MAAI;AACA,UAAMI,GAAG,GAAG,EAAZ;AACA,UAAMC,KAAK,GAAGX,EAAE,CAACY,YAAH,CAAgBR,SAAS,CAACC,GAAD,EAAMC,IAAN,CAAzB,EAAsC;AAChDO,MAAAA,QAAQ,EAAE;AADsC,KAAtC,CAAd;AAGAF,IAAAA,KAAK,CAACG,KAAN,CAAY,IAAZ,EAAkBC,OAAlB,CAA0B,UAAUC,IAAV,EAAgB;AACtC,YAAMC,CAAC,GAAGD,IAAI,CAACF,KAAL,CAAW,GAAX,CAAV;;AACA,UAAIG,CAAC,CAACC,MAAF,KAAa,CAAjB,EAAoB;AAChBR,QAAAA,GAAG,CAACO,CAAC,CAAC,CAAD,CAAF,CAAH,GAAY;AAAEE,UAAAA,KAAK,EAAEC,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CAAjB;AAAyBI,UAAAA,IAAI,EAAEJ,CAAC,CAAC,CAAD;AAAhC,SAAZ;AACH;AACJ,KALD;AAMA,WAAOP,GAAP;AACH,GAZD,CAaA,OAAOY,CAAP,EAAU;AACN,QAAIA,CAAC,CAACC,IAAF,KAAW,QAAf,EAAyB;AACrBpB,MAAAA,MAAM,CAACqB,KAAP,CAAa,2BAA2BlB,IAA3B,GAAkC,iBAA/C;AACH,KAFD,MAGK;AACDH,MAAAA,MAAM,CAACqB,KAAP,CAAa,2BAA2BlB,IAA3B,GAAkC,eAA/C,EAAgEgB,CAAC,CAACG,OAAlE;AACH;;AACD,WAAO,EAAP;AACH;AACJ,CAvBD;;AAwBAjB,OAAO,CAACkB,IAAR,GAAe,UAAUrB,GAAV,EAAeC,IAAf,EAAqBqB,IAArB,EAA2B;AACtC,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,MAAM,CAAC3B,IAAD,EAAOe,CAAP,CAAX,IAAwBU,IAAxB,EAA8B;AAC1BE,IAAAA,KAAK;AACLD,IAAAA,EAAE,IAAI1B,IAAI,GAAG,GAAP,GAAae,CAAC,CAACE,KAAf,GAAuB,GAAvB,GAA6BF,CAAC,CAACI,IAA/B,GAAsC,IAA5C;AACH;;AACD,MAAI;AACArB,IAAAA,EAAE,CAAC8B,cAAH,CAAkB1B,SAAS,CAACC,GAAD,EAAMC,IAAN,CAA3B,EAAwCsB,EAAxC,EAA4C;AAAEf,MAAAA,QAAQ,EAAE;AAAZ,KAA5C;AACAV,IAAAA,MAAM,CAACqB,KAAP,CAAa,2BAA2BlB,IAA3B,GAAkC,cAA/C,EAA+DuB,KAA/D,EAAsE,OAAtE;AACH,GAHD,CAIA,OAAOP,CAAP,EAAU;AACNnB,IAAAA,MAAM,CAACqB,KAAP,CAAa,2CAA2ClB,IAA3C,GAAkD,GAA/D,EAAoEgB,CAAC,CAACS,KAAtE;AACH;AACJ,CAdD","sourcesContent":["\"use strict\";\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst { logger } = require(\"../../logger\");\nfunction cachePath(cwd, name) {\n    return path.resolve(cwd, \".firebase/hosting.\" + name + \".cache\");\n}\nexports.load = function (cwd, name) {\n    try {\n        const out = {};\n        const lines = fs.readFileSync(cachePath(cwd, name), {\n            encoding: \"utf8\",\n        });\n        lines.split(\"\\n\").forEach(function (line) {\n            const d = line.split(\",\");\n            if (d.length === 3) {\n                out[d[0]] = { mtime: parseInt(d[1]), hash: d[2] };\n            }\n        });\n        return out;\n    }\n    catch (e) {\n        if (e.code === \"ENOENT\") {\n            logger.debug(\"[hosting] hash cache [\" + name + \"] not populated\");\n        }\n        else {\n            logger.debug(\"[hosting] hash cache [\" + name + \"] load error:\", e.message);\n        }\n        return {};\n    }\n};\nexports.dump = function (cwd, name, data) {\n    let st = \"\";\n    let count = 0;\n    for (const [path, d] of data) {\n        count++;\n        st += path + \",\" + d.mtime + \",\" + d.hash + \"\\n\";\n    }\n    try {\n        fs.outputFileSync(cachePath(cwd, name), st, { encoding: \"utf8\" });\n        logger.debug(\"[hosting] hash cache [\" + name + \"] stored for\", count, \"files\");\n    }\n    catch (e) {\n        logger.debug(\"[hosting] unable to store hash cache [\" + name + \"]\", e.stack);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}