{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\nconst _ = require(\"lodash\");\n\nconst makerouter = require(\"router\");\n\nconst fsProvider = require(\"./providers/fs\");\n\nconst Responder = require(\"./responder\");\n\nconst activator = require(\"./activator\");\n\nconst notFound = require(\"./middleware/missing\");\n\nconst promiseback = require(\"./utils/promiseback\");\n\nconst loadConfigFile = require(\"./loaders/config-file\");\n\nconst defaultCompressor = require(\"compression\")();\n\nconst CWD = process.cwd();\n\nconst superstatic = function (spec) {\n  spec = _.assign({\n    stack: \"default\"\n  }, spec);\n\n  if (!_.has(spec, \"fallthrough\")) {\n    spec.fallthrough = true;\n  }\n\n  if (_.isString(spec.stack) && _.has(superstatic.stacks, spec.stack)) {\n    spec.stack = superstatic.stacks[spec.stack];\n  }\n\n  const router = makerouter();\n  const cwd = spec.cwd || CWD; // Load data\n\n  const config = spec.config = loadConfigFile(spec.config);\n  config.errorPage = config.errorPage || \"/404.html\"; // Set up provider\n\n  const provider = spec.provider ? promiseback(spec.provider, 2) : fsProvider(_.extend({\n    cwd: cwd // default current working directory\n\n  }, config)); // Select compression middleware\n\n  let compressor;\n\n  if (_.isFunction(spec.compression)) {\n    compressor = spec.compression;\n  } else if (spec.compression || spec.gzip) {\n    compressor = defaultCompressor;\n  } else {\n    compressor = null;\n  } // Setup helpers\n\n\n  router.use((req, res, next) => {\n    res.superstatic = new Responder(req, res, {\n      provider: provider,\n      config: config,\n      compressor: compressor,\n      rewriters: spec.rewriters\n    });\n    next();\n  });\n  router.use(activator(spec, provider)); // Handle not found pages\n\n  if (!spec.fallthrough) {\n    router.use(notFound(spec));\n  }\n\n  return router;\n};\n\nsuperstatic.stacks = {\n  default: [\"protect\", \"redirects\", \"headers\", \"env\", \"files\", \"rewrites\", \"missing\"],\n  strict: [\"redirects\", \"headers\", \"files\", \"rewrites\", \"missing\"]\n};\nmodule.exports = superstatic;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/superstatic/lib/superstatic.js"],"names":["_","require","makerouter","fsProvider","Responder","activator","notFound","promiseback","loadConfigFile","defaultCompressor","CWD","process","cwd","superstatic","spec","assign","stack","has","fallthrough","isString","stacks","router","config","errorPage","provider","extend","compressor","isFunction","compression","gzip","use","req","res","next","rewriters","default","strict","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n\nconst _ = require(\"lodash\");\nconst makerouter = require(\"router\");\n\nconst fsProvider = require(\"./providers/fs\");\nconst Responder = require(\"./responder\");\nconst activator = require(\"./activator\");\nconst notFound = require(\"./middleware/missing\");\n\nconst promiseback = require(\"./utils/promiseback\");\nconst loadConfigFile = require(\"./loaders/config-file\");\nconst defaultCompressor = require(\"compression\")();\n\nconst CWD = process.cwd();\n\nconst superstatic = function(spec) {\n  spec = _.assign(\n    {\n      stack: \"default\"\n    },\n    spec\n  );\n\n  if (!_.has(spec, \"fallthrough\")) {\n    spec.fallthrough = true;\n  }\n\n  if (_.isString(spec.stack) && _.has(superstatic.stacks, spec.stack)) {\n    spec.stack = superstatic.stacks[spec.stack];\n  }\n\n  const router = makerouter();\n  const cwd = spec.cwd || CWD;\n\n  // Load data\n  const config = (spec.config = loadConfigFile(spec.config));\n  config.errorPage = config.errorPage || \"/404.html\";\n\n  // Set up provider\n  const provider = spec.provider\n    ? promiseback(spec.provider, 2)\n    : fsProvider(\n        _.extend(\n          {\n            cwd: cwd // default current working directory\n          },\n          config\n        )\n      );\n\n  // Select compression middleware\n  let compressor;\n  if (_.isFunction(spec.compression)) {\n    compressor = spec.compression;\n  } else if (spec.compression || spec.gzip) {\n    compressor = defaultCompressor;\n  } else {\n    compressor = null;\n  }\n\n  // Setup helpers\n  router.use((req, res, next) => {\n    res.superstatic = new Responder(req, res, {\n      provider: provider,\n      config: config,\n      compressor: compressor,\n      rewriters: spec.rewriters\n    });\n\n    next();\n  });\n\n  router.use(activator(spec, provider));\n\n  // Handle not found pages\n  if (!spec.fallthrough) {\n    router.use(notFound(spec));\n  }\n\n  return router;\n};\n\nsuperstatic.stacks = {\n  default: [\n    \"protect\",\n    \"redirects\",\n    \"headers\",\n    \"env\",\n    \"files\",\n    \"rewrites\",\n    \"missing\"\n  ],\n  strict: [\"redirects\", \"headers\", \"files\", \"rewrites\", \"missing\"]\n};\n\nmodule.exports = superstatic;\n"]},"metadata":{},"sourceType":"script"}