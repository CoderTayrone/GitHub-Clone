{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst Table = require(\"cli-table\");\n\nconst clc = require(\"cli-color\");\n\nconst ora = require(\"ora\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst firedata = require(\"../gcp/firedata\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst previews_1 = require(\"../previews\");\n\nconst projectUtils_2 = require(\"../projectUtils\");\n\nconst database_1 = require(\"../management/database\");\n\nfunction logInstances(instances) {\n  if (instances.length === 0) {\n    logger_1.logger.info(clc.bold(\"No database instances found.\"));\n    return;\n  }\n\n  const tableHead = [\"Database Instance Name\", \"Location\", \"Type\", \"State\"];\n  const table = new Table({\n    head: tableHead,\n    style: {\n      head: [\"green\"]\n    }\n  });\n  instances.forEach(db => {\n    table.push([db.name, db.location, db.type, db.state]);\n  });\n  logger_1.logger.info(table.toString());\n}\n\nfunction logInstancesCount(count = 0) {\n  if (count === 0) {\n    return;\n  }\n\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(`${count} database instance(s) total.`);\n}\n\nlet cmd = new command_1.Command(\"database:instances:list\").description(\"list realtime database instances, optionally filtered by a specified location\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.list\"]).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async options => {\n  const location = database_1.parseDatabaseLocation(options.location, database_1.DatabaseLocation.ANY);\n  const spinner = ora(\"Preparing the list of your Firebase Realtime Database instances\" + `${location === database_1.DatabaseLocation.ANY ? \"\" : ` for location: ${location}`}`).start();\n  let instances;\n\n  if (previews_1.previews.rtdbmanagement) {\n    const projectId = projectUtils_2.needProjectId(options);\n\n    try {\n      instances = await database_1.listDatabaseInstances(projectId, location);\n    } catch (err) {\n      spinner.fail();\n      throw err;\n    }\n\n    spinner.succeed();\n    logInstances(instances);\n    logInstancesCount(instances.length);\n    return instances;\n  }\n\n  const projectNumber = await projectUtils_1.needProjectNumber(options);\n\n  try {\n    instances = await firedata.listDatabaseInstances(projectNumber);\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n\n  spinner.succeed();\n\n  for (const instance of instances) {\n    logger_1.logger.info(instance.instance);\n  }\n\n  logger_1.logger.info(`Project ${options.project} has ${instances.length} database instances`);\n  return instances;\n});\n\nif (previews_1.previews.rtdbmanagement) {\n  cmd = cmd.option(\"-l, --location <location>\", \"(optional) location for the database instance, defaults to us-central1\");\n}\n\nexports.default = cmd;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-instances-list.js"],"names":["Object","defineProperty","exports","value","command_1","require","Table","clc","ora","logger_1","requirePermissions_1","projectUtils_1","firedata","types_1","commandUtils_1","previews_1","projectUtils_2","database_1","logInstances","instances","length","logger","info","bold","tableHead","table","head","style","forEach","db","push","name","location","type","state","toString","logInstancesCount","count","cmd","Command","description","before","requirePermissions","warnEmulatorNotSupported","Emulators","DATABASE","action","options","parseDatabaseLocation","DatabaseLocation","ANY","spinner","start","previews","rtdbmanagement","projectId","needProjectId","listDatabaseInstances","err","fail","succeed","projectNumber","needProjectNumber","instance","project","option","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,WAAD,CAArB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMO,QAAQ,GAAGP,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMS,cAAc,GAAGT,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMU,UAAU,GAAGV,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMW,cAAc,GAAGX,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMY,UAAU,GAAGZ,OAAO,CAAC,wBAAD,CAA1B;;AACA,SAASa,YAAT,CAAsBC,SAAtB,EAAiC;AAC7B,MAAIA,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxBX,IAAAA,QAAQ,CAACY,MAAT,CAAgBC,IAAhB,CAAqBf,GAAG,CAACgB,IAAJ,CAAS,8BAAT,CAArB;AACA;AACH;;AACD,QAAMC,SAAS,GAAG,CAAC,wBAAD,EAA2B,UAA3B,EAAuC,MAAvC,EAA+C,OAA/C,CAAlB;AACA,QAAMC,KAAK,GAAG,IAAInB,KAAJ,CAAU;AAAEoB,IAAAA,IAAI,EAAEF,SAAR;AAAmBG,IAAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAE,CAAC,OAAD;AAAR;AAA1B,GAAV,CAAd;AACAP,EAAAA,SAAS,CAACS,OAAV,CAAmBC,EAAD,IAAQ;AACtBJ,IAAAA,KAAK,CAACK,IAAN,CAAW,CAACD,EAAE,CAACE,IAAJ,EAAUF,EAAE,CAACG,QAAb,EAAuBH,EAAE,CAACI,IAA1B,EAAgCJ,EAAE,CAACK,KAAnC,CAAX;AACH,GAFD;AAGAzB,EAAAA,QAAQ,CAACY,MAAT,CAAgBC,IAAhB,CAAqBG,KAAK,CAACU,QAAN,EAArB;AACH;;AACD,SAASC,iBAAT,CAA2BC,KAAK,GAAG,CAAnC,EAAsC;AAClC,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACb;AACH;;AACD5B,EAAAA,QAAQ,CAACY,MAAT,CAAgBC,IAAhB,CAAqB,EAArB;AACAb,EAAAA,QAAQ,CAACY,MAAT,CAAgBC,IAAhB,CAAsB,GAAEe,KAAM,8BAA9B;AACH;;AACD,IAAIC,GAAG,GAAG,IAAIlC,SAAS,CAACmC,OAAd,CAAsB,yBAAtB,EACLC,WADK,CACO,+EADP,EAELC,MAFK,CAEE/B,oBAAoB,CAACgC,kBAFvB,EAE2C,CAAC,iCAAD,CAF3C,EAGLD,MAHK,CAGE3B,cAAc,CAAC6B,wBAHjB,EAG2C9B,OAAO,CAAC+B,SAAR,CAAkBC,QAH7D,EAILC,MAJK,CAIE,MAAOC,OAAP,IAAmB;AAC3B,QAAMf,QAAQ,GAAGf,UAAU,CAAC+B,qBAAX,CAAiCD,OAAO,CAACf,QAAzC,EAAmDf,UAAU,CAACgC,gBAAX,CAA4BC,GAA/E,CAAjB;AACA,QAAMC,OAAO,GAAG3C,GAAG,CAAC,oEACf,GAAEwB,QAAQ,KAAKf,UAAU,CAACgC,gBAAX,CAA4BC,GAAzC,GAA+C,EAA/C,GAAqD,kBAAiBlB,QAAS,EAAE,EADrE,CAAH,CAC2EoB,KAD3E,EAAhB;AAEA,MAAIjC,SAAJ;;AACA,MAAIJ,UAAU,CAACsC,QAAX,CAAoBC,cAAxB,EAAwC;AACpC,UAAMC,SAAS,GAAGvC,cAAc,CAACwC,aAAf,CAA6BT,OAA7B,CAAlB;;AACA,QAAI;AACA5B,MAAAA,SAAS,GAAG,MAAMF,UAAU,CAACwC,qBAAX,CAAiCF,SAAjC,EAA4CvB,QAA5C,CAAlB;AACH,KAFD,CAGA,OAAO0B,GAAP,EAAY;AACRP,MAAAA,OAAO,CAACQ,IAAR;AACA,YAAMD,GAAN;AACH;;AACDP,IAAAA,OAAO,CAACS,OAAR;AACA1C,IAAAA,YAAY,CAACC,SAAD,CAAZ;AACAiB,IAAAA,iBAAiB,CAACjB,SAAS,CAACC,MAAX,CAAjB;AACA,WAAOD,SAAP;AACH;;AACD,QAAM0C,aAAa,GAAG,MAAMlD,cAAc,CAACmD,iBAAf,CAAiCf,OAAjC,CAA5B;;AACA,MAAI;AACA5B,IAAAA,SAAS,GAAG,MAAMP,QAAQ,CAAC6C,qBAAT,CAA+BI,aAA/B,CAAlB;AACH,GAFD,CAGA,OAAOH,GAAP,EAAY;AACRP,IAAAA,OAAO,CAACQ,IAAR;AACA,UAAMD,GAAN;AACH;;AACDP,EAAAA,OAAO,CAACS,OAAR;;AACA,OAAK,MAAMG,QAAX,IAAuB5C,SAAvB,EAAkC;AAC9BV,IAAAA,QAAQ,CAACY,MAAT,CAAgBC,IAAhB,CAAqByC,QAAQ,CAACA,QAA9B;AACH;;AACDtD,EAAAA,QAAQ,CAACY,MAAT,CAAgBC,IAAhB,CAAsB,WAAUyB,OAAO,CAACiB,OAAQ,QAAO7C,SAAS,CAACC,MAAO,qBAAxE;AACA,SAAOD,SAAP;AACH,CArCS,CAAV;;AAsCA,IAAIJ,UAAU,CAACsC,QAAX,CAAoBC,cAAxB,EAAwC;AACpChB,EAAAA,GAAG,GAAGA,GAAG,CAAC2B,MAAJ,CAAW,2BAAX,EAAwC,wEAAxC,CAAN;AACH;;AACD/D,OAAO,CAACgE,OAAR,GAAkB5B,GAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst Table = require(\"cli-table\");\nconst clc = require(\"cli-color\");\nconst ora = require(\"ora\");\nconst logger_1 = require(\"../logger\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst firedata = require(\"../gcp/firedata\");\nconst types_1 = require(\"../emulator/types\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst previews_1 = require(\"../previews\");\nconst projectUtils_2 = require(\"../projectUtils\");\nconst database_1 = require(\"../management/database\");\nfunction logInstances(instances) {\n    if (instances.length === 0) {\n        logger_1.logger.info(clc.bold(\"No database instances found.\"));\n        return;\n    }\n    const tableHead = [\"Database Instance Name\", \"Location\", \"Type\", \"State\"];\n    const table = new Table({ head: tableHead, style: { head: [\"green\"] } });\n    instances.forEach((db) => {\n        table.push([db.name, db.location, db.type, db.state]);\n    });\n    logger_1.logger.info(table.toString());\n}\nfunction logInstancesCount(count = 0) {\n    if (count === 0) {\n        return;\n    }\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(`${count} database instance(s) total.`);\n}\nlet cmd = new command_1.Command(\"database:instances:list\")\n    .description(\"list realtime database instances, optionally filtered by a specified location\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.list\"])\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (options) => {\n    const location = database_1.parseDatabaseLocation(options.location, database_1.DatabaseLocation.ANY);\n    const spinner = ora(\"Preparing the list of your Firebase Realtime Database instances\" +\n        `${location === database_1.DatabaseLocation.ANY ? \"\" : ` for location: ${location}`}`).start();\n    let instances;\n    if (previews_1.previews.rtdbmanagement) {\n        const projectId = projectUtils_2.needProjectId(options);\n        try {\n            instances = await database_1.listDatabaseInstances(projectId, location);\n        }\n        catch (err) {\n            spinner.fail();\n            throw err;\n        }\n        spinner.succeed();\n        logInstances(instances);\n        logInstancesCount(instances.length);\n        return instances;\n    }\n    const projectNumber = await projectUtils_1.needProjectNumber(options);\n    try {\n        instances = await firedata.listDatabaseInstances(projectNumber);\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n    spinner.succeed();\n    for (const instance of instances) {\n        logger_1.logger.info(instance.instance);\n    }\n    logger_1.logger.info(`Project ${options.project} has ${instances.length} database instances`);\n    return instances;\n});\nif (previews_1.previews.rtdbmanagement) {\n    cmd = cmd.option(\"-l, --location <location>\", \"(optional) location for the database instance, defaults to us-central1\");\n}\nexports.default = cmd;\n"]},"metadata":{},"sourceType":"script"}