{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertEnum = exports.assertHasOneOf = exports.assertHas = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst error_1 = require(\"../error\");\n\nfunction assertHas(obj, prop) {\n  const objString = clc.cyan(JSON.stringify(obj));\n\n  if (!obj[prop]) {\n    throw new error_1.FirebaseError(`Must contain \"${prop}\": ${objString}`);\n  }\n}\n\nexports.assertHas = assertHas;\n\nfunction assertHasOneOf(obj, props) {\n  const objString = clc.cyan(JSON.stringify(obj));\n  let count = 0;\n  props.forEach(prop => {\n    if (obj[prop]) {\n      count++;\n    }\n  });\n\n  if (count !== 1) {\n    throw new error_1.FirebaseError(`Must contain exactly one of \"${props.join(\",\")}\": ${objString}`);\n  }\n}\n\nexports.assertHasOneOf = assertHasOneOf;\n\nfunction assertEnum(obj, prop, valid) {\n  const objString = clc.cyan(JSON.stringify(obj));\n\n  if (valid.indexOf(obj[prop]) < 0) {\n    throw new error_1.FirebaseError(`Field \"${prop}\" must be one of  ${valid.join(\", \")}: ${objString}`);\n  }\n}\n\nexports.assertEnum = assertEnum;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/firestore/validator.js"],"names":["Object","defineProperty","exports","value","assertEnum","assertHasOneOf","assertHas","clc","require","error_1","obj","prop","objString","cyan","JSON","stringify","FirebaseError","props","count","forEach","join","valid","indexOf"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,cAAR,GAAyBH,OAAO,CAACI,SAAR,GAAoB,KAAK,CAAvE;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,SAASF,SAAT,CAAmBI,GAAnB,EAAwBC,IAAxB,EAA8B;AAC1B,QAAMC,SAAS,GAAGL,GAAG,CAACM,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeL,GAAf,CAAT,CAAlB;;AACA,MAAI,CAACA,GAAG,CAACC,IAAD,CAAR,EAAgB;AACZ,UAAM,IAAIF,OAAO,CAACO,aAAZ,CAA2B,iBAAgBL,IAAK,MAAKC,SAAU,EAA/D,CAAN;AACH;AACJ;;AACDV,OAAO,CAACI,SAAR,GAAoBA,SAApB;;AACA,SAASD,cAAT,CAAwBK,GAAxB,EAA6BO,KAA7B,EAAoC;AAChC,QAAML,SAAS,GAAGL,GAAG,CAACM,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeL,GAAf,CAAT,CAAlB;AACA,MAAIQ,KAAK,GAAG,CAAZ;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAeR,IAAD,IAAU;AACpB,QAAID,GAAG,CAACC,IAAD,CAAP,EAAe;AACXO,MAAAA,KAAK;AACR;AACJ,GAJD;;AAKA,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,UAAM,IAAIT,OAAO,CAACO,aAAZ,CAA2B,gCAA+BC,KAAK,CAACG,IAAN,CAAW,GAAX,CAAgB,MAAKR,SAAU,EAAzF,CAAN;AACH;AACJ;;AACDV,OAAO,CAACG,cAAR,GAAyBA,cAAzB;;AACA,SAASD,UAAT,CAAoBM,GAApB,EAAyBC,IAAzB,EAA+BU,KAA/B,EAAsC;AAClC,QAAMT,SAAS,GAAGL,GAAG,CAACM,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeL,GAAf,CAAT,CAAlB;;AACA,MAAIW,KAAK,CAACC,OAAN,CAAcZ,GAAG,CAACC,IAAD,CAAjB,IAA2B,CAA/B,EAAkC;AAC9B,UAAM,IAAIF,OAAO,CAACO,aAAZ,CAA2B,UAASL,IAAK,qBAAoBU,KAAK,CAACD,IAAN,CAAW,IAAX,CAAiB,KAAIR,SAAU,EAA5F,CAAN;AACH;AACJ;;AACDV,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertEnum = exports.assertHasOneOf = exports.assertHas = void 0;\nconst clc = require(\"cli-color\");\nconst error_1 = require(\"../error\");\nfunction assertHas(obj, prop) {\n    const objString = clc.cyan(JSON.stringify(obj));\n    if (!obj[prop]) {\n        throw new error_1.FirebaseError(`Must contain \"${prop}\": ${objString}`);\n    }\n}\nexports.assertHas = assertHas;\nfunction assertHasOneOf(obj, props) {\n    const objString = clc.cyan(JSON.stringify(obj));\n    let count = 0;\n    props.forEach((prop) => {\n        if (obj[prop]) {\n            count++;\n        }\n    });\n    if (count !== 1) {\n        throw new error_1.FirebaseError(`Must contain exactly one of \"${props.join(\",\")}\": ${objString}`);\n    }\n}\nexports.assertHasOneOf = assertHasOneOf;\nfunction assertEnum(obj, prop, valid) {\n    const objString = clc.cyan(JSON.stringify(obj));\n    if (valid.indexOf(obj[prop]) < 0) {\n        throw new error_1.FirebaseError(`Field \"${prop}\" must be one of  ${valid.join(\", \")}: ${objString}`);\n    }\n}\nexports.assertEnum = assertEnum;\n"]},"metadata":{},"sourceType":"script"}