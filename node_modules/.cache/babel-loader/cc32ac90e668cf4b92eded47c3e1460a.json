{"ast":null,"code":"\"use strict\";\n\nvar program = require(\"commander\");\n\nvar pkg = require(\"../package.json\");\n\nvar clc = require(\"cli-color\");\n\nconst {\n  logger\n} = require(\"./logger\");\n\nvar {\n  setupLoggers\n} = require(\"./utils\");\n\nvar leven = require(\"leven\");\n\nprogram.version(pkg.version);\nprogram.option(\"-P, --project <alias_or_project_id>\", \"the Firebase project to use for this command\");\nprogram.option(\"--account <email>\", \"the Google account to use for authorization\");\nprogram.option(\"-j, --json\", \"output JSON instead of text, also triggers non-interactive mode\");\nprogram.option(\"--token <token>\", \"supply an auth token for this command\");\nprogram.option(\"--non-interactive\", \"error out of the command instead of waiting for prompts\");\nprogram.option(\"-i, --interactive\", \"force prompts to be displayed\");\nprogram.option(\"--debug\", \"print verbose debug output and keep a debug log file\");\nprogram.option(\"-c, --config <path>\", \"path to the firebase.json file to use for configuration\");\nvar client = {};\nclient.cli = program;\nclient.logger = require(\"./logger\");\nclient.errorOut = require(\"./errorOut\").errorOut;\n\nclient.getCommand = function (name) {\n  for (var i = 0; i < client.cli.commands.length; i++) {\n    if (client.cli.commands[i]._name === name) {\n      return client.cli.commands[i];\n    }\n  }\n\n  return null;\n};\n\nrequire(\"./commands\")(client);\n\nfunction suggestCommands(cmd, cmdList) {\n  var suggestion = cmdList.find(function (c) {\n    return leven(c, cmd) < c.length * 0.4;\n  });\n\n  if (suggestion) {\n    logger.error();\n    logger.error(\"Did you mean \" + clc.bold(suggestion) + \"?\");\n    return suggestion;\n  }\n}\n\nvar commandNames = program.commands.map(function (cmd) {\n  return cmd._name;\n});\nvar RENAMED_COMMANDS = {\n  \"delete-site\": \"hosting:disable\",\n  \"disable:hosting\": \"hosting:disable\",\n  \"data:get\": \"database:get\",\n  \"data:push\": \"database:push\",\n  \"data:remove\": \"database:remove\",\n  \"data:set\": \"database:set\",\n  \"data:update\": \"database:update\",\n  \"deploy:hosting\": \"deploy --only hosting\",\n  \"deploy:database\": \"deploy --only database\",\n  \"prefs:token\": \"login:ci\"\n};\nprogram.action(function (_, args) {\n  setupLoggers();\n  var cmd = args[0];\n  logger.error(clc.bold.red(\"Error:\"), clc.bold(cmd), \"is not a Firebase command\");\n\n  if (RENAMED_COMMANDS[cmd]) {\n    logger.error();\n    logger.error(clc.bold(cmd) + \" has been renamed, please run\", clc.bold(\"firebase \" + RENAMED_COMMANDS[cmd]), \"instead\");\n  } else {\n    if (!suggestCommands(cmd, commandNames)) {\n      suggestCommands(args.join(\":\"), commandNames);\n    }\n  }\n\n  process.exit(1);\n});\nmodule.exports = client;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/index.js"],"names":["program","require","pkg","clc","logger","setupLoggers","leven","version","option","client","cli","errorOut","getCommand","name","i","commands","length","_name","suggestCommands","cmd","cmdList","suggestion","find","c","error","bold","commandNames","map","RENAMED_COMMANDS","action","_","args","red","join","process","exit","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar program = require(\"commander\");\nvar pkg = require(\"../package.json\");\nvar clc = require(\"cli-color\");\nconst { logger } = require(\"./logger\");\nvar { setupLoggers } = require(\"./utils\");\nvar leven = require(\"leven\");\nprogram.version(pkg.version);\nprogram.option(\"-P, --project <alias_or_project_id>\", \"the Firebase project to use for this command\");\nprogram.option(\"--account <email>\", \"the Google account to use for authorization\");\nprogram.option(\"-j, --json\", \"output JSON instead of text, also triggers non-interactive mode\");\nprogram.option(\"--token <token>\", \"supply an auth token for this command\");\nprogram.option(\"--non-interactive\", \"error out of the command instead of waiting for prompts\");\nprogram.option(\"-i, --interactive\", \"force prompts to be displayed\");\nprogram.option(\"--debug\", \"print verbose debug output and keep a debug log file\");\nprogram.option(\"-c, --config <path>\", \"path to the firebase.json file to use for configuration\");\nvar client = {};\nclient.cli = program;\nclient.logger = require(\"./logger\");\nclient.errorOut = require(\"./errorOut\").errorOut;\nclient.getCommand = function (name) {\n    for (var i = 0; i < client.cli.commands.length; i++) {\n        if (client.cli.commands[i]._name === name) {\n            return client.cli.commands[i];\n        }\n    }\n    return null;\n};\nrequire(\"./commands\")(client);\nfunction suggestCommands(cmd, cmdList) {\n    var suggestion = cmdList.find(function (c) {\n        return leven(c, cmd) < c.length * 0.4;\n    });\n    if (suggestion) {\n        logger.error();\n        logger.error(\"Did you mean \" + clc.bold(suggestion) + \"?\");\n        return suggestion;\n    }\n}\nvar commandNames = program.commands.map(function (cmd) {\n    return cmd._name;\n});\nvar RENAMED_COMMANDS = {\n    \"delete-site\": \"hosting:disable\",\n    \"disable:hosting\": \"hosting:disable\",\n    \"data:get\": \"database:get\",\n    \"data:push\": \"database:push\",\n    \"data:remove\": \"database:remove\",\n    \"data:set\": \"database:set\",\n    \"data:update\": \"database:update\",\n    \"deploy:hosting\": \"deploy --only hosting\",\n    \"deploy:database\": \"deploy --only database\",\n    \"prefs:token\": \"login:ci\",\n};\nprogram.action(function (_, args) {\n    setupLoggers();\n    var cmd = args[0];\n    logger.error(clc.bold.red(\"Error:\"), clc.bold(cmd), \"is not a Firebase command\");\n    if (RENAMED_COMMANDS[cmd]) {\n        logger.error();\n        logger.error(clc.bold(cmd) + \" has been renamed, please run\", clc.bold(\"firebase \" + RENAMED_COMMANDS[cmd]), \"instead\");\n    }\n    else {\n        if (!suggestCommands(cmd, commandNames)) {\n            suggestCommands(args.join(\":\"), commandNames);\n        }\n    }\n    process.exit(1);\n});\nmodule.exports = client;\n"]},"metadata":{},"sourceType":"script"}