{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst command_1 = require(\"../command\");\n\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst askUserForConsent_1 = require(\"../extensions/askUserForConsent\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst error_1 = require(\"../error\");\n\nconst utils = require(\"../utils\");\n\nexports.default = new command_1.Command(\"ext:dev:register\").description(\"register a publisher ID; run this before publishing your first extension.\").before(requirePermissions_1.requirePermissions, [\"firebaseextensions.sources.create\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).action(async options => {\n  await askUserForConsent_1.promptForPublisherTOS();\n  const projectId = projectUtils_1.needProjectId(options);\n  const msg = \"What would you like to register as your publisher ID? \" + \"This value identifies you in Firebase's registry of extensions as the author of your extensions. \" + \"Examples: my-company-name, MyGitHubUsername.\\n\\n\" + \"You can only do this once for each project.\";\n  const publisherId = await prompt_1.promptOnce({\n    name: \"publisherId\",\n    type: \"input\",\n    message: msg,\n    default: projectId\n  });\n\n  try {\n    await extensionsApi_1.registerPublisherProfile(projectId, publisherId);\n  } catch (err) {\n    if (err.status === 409) {\n      const error = `Couldn't register the publisher ID '${clc.bold(publisherId)}' to the project '${clc.bold(projectId)}'.` + \" This can happen for either of two reasons:\\n\\n\" + ` - Publisher ID '${clc.bold(publisherId)}' is registered to another project\\n` + ` - Project '${clc.bold(projectId)}' already has a publisher ID\\n\\n` + ` Try again with a unique publisher ID or a new project. If your business’s name has been registered to another project, contact Firebase support ${marked(\"(https://firebase.google.com/support/troubleshooter/contact).\")}`;\n      throw new error_1.FirebaseError(error, {\n        exit: 1\n      });\n    }\n\n    throw new error_1.FirebaseError(`Failed to register publisher ID ${clc.bold(publisherId)} for project ${clc.bold(projectId)}: ${err.message}`, {\n      exit: 1\n    });\n  }\n\n  return utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Publisher ID '${clc.bold(publisherId)}' has been registered to project ${clc.bold(projectId)}`);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-dev-register.js"],"names":["Object","defineProperty","exports","value","clc","require","marked","command_1","extensionsApi_1","projectUtils_1","prompt_1","extensionsHelper_1","askUserForConsent_1","requirePermissions_1","error_1","utils","default","Command","description","before","requirePermissions","ensureExtensionsApiEnabled","action","options","promptForPublisherTOS","projectId","needProjectId","msg","publisherId","promptOnce","name","type","message","registerPublisherProfile","err","status","error","bold","FirebaseError","exit","logLabeledSuccess","logPrefix"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst command_1 = require(\"../command\");\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst prompt_1 = require(\"../prompt\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst askUserForConsent_1 = require(\"../extensions/askUserForConsent\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst error_1 = require(\"../error\");\nconst utils = require(\"../utils\");\nexports.default = new command_1.Command(\"ext:dev:register\")\n    .description(\"register a publisher ID; run this before publishing your first extension.\")\n    .before(requirePermissions_1.requirePermissions, [\"firebaseextensions.sources.create\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .action(async (options) => {\n    await askUserForConsent_1.promptForPublisherTOS();\n    const projectId = projectUtils_1.needProjectId(options);\n    const msg = \"What would you like to register as your publisher ID? \" +\n        \"This value identifies you in Firebase's registry of extensions as the author of your extensions. \" +\n        \"Examples: my-company-name, MyGitHubUsername.\\n\\n\" +\n        \"You can only do this once for each project.\";\n    const publisherId = await prompt_1.promptOnce({\n        name: \"publisherId\",\n        type: \"input\",\n        message: msg,\n        default: projectId,\n    });\n    try {\n        await extensionsApi_1.registerPublisherProfile(projectId, publisherId);\n    }\n    catch (err) {\n        if (err.status === 409) {\n            const error = `Couldn't register the publisher ID '${clc.bold(publisherId)}' to the project '${clc.bold(projectId)}'.` +\n                \" This can happen for either of two reasons:\\n\\n\" +\n                ` - Publisher ID '${clc.bold(publisherId)}' is registered to another project\\n` +\n                ` - Project '${clc.bold(projectId)}' already has a publisher ID\\n\\n` +\n                ` Try again with a unique publisher ID or a new project. If your business’s name has been registered to another project, contact Firebase support ${marked(\"(https://firebase.google.com/support/troubleshooter/contact).\")}`;\n            throw new error_1.FirebaseError(error, { exit: 1 });\n        }\n        throw new error_1.FirebaseError(`Failed to register publisher ID ${clc.bold(publisherId)} for project ${clc.bold(projectId)}: ${err.message}`, { exit: 1 });\n    }\n    return utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Publisher ID '${clc.bold(publisherId)}' has been registered to project ${clc.bold(projectId)}`);\n});\n"]},"metadata":{},"sourceType":"script"}