{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar clc = require(\"cli-color\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nvar functionsConfig = require(\"../functionsConfig\");\n\nvar needProjectId = require(\"../projectUtils\").needProjectId;\n\nconst {\n  logger\n} = require(\"../logger\");\n\nvar {\n  requirePermissions\n} = require(\"../requirePermissions\");\n\nvar utils = require(\"../utils\");\n\nvar runtimeconfig = require(\"../gcp/runtimeconfig\");\n\nmodule.exports = new Command(\"functions:config:unset [keys...]\").description(\"unset environment config at the specified path(s)\").before(requirePermissions, [\"runtimeconfig.configs.list\", \"runtimeconfig.configs.create\", \"runtimeconfig.configs.get\", \"runtimeconfig.configs.update\", \"runtimeconfig.configs.delete\", \"runtimeconfig.variables.list\", \"runtimeconfig.variables.create\", \"runtimeconfig.variables.get\", \"runtimeconfig.variables.update\", \"runtimeconfig.variables.delete\"]).before(functionsConfig.ensureApi).action(function (args, options) {\n  if (!args.length) {\n    return utils.reject(\"Must supply at least one key\");\n  }\n\n  var projectId = needProjectId(options);\n  var parsed = functionsConfig.parseUnsetArgs(args);\n  return Promise.all(_.map(parsed, function (item) {\n    if (item.varId === \"\") {\n      return runtimeconfig.configs.delete(projectId, item.configId);\n    }\n\n    return runtimeconfig.variables.delete(projectId, item.configId, item.varId);\n  })).then(function () {\n    utils.logSuccess(\"Environment updated.\");\n    logger.info(\"\\nPlease deploy your functions for the change to take effect by running \" + clc.bold(\"firebase deploy --only functions\") + \"\\n\");\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/functions-config-unset.js"],"names":["_","require","clc","Command","functionsConfig","needProjectId","logger","requirePermissions","utils","runtimeconfig","module","exports","description","before","ensureApi","action","args","options","length","reject","projectId","parsed","parseUnsetArgs","Promise","all","map","item","varId","configs","delete","configId","variables","then","logSuccess","info","bold"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAI;AAAEE,EAAAA;AAAF,IAAcF,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAAP,CAA2BI,aAA/C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaL,OAAO,CAAC,WAAD,CAA1B;;AACA,IAAI;AAAEM,EAAAA;AAAF,IAAyBN,OAAO,CAAC,uBAAD,CAApC;;AACA,IAAIO,KAAK,GAAGP,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIQ,aAAa,GAAGR,OAAO,CAAC,sBAAD,CAA3B;;AACAS,MAAM,CAACC,OAAP,GAAiB,IAAIR,OAAJ,CAAY,kCAAZ,EACZS,WADY,CACA,mDADA,EAEZC,MAFY,CAELN,kBAFK,EAEe,CAC5B,4BAD4B,EAE5B,8BAF4B,EAG5B,2BAH4B,EAI5B,8BAJ4B,EAK5B,8BAL4B,EAM5B,8BAN4B,EAO5B,gCAP4B,EAQ5B,6BAR4B,EAS5B,gCAT4B,EAU5B,gCAV4B,CAFf,EAcZM,MAdY,CAcLT,eAAe,CAACU,SAdX,EAeZC,MAfY,CAeL,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACjC,MAAI,CAACD,IAAI,CAACE,MAAV,EAAkB;AACd,WAAOV,KAAK,CAACW,MAAN,CAAa,8BAAb,CAAP;AACH;;AACD,MAAIC,SAAS,GAAGf,aAAa,CAACY,OAAD,CAA7B;AACA,MAAII,MAAM,GAAGjB,eAAe,CAACkB,cAAhB,CAA+BN,IAA/B,CAAb;AACA,SAAOO,OAAO,CAACC,GAAR,CAAYxB,CAAC,CAACyB,GAAF,CAAMJ,MAAN,EAAc,UAAUK,IAAV,EAAgB;AAC7C,QAAIA,IAAI,CAACC,KAAL,KAAe,EAAnB,EAAuB;AACnB,aAAOlB,aAAa,CAACmB,OAAd,CAAsBC,MAAtB,CAA6BT,SAA7B,EAAwCM,IAAI,CAACI,QAA7C,CAAP;AACH;;AACD,WAAOrB,aAAa,CAACsB,SAAd,CAAwBF,MAAxB,CAA+BT,SAA/B,EAA0CM,IAAI,CAACI,QAA/C,EAAyDJ,IAAI,CAACC,KAA9D,CAAP;AACH,GALkB,CAAZ,EAKHK,IALG,CAKE,YAAY;AACjBxB,IAAAA,KAAK,CAACyB,UAAN,CAAiB,sBAAjB;AACA3B,IAAAA,MAAM,CAAC4B,IAAP,CAAY,6EACRhC,GAAG,CAACiC,IAAJ,CAAS,kCAAT,CADQ,GAER,IAFJ;AAGH,GAVM,CAAP;AAWH,CAhCgB,CAAjB","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar clc = require(\"cli-color\");\nvar { Command } = require(\"../command\");\nvar functionsConfig = require(\"../functionsConfig\");\nvar needProjectId = require(\"../projectUtils\").needProjectId;\nconst { logger } = require(\"../logger\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar utils = require(\"../utils\");\nvar runtimeconfig = require(\"../gcp/runtimeconfig\");\nmodule.exports = new Command(\"functions:config:unset [keys...]\")\n    .description(\"unset environment config at the specified path(s)\")\n    .before(requirePermissions, [\n    \"runtimeconfig.configs.list\",\n    \"runtimeconfig.configs.create\",\n    \"runtimeconfig.configs.get\",\n    \"runtimeconfig.configs.update\",\n    \"runtimeconfig.configs.delete\",\n    \"runtimeconfig.variables.list\",\n    \"runtimeconfig.variables.create\",\n    \"runtimeconfig.variables.get\",\n    \"runtimeconfig.variables.update\",\n    \"runtimeconfig.variables.delete\",\n])\n    .before(functionsConfig.ensureApi)\n    .action(function (args, options) {\n    if (!args.length) {\n        return utils.reject(\"Must supply at least one key\");\n    }\n    var projectId = needProjectId(options);\n    var parsed = functionsConfig.parseUnsetArgs(args);\n    return Promise.all(_.map(parsed, function (item) {\n        if (item.varId === \"\") {\n            return runtimeconfig.configs.delete(projectId, item.configId);\n        }\n        return runtimeconfig.variables.delete(projectId, item.configId, item.varId);\n    })).then(function () {\n        utils.logSuccess(\"Environment updated.\");\n        logger.info(\"\\nPlease deploy your functions for the change to take effect by running \" +\n            clc.bold(\"firebase deploy --only functions\") +\n            \"\\n\");\n    });\n});\n"]},"metadata":{},"sourceType":"script"}