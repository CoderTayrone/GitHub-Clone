{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deploy = void 0;\n\nconst tmp_1 = require(\"tmp\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst checkIam_1 = require(\"./checkIam\");\n\nconst api_1 = require(\"../../api\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst gcs = require(\"../../gcp/storage\");\n\nconst gcf = require(\"../../gcp/cloudfunctions\");\n\nconst gcfv2 = require(\"../../gcp/cloudfunctionsv2\");\n\nconst utils = require(\"../../utils\");\n\nconst GCP_REGION = api_1.functionsUploadRegion;\ntmp_1.setGracefulCleanup();\n\nasync function uploadSourceV1(context) {\n  const uploadUrl = await gcf.generateUploadUrl(context.projectId, GCP_REGION);\n  context.uploadUrl = uploadUrl;\n  const uploadOpts = {\n    file: context.functionsSourceV1,\n    stream: fs.createReadStream(context.functionsSourceV1)\n  };\n  await gcs.upload(uploadOpts, uploadUrl, {\n    \"x-goog-content-length-range\": \"0,104857600\"\n  });\n}\n\nasync function uploadSourceV2(context, region) {\n  const res = await gcfv2.generateUploadUrl(context.projectId, region);\n  const uploadOpts = {\n    file: context.functionsSourceV2,\n    stream: fs.createReadStream(context.functionsSourceV2)\n  };\n  await gcs.upload(uploadOpts, res.uploadUrl);\n  context.storage = Object.assign(Object.assign({}, context.storage), {\n    [region]: res.storageSource\n  });\n}\n\nasync function deploy(context, options, payload) {\n  if (!options.config.src.functions) {\n    return;\n  }\n\n  await checkIam_1.checkHttpIam(context, options, payload);\n\n  if (!context.functionsSourceV1 && !context.functionsSourceV2) {\n    return;\n  }\n\n  try {\n    const want = payload.functions.backend;\n    const uploads = [];\n\n    if (want.cloudFunctions.some(fn => fn.platform === \"gcfv1\")) {\n      uploads.push(uploadSourceV1(context));\n    }\n\n    if (want.cloudFunctions.some(fn => fn.platform === \"gcfv2\")) {\n      const functions = payload.functions.backend.cloudFunctions;\n      const regions = [];\n\n      for (const func of functions) {\n        if (func.platform === \"gcfv2\" && -1 === regions.indexOf(func.region)) {\n          regions.push(func.region);\n        }\n      }\n\n      for (const region of regions) {\n        uploads.push(uploadSourceV2(context, region));\n      }\n    }\n\n    await Promise.all(uploads);\n    utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n    utils_1.logSuccess(clc.green.bold(\"functions:\") + \" \" + clc.bold(options.config.src.functions.source) + \" folder uploaded successfully\");\n  } catch (err) {\n    utils_1.logWarning(clc.yellow(\"functions:\") + \" Upload Error: \" + err.message);\n    throw err;\n  }\n}\n\nexports.deploy = deploy;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/deploy.js"],"names":["Object","defineProperty","exports","value","deploy","tmp_1","require","clc","fs","checkIam_1","api_1","utils_1","gcs","gcf","gcfv2","utils","GCP_REGION","functionsUploadRegion","setGracefulCleanup","uploadSourceV1","context","uploadUrl","generateUploadUrl","projectId","uploadOpts","file","functionsSourceV1","stream","createReadStream","upload","uploadSourceV2","region","res","functionsSourceV2","storage","assign","storageSource","options","payload","config","src","functions","checkHttpIam","want","backend","uploads","cloudFunctions","some","fn","platform","push","regions","func","indexOf","Promise","all","assertDefined","source","logSuccess","green","bold","err","logWarning","yellow","message"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deploy = void 0;\nconst tmp_1 = require(\"tmp\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst checkIam_1 = require(\"./checkIam\");\nconst api_1 = require(\"../../api\");\nconst utils_1 = require(\"../../utils\");\nconst gcs = require(\"../../gcp/storage\");\nconst gcf = require(\"../../gcp/cloudfunctions\");\nconst gcfv2 = require(\"../../gcp/cloudfunctionsv2\");\nconst utils = require(\"../../utils\");\nconst GCP_REGION = api_1.functionsUploadRegion;\ntmp_1.setGracefulCleanup();\nasync function uploadSourceV1(context) {\n    const uploadUrl = await gcf.generateUploadUrl(context.projectId, GCP_REGION);\n    context.uploadUrl = uploadUrl;\n    const uploadOpts = {\n        file: context.functionsSourceV1,\n        stream: fs.createReadStream(context.functionsSourceV1),\n    };\n    await gcs.upload(uploadOpts, uploadUrl, {\n        \"x-goog-content-length-range\": \"0,104857600\",\n    });\n}\nasync function uploadSourceV2(context, region) {\n    const res = await gcfv2.generateUploadUrl(context.projectId, region);\n    const uploadOpts = {\n        file: context.functionsSourceV2,\n        stream: fs.createReadStream(context.functionsSourceV2),\n    };\n    await gcs.upload(uploadOpts, res.uploadUrl);\n    context.storage = Object.assign(Object.assign({}, context.storage), { [region]: res.storageSource });\n}\nasync function deploy(context, options, payload) {\n    if (!options.config.src.functions) {\n        return;\n    }\n    await checkIam_1.checkHttpIam(context, options, payload);\n    if (!context.functionsSourceV1 && !context.functionsSourceV2) {\n        return;\n    }\n    try {\n        const want = payload.functions.backend;\n        const uploads = [];\n        if (want.cloudFunctions.some((fn) => fn.platform === \"gcfv1\")) {\n            uploads.push(uploadSourceV1(context));\n        }\n        if (want.cloudFunctions.some((fn) => fn.platform === \"gcfv2\")) {\n            const functions = payload.functions.backend.cloudFunctions;\n            const regions = [];\n            for (const func of functions) {\n                if (func.platform === \"gcfv2\" && -1 === regions.indexOf(func.region)) {\n                    regions.push(func.region);\n                }\n            }\n            for (const region of regions) {\n                uploads.push(uploadSourceV2(context, region));\n            }\n        }\n        await Promise.all(uploads);\n        utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n        utils_1.logSuccess(clc.green.bold(\"functions:\") +\n            \" \" +\n            clc.bold(options.config.src.functions.source) +\n            \" folder uploaded successfully\");\n    }\n    catch (err) {\n        utils_1.logWarning(clc.yellow(\"functions:\") + \" Upload Error: \" + err.message);\n        throw err;\n    }\n}\nexports.deploy = deploy;\n"]},"metadata":{},"sourceType":"script"}