{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst marked = require(\"marked\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst config_1 = require(\"../config\");\n\nconst error_1 = require(\"../error\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst logger_1 = require(\"../logger\");\n\nconst npmDependencies = require(\"../init/features/functions/npm-dependencies\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\nconst TEMPLATE_ROOT = path.resolve(__dirname, \"../../templates/extensions/\");\nconst FUNCTIONS_ROOT = path.resolve(__dirname, \"../../templates/init/functions/\");\n\nfunction readCommonTemplates() {\n  return {\n    extSpecTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"extension.yaml\"), \"utf8\"),\n    preinstallTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"PREINSTALL.md\"), \"utf8\"),\n    postinstallTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"POSTINSTALL.md\"), \"utf8\"),\n    changelogTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"CHANGELOG.md\"), \"utf8\")\n  };\n}\n\nasync function typescriptSelected(config) {\n  const packageLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"package.lint.json\"), \"utf8\");\n  const packageNoLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"package.nolint.json\"), \"utf8\");\n  const tsconfigTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"tsconfig.json\"), \"utf8\");\n  const tsconfigDevTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"tsconfig.dev.json\"), \"utf8\");\n  const indexTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"index.ts\"), \"utf8\");\n  const gitignoreTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"_gitignore\"), \"utf8\");\n  const eslintTemplate = fs.readFileSync(path.join(FUNCTIONS_ROOT, \"typescript\", \"_eslintrc\"), \"utf8\");\n  const lint = await prompt_1.promptOnce({\n    name: \"lint\",\n    type: \"confirm\",\n    message: \"Do you want to use ESLint to catch probable bugs and enforce style?\",\n    default: true\n  });\n  const templates = readCommonTemplates();\n  await config.askWriteProjectFile(\"extension.yaml\", templates.extSpecTemplate);\n  await config.askWriteProjectFile(\"PREINSTALL.md\", templates.preinstallTemplate);\n  await config.askWriteProjectFile(\"POSTINSTALL.md\", templates.postinstallTemplate);\n  await config.askWriteProjectFile(\"CHANGELOG.md\", templates.changelogTemplate);\n  await config.askWriteProjectFile(\"functions/src/index.ts\", indexTemplate);\n\n  if (lint) {\n    await config.askWriteProjectFile(\"functions/package.json\", packageLintingTemplate);\n    await config.askWriteProjectFile(\"functions/.eslintrc.js\", eslintTemplate);\n  } else {\n    await config.askWriteProjectFile(\"functions/package.json\", packageNoLintingTemplate);\n  }\n\n  await config.askWriteProjectFile(\"functions/tsconfig.json\", tsconfigTemplate);\n\n  if (lint) {\n    await config.askWriteProjectFile(\"functions/tsconfig.dev.json\", tsconfigDevTemplate);\n  }\n\n  await config.askWriteProjectFile(\"functions/.gitignore\", gitignoreTemplate);\n}\n\nasync function javascriptSelected(config) {\n  const indexTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"index.js\"), \"utf8\");\n  const packageLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"package.lint.json\"), \"utf8\");\n  const packageNoLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"package.nolint.json\"), \"utf8\");\n  const gitignoreTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"_gitignore\"), \"utf8\");\n  const eslintTemplate = fs.readFileSync(path.join(FUNCTIONS_ROOT, \"javascript\", \"_eslintrc\"), \"utf8\");\n  const lint = await prompt_1.promptOnce({\n    name: \"lint\",\n    type: \"confirm\",\n    message: \"Do you want to use ESLint to catch probable bugs and enforce style?\",\n    default: false\n  });\n  const templates = readCommonTemplates();\n  await config.askWriteProjectFile(\"extension.yaml\", templates.extSpecTemplate);\n  await config.askWriteProjectFile(\"PREINSTALL.md\", templates.preinstallTemplate);\n  await config.askWriteProjectFile(\"POSTINSTALL.md\", templates.postinstallTemplate);\n  await config.askWriteProjectFile(\"CHANGELOG.md\", templates.changelogTemplate);\n  await config.askWriteProjectFile(\"functions/index.js\", indexTemplate);\n\n  if (lint) {\n    await config.askWriteProjectFile(\"functions/package.json\", packageLintingTemplate);\n    await config.askWriteProjectFile(\"functions/.eslintrc.js\", eslintTemplate);\n  } else {\n    await config.askWriteProjectFile(\"functions/package.json\", packageNoLintingTemplate);\n  }\n\n  await config.askWriteProjectFile(\"functions/.gitignore\", gitignoreTemplate);\n}\n\nexports.default = new command_1.Command(\"ext:dev:init\").description(\"initialize files for writing an extension in the current directory\").before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\").action(async options => {\n  const cwd = options.cwd || process.cwd();\n  const config = new config_1.Config({}, {\n    projectDir: cwd,\n    cwd: cwd\n  });\n\n  try {\n    const lang = await prompt_1.promptOnce({\n      type: \"list\",\n      name: \"language\",\n      message: \"In which language do you want to write the Cloud Functions for your extension?\",\n      default: \"javascript\",\n      choices: [{\n        name: \"JavaScript\",\n        value: \"javascript\"\n      }, {\n        name: \"TypeScript\",\n        value: \"typescript\"\n      }]\n    });\n\n    switch (lang) {\n      case \"javascript\":\n        {\n          await javascriptSelected(config);\n          break;\n        }\n\n      case \"typescript\":\n        {\n          await typescriptSelected(config);\n          break;\n        }\n\n      default:\n        {\n          throw new error_1.FirebaseError(`${lang} is not supported.`);\n        }\n    }\n\n    await npmDependencies.askInstallDependencies({}, config);\n    const welcome = fs.readFileSync(path.join(TEMPLATE_ROOT, lang, \"WELCOME.md\"), \"utf8\");\n    return logger_1.logger.info(\"\\n\" + marked(welcome));\n  } catch (err) {\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred when initializing files for new extension: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-dev-init.js"],"names":["Object","defineProperty","exports","value","fs","require","path","marked","TerminalRenderer","checkMinRequiredVersion_1","command_1","config_1","error_1","prompt_1","logger_1","npmDependencies","setOptions","renderer","TEMPLATE_ROOT","resolve","__dirname","FUNCTIONS_ROOT","readCommonTemplates","extSpecTemplate","readFileSync","join","preinstallTemplate","postinstallTemplate","changelogTemplate","typescriptSelected","config","packageLintingTemplate","packageNoLintingTemplate","tsconfigTemplate","tsconfigDevTemplate","indexTemplate","gitignoreTemplate","eslintTemplate","lint","promptOnce","name","type","message","default","templates","askWriteProjectFile","javascriptSelected","Command","description","before","checkMinRequiredVersion","action","options","cwd","process","Config","projectDir","lang","choices","FirebaseError","askInstallDependencies","welcome","logger","info","err","original"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst marked = require(\"marked\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst config_1 = require(\"../config\");\nconst error_1 = require(\"../error\");\nconst prompt_1 = require(\"../prompt\");\nconst logger_1 = require(\"../logger\");\nconst npmDependencies = require(\"../init/features/functions/npm-dependencies\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nconst TEMPLATE_ROOT = path.resolve(__dirname, \"../../templates/extensions/\");\nconst FUNCTIONS_ROOT = path.resolve(__dirname, \"../../templates/init/functions/\");\nfunction readCommonTemplates() {\n    return {\n        extSpecTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"extension.yaml\"), \"utf8\"),\n        preinstallTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"PREINSTALL.md\"), \"utf8\"),\n        postinstallTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"POSTINSTALL.md\"), \"utf8\"),\n        changelogTemplate: fs.readFileSync(path.join(TEMPLATE_ROOT, \"CHANGELOG.md\"), \"utf8\"),\n    };\n}\nasync function typescriptSelected(config) {\n    const packageLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"package.lint.json\"), \"utf8\");\n    const packageNoLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"package.nolint.json\"), \"utf8\");\n    const tsconfigTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"tsconfig.json\"), \"utf8\");\n    const tsconfigDevTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"tsconfig.dev.json\"), \"utf8\");\n    const indexTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"index.ts\"), \"utf8\");\n    const gitignoreTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"typescript\", \"_gitignore\"), \"utf8\");\n    const eslintTemplate = fs.readFileSync(path.join(FUNCTIONS_ROOT, \"typescript\", \"_eslintrc\"), \"utf8\");\n    const lint = await prompt_1.promptOnce({\n        name: \"lint\",\n        type: \"confirm\",\n        message: \"Do you want to use ESLint to catch probable bugs and enforce style?\",\n        default: true,\n    });\n    const templates = readCommonTemplates();\n    await config.askWriteProjectFile(\"extension.yaml\", templates.extSpecTemplate);\n    await config.askWriteProjectFile(\"PREINSTALL.md\", templates.preinstallTemplate);\n    await config.askWriteProjectFile(\"POSTINSTALL.md\", templates.postinstallTemplate);\n    await config.askWriteProjectFile(\"CHANGELOG.md\", templates.changelogTemplate);\n    await config.askWriteProjectFile(\"functions/src/index.ts\", indexTemplate);\n    if (lint) {\n        await config.askWriteProjectFile(\"functions/package.json\", packageLintingTemplate);\n        await config.askWriteProjectFile(\"functions/.eslintrc.js\", eslintTemplate);\n    }\n    else {\n        await config.askWriteProjectFile(\"functions/package.json\", packageNoLintingTemplate);\n    }\n    await config.askWriteProjectFile(\"functions/tsconfig.json\", tsconfigTemplate);\n    if (lint) {\n        await config.askWriteProjectFile(\"functions/tsconfig.dev.json\", tsconfigDevTemplate);\n    }\n    await config.askWriteProjectFile(\"functions/.gitignore\", gitignoreTemplate);\n}\nasync function javascriptSelected(config) {\n    const indexTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"index.js\"), \"utf8\");\n    const packageLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"package.lint.json\"), \"utf8\");\n    const packageNoLintingTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"package.nolint.json\"), \"utf8\");\n    const gitignoreTemplate = fs.readFileSync(path.join(TEMPLATE_ROOT, \"javascript\", \"_gitignore\"), \"utf8\");\n    const eslintTemplate = fs.readFileSync(path.join(FUNCTIONS_ROOT, \"javascript\", \"_eslintrc\"), \"utf8\");\n    const lint = await prompt_1.promptOnce({\n        name: \"lint\",\n        type: \"confirm\",\n        message: \"Do you want to use ESLint to catch probable bugs and enforce style?\",\n        default: false,\n    });\n    const templates = readCommonTemplates();\n    await config.askWriteProjectFile(\"extension.yaml\", templates.extSpecTemplate);\n    await config.askWriteProjectFile(\"PREINSTALL.md\", templates.preinstallTemplate);\n    await config.askWriteProjectFile(\"POSTINSTALL.md\", templates.postinstallTemplate);\n    await config.askWriteProjectFile(\"CHANGELOG.md\", templates.changelogTemplate);\n    await config.askWriteProjectFile(\"functions/index.js\", indexTemplate);\n    if (lint) {\n        await config.askWriteProjectFile(\"functions/package.json\", packageLintingTemplate);\n        await config.askWriteProjectFile(\"functions/.eslintrc.js\", eslintTemplate);\n    }\n    else {\n        await config.askWriteProjectFile(\"functions/package.json\", packageNoLintingTemplate);\n    }\n    await config.askWriteProjectFile(\"functions/.gitignore\", gitignoreTemplate);\n}\nexports.default = new command_1.Command(\"ext:dev:init\")\n    .description(\"initialize files for writing an extension in the current directory\")\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\")\n    .action(async (options) => {\n    const cwd = options.cwd || process.cwd();\n    const config = new config_1.Config({}, { projectDir: cwd, cwd: cwd });\n    try {\n        const lang = await prompt_1.promptOnce({\n            type: \"list\",\n            name: \"language\",\n            message: \"In which language do you want to write the Cloud Functions for your extension?\",\n            default: \"javascript\",\n            choices: [\n                {\n                    name: \"JavaScript\",\n                    value: \"javascript\",\n                },\n                {\n                    name: \"TypeScript\",\n                    value: \"typescript\",\n                },\n            ],\n        });\n        switch (lang) {\n            case \"javascript\": {\n                await javascriptSelected(config);\n                break;\n            }\n            case \"typescript\": {\n                await typescriptSelected(config);\n                break;\n            }\n            default: {\n                throw new error_1.FirebaseError(`${lang} is not supported.`);\n            }\n        }\n        await npmDependencies.askInstallDependencies({}, config);\n        const welcome = fs.readFileSync(path.join(TEMPLATE_ROOT, lang, \"WELCOME.md\"), \"utf8\");\n        return logger_1.logger.info(\"\\n\" + marked(welcome));\n    }\n    catch (err) {\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred when initializing files for new extension: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}