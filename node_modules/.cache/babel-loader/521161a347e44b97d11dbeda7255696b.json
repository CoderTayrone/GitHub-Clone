{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppDistributionClient = exports.AppView = exports.AabState = exports.UploadStatus = void 0;\n\nconst _ = require(\"lodash\");\n\nconst api = require(\"../api\");\n\nconst utils = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst pkg = require(\"../../package.json\");\n\nvar UploadStatus;\n\n(function (UploadStatus) {\n  UploadStatus[\"SUCCESS\"] = \"SUCCESS\";\n  UploadStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  UploadStatus[\"ERROR\"] = \"ERROR\";\n})(UploadStatus = exports.UploadStatus || (exports.UploadStatus = {}));\n\nvar AabState;\n\n(function (AabState) {\n  AabState[\"AAB_STATE_UNSPECIFIED\"] = \"AAB_STATE_UNSPECIFIED\";\n  AabState[\"ACTIVE\"] = \"ACTIVE\";\n  AabState[\"PLAY_ACCOUNT_NOT_LINKED\"] = \"PLAY_ACCOUNT_NOT_LINKED\";\n  AabState[\"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\"] = \"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\";\n  AabState[\"APP_NOT_PUBLISHED\"] = \"APP_NOT_PUBLISHED\";\n  AabState[\"AAB_STATE_UNAVAILABLE\"] = \"AAB_STATE_UNAVAILABLE\";\n  AabState[\"PLAY_IAS_TERMS_NOT_ACCEPTED\"] = \"PLAY_IAS_TERMS_NOT_ACCEPTED\";\n})(AabState = exports.AabState || (exports.AabState = {}));\n\nvar AppView;\n\n(function (AppView) {\n  AppView[\"BASIC\"] = \"BASIC\";\n  AppView[\"FULL\"] = \"FULL\";\n})(AppView = exports.AppView || (exports.AppView = {}));\n\nclass AppDistributionClient {\n  constructor(appId) {\n    this.appId = appId;\n  }\n\n  async getApp(appView = AppView.BASIC) {\n    const apiResponse = await api.request(\"GET\", `/v1alpha/apps/${this.appId}?appView=${appView}`, {\n      origin: api.appDistributionOrigin,\n      auth: true\n    });\n    return _.get(apiResponse, \"body\");\n  }\n\n  async uploadDistribution(distribution) {\n    const apiResponse = await api.request(\"POST\", `/app-binary-uploads?app_id=${this.appId}`, {\n      auth: true,\n      origin: api.appDistributionOrigin,\n      headers: {\n        \"X-APP-DISTRO-API-CLIENT-ID\": pkg.name,\n        \"X-APP-DISTRO-API-CLIENT-TYPE\": distribution.platform(),\n        \"X-APP-DISTRO-API-CLIENT-VERSION\": pkg.version,\n        \"X-GOOG-UPLOAD-FILE-NAME\": distribution.getFileName(),\n        \"X-GOOG-UPLOAD-PROTOCOL\": \"raw\",\n        \"Content-Type\": \"application/octet-stream\"\n      },\n      data: distribution.readStream(),\n      json: false\n    });\n    return _.get(JSON.parse(apiResponse.body), \"token\");\n  }\n\n  async pollUploadStatus(binaryName, retryCount = 0) {\n    const uploadStatus = await this.getUploadStatus(binaryName);\n\n    if (uploadStatus.status === UploadStatus.IN_PROGRESS) {\n      if (retryCount >= AppDistributionClient.MAX_POLLING_RETRIES) {\n        throw new error_1.FirebaseError(\"it took longer than expected to process your binary, please try again\", {\n          exit: 1\n        });\n      }\n\n      await new Promise(resolve => setTimeout(resolve, AppDistributionClient.POLLING_INTERVAL_MS));\n      return this.pollUploadStatus(binaryName, retryCount + 1);\n    } else if (uploadStatus.status === UploadStatus.SUCCESS) {\n      return uploadStatus.release.id;\n    } else {\n      throw new error_1.FirebaseError(`error processing your binary: ${uploadStatus.message} (Code: ${uploadStatus.errorCode})`);\n    }\n  }\n\n  async getUploadStatus(binaryName) {\n    const encodedBinaryName = encodeURIComponent(binaryName);\n    const apiResponse = await api.request(\"GET\", `/v1alpha/apps/${this.appId}/upload_status/${encodedBinaryName}`, {\n      origin: api.appDistributionOrigin,\n      auth: true\n    });\n    return _.get(apiResponse, \"body\");\n  }\n\n  async addReleaseNotes(releaseId, releaseNotes) {\n    if (!releaseNotes) {\n      utils.logWarning(\"no release notes specified, skipping\");\n      return;\n    }\n\n    utils.logBullet(\"adding release notes...\");\n    const data = {\n      releaseNotes: {\n        releaseNotes\n      }\n    };\n\n    try {\n      await api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/notes`, {\n        origin: api.appDistributionOrigin,\n        auth: true,\n        data\n      });\n    } catch (err) {\n      throw new error_1.FirebaseError(`failed to add release notes with ${err.message}`, {\n        exit: 1\n      });\n    }\n\n    utils.logSuccess(\"added release notes successfully\");\n  }\n\n  async enableAccess(releaseId, emails = [], groupIds = []) {\n    if (emails.length === 0 && groupIds.length === 0) {\n      utils.logWarning(\"no testers or groups specified, skipping\");\n      return;\n    }\n\n    utils.logBullet(\"adding testers/groups...\");\n    const data = {\n      emails,\n      groupIds\n    };\n\n    try {\n      await api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/enable_access`, {\n        origin: api.appDistributionOrigin,\n        auth: true,\n        data\n      });\n    } catch (err) {\n      let errorMessage = err.message;\n\n      if (_.has(err, \"context.body.error\")) {\n        const errorStatus = _.get(err, \"context.body.error.status\");\n\n        if (errorStatus === \"FAILED_PRECONDITION\") {\n          errorMessage = \"invalid testers\";\n        } else if (errorStatus === \"INVALID_ARGUMENT\") {\n          errorMessage = \"invalid groups\";\n        }\n      }\n\n      throw new error_1.FirebaseError(`failed to add testers/groups: ${errorMessage}`, {\n        exit: 1\n      });\n    }\n\n    utils.logSuccess(\"added testers/groups successfully\");\n  }\n\n}\n\nexports.AppDistributionClient = AppDistributionClient;\nAppDistributionClient.MAX_POLLING_RETRIES = 60;\nAppDistributionClient.POLLING_INTERVAL_MS = 2000;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/appdistribution/client.js"],"names":["Object","defineProperty","exports","value","AppDistributionClient","AppView","AabState","UploadStatus","_","require","api","utils","error_1","pkg","constructor","appId","getApp","appView","BASIC","apiResponse","request","origin","appDistributionOrigin","auth","get","uploadDistribution","distribution","headers","name","platform","version","getFileName","data","readStream","json","JSON","parse","body","pollUploadStatus","binaryName","retryCount","uploadStatus","getUploadStatus","status","IN_PROGRESS","MAX_POLLING_RETRIES","FirebaseError","exit","Promise","resolve","setTimeout","POLLING_INTERVAL_MS","SUCCESS","release","id","message","errorCode","encodedBinaryName","encodeURIComponent","addReleaseNotes","releaseId","releaseNotes","logWarning","logBullet","err","logSuccess","enableAccess","emails","groupIds","length","errorMessage","has","errorStatus"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppDistributionClient = exports.AppView = exports.AabState = exports.UploadStatus = void 0;\nconst _ = require(\"lodash\");\nconst api = require(\"../api\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst pkg = require(\"../../package.json\");\nvar UploadStatus;\n(function (UploadStatus) {\n    UploadStatus[\"SUCCESS\"] = \"SUCCESS\";\n    UploadStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    UploadStatus[\"ERROR\"] = \"ERROR\";\n})(UploadStatus = exports.UploadStatus || (exports.UploadStatus = {}));\nvar AabState;\n(function (AabState) {\n    AabState[\"AAB_STATE_UNSPECIFIED\"] = \"AAB_STATE_UNSPECIFIED\";\n    AabState[\"ACTIVE\"] = \"ACTIVE\";\n    AabState[\"PLAY_ACCOUNT_NOT_LINKED\"] = \"PLAY_ACCOUNT_NOT_LINKED\";\n    AabState[\"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\"] = \"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\";\n    AabState[\"APP_NOT_PUBLISHED\"] = \"APP_NOT_PUBLISHED\";\n    AabState[\"AAB_STATE_UNAVAILABLE\"] = \"AAB_STATE_UNAVAILABLE\";\n    AabState[\"PLAY_IAS_TERMS_NOT_ACCEPTED\"] = \"PLAY_IAS_TERMS_NOT_ACCEPTED\";\n})(AabState = exports.AabState || (exports.AabState = {}));\nvar AppView;\n(function (AppView) {\n    AppView[\"BASIC\"] = \"BASIC\";\n    AppView[\"FULL\"] = \"FULL\";\n})(AppView = exports.AppView || (exports.AppView = {}));\nclass AppDistributionClient {\n    constructor(appId) {\n        this.appId = appId;\n    }\n    async getApp(appView = AppView.BASIC) {\n        const apiResponse = await api.request(\"GET\", `/v1alpha/apps/${this.appId}?appView=${appView}`, {\n            origin: api.appDistributionOrigin,\n            auth: true,\n        });\n        return _.get(apiResponse, \"body\");\n    }\n    async uploadDistribution(distribution) {\n        const apiResponse = await api.request(\"POST\", `/app-binary-uploads?app_id=${this.appId}`, {\n            auth: true,\n            origin: api.appDistributionOrigin,\n            headers: {\n                \"X-APP-DISTRO-API-CLIENT-ID\": pkg.name,\n                \"X-APP-DISTRO-API-CLIENT-TYPE\": distribution.platform(),\n                \"X-APP-DISTRO-API-CLIENT-VERSION\": pkg.version,\n                \"X-GOOG-UPLOAD-FILE-NAME\": distribution.getFileName(),\n                \"X-GOOG-UPLOAD-PROTOCOL\": \"raw\",\n                \"Content-Type\": \"application/octet-stream\",\n            },\n            data: distribution.readStream(),\n            json: false,\n        });\n        return _.get(JSON.parse(apiResponse.body), \"token\");\n    }\n    async pollUploadStatus(binaryName, retryCount = 0) {\n        const uploadStatus = await this.getUploadStatus(binaryName);\n        if (uploadStatus.status === UploadStatus.IN_PROGRESS) {\n            if (retryCount >= AppDistributionClient.MAX_POLLING_RETRIES) {\n                throw new error_1.FirebaseError(\"it took longer than expected to process your binary, please try again\", { exit: 1 });\n            }\n            await new Promise((resolve) => setTimeout(resolve, AppDistributionClient.POLLING_INTERVAL_MS));\n            return this.pollUploadStatus(binaryName, retryCount + 1);\n        }\n        else if (uploadStatus.status === UploadStatus.SUCCESS) {\n            return uploadStatus.release.id;\n        }\n        else {\n            throw new error_1.FirebaseError(`error processing your binary: ${uploadStatus.message} (Code: ${uploadStatus.errorCode})`);\n        }\n    }\n    async getUploadStatus(binaryName) {\n        const encodedBinaryName = encodeURIComponent(binaryName);\n        const apiResponse = await api.request(\"GET\", `/v1alpha/apps/${this.appId}/upload_status/${encodedBinaryName}`, {\n            origin: api.appDistributionOrigin,\n            auth: true,\n        });\n        return _.get(apiResponse, \"body\");\n    }\n    async addReleaseNotes(releaseId, releaseNotes) {\n        if (!releaseNotes) {\n            utils.logWarning(\"no release notes specified, skipping\");\n            return;\n        }\n        utils.logBullet(\"adding release notes...\");\n        const data = {\n            releaseNotes: {\n                releaseNotes,\n            },\n        };\n        try {\n            await api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/notes`, {\n                origin: api.appDistributionOrigin,\n                auth: true,\n                data,\n            });\n        }\n        catch (err) {\n            throw new error_1.FirebaseError(`failed to add release notes with ${err.message}`, { exit: 1 });\n        }\n        utils.logSuccess(\"added release notes successfully\");\n    }\n    async enableAccess(releaseId, emails = [], groupIds = []) {\n        if (emails.length === 0 && groupIds.length === 0) {\n            utils.logWarning(\"no testers or groups specified, skipping\");\n            return;\n        }\n        utils.logBullet(\"adding testers/groups...\");\n        const data = {\n            emails,\n            groupIds,\n        };\n        try {\n            await api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/enable_access`, {\n                origin: api.appDistributionOrigin,\n                auth: true,\n                data,\n            });\n        }\n        catch (err) {\n            let errorMessage = err.message;\n            if (_.has(err, \"context.body.error\")) {\n                const errorStatus = _.get(err, \"context.body.error.status\");\n                if (errorStatus === \"FAILED_PRECONDITION\") {\n                    errorMessage = \"invalid testers\";\n                }\n                else if (errorStatus === \"INVALID_ARGUMENT\") {\n                    errorMessage = \"invalid groups\";\n                }\n            }\n            throw new error_1.FirebaseError(`failed to add testers/groups: ${errorMessage}`, { exit: 1 });\n        }\n        utils.logSuccess(\"added testers/groups successfully\");\n    }\n}\nexports.AppDistributionClient = AppDistributionClient;\nAppDistributionClient.MAX_POLLING_RETRIES = 60;\nAppDistributionClient.POLLING_INTERVAL_MS = 2000;\n"]},"metadata":{},"sourceType":"script"}