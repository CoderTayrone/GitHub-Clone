{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst copySync = require('../copy-sync').copySync;\n\nconst removeSync = require('../remove').removeSync;\n\nconst mkdirpSync = require('../mkdirs').mkdirsSync;\n\nconst buffer = require('../util/buffer');\n\nfunction moveSync(src, dest, options) {\n  options = options || {};\n  const overwrite = options.overwrite || options.clobber || false;\n  src = path.resolve(src);\n  dest = path.resolve(dest);\n  if (src === dest) return fs.accessSync(src);\n  if (isSrcSubdir(src, dest)) throw new Error(`Cannot move '${src}' into itself '${dest}'.`);\n  mkdirpSync(path.dirname(dest));\n  tryRenameSync();\n\n  function tryRenameSync() {\n    if (overwrite) {\n      try {\n        return fs.renameSync(src, dest);\n      } catch (err) {\n        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST' || err.code === 'EPERM') {\n          removeSync(dest);\n          options.overwrite = false; // just overwriteed it, no need to do it again\n\n          return moveSync(src, dest, options);\n        }\n\n        if (err.code !== 'EXDEV') throw err;\n        return moveSyncAcrossDevice(src, dest, overwrite);\n      }\n    } else {\n      try {\n        fs.linkSync(src, dest);\n        return fs.unlinkSync(src);\n      } catch (err) {\n        if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {\n          return moveSyncAcrossDevice(src, dest, overwrite);\n        }\n\n        throw err;\n      }\n    }\n  }\n}\n\nfunction moveSyncAcrossDevice(src, dest, overwrite) {\n  const stat = fs.statSync(src);\n\n  if (stat.isDirectory()) {\n    return moveDirSyncAcrossDevice(src, dest, overwrite);\n  } else {\n    return moveFileSyncAcrossDevice(src, dest, overwrite);\n  }\n}\n\nfunction moveFileSyncAcrossDevice(src, dest, overwrite) {\n  const BUF_LENGTH = 64 * 1024;\n\n  const _buff = buffer(BUF_LENGTH);\n\n  const flags = overwrite ? 'w' : 'wx';\n  const fdr = fs.openSync(src, 'r');\n  const stat = fs.fstatSync(fdr);\n  const fdw = fs.openSync(dest, flags, stat.mode);\n  let bytesRead = 1;\n  let pos = 0;\n\n  while (bytesRead > 0) {\n    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos);\n    fs.writeSync(fdw, _buff, 0, bytesRead);\n    pos += bytesRead;\n  }\n\n  fs.closeSync(fdr);\n  fs.closeSync(fdw);\n  return fs.unlinkSync(src);\n}\n\nfunction moveDirSyncAcrossDevice(src, dest, overwrite) {\n  const options = {\n    overwrite: false\n  };\n\n  if (overwrite) {\n    removeSync(dest);\n    tryCopySync();\n  } else {\n    tryCopySync();\n  }\n\n  function tryCopySync() {\n    copySync(src, dest, options);\n    return removeSync(src);\n  }\n} // return true if dest is a subdir of src, otherwise false.\n// extract dest base dir and check if that is the same as src basename\n\n\nfunction isSrcSubdir(src, dest) {\n  try {\n    return fs.statSync(src).isDirectory() && src !== dest && dest.indexOf(src) > -1 && dest.split(path.dirname(src) + path.sep)[1].split(path.sep)[0] === path.basename(src);\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = {\n  moveSync\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/node_modules/fs-extra/lib/move-sync/index.js"],"names":["fs","require","path","copySync","removeSync","mkdirpSync","mkdirsSync","buffer","moveSync","src","dest","options","overwrite","clobber","resolve","accessSync","isSrcSubdir","Error","dirname","tryRenameSync","renameSync","err","code","moveSyncAcrossDevice","linkSync","unlinkSync","stat","statSync","isDirectory","moveDirSyncAcrossDevice","moveFileSyncAcrossDevice","BUF_LENGTH","_buff","flags","fdr","openSync","fstatSync","fdw","mode","bytesRead","pos","readSync","writeSync","closeSync","tryCopySync","indexOf","split","sep","basename","e","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copySync = require('../copy-sync').copySync\nconst removeSync = require('../remove').removeSync\nconst mkdirpSync = require('../mkdirs').mkdirsSync\nconst buffer = require('../util/buffer')\n\nfunction moveSync (src, dest, options) {\n  options = options || {}\n  const overwrite = options.overwrite || options.clobber || false\n\n  src = path.resolve(src)\n  dest = path.resolve(dest)\n\n  if (src === dest) return fs.accessSync(src)\n\n  if (isSrcSubdir(src, dest)) throw new Error(`Cannot move '${src}' into itself '${dest}'.`)\n\n  mkdirpSync(path.dirname(dest))\n  tryRenameSync()\n\n  function tryRenameSync () {\n    if (overwrite) {\n      try {\n        return fs.renameSync(src, dest)\n      } catch (err) {\n        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST' || err.code === 'EPERM') {\n          removeSync(dest)\n          options.overwrite = false // just overwriteed it, no need to do it again\n          return moveSync(src, dest, options)\n        }\n\n        if (err.code !== 'EXDEV') throw err\n        return moveSyncAcrossDevice(src, dest, overwrite)\n      }\n    } else {\n      try {\n        fs.linkSync(src, dest)\n        return fs.unlinkSync(src)\n      } catch (err) {\n        if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {\n          return moveSyncAcrossDevice(src, dest, overwrite)\n        }\n        throw err\n      }\n    }\n  }\n}\n\nfunction moveSyncAcrossDevice (src, dest, overwrite) {\n  const stat = fs.statSync(src)\n\n  if (stat.isDirectory()) {\n    return moveDirSyncAcrossDevice(src, dest, overwrite)\n  } else {\n    return moveFileSyncAcrossDevice(src, dest, overwrite)\n  }\n}\n\nfunction moveFileSyncAcrossDevice (src, dest, overwrite) {\n  const BUF_LENGTH = 64 * 1024\n  const _buff = buffer(BUF_LENGTH)\n\n  const flags = overwrite ? 'w' : 'wx'\n\n  const fdr = fs.openSync(src, 'r')\n  const stat = fs.fstatSync(fdr)\n  const fdw = fs.openSync(dest, flags, stat.mode)\n  let bytesRead = 1\n  let pos = 0\n\n  while (bytesRead > 0) {\n    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)\n    fs.writeSync(fdw, _buff, 0, bytesRead)\n    pos += bytesRead\n  }\n\n  fs.closeSync(fdr)\n  fs.closeSync(fdw)\n  return fs.unlinkSync(src)\n}\n\nfunction moveDirSyncAcrossDevice (src, dest, overwrite) {\n  const options = {\n    overwrite: false\n  }\n\n  if (overwrite) {\n    removeSync(dest)\n    tryCopySync()\n  } else {\n    tryCopySync()\n  }\n\n  function tryCopySync () {\n    copySync(src, dest, options)\n    return removeSync(src)\n  }\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// extract dest base dir and check if that is the same as src basename\nfunction isSrcSubdir (src, dest) {\n  try {\n    return fs.statSync(src).isDirectory() &&\n           src !== dest &&\n           dest.indexOf(src) > -1 &&\n           dest.split(path.dirname(src) + path.sep)[1].split(path.sep)[0] === path.basename(src)\n  } catch (e) {\n    return false\n  }\n}\n\nmodule.exports = {\n  moveSync\n}\n"]},"metadata":{},"sourceType":"script"}