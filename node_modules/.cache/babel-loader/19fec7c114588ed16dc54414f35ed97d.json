{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareVersionStrings = exports.parseVersionString = exports.parseRuntimeVersion = exports.removePathSegments = exports.trimSlashes = exports.isValidWildcardMatch = exports.extractParamsFromPath = void 0;\nconst wildcardRegex = new RegExp(\"{[^/{}]*}\");\nconst wildcardKeyRegex = new RegExp(\"^{(.+)}$\");\n\nfunction extractParamsFromPath(wildcardPath, snapshotPath) {\n  if (!isValidWildcardMatch(wildcardPath, snapshotPath)) {\n    return {};\n  }\n\n  const wildcardChunks = trimSlashes(wildcardPath).split(\"/\");\n  const snapshotChunks = trimSlashes(snapshotPath).split(\"/\");\n  return wildcardChunks.slice(-snapshotChunks.length).reduce((params, chunk, index) => {\n    const match = wildcardKeyRegex.exec(chunk);\n\n    if (match) {\n      const wildcardKey = match[1];\n      const potentialWildcardValue = snapshotChunks[index];\n\n      if (!wildcardKeyRegex.exec(potentialWildcardValue)) {\n        params[wildcardKey] = potentialWildcardValue;\n      }\n    }\n\n    return params;\n  }, {});\n}\n\nexports.extractParamsFromPath = extractParamsFromPath;\n\nfunction isValidWildcardMatch(wildcardPath, snapshotPath) {\n  const wildcardChunks = trimSlashes(wildcardPath).split(\"/\");\n  const snapshotChunks = trimSlashes(snapshotPath).split(\"/\");\n\n  if (snapshotChunks.length > wildcardChunks.length) {\n    return false;\n  }\n\n  const mismatchedChunks = wildcardChunks.slice(-snapshotChunks.length).filter((chunk, index) => {\n    return !(wildcardRegex.exec(chunk) || chunk === snapshotChunks[index]);\n  });\n  return mismatchedChunks.length === 0;\n}\n\nexports.isValidWildcardMatch = isValidWildcardMatch;\n\nfunction trimSlashes(str) {\n  return str.split(\"/\").filter(c => c).join(\"/\");\n}\n\nexports.trimSlashes = trimSlashes;\n\nfunction removePathSegments(path, count) {\n  return trimSlashes(path).split(\"/\").slice(count).join(\"/\");\n}\n\nexports.removePathSegments = removePathSegments;\n\nfunction parseRuntimeVersion(runtime) {\n  if (!runtime) {\n    return undefined;\n  }\n\n  const runtimeRe = /(nodejs)?([0-9]+)/;\n  const match = runtime.match(runtimeRe);\n\n  if (match) {\n    return Number.parseInt(match[2]);\n  }\n\n  return undefined;\n}\n\nexports.parseRuntimeVersion = parseRuntimeVersion;\n\nfunction parseVersionString(version) {\n  const parts = (version || \"0\").split(\".\");\n  parts.push(\"0\");\n  parts.push(\"0\");\n  return {\n    major: parseInt(parts[0], 10),\n    minor: parseInt(parts[1], 10),\n    patch: parseInt(parts[2], 10)\n  };\n}\n\nexports.parseVersionString = parseVersionString;\n\nfunction compareVersionStrings(a, b) {\n  const versionA = parseVersionString(a);\n  const versionB = parseVersionString(b);\n\n  if (versionA.major != versionB.major) {\n    return versionA.major - versionB.major;\n  }\n\n  if (versionA.minor != versionB.minor) {\n    return versionA.minor - versionB.minor;\n  }\n\n  if (versionA.patch != versionB.patch) {\n    return versionA.patch - versionB.patch;\n  }\n\n  return 0;\n}\n\nexports.compareVersionStrings = compareVersionStrings;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/functionsEmulatorUtils.js"],"names":["Object","defineProperty","exports","value","compareVersionStrings","parseVersionString","parseRuntimeVersion","removePathSegments","trimSlashes","isValidWildcardMatch","extractParamsFromPath","wildcardRegex","RegExp","wildcardKeyRegex","wildcardPath","snapshotPath","wildcardChunks","split","snapshotChunks","slice","length","reduce","params","chunk","index","match","exec","wildcardKey","potentialWildcardValue","mismatchedChunks","filter","str","c","join","path","count","runtime","undefined","runtimeRe","Number","parseInt","version","parts","push","major","minor","patch","a","b","versionA","versionB"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareVersionStrings = exports.parseVersionString = exports.parseRuntimeVersion = exports.removePathSegments = exports.trimSlashes = exports.isValidWildcardMatch = exports.extractParamsFromPath = void 0;\nconst wildcardRegex = new RegExp(\"{[^/{}]*}\");\nconst wildcardKeyRegex = new RegExp(\"^{(.+)}$\");\nfunction extractParamsFromPath(wildcardPath, snapshotPath) {\n    if (!isValidWildcardMatch(wildcardPath, snapshotPath)) {\n        return {};\n    }\n    const wildcardChunks = trimSlashes(wildcardPath).split(\"/\");\n    const snapshotChunks = trimSlashes(snapshotPath).split(\"/\");\n    return wildcardChunks\n        .slice(-snapshotChunks.length)\n        .reduce((params, chunk, index) => {\n        const match = wildcardKeyRegex.exec(chunk);\n        if (match) {\n            const wildcardKey = match[1];\n            const potentialWildcardValue = snapshotChunks[index];\n            if (!wildcardKeyRegex.exec(potentialWildcardValue)) {\n                params[wildcardKey] = potentialWildcardValue;\n            }\n        }\n        return params;\n    }, {});\n}\nexports.extractParamsFromPath = extractParamsFromPath;\nfunction isValidWildcardMatch(wildcardPath, snapshotPath) {\n    const wildcardChunks = trimSlashes(wildcardPath).split(\"/\");\n    const snapshotChunks = trimSlashes(snapshotPath).split(\"/\");\n    if (snapshotChunks.length > wildcardChunks.length) {\n        return false;\n    }\n    const mismatchedChunks = wildcardChunks.slice(-snapshotChunks.length).filter((chunk, index) => {\n        return !(wildcardRegex.exec(chunk) || chunk === snapshotChunks[index]);\n    });\n    return mismatchedChunks.length === 0;\n}\nexports.isValidWildcardMatch = isValidWildcardMatch;\nfunction trimSlashes(str) {\n    return str\n        .split(\"/\")\n        .filter((c) => c)\n        .join(\"/\");\n}\nexports.trimSlashes = trimSlashes;\nfunction removePathSegments(path, count) {\n    return trimSlashes(path).split(\"/\").slice(count).join(\"/\");\n}\nexports.removePathSegments = removePathSegments;\nfunction parseRuntimeVersion(runtime) {\n    if (!runtime) {\n        return undefined;\n    }\n    const runtimeRe = /(nodejs)?([0-9]+)/;\n    const match = runtime.match(runtimeRe);\n    if (match) {\n        return Number.parseInt(match[2]);\n    }\n    return undefined;\n}\nexports.parseRuntimeVersion = parseRuntimeVersion;\nfunction parseVersionString(version) {\n    const parts = (version || \"0\").split(\".\");\n    parts.push(\"0\");\n    parts.push(\"0\");\n    return {\n        major: parseInt(parts[0], 10),\n        minor: parseInt(parts[1], 10),\n        patch: parseInt(parts[2], 10),\n    };\n}\nexports.parseVersionString = parseVersionString;\nfunction compareVersionStrings(a, b) {\n    const versionA = parseVersionString(a);\n    const versionB = parseVersionString(b);\n    if (versionA.major != versionB.major) {\n        return versionA.major - versionB.major;\n    }\n    if (versionA.minor != versionB.minor) {\n        return versionA.minor - versionB.minor;\n    }\n    if (versionA.patch != versionB.patch) {\n        return versionA.patch - versionB.patch;\n    }\n    return 0;\n}\nexports.compareVersionStrings = compareVersionStrings;\n"]},"metadata":{},"sourceType":"script"}