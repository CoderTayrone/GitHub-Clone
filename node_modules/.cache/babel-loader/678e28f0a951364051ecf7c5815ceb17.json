{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar util = require('./readline');\n\nvar cliWidth = require('cli-width');\n\nvar stripAnsi = require('strip-ansi');\n\nvar stringWidth = require('string-width');\n\nfunction height(content) {\n  return content.split('\\n').length;\n}\n\nfunction lastLine(content) {\n  return _.last(content.split('\\n'));\n}\n\nclass ScreenManager {\n  constructor(rl) {\n    // These variables are keeping information to allow correct prompt re-rendering\n    this.height = 0;\n    this.extraLinesUnderPrompt = 0;\n    this.rl = rl;\n  }\n\n  render(content, bottomContent) {\n    this.rl.output.unmute();\n    this.clean(this.extraLinesUnderPrompt);\n    /**\n     * Write message to screen and setPrompt to control backspace\n     */\n\n    var promptLine = lastLine(content);\n    var rawPromptLine = stripAnsi(promptLine); // Remove the rl.line from our prompt. We can't rely on the content of\n    // rl.line (mainly because of the password prompt), so just rely on it's\n    // length.\n\n    var prompt = rawPromptLine;\n\n    if (this.rl.line.length) {\n      prompt = prompt.slice(0, -this.rl.line.length);\n    }\n\n    this.rl.setPrompt(prompt); // SetPrompt will change cursor position, now we can get correct value\n\n    var cursorPos = this.rl._getCursorPos();\n\n    var width = this.normalizedCliWidth();\n    content = this.forceLineReturn(content, width);\n\n    if (bottomContent) {\n      bottomContent = this.forceLineReturn(bottomContent, width);\n    } // Manually insert an extra line if we're at the end of the line.\n    // This prevent the cursor from appearing at the beginning of the\n    // current line.\n\n\n    if (rawPromptLine.length % width === 0) {\n      content += '\\n';\n    }\n\n    var fullContent = content + (bottomContent ? '\\n' + bottomContent : '');\n    this.rl.output.write(fullContent);\n    /**\n     * Re-adjust the cursor at the correct position.\n     */\n    // We need to consider parts of the prompt under the cursor as part of the bottom\n    // content in order to correctly cleanup and re-render.\n\n    var promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;\n    var bottomContentHeight = promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);\n\n    if (bottomContentHeight > 0) {\n      util.up(this.rl, bottomContentHeight);\n    } // Reset cursor at the beginning of the line\n\n\n    util.left(this.rl, stringWidth(lastLine(fullContent))); // Adjust cursor on the right\n\n    if (cursorPos.cols > 0) {\n      util.right(this.rl, cursorPos.cols);\n    }\n    /**\n     * Set up state for next re-rendering\n     */\n\n\n    this.extraLinesUnderPrompt = bottomContentHeight;\n    this.height = height(fullContent);\n    this.rl.output.mute();\n  }\n\n  clean(extraLines) {\n    if (extraLines > 0) {\n      util.down(this.rl, extraLines);\n    }\n\n    util.clearLine(this.rl, this.height);\n  }\n\n  done() {\n    this.rl.setPrompt('');\n    this.rl.output.unmute();\n    this.rl.output.write('\\n');\n  }\n\n  releaseCursor() {\n    if (this.extraLinesUnderPrompt > 0) {\n      util.down(this.rl, this.extraLinesUnderPrompt);\n    }\n  }\n\n  normalizedCliWidth() {\n    var width = cliWidth({\n      defaultWidth: 80,\n      output: this.rl.output\n    });\n    return width;\n  }\n\n  breakLines(lines, width) {\n    // Break lines who're longer than the cli width so we can normalize the natural line\n    // returns behavior across terminals.\n    width = width || this.normalizedCliWidth();\n    var regex = new RegExp('(?:(?:\\\\033[[0-9;]*m)*.?){1,' + width + '}', 'g');\n    return lines.map(line => {\n      var chunk = line.match(regex); // Last match is always empty\n\n      chunk.pop();\n      return chunk || '';\n    });\n  }\n\n  forceLineReturn(content, width) {\n    width = width || this.normalizedCliWidth();\n    return _.flatten(this.breakLines(content.split('\\n'), width)).join('\\n');\n  }\n\n}\n\nmodule.exports = ScreenManager;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/utils/screen-manager.js"],"names":["_","require","util","cliWidth","stripAnsi","stringWidth","height","content","split","length","lastLine","last","ScreenManager","constructor","rl","extraLinesUnderPrompt","render","bottomContent","output","unmute","clean","promptLine","rawPromptLine","prompt","line","slice","setPrompt","cursorPos","_getCursorPos","width","normalizedCliWidth","forceLineReturn","fullContent","write","promptLineUpDiff","Math","floor","rows","bottomContentHeight","up","left","cols","right","mute","extraLines","down","clearLine","done","releaseCursor","defaultWidth","breakLines","lines","regex","RegExp","map","chunk","match","pop","flatten","join","module","exports"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AAEA,SAASK,MAAT,CAAgBC,OAAhB,EAAyB;AACvB,SAAOA,OAAO,CAACC,KAAR,CAAc,IAAd,EAAoBC,MAA3B;AACD;;AAED,SAASC,QAAT,CAAkBH,OAAlB,EAA2B;AACzB,SAAOP,CAAC,CAACW,IAAF,CAAOJ,OAAO,CAACC,KAAR,CAAc,IAAd,CAAP,CAAP;AACD;;AAED,MAAMI,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACd;AACA,SAAKR,MAAL,GAAc,CAAd;AACA,SAAKS,qBAAL,GAA6B,CAA7B;AAEA,SAAKD,EAAL,GAAUA,EAAV;AACD;;AAEDE,EAAAA,MAAM,CAACT,OAAD,EAAUU,aAAV,EAAyB;AAC7B,SAAKH,EAAL,CAAQI,MAAR,CAAeC,MAAf;AACA,SAAKC,KAAL,CAAW,KAAKL,qBAAhB;AAEA;AACJ;AACA;;AAEI,QAAIM,UAAU,GAAGX,QAAQ,CAACH,OAAD,CAAzB;AACA,QAAIe,aAAa,GAAGlB,SAAS,CAACiB,UAAD,CAA7B,CAT6B,CAW7B;AACA;AACA;;AACA,QAAIE,MAAM,GAAGD,aAAb;;AACA,QAAI,KAAKR,EAAL,CAAQU,IAAR,CAAaf,MAAjB,EAAyB;AACvBc,MAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgB,CAAC,KAAKX,EAAL,CAAQU,IAAR,CAAaf,MAA9B,CAAT;AACD;;AAED,SAAKK,EAAL,CAAQY,SAAR,CAAkBH,MAAlB,EAnB6B,CAqB7B;;AACA,QAAII,SAAS,GAAG,KAAKb,EAAL,CAAQc,aAAR,EAAhB;;AACA,QAAIC,KAAK,GAAG,KAAKC,kBAAL,EAAZ;AAEAvB,IAAAA,OAAO,GAAG,KAAKwB,eAAL,CAAqBxB,OAArB,EAA8BsB,KAA9B,CAAV;;AACA,QAAIZ,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,GAAG,KAAKc,eAAL,CAAqBd,aAArB,EAAoCY,KAApC,CAAhB;AACD,KA5B4B,CA8B7B;AACA;AACA;;;AACA,QAAIP,aAAa,CAACb,MAAd,GAAuBoB,KAAvB,KAAiC,CAArC,EAAwC;AACtCtB,MAAAA,OAAO,IAAI,IAAX;AACD;;AAED,QAAIyB,WAAW,GAAGzB,OAAO,IAAIU,aAAa,GAAG,OAAOA,aAAV,GAA0B,EAA3C,CAAzB;AACA,SAAKH,EAAL,CAAQI,MAAR,CAAee,KAAf,CAAqBD,WAArB;AAEA;AACJ;AACA;AAEI;AACA;;AACA,QAAIE,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWd,aAAa,CAACb,MAAd,GAAuBoB,KAAlC,IAA2CF,SAAS,CAACU,IAA5E;AACA,QAAIC,mBAAmB,GACrBJ,gBAAgB,IAAIjB,aAAa,GAAGX,MAAM,CAACW,aAAD,CAAT,GAA2B,CAA5C,CADlB;;AAEA,QAAIqB,mBAAmB,GAAG,CAA1B,EAA6B;AAC3BpC,MAAAA,IAAI,CAACqC,EAAL,CAAQ,KAAKzB,EAAb,EAAiBwB,mBAAjB;AACD,KAnD4B,CAqD7B;;;AACApC,IAAAA,IAAI,CAACsC,IAAL,CAAU,KAAK1B,EAAf,EAAmBT,WAAW,CAACK,QAAQ,CAACsB,WAAD,CAAT,CAA9B,EAtD6B,CAwD7B;;AACA,QAAIL,SAAS,CAACc,IAAV,GAAiB,CAArB,EAAwB;AACtBvC,MAAAA,IAAI,CAACwC,KAAL,CAAW,KAAK5B,EAAhB,EAAoBa,SAAS,CAACc,IAA9B;AACD;AAED;AACJ;AACA;;;AACI,SAAK1B,qBAAL,GAA6BuB,mBAA7B;AACA,SAAKhC,MAAL,GAAcA,MAAM,CAAC0B,WAAD,CAApB;AAEA,SAAKlB,EAAL,CAAQI,MAAR,CAAeyB,IAAf;AACD;;AAEDvB,EAAAA,KAAK,CAACwB,UAAD,EAAa;AAChB,QAAIA,UAAU,GAAG,CAAjB,EAAoB;AAClB1C,MAAAA,IAAI,CAAC2C,IAAL,CAAU,KAAK/B,EAAf,EAAmB8B,UAAnB;AACD;;AAED1C,IAAAA,IAAI,CAAC4C,SAAL,CAAe,KAAKhC,EAApB,EAAwB,KAAKR,MAA7B;AACD;;AAEDyC,EAAAA,IAAI,GAAG;AACL,SAAKjC,EAAL,CAAQY,SAAR,CAAkB,EAAlB;AACA,SAAKZ,EAAL,CAAQI,MAAR,CAAeC,MAAf;AACA,SAAKL,EAAL,CAAQI,MAAR,CAAee,KAAf,CAAqB,IAArB;AACD;;AAEDe,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKjC,qBAAL,GAA6B,CAAjC,EAAoC;AAClCb,MAAAA,IAAI,CAAC2C,IAAL,CAAU,KAAK/B,EAAf,EAAmB,KAAKC,qBAAxB;AACD;AACF;;AAEDe,EAAAA,kBAAkB,GAAG;AACnB,QAAID,KAAK,GAAG1B,QAAQ,CAAC;AACnB8C,MAAAA,YAAY,EAAE,EADK;AAEnB/B,MAAAA,MAAM,EAAE,KAAKJ,EAAL,CAAQI;AAFG,KAAD,CAApB;AAIA,WAAOW,KAAP;AACD;;AAEDqB,EAAAA,UAAU,CAACC,KAAD,EAAQtB,KAAR,EAAe;AACvB;AACA;AACAA,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKC,kBAAL,EAAjB;AACA,QAAIsB,KAAK,GAAG,IAAIC,MAAJ,CAAW,iCAAiCxB,KAAjC,GAAyC,GAApD,EAAyD,GAAzD,CAAZ;AACA,WAAOsB,KAAK,CAACG,GAAN,CAAU9B,IAAI,IAAI;AACvB,UAAI+B,KAAK,GAAG/B,IAAI,CAACgC,KAAL,CAAWJ,KAAX,CAAZ,CADuB,CAEvB;;AACAG,MAAAA,KAAK,CAACE,GAAN;AACA,aAAOF,KAAK,IAAI,EAAhB;AACD,KALM,CAAP;AAMD;;AAEDxB,EAAAA,eAAe,CAACxB,OAAD,EAAUsB,KAAV,EAAiB;AAC9BA,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKC,kBAAL,EAAjB;AACA,WAAO9B,CAAC,CAAC0D,OAAF,CAAU,KAAKR,UAAL,CAAgB3C,OAAO,CAACC,KAAR,CAAc,IAAd,CAAhB,EAAqCqB,KAArC,CAAV,EAAuD8B,IAAvD,CAA4D,IAA5D,CAAP;AACD;;AA3HiB;;AA8HpBC,MAAM,CAACC,OAAP,GAAiBjD,aAAjB","sourcesContent":["'use strict';\nvar _ = require('lodash');\nvar util = require('./readline');\nvar cliWidth = require('cli-width');\nvar stripAnsi = require('strip-ansi');\nvar stringWidth = require('string-width');\n\nfunction height(content) {\n  return content.split('\\n').length;\n}\n\nfunction lastLine(content) {\n  return _.last(content.split('\\n'));\n}\n\nclass ScreenManager {\n  constructor(rl) {\n    // These variables are keeping information to allow correct prompt re-rendering\n    this.height = 0;\n    this.extraLinesUnderPrompt = 0;\n\n    this.rl = rl;\n  }\n\n  render(content, bottomContent) {\n    this.rl.output.unmute();\n    this.clean(this.extraLinesUnderPrompt);\n\n    /**\n     * Write message to screen and setPrompt to control backspace\n     */\n\n    var promptLine = lastLine(content);\n    var rawPromptLine = stripAnsi(promptLine);\n\n    // Remove the rl.line from our prompt. We can't rely on the content of\n    // rl.line (mainly because of the password prompt), so just rely on it's\n    // length.\n    var prompt = rawPromptLine;\n    if (this.rl.line.length) {\n      prompt = prompt.slice(0, -this.rl.line.length);\n    }\n\n    this.rl.setPrompt(prompt);\n\n    // SetPrompt will change cursor position, now we can get correct value\n    var cursorPos = this.rl._getCursorPos();\n    var width = this.normalizedCliWidth();\n\n    content = this.forceLineReturn(content, width);\n    if (bottomContent) {\n      bottomContent = this.forceLineReturn(bottomContent, width);\n    }\n\n    // Manually insert an extra line if we're at the end of the line.\n    // This prevent the cursor from appearing at the beginning of the\n    // current line.\n    if (rawPromptLine.length % width === 0) {\n      content += '\\n';\n    }\n\n    var fullContent = content + (bottomContent ? '\\n' + bottomContent : '');\n    this.rl.output.write(fullContent);\n\n    /**\n     * Re-adjust the cursor at the correct position.\n     */\n\n    // We need to consider parts of the prompt under the cursor as part of the bottom\n    // content in order to correctly cleanup and re-render.\n    var promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;\n    var bottomContentHeight =\n      promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);\n    if (bottomContentHeight > 0) {\n      util.up(this.rl, bottomContentHeight);\n    }\n\n    // Reset cursor at the beginning of the line\n    util.left(this.rl, stringWidth(lastLine(fullContent)));\n\n    // Adjust cursor on the right\n    if (cursorPos.cols > 0) {\n      util.right(this.rl, cursorPos.cols);\n    }\n\n    /**\n     * Set up state for next re-rendering\n     */\n    this.extraLinesUnderPrompt = bottomContentHeight;\n    this.height = height(fullContent);\n\n    this.rl.output.mute();\n  }\n\n  clean(extraLines) {\n    if (extraLines > 0) {\n      util.down(this.rl, extraLines);\n    }\n\n    util.clearLine(this.rl, this.height);\n  }\n\n  done() {\n    this.rl.setPrompt('');\n    this.rl.output.unmute();\n    this.rl.output.write('\\n');\n  }\n\n  releaseCursor() {\n    if (this.extraLinesUnderPrompt > 0) {\n      util.down(this.rl, this.extraLinesUnderPrompt);\n    }\n  }\n\n  normalizedCliWidth() {\n    var width = cliWidth({\n      defaultWidth: 80,\n      output: this.rl.output\n    });\n    return width;\n  }\n\n  breakLines(lines, width) {\n    // Break lines who're longer than the cli width so we can normalize the natural line\n    // returns behavior across terminals.\n    width = width || this.normalizedCliWidth();\n    var regex = new RegExp('(?:(?:\\\\033[[0-9;]*m)*.?){1,' + width + '}', 'g');\n    return lines.map(line => {\n      var chunk = line.match(regex);\n      // Last match is always empty\n      chunk.pop();\n      return chunk || '';\n    });\n  }\n\n  forceLineReturn(content, width) {\n    width = width || this.normalizedCliWidth();\n    return _.flatten(this.breakLines(content.split('\\n'), width)).join('\\n');\n  }\n}\n\nmodule.exports = ScreenManager;\n"]},"metadata":{},"sourceType":"script"}