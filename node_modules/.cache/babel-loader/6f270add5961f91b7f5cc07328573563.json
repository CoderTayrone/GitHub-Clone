{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectAdminSdkConfigOrCached = exports.constructDefaultAdminSdkConfig = void 0;\n\nconst api_1 = require(\"../api\");\n\nconst apiv2 = require(\"../apiv2\");\n\nconst configstore_1 = require(\"../configstore\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst constants_1 = require(\"./constants\");\n\nconst _CONFIGSTORE_KEY = \"adminsdkconfig\";\n\nfunction constructDefaultAdminSdkConfig(projectId) {\n  return {\n    projectId: projectId,\n    databaseURL: process.env.DATABASE_URL || `https://${projectId}.firebaseio.com`,\n    storageBucket: process.env.STORAGE_BUCKET_URL || `${projectId}.appspot.com`\n  };\n}\n\nexports.constructDefaultAdminSdkConfig = constructDefaultAdminSdkConfig;\n\nasync function getProjectAdminSdkConfigOrCached(projectId) {\n  if (constants_1.Constants.isDemoProject(projectId)) {\n    return constructDefaultAdminSdkConfig(projectId);\n  }\n\n  try {\n    const config = await getProjectAdminSdkConfig(projectId);\n    setCacheAdminSdkConfig(projectId, config);\n    return config;\n  } catch (e) {\n    logger_1.logger.debug(`Failed to get Admin SDK config for ${projectId}, falling back to cache`, e);\n    return getCachedAdminSdkConfig(projectId);\n  }\n}\n\nexports.getProjectAdminSdkConfigOrCached = getProjectAdminSdkConfigOrCached;\n\nasync function getProjectAdminSdkConfig(projectId) {\n  const apiClient = new apiv2.Client({\n    auth: true,\n    apiVersion: \"v1beta1\",\n    urlPrefix: api_1.firebaseApiOrigin\n  });\n\n  try {\n    const res = await apiClient.get(`projects/${projectId}/adminSdkConfig`);\n    return res.body;\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to get Admin SDK for Firebase project ${projectId}. ` + \"Please make sure the project exists and your account has permission to access it.\", {\n      exit: 2,\n      original: err\n    });\n  }\n}\n\nfunction setCacheAdminSdkConfig(projectId, config) {\n  const allConfigs = configstore_1.configstore.get(_CONFIGSTORE_KEY) || {};\n  allConfigs[projectId] = config;\n  configstore_1.configstore.set(_CONFIGSTORE_KEY, allConfigs);\n}\n\nfunction getCachedAdminSdkConfig(projectId) {\n  const allConfigs = configstore_1.configstore.get(_CONFIGSTORE_KEY) || {};\n  return allConfigs[projectId];\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/adminSdkConfig.js"],"names":["Object","defineProperty","exports","value","getProjectAdminSdkConfigOrCached","constructDefaultAdminSdkConfig","api_1","require","apiv2","configstore_1","error_1","logger_1","constants_1","_CONFIGSTORE_KEY","projectId","databaseURL","process","env","DATABASE_URL","storageBucket","STORAGE_BUCKET_URL","Constants","isDemoProject","config","getProjectAdminSdkConfig","setCacheAdminSdkConfig","e","logger","debug","getCachedAdminSdkConfig","apiClient","Client","auth","apiVersion","urlPrefix","firebaseApiOrigin","res","get","body","err","FirebaseError","exit","original","allConfigs","configstore","set"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getProjectAdminSdkConfigOrCached = exports.constructDefaultAdminSdkConfig = void 0;\nconst api_1 = require(\"../api\");\nconst apiv2 = require(\"../apiv2\");\nconst configstore_1 = require(\"../configstore\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst constants_1 = require(\"./constants\");\nconst _CONFIGSTORE_KEY = \"adminsdkconfig\";\nfunction constructDefaultAdminSdkConfig(projectId) {\n    return {\n        projectId: projectId,\n        databaseURL: process.env.DATABASE_URL || `https://${projectId}.firebaseio.com`,\n        storageBucket: process.env.STORAGE_BUCKET_URL || `${projectId}.appspot.com`,\n    };\n}\nexports.constructDefaultAdminSdkConfig = constructDefaultAdminSdkConfig;\nasync function getProjectAdminSdkConfigOrCached(projectId) {\n    if (constants_1.Constants.isDemoProject(projectId)) {\n        return constructDefaultAdminSdkConfig(projectId);\n    }\n    try {\n        const config = await getProjectAdminSdkConfig(projectId);\n        setCacheAdminSdkConfig(projectId, config);\n        return config;\n    }\n    catch (e) {\n        logger_1.logger.debug(`Failed to get Admin SDK config for ${projectId}, falling back to cache`, e);\n        return getCachedAdminSdkConfig(projectId);\n    }\n}\nexports.getProjectAdminSdkConfigOrCached = getProjectAdminSdkConfigOrCached;\nasync function getProjectAdminSdkConfig(projectId) {\n    const apiClient = new apiv2.Client({\n        auth: true,\n        apiVersion: \"v1beta1\",\n        urlPrefix: api_1.firebaseApiOrigin,\n    });\n    try {\n        const res = await apiClient.get(`projects/${projectId}/adminSdkConfig`);\n        return res.body;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to get Admin SDK for Firebase project ${projectId}. ` +\n            \"Please make sure the project exists and your account has permission to access it.\", { exit: 2, original: err });\n    }\n}\nfunction setCacheAdminSdkConfig(projectId, config) {\n    const allConfigs = configstore_1.configstore.get(_CONFIGSTORE_KEY) || {};\n    allConfigs[projectId] = config;\n    configstore_1.configstore.set(_CONFIGSTORE_KEY, allConfigs);\n}\nfunction getCachedAdminSdkConfig(projectId) {\n    const allConfigs = configstore_1.configstore.get(_CONFIGSTORE_KEY) || {};\n    return allConfigs[projectId];\n}\n"]},"metadata":{},"sourceType":"script"}