{"ast":null,"code":"\"use strict\";\n\nvar d = require(\"d\"),\n    assign = require(\"es5-ext/object/assign\"),\n    forEach = require(\"es5-ext/object/for-each\"),\n    map = require(\"es5-ext/object/map\"),\n    primitiveSet = require(\"es5-ext/object/primitive-set\"),\n    setPrototypeOf = require(\"es5-ext/object/set-prototype-of\"),\n    memoize = require(\"memoizee\"),\n    memoizeMethods = require(\"memoizee/methods\"),\n    sgr = require(\"./lib/sgr\"),\n    mods = sgr.mods,\n    join = Array.prototype.join,\n    defineProperty = Object.defineProperty,\n    max = Math.max,\n    min = Math.min,\n    variantModes = primitiveSet(\"_fg\", \"_bg\"),\n    xtermMatch,\n    getFn; // Some use cli-color as: console.log(clc.red('Error!'));\n// Which is inefficient as on each call it configures new clc object\n// with memoization we reuse once created object\n\n\nvar memoized = memoize(function (scope, mod) {\n  return defineProperty(getFn(), \"_cliColorData\", d(assign({}, scope._cliColorData, mod)));\n});\nvar proto = Object.create(Function.prototype, assign(map(mods, function (mod) {\n  return d.gs(function () {\n    return memoized(this, mod);\n  });\n}), memoizeMethods({\n  // xterm (255) color\n  xterm: d(function (code) {\n    code = isNaN(code) ? 255 : min(max(code, 0), 255);\n    return defineProperty(getFn(), \"_cliColorData\", d(assign({}, this._cliColorData, {\n      _fg: [xtermMatch ? xtermMatch[code] : \"38;5;\" + code, 39]\n    })));\n  }),\n  bgXterm: d(function (code) {\n    code = isNaN(code) ? 255 : min(max(code, 0), 255);\n    return defineProperty(getFn(), \"_cliColorData\", d(assign({}, this._cliColorData, {\n      _bg: [xtermMatch ? xtermMatch[code] + 10 : \"48;5;\" + code, 49]\n    })));\n  })\n})));\nvar getEndRe = memoize(function (code) {\n  return new RegExp(\"\\x1b\\\\[\" + code + \"m\", \"g\");\n}, {\n  primitive: true\n});\nif (process.platform === \"win32\") xtermMatch = require(\"./lib/xterm-match\");\n\ngetFn = function () {\n  return setPrototypeOf(function self() {\n    var start = \"\",\n        end = \"\",\n        msg = join.call(arguments, \" \"),\n        conf = self._cliColorData,\n        hasAnsi = sgr.hasCSI(msg);\n    forEach(conf, function (mod, key) {\n      end = sgr(mod[1]) + end;\n      start += sgr(mod[0]);\n\n      if (hasAnsi) {\n        msg = msg.replace(getEndRe(mod[1]), variantModes[key] ? sgr(mod[0]) : \"\");\n      }\n    }, null, true);\n    return start + msg + end;\n  }, proto);\n};\n\nmodule.exports = Object.defineProperties(getFn(), {\n  xtermSupported: d(!xtermMatch),\n  _cliColorData: d(\"\", {})\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/cli-color/bare.js"],"names":["d","require","assign","forEach","map","primitiveSet","setPrototypeOf","memoize","memoizeMethods","sgr","mods","join","Array","prototype","defineProperty","Object","max","Math","min","variantModes","xtermMatch","getFn","memoized","scope","mod","_cliColorData","proto","create","Function","gs","xterm","code","isNaN","_fg","bgXterm","_bg","getEndRe","RegExp","primitive","process","platform","self","start","end","msg","call","arguments","conf","hasAnsi","hasCSI","key","replace","module","exports","defineProperties","xtermSupported"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar d              = require(\"d\")\n  , assign         = require(\"es5-ext/object/assign\")\n  , forEach        = require(\"es5-ext/object/for-each\")\n  , map            = require(\"es5-ext/object/map\")\n  , primitiveSet   = require(\"es5-ext/object/primitive-set\")\n  , setPrototypeOf = require(\"es5-ext/object/set-prototype-of\")\n  , memoize        = require(\"memoizee\")\n  , memoizeMethods = require(\"memoizee/methods\")\n\n  , sgr = require(\"./lib/sgr\")\n  , mods = sgr.mods\n\n  , join = Array.prototype.join, defineProperty = Object.defineProperty\n  , max = Math.max, min = Math.min\n  , variantModes = primitiveSet(\"_fg\", \"_bg\")\n  , xtermMatch, getFn;\n\n// Some use cli-color as: console.log(clc.red('Error!'));\n// Which is inefficient as on each call it configures new clc object\n// with memoization we reuse once created object\nvar memoized = memoize(function (scope, mod) {\n\treturn defineProperty(getFn(), \"_cliColorData\", d(assign({}, scope._cliColorData, mod)));\n});\n\nvar proto = Object.create(Function.prototype, assign(map(mods, function (mod) {\n\treturn d.gs(function () { return memoized(this, mod); });\n}), memoizeMethods({\n\t// xterm (255) color\n\txterm: d(function (code) {\n\t\tcode = isNaN(code) ? 255 : min(max(code, 0), 255);\n\t\treturn defineProperty(getFn(), \"_cliColorData\",\n\t\t\td(assign({}, this._cliColorData, {\n\t\t\t\t_fg: [xtermMatch ? xtermMatch[code] : \"38;5;\" + code, 39]\n\t\t\t})));\n\t}),\n\tbgXterm: d(function (code) {\n\t\tcode = isNaN(code) ? 255 : min(max(code, 0), 255);\n\t\treturn defineProperty(getFn(), \"_cliColorData\",\n\t\t\td(assign({}, this._cliColorData, {\n\t\t\t\t_bg: [xtermMatch ? xtermMatch[code] + 10 : \"48;5;\" + code, 49]\n\t\t\t})));\n\t})\n})));\n\nvar getEndRe = memoize(function (code) {\n\treturn new RegExp(\"\\x1b\\\\[\" + code + \"m\", \"g\");\n}, { primitive: true });\n\nif (process.platform === \"win32\") xtermMatch = require(\"./lib/xterm-match\");\n\ngetFn = function () {\n\treturn setPrototypeOf(function self(/* â€¦msg*/) {\n\t\tvar start = \"\", end = \"\", msg = join.call(arguments, \" \"), conf = self._cliColorData\n\t\t  , hasAnsi = sgr.hasCSI(msg);\n\t\tforEach(conf, function (mod, key) {\n\t\t\tend = sgr(mod[1]) + end;\n\t\t\tstart += sgr(mod[0]);\n\t\t\tif (hasAnsi) {\n\t\t\t\tmsg = msg.replace(getEndRe(mod[1]), variantModes[key] ? sgr(mod[0]) : \"\");\n\t\t\t}\n\t\t}, null, true);\n\t\treturn start + msg + end;\n\t}, proto);\n};\n\nmodule.exports = Object.defineProperties(getFn(), {\n\txtermSupported: d(!xtermMatch),\n\t_cliColorData: d(\"\", {})\n});\n"]},"metadata":{},"sourceType":"script"}