{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst database_1 = require(\"../management/database\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst getDefaultDatabaseInstance_1 = require(\"../getDefaultDatabaseInstance\");\n\nconst error_1 = require(\"../error\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nexports.default = new command_1.Command(\"database:instances:create <instanceName>\").description(\"create a realtime database instance\").option(\"-l, --location <location>\", \"(optional) location for the database instance, defaults to us-central1\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.create\"]).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async (instanceName, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const defaultDatabaseInstance = await getDefaultDatabaseInstance_1.getDefaultDatabaseInstance({\n    project: projectId\n  });\n\n  if (defaultDatabaseInstance === \"\") {\n    throw new error_1.FirebaseError(requireDatabaseInstance_1.MISSING_DEFAULT_INSTANCE_ERROR_MESSAGE);\n  }\n\n  const location = database_1.parseDatabaseLocation(options.location, database_1.DatabaseLocation.US_CENTRAL1);\n  const instance = await database_1.createInstance(projectId, instanceName, location, database_1.DatabaseInstanceType.USER_DATABASE);\n  logger_1.logger.info(`created database instance ${instance.name}`);\n  return instance;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-instances-create.js"],"names":["Object","defineProperty","exports","value","command_1","require","logger_1","requirePermissions_1","commandUtils_1","types_1","database_1","projectUtils_1","getDefaultDatabaseInstance_1","error_1","requireDatabaseInstance_1","default","Command","description","option","before","requirePermissions","warnEmulatorNotSupported","Emulators","DATABASE","action","instanceName","options","projectId","needProjectId","defaultDatabaseInstance","getDefaultDatabaseInstance","project","FirebaseError","MISSING_DEFAULT_INSTANCE_ERROR_MESSAGE","location","parseDatabaseLocation","DatabaseLocation","US_CENTRAL1","instance","createInstance","DatabaseInstanceType","USER_DATABASE","logger","info","name"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMO,4BAA4B,GAAGP,OAAO,CAAC,+BAAD,CAA5C;;AACA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMS,yBAAyB,GAAGT,OAAO,CAAC,4BAAD,CAAzC;;AACAH,OAAO,CAACa,OAAR,GAAkB,IAAIX,SAAS,CAACY,OAAd,CAAsB,0CAAtB,EACbC,WADa,CACD,qCADC,EAEbC,MAFa,CAEN,2BAFM,EAEuB,wEAFvB,EAGbC,MAHa,CAGNZ,oBAAoB,CAACa,kBAHf,EAGmC,CAAC,mCAAD,CAHnC,EAIbD,MAJa,CAINX,cAAc,CAACa,wBAJT,EAImCZ,OAAO,CAACa,SAAR,CAAkBC,QAJrD,EAKbC,MALa,CAKN,OAAOC,YAAP,EAAqBC,OAArB,KAAiC;AACzC,QAAMC,SAAS,GAAGhB,cAAc,CAACiB,aAAf,CAA6BF,OAA7B,CAAlB;AACA,QAAMG,uBAAuB,GAAG,MAAMjB,4BAA4B,CAACkB,0BAA7B,CAAwD;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAxD,CAAtC;;AACA,MAAIE,uBAAuB,KAAK,EAAhC,EAAoC;AAChC,UAAM,IAAIhB,OAAO,CAACmB,aAAZ,CAA0BlB,yBAAyB,CAACmB,sCAApD,CAAN;AACH;;AACD,QAAMC,QAAQ,GAAGxB,UAAU,CAACyB,qBAAX,CAAiCT,OAAO,CAACQ,QAAzC,EAAmDxB,UAAU,CAAC0B,gBAAX,CAA4BC,WAA/E,CAAjB;AACA,QAAMC,QAAQ,GAAG,MAAM5B,UAAU,CAAC6B,cAAX,CAA0BZ,SAA1B,EAAqCF,YAArC,EAAmDS,QAAnD,EAA6DxB,UAAU,CAAC8B,oBAAX,CAAgCC,aAA7F,CAAvB;AACAnC,EAAAA,QAAQ,CAACoC,MAAT,CAAgBC,IAAhB,CAAsB,6BAA4BL,QAAQ,CAACM,IAAK,EAAhE;AACA,SAAON,QAAP;AACH,CAfiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst types_1 = require(\"../emulator/types\");\nconst database_1 = require(\"../management/database\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst getDefaultDatabaseInstance_1 = require(\"../getDefaultDatabaseInstance\");\nconst error_1 = require(\"../error\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nexports.default = new command_1.Command(\"database:instances:create <instanceName>\")\n    .description(\"create a realtime database instance\")\n    .option(\"-l, --location <location>\", \"(optional) location for the database instance, defaults to us-central1\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.create\"])\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (instanceName, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const defaultDatabaseInstance = await getDefaultDatabaseInstance_1.getDefaultDatabaseInstance({ project: projectId });\n    if (defaultDatabaseInstance === \"\") {\n        throw new error_1.FirebaseError(requireDatabaseInstance_1.MISSING_DEFAULT_INSTANCE_ERROR_MESSAGE);\n    }\n    const location = database_1.parseDatabaseLocation(options.location, database_1.DatabaseLocation.US_CENTRAL1);\n    const instance = await database_1.createInstance(projectId, instanceName, location, database_1.DatabaseInstanceType.USER_DATABASE);\n    logger_1.logger.info(`created database instance ${instance.name}`);\n    return instance;\n});\n"]},"metadata":{},"sourceType":"script"}