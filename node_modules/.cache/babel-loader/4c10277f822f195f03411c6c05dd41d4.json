{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar {\n  defer,\n  empty,\n  from,\n  of\n} = require('rxjs');\n\nvar {\n  concatMap,\n  filter,\n  publish,\n  reduce\n} = require('rxjs/operators');\n\nvar runAsync = require('run-async');\n\nvar utils = require('../utils/utils');\n\nvar Base = require('./baseUI');\n/**\n * Base interface class other can inherits from\n */\n\n\nclass PromptUI extends Base {\n  constructor(prompts, opt) {\n    super(opt);\n    this.prompts = prompts;\n  }\n\n  run(questions) {\n    // Keep global reference to the answers\n    this.answers = {}; // Make sure questions is an array.\n\n    if (_.isPlainObject(questions)) {\n      questions = [questions];\n    } // Create an observable, unless we received one as parameter.\n    // Note: As this is a public interface, we cannot do an instanceof check as we won't\n    // be using the exact same object in memory.\n\n\n    var obs = _.isArray(questions) ? from(questions) : questions;\n    this.process = obs.pipe(concatMap(this.processQuestion.bind(this)), publish() // Creates a hot Observable. It prevents duplicating prompts.\n    );\n    this.process.connect();\n    return this.process.pipe(reduce((answers, answer) => {\n      _.set(this.answers, answer.name, answer.answer);\n\n      return this.answers;\n    }, {})).toPromise(Promise).then(this.onCompletion.bind(this));\n  }\n  /**\n   * Once all prompt are over\n   */\n\n\n  onCompletion() {\n    this.close();\n    return this.answers;\n  }\n\n  processQuestion(question) {\n    question = _.clone(question);\n    return defer(() => {\n      var obs = of(question);\n      return obs.pipe(concatMap(this.setDefaultType.bind(this)), concatMap(this.filterIfRunnable.bind(this)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'message', this.answers)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'default', this.answers)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'choices', this.answers)), concatMap(this.fetchAnswer.bind(this)));\n    });\n  }\n\n  fetchAnswer(question) {\n    var Prompt = this.prompts[question.type];\n    this.activePrompt = new Prompt(question, this.rl, this.answers);\n    return defer(() => from(this.activePrompt.run().then(answer => ({\n      name: question.name,\n      answer: answer\n    }))));\n  }\n\n  setDefaultType(question) {\n    // Default type to input\n    if (!this.prompts[question.type]) {\n      question.type = 'input';\n    }\n\n    return defer(() => of(question));\n  }\n\n  filterIfRunnable(question) {\n    if (question.when === false) {\n      return empty();\n    }\n\n    if (!_.isFunction(question.when)) {\n      return of(question);\n    }\n\n    var answers = this.answers;\n    return defer(() => from(runAsync(question.when)(answers).then(shouldRun => {\n      if (shouldRun) {\n        return question;\n      }\n    })).pipe(filter(val => val != null)));\n  }\n\n}\n\nmodule.exports = PromptUI;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/ui/prompt.js"],"names":["_","require","defer","empty","from","of","concatMap","filter","publish","reduce","runAsync","utils","Base","PromptUI","constructor","prompts","opt","run","questions","answers","isPlainObject","obs","isArray","process","pipe","processQuestion","bind","connect","answer","set","name","toPromise","Promise","then","onCompletion","close","question","clone","setDefaultType","filterIfRunnable","fetchAsyncQuestionProperty","fetchAnswer","Prompt","type","activePrompt","rl","when","isFunction","shouldRun","val","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nvar _ = require('lodash');\nvar { defer, empty, from, of } = require('rxjs');\nvar { concatMap, filter, publish, reduce } = require('rxjs/operators');\nvar runAsync = require('run-async');\nvar utils = require('../utils/utils');\nvar Base = require('./baseUI');\n\n/**\n * Base interface class other can inherits from\n */\n\nclass PromptUI extends Base {\n  constructor(prompts, opt) {\n    super(opt);\n    this.prompts = prompts;\n  }\n\n  run(questions) {\n    // Keep global reference to the answers\n    this.answers = {};\n\n    // Make sure questions is an array.\n    if (_.isPlainObject(questions)) {\n      questions = [questions];\n    }\n\n    // Create an observable, unless we received one as parameter.\n    // Note: As this is a public interface, we cannot do an instanceof check as we won't\n    // be using the exact same object in memory.\n    var obs = _.isArray(questions) ? from(questions) : questions;\n\n    this.process = obs.pipe(\n      concatMap(this.processQuestion.bind(this)),\n      publish() // Creates a hot Observable. It prevents duplicating prompts.\n    );\n\n    this.process.connect();\n\n    return this.process\n      .pipe(\n        reduce((answers, answer) => {\n          _.set(this.answers, answer.name, answer.answer);\n          return this.answers;\n        }, {})\n      )\n      .toPromise(Promise)\n      .then(this.onCompletion.bind(this));\n  }\n\n  /**\n   * Once all prompt are over\n   */\n\n  onCompletion() {\n    this.close();\n\n    return this.answers;\n  }\n\n  processQuestion(question) {\n    question = _.clone(question);\n    return defer(() => {\n      var obs = of(question);\n\n      return obs.pipe(\n        concatMap(this.setDefaultType.bind(this)),\n        concatMap(this.filterIfRunnable.bind(this)),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'message', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'default', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'choices', this.answers)\n        ),\n        concatMap(this.fetchAnswer.bind(this))\n      );\n    });\n  }\n\n  fetchAnswer(question) {\n    var Prompt = this.prompts[question.type];\n    this.activePrompt = new Prompt(question, this.rl, this.answers);\n    return defer(() =>\n      from(\n        this.activePrompt.run().then(answer => ({ name: question.name, answer: answer }))\n      )\n    );\n  }\n\n  setDefaultType(question) {\n    // Default type to input\n    if (!this.prompts[question.type]) {\n      question.type = 'input';\n    }\n\n    return defer(() => of(question));\n  }\n\n  filterIfRunnable(question) {\n    if (question.when === false) {\n      return empty();\n    }\n\n    if (!_.isFunction(question.when)) {\n      return of(question);\n    }\n\n    var answers = this.answers;\n    return defer(() =>\n      from(\n        runAsync(question.when)(answers).then(shouldRun => {\n          if (shouldRun) {\n            return question;\n          }\n        })\n      ).pipe(filter(val => val != null))\n    );\n  }\n}\n\nmodule.exports = PromptUI;\n"]},"metadata":{},"sourceType":"script"}