{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkHttpIam = exports.checkServiceAccountIam = void 0;\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\n\nconst error_1 = require(\"../../error\");\n\nconst iam_1 = require(\"../../gcp/iam\");\n\nconst backend = require(\"./backend\");\n\nconst track = require(\"../../track\");\n\nconst PERMISSION = \"cloudfunctions.functions.setIamPolicy\";\n\nasync function checkServiceAccountIam(projectId) {\n  const saEmail = `${projectId}@appspot.gserviceaccount.com`;\n  let passed = false;\n\n  try {\n    const iamResult = await iam_1.testResourceIamPermissions(\"https://iam.googleapis.com\", \"v1\", `projects/${projectId}/serviceAccounts/${saEmail}`, [\"iam.serviceAccounts.actAs\"]);\n    passed = iamResult.passed;\n  } catch (err) {\n    logger_1.logger.debug(\"[functions] service account IAM check errored, deploy may fail:\", err);\n    return;\n  }\n\n  if (!passed) {\n    throw new error_1.FirebaseError(`Missing permissions required for functions deploy. You must have permission ${cli_color_1.bold(\"iam.serviceAccounts.ActAs\")} on service account ${cli_color_1.bold(saEmail)}.\\n\\n` + `To address this error, ask a project Owner to assign your account the \"Service Account User\" role from this URL:\\n\\n` + `https://console.cloud.google.com/iam-admin/iam?project=${projectId}`);\n  }\n}\n\nexports.checkServiceAccountIam = checkServiceAccountIam;\n\nasync function checkHttpIam(context, options, payload) {\n  const functions = payload.functions.backend.cloudFunctions;\n  const filterGroups = context.filters || functionsDeployHelper_1.getFilterGroups(options);\n  const httpFunctions = functions.filter(f => !backend.isEventTrigger(f.trigger)).filter(f => functionsDeployHelper_1.functionMatchesAnyGroup(f, filterGroups));\n  const existingFunctions = (await backend.existingBackend(context)).cloudFunctions;\n  const newHttpFunctions = httpFunctions.filter(func => !existingFunctions.find(backend.sameFunctionName(func)));\n\n  if (newHttpFunctions.length === 0) {\n    return;\n  }\n\n  logger_1.logger.debug(\"[functions] found\", newHttpFunctions.length, \"new HTTP functions, testing setIamPolicy permission...\");\n  let passed = true;\n\n  try {\n    const iamResult = await iam_1.testIamPermissions(context.projectId, [PERMISSION]);\n    passed = iamResult.passed;\n  } catch (e) {\n    logger_1.logger.debug(\"[functions] failed http create setIamPolicy permission check. deploy may fail:\", e);\n    return;\n  }\n\n  if (!passed) {\n    track(\"Error (User)\", \"deploy:functions:http_create_missing_iam\");\n    throw new error_1.FirebaseError(`Missing required permission on project ${cli_color_1.bold(context.projectId)} to deploy new HTTPS functions. The permission ${cli_color_1.bold(PERMISSION)} is required to deploy the following functions:\\n\\n- ` + newHttpFunctions.map(func => func.id).join(\"\\n- \") + `\\n\\nTo address this error, please ask a project Owner to assign your account the \"Cloud Functions Admin\" role at the following URL:\\n\\nhttps://console.cloud.google.com/iam-admin/iam?project=${context.projectId}`);\n  }\n\n  logger_1.logger.debug(\"[functions] found setIamPolicy permission, proceeding with deploy\");\n}\n\nexports.checkHttpIam = checkHttpIam;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/checkIam.js"],"names":["Object","defineProperty","exports","value","checkHttpIam","checkServiceAccountIam","cli_color_1","require","logger_1","functionsDeployHelper_1","error_1","iam_1","backend","track","PERMISSION","projectId","saEmail","passed","iamResult","testResourceIamPermissions","err","logger","debug","FirebaseError","bold","context","options","payload","functions","cloudFunctions","filterGroups","filters","getFilterGroups","httpFunctions","filter","f","isEventTrigger","trigger","functionMatchesAnyGroup","existingFunctions","existingBackend","newHttpFunctions","func","find","sameFunctionName","length","testIamPermissions","e","map","id","join"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkHttpIam = exports.checkServiceAccountIam = void 0;\nconst cli_color_1 = require(\"cli-color\");\nconst logger_1 = require(\"../../logger\");\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\nconst error_1 = require(\"../../error\");\nconst iam_1 = require(\"../../gcp/iam\");\nconst backend = require(\"./backend\");\nconst track = require(\"../../track\");\nconst PERMISSION = \"cloudfunctions.functions.setIamPolicy\";\nasync function checkServiceAccountIam(projectId) {\n    const saEmail = `${projectId}@appspot.gserviceaccount.com`;\n    let passed = false;\n    try {\n        const iamResult = await iam_1.testResourceIamPermissions(\"https://iam.googleapis.com\", \"v1\", `projects/${projectId}/serviceAccounts/${saEmail}`, [\"iam.serviceAccounts.actAs\"]);\n        passed = iamResult.passed;\n    }\n    catch (err) {\n        logger_1.logger.debug(\"[functions] service account IAM check errored, deploy may fail:\", err);\n        return;\n    }\n    if (!passed) {\n        throw new error_1.FirebaseError(`Missing permissions required for functions deploy. You must have permission ${cli_color_1.bold(\"iam.serviceAccounts.ActAs\")} on service account ${cli_color_1.bold(saEmail)}.\\n\\n` +\n            `To address this error, ask a project Owner to assign your account the \"Service Account User\" role from this URL:\\n\\n` +\n            `https://console.cloud.google.com/iam-admin/iam?project=${projectId}`);\n    }\n}\nexports.checkServiceAccountIam = checkServiceAccountIam;\nasync function checkHttpIam(context, options, payload) {\n    const functions = payload.functions.backend.cloudFunctions;\n    const filterGroups = context.filters || functionsDeployHelper_1.getFilterGroups(options);\n    const httpFunctions = functions\n        .filter((f) => !backend.isEventTrigger(f.trigger))\n        .filter((f) => functionsDeployHelper_1.functionMatchesAnyGroup(f, filterGroups));\n    const existingFunctions = (await backend.existingBackend(context)).cloudFunctions;\n    const newHttpFunctions = httpFunctions.filter((func) => !existingFunctions.find(backend.sameFunctionName(func)));\n    if (newHttpFunctions.length === 0) {\n        return;\n    }\n    logger_1.logger.debug(\"[functions] found\", newHttpFunctions.length, \"new HTTP functions, testing setIamPolicy permission...\");\n    let passed = true;\n    try {\n        const iamResult = await iam_1.testIamPermissions(context.projectId, [PERMISSION]);\n        passed = iamResult.passed;\n    }\n    catch (e) {\n        logger_1.logger.debug(\"[functions] failed http create setIamPolicy permission check. deploy may fail:\", e);\n        return;\n    }\n    if (!passed) {\n        track(\"Error (User)\", \"deploy:functions:http_create_missing_iam\");\n        throw new error_1.FirebaseError(`Missing required permission on project ${cli_color_1.bold(context.projectId)} to deploy new HTTPS functions. The permission ${cli_color_1.bold(PERMISSION)} is required to deploy the following functions:\\n\\n- ` +\n            newHttpFunctions.map((func) => func.id).join(\"\\n- \") +\n            `\\n\\nTo address this error, please ask a project Owner to assign your account the \"Cloud Functions Admin\" role at the following URL:\\n\\nhttps://console.cloud.google.com/iam-admin/iam?project=${context.projectId}`);\n    }\n    logger_1.logger.debug(\"[functions] found setIamPolicy permission, proceeding with deploy\");\n}\nexports.checkHttpIam = checkHttpIam;\n"]},"metadata":{},"sourceType":"script"}