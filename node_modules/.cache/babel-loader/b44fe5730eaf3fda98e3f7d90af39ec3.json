{"ast":null,"code":"'use strict';\n/**\n * `input` type prompt\n */\n\nvar chalk = require('chalk');\n\nvar {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nclass InputPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n  _run(cb) {\n    this.done = cb; // Once user confirm (enter key)\n\n    var events = observe(this.rl);\n    var submit = events.line.pipe(map(this.filterInput.bind(this)));\n    var validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {InputPrompt} self\n   */\n\n\n  render(error) {\n    var bottomContent = '';\n    var appendContent = '';\n    var message = this.getQuestion();\n    var transformer = this.opt.transformer;\n    var isFinal = this.status === 'answered';\n\n    if (isFinal) {\n      appendContent = this.answer;\n    } else {\n      appendContent = this.rl.line;\n    }\n\n    if (transformer) {\n      message += transformer(appendContent, this.answers, {\n        isFinal\n      });\n    } else {\n      message += isFinal ? chalk.cyan(appendContent) : appendContent;\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.answer = state.value;\n    this.status = 'answered'; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n\n    this.render();\n  }\n\n}\n\nmodule.exports = InputPrompt;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/prompts/input.js"],"names":["chalk","require","map","takeUntil","Base","observe","InputPrompt","_run","cb","done","events","rl","submit","line","pipe","filterInput","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","keypress","onKeypress","render","bottomContent","appendContent","message","getQuestion","transformer","opt","isFinal","status","answer","answers","cyan","red","screen","input","default","state","value","isValid","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `input` type prompt\n */\n\nvar chalk = require('chalk');\nvar { map, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\n\nclass InputPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    var events = observe(this.rl);\n    var submit = events.line.pipe(map(this.filterInput.bind(this)));\n\n    var validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {InputPrompt} self\n   */\n\n  render(error) {\n    var bottomContent = '';\n    var appendContent = '';\n    var message = this.getQuestion();\n    var transformer = this.opt.transformer;\n    var isFinal = this.status === 'answered';\n\n    if (isFinal) {\n      appendContent = this.answer;\n    } else {\n      appendContent = this.rl.line;\n    }\n\n    if (transformer) {\n      message += transformer(appendContent, this.answers, { isFinal });\n    } else {\n      message += isFinal ? chalk.cyan(appendContent) : appendContent;\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.answer = state.value;\n    this.status = 'answered';\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n\n    this.render();\n  }\n}\n\nmodule.exports = InputPrompt;\n"]},"metadata":{},"sourceType":"script"}