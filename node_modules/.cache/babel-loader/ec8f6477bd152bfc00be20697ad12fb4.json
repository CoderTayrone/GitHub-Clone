{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearCredentials = exports.getCredentialPathAsync = void 0;\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst api = require(\"./api\");\n\nconst logger_1 = require(\"./logger\");\n\nasync function getCredentialPathAsync(account) {\n  const filePath = credFilePath(account.user);\n\n  if (!filePath) {\n    logger_1.logger.debug(\"defaultcredentials: could not create path to default credentials file.\");\n    return undefined;\n  }\n\n  const cred = getCredential(account.tokens);\n\n  if (!cred) {\n    logger_1.logger.debug(\"defaultcredentials: no credential available.\");\n    return undefined;\n  }\n\n  logger_1.logger.debug(`defaultcredentials: writing to file ${filePath}`);\n  return new Promise((res, rej) => {\n    fs.writeFile(filePath, JSON.stringify(cred, undefined, 2), \"utf8\", err => {\n      if (err) {\n        rej(err);\n      } else {\n        res(filePath);\n      }\n    });\n  });\n}\n\nexports.getCredentialPathAsync = getCredentialPathAsync;\n\nfunction clearCredentials(account) {\n  const filePath = credFilePath(account.user);\n\n  if (!filePath) {\n    return;\n  }\n\n  if (!fs.existsSync(filePath)) {\n    return;\n  }\n\n  fs.unlinkSync(filePath);\n}\n\nexports.clearCredentials = clearCredentials;\n\nfunction getCredential(tokens) {\n  if (tokens.refresh_token) {\n    return {\n      client_id: api.clientId,\n      client_secret: api.clientSecret,\n      refresh_token: tokens.refresh_token,\n      type: \"authorized_user\"\n    };\n  }\n}\n\nfunction credFilePath(user) {\n  let configDir = undefined;\n\n  if (process.platform.startsWith(\"win\")) {\n    configDir = process.env[\"APPDATA\"];\n  } else {\n    const home = process.env[\"HOME\"];\n\n    if (home) {\n      configDir = path.join(home, \".config\");\n    }\n  }\n\n  if (!configDir) {\n    return undefined;\n  }\n\n  if (!fs.existsSync(configDir)) {\n    fs.mkdirSync(configDir);\n  }\n\n  const fbtConfigDir = path.join(configDir, \"firebase\");\n\n  if (!fs.existsSync(fbtConfigDir)) {\n    fs.mkdirSync(fbtConfigDir);\n  }\n\n  return path.join(fbtConfigDir, `${userEmailSlug(user)}_application_default_credentials.json`);\n}\n\nfunction userEmailSlug(user) {\n  const email = user.email || \"unknown_user\";\n  const slug = email.replace(\"@\", \"_\").replace(\".\", \"_\");\n  return slug;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/defaultCredentials.js"],"names":["Object","defineProperty","exports","value","clearCredentials","getCredentialPathAsync","fs","require","path","api","logger_1","account","filePath","credFilePath","user","logger","debug","undefined","cred","getCredential","tokens","Promise","res","rej","writeFile","JSON","stringify","err","existsSync","unlinkSync","refresh_token","client_id","clientId","client_secret","clientSecret","type","configDir","process","platform","startsWith","env","home","join","mkdirSync","fbtConfigDir","userEmailSlug","email","slug","replace"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearCredentials = exports.getCredentialPathAsync = void 0;\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst api = require(\"./api\");\nconst logger_1 = require(\"./logger\");\nasync function getCredentialPathAsync(account) {\n    const filePath = credFilePath(account.user);\n    if (!filePath) {\n        logger_1.logger.debug(\"defaultcredentials: could not create path to default credentials file.\");\n        return undefined;\n    }\n    const cred = getCredential(account.tokens);\n    if (!cred) {\n        logger_1.logger.debug(\"defaultcredentials: no credential available.\");\n        return undefined;\n    }\n    logger_1.logger.debug(`defaultcredentials: writing to file ${filePath}`);\n    return new Promise((res, rej) => {\n        fs.writeFile(filePath, JSON.stringify(cred, undefined, 2), \"utf8\", (err) => {\n            if (err) {\n                rej(err);\n            }\n            else {\n                res(filePath);\n            }\n        });\n    });\n}\nexports.getCredentialPathAsync = getCredentialPathAsync;\nfunction clearCredentials(account) {\n    const filePath = credFilePath(account.user);\n    if (!filePath) {\n        return;\n    }\n    if (!fs.existsSync(filePath)) {\n        return;\n    }\n    fs.unlinkSync(filePath);\n}\nexports.clearCredentials = clearCredentials;\nfunction getCredential(tokens) {\n    if (tokens.refresh_token) {\n        return {\n            client_id: api.clientId,\n            client_secret: api.clientSecret,\n            refresh_token: tokens.refresh_token,\n            type: \"authorized_user\",\n        };\n    }\n}\nfunction credFilePath(user) {\n    let configDir = undefined;\n    if (process.platform.startsWith(\"win\")) {\n        configDir = process.env[\"APPDATA\"];\n    }\n    else {\n        const home = process.env[\"HOME\"];\n        if (home) {\n            configDir = path.join(home, \".config\");\n        }\n    }\n    if (!configDir) {\n        return undefined;\n    }\n    if (!fs.existsSync(configDir)) {\n        fs.mkdirSync(configDir);\n    }\n    const fbtConfigDir = path.join(configDir, \"firebase\");\n    if (!fs.existsSync(fbtConfigDir)) {\n        fs.mkdirSync(fbtConfigDir);\n    }\n    return path.join(fbtConfigDir, `${userEmailSlug(user)}_application_default_credentials.json`);\n}\nfunction userEmailSlug(user) {\n    const email = user.email || \"unknown_user\";\n    const slug = email.replace(\"@\", \"_\").replace(\".\", \"_\");\n    return slug;\n}\n"]},"metadata":{},"sourceType":"script"}