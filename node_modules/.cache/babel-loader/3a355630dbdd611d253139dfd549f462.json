{"ast":null,"code":"var http = require('http');\n/*!\n * Connect - basicAuth\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Basic Auth:\n *\n * Status: Deprecated. No bug reports or pull requests are welcomed\n * for this middleware. However, this middleware will not be removed.\n * Instead, you should use [basic-auth](https://github.com/visionmedia/node-basic-auth).\n *\n * Enfore basic authentication by providing a `callback(user, pass)`,\n * which must return `true` in order to gain access. Alternatively an async\n * method is provided as well, invoking `callback(user, pass, callback)`. Populates\n * `req.user`. The final alternative is simply passing username / password\n * strings.\n *\n *  Simple username and password\n *\n *     connect(connect.basicAuth('username', 'password'));\n *\n *  Callback verification\n *\n *     connect()\n *       .use(connect.basicAuth(function(user, pass){\n *         return 'tj' == user && 'wahoo' == pass;\n *       }))\n *\n *  Async callback verification, accepting `fn(err, user)`.\n *\n *     connect()\n *       .use(connect.basicAuth(function(user, pass, fn){\n *         User.authenticate({ user: user, pass: pass }, fn);\n *       }))\n *\n * @param {Function|String} callback or username\n * @param {String} realm\n * @api public\n */\n\n\nmodule.exports = function basicAuth(callback, realm) {\n  var username, password; // user / pass strings\n\n  if ('string' == typeof callback) {\n    username = callback;\n    password = realm;\n    if ('string' != typeof password) throw new Error('password argument required');\n    realm = arguments[2];\n\n    callback = function (user, pass) {\n      return user == username && pass == password;\n    };\n  }\n\n  realm = realm || 'Authorization Required';\n  return function (req, res, next) {\n    var authorization = req.headers.authorization;\n    if (req.user) return next();\n    if (!authorization) return unauthorized(res, realm);\n    var parts = authorization.split(' ');\n    if (parts.length !== 2) return next(error(400));\n    var scheme = parts[0],\n        credentials = new Buffer(parts[1], 'base64').toString(),\n        index = credentials.indexOf(':');\n    if ('Basic' != scheme || index < 0) return next(error(400));\n    var user = credentials.slice(0, index),\n        pass = credentials.slice(index + 1); // async\n\n    if (callback.length >= 3) {\n      callback(user, pass, function (err, user) {\n        if (err || !user) return unauthorized(res, realm);\n        req.user = req.remoteUser = user;\n        next();\n      }); // sync\n    } else {\n      if (callback(user, pass)) {\n        req.user = req.remoteUser = user;\n        next();\n      } else {\n        unauthorized(res, realm);\n      }\n    }\n  };\n};\n/**\n * Respond with 401 \"Unauthorized\".\n *\n * @param {ServerResponse} res\n * @param {String} realm\n * @api private\n */\n\n\nfunction unauthorized(res, realm) {\n  res.statusCode = 401;\n  res.setHeader('WWW-Authenticate', 'Basic realm=\"' + realm + '\"');\n  res.end('Unauthorized');\n}\n\n;\n/**\n * Generate an `Error` from the given status `code`\n * and optional `msg`.\n *\n * @param {Number} code\n * @param {String} msg\n * @return {Error}\n * @api private\n */\n\nfunction error(code, msg) {\n  var err = new Error(msg || http.STATUS_CODES[code]);\n  err.status = code;\n  return err;\n}\n\n;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/basic-auth-connect/index.js"],"names":["http","require","module","exports","basicAuth","callback","realm","username","password","Error","arguments","user","pass","req","res","next","authorization","headers","unauthorized","parts","split","length","error","scheme","credentials","Buffer","toString","index","indexOf","slice","err","remoteUser","statusCode","setHeader","end","code","msg","STATUS_CODES","status"],"mappings":"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","sourcesContent":["var http = require('http');\n\n/*!\n * Connect - basicAuth\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Basic Auth:\n *\n * Status: Deprecated. No bug reports or pull requests are welcomed\n * for this middleware. However, this middleware will not be removed.\n * Instead, you should use [basic-auth](https://github.com/visionmedia/node-basic-auth).\n *\n * Enfore basic authentication by providing a `callback(user, pass)`,\n * which must return `true` in order to gain access. Alternatively an async\n * method is provided as well, invoking `callback(user, pass, callback)`. Populates\n * `req.user`. The final alternative is simply passing username / password\n * strings.\n *\n *  Simple username and password\n *\n *     connect(connect.basicAuth('username', 'password'));\n *\n *  Callback verification\n *\n *     connect()\n *       .use(connect.basicAuth(function(user, pass){\n *         return 'tj' == user && 'wahoo' == pass;\n *       }))\n *\n *  Async callback verification, accepting `fn(err, user)`.\n *\n *     connect()\n *       .use(connect.basicAuth(function(user, pass, fn){\n *         User.authenticate({ user: user, pass: pass }, fn);\n *       }))\n *\n * @param {Function|String} callback or username\n * @param {String} realm\n * @api public\n */\n\nmodule.exports = function basicAuth(callback, realm) {\n  var username, password;\n\n  // user / pass strings\n  if ('string' == typeof callback) {\n    username = callback;\n    password = realm;\n    if ('string' != typeof password) throw new Error('password argument required');\n    realm = arguments[2];\n    callback = function(user, pass){\n      return user == username && pass == password;\n    }\n  }\n\n  realm = realm || 'Authorization Required';\n\n  return function(req, res, next) {\n    var authorization = req.headers.authorization;\n\n    if (req.user) return next();\n    if (!authorization) return unauthorized(res, realm);\n\n    var parts = authorization.split(' ');\n\n    if (parts.length !== 2) return next(error(400));\n\n    var scheme = parts[0]\n      , credentials = new Buffer(parts[1], 'base64').toString()\n      , index = credentials.indexOf(':');\n\n    if ('Basic' != scheme || index < 0) return next(error(400));\n\n    var user = credentials.slice(0, index)\n      , pass = credentials.slice(index + 1);\n\n    // async\n    if (callback.length >= 3) {\n      callback(user, pass, function(err, user){\n        if (err || !user)  return unauthorized(res, realm);\n        req.user = req.remoteUser = user;\n        next();\n      });\n    // sync\n    } else {\n      if (callback(user, pass)) {\n        req.user = req.remoteUser = user;\n        next();\n      } else {\n        unauthorized(res, realm);\n      }\n    }\n  }\n};\n\n/**\n * Respond with 401 \"Unauthorized\".\n *\n * @param {ServerResponse} res\n * @param {String} realm\n * @api private\n */\n\nfunction unauthorized(res, realm) {\n  res.statusCode = 401;\n  res.setHeader('WWW-Authenticate', 'Basic realm=\"' + realm + '\"');\n  res.end('Unauthorized');\n};\n\n/**\n * Generate an `Error` from the given status `code`\n * and optional `msg`.\n *\n * @param {Number} code\n * @param {String} msg\n * @return {Error}\n * @api private\n */\n\nfunction error(code, msg){\n  var err = new Error(msg || http.STATUS_CODES[code]);\n  err.status = code;\n  return err;\n};"]},"metadata":{},"sourceType":"script"}