{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst oasUtils_1 = require(\"../oasUtils\");\n\nconst Path_1 = __importDefault(require(\"../Path\"));\n\nconst PathResolver_1 = __importDefault(require(\"./PathResolver\"));\n\nconst extensions_1 = require(\"../extensions\");\n\nclass Paths {\n  constructor(context, exegesisController) {\n    this._pathResolver = new PathResolver_1.default();\n    const {\n      openApiDoc\n    } = context;\n    exegesisController = openApiDoc.paths[extensions_1.EXEGESIS_CONTROLLER] || exegesisController;\n\n    for (const path of Object.keys(openApiDoc.paths)) {\n      const pathObject = new Path_1.default(context.childContext(path), openApiDoc.paths[path], exegesisController);\n\n      if (oasUtils_1.isSpecificationExtension(path)) {\n        // Skip extentions\n        continue;\n      }\n\n      this._pathResolver.registerPath(path, pathObject);\n    }\n  }\n  /**\n   * Given a `pathname` from a URL (e.g. \"/foo/bar\") this will return the\n   * PathObject from the OpenAPI document's `paths` section.\n   *\n   * @param urlPathname - The pathname to search for.  Note that any\n   *   URL prefix defined by the `servers` section of the OpenAPI doc needs\n   *   to be stripped before calling this.\n   * @returns A `{path, rawPathParams}` object.\n   *   `rawPathParams` will be an object where keys are parameter names from path\n   *   templating.  If the path cannot be resolved, returns null, although\n   *   note that if the path is resolved and the operation is not found, this\n   *   will return an object with a null `operationObject`.\n   */\n\n\n  resolvePath(urlPathname) {\n    const result = this._pathResolver.resolvePath(urlPathname);\n\n    if (result) {\n      return {\n        path: result.value,\n        rawPathParams: result.rawPathParams,\n        pathKey: result.path\n      };\n    } else {\n      return undefined;\n    }\n  }\n\n}\n\nexports.default = Paths;","map":{"version":3,"sources":["../../../src/oas3/Paths/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAUA,MAAqB,KAArB,CAA0B;AAGtB,EAAA,WAAA,CAAY,OAAZ,EAAyC,kBAAzC,EAA+E;AAF9D,SAAA,aAAA,GAAoC,IAAI,cAAA,CAAA,OAAJ,EAApC;AAGb,UAAM;AAAE,MAAA;AAAF,QAAiB,OAAvB;AAEA,IAAA,kBAAkB,GAAG,UAAU,CAAC,KAAX,CAAiB,YAAA,CAAA,mBAAjB,KAAyC,kBAA9D;;AACA,SAAK,MAAM,IAAX,IAAmB,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,KAAvB,CAAnB,EAAkD;AAC9C,YAAM,UAAU,GAAG,IAAI,MAAA,CAAA,OAAJ,CACf,OAAO,CAAC,YAAR,CAAqB,IAArB,CADe,EAEf,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAFe,EAGf,kBAHe,CAAnB;;AAMA,UAAI,UAAA,CAAA,wBAAA,CAAyB,IAAzB,CAAJ,EAAoC;AAChC;AACA;AACH;;AAED,WAAK,aAAL,CAAmB,YAAnB,CAAgC,IAAhC,EAAsC,UAAtC;AACH;AACJ;AAED;;;;;;;;;;;;AAYG;;;AACH,EAAA,WAAW,CAAC,WAAD,EAAoB;AAC3B,UAAM,MAAM,GAAG,KAAK,aAAL,CAAmB,WAAnB,CAA+B,WAA/B,CAAf;;AACA,QAAI,MAAJ,EAAY;AACR,aAAO;AACH,QAAA,IAAI,EAAE,MAAM,CAAC,KADV;AAEH,QAAA,aAAa,EAAE,MAAM,CAAC,aAFnB;AAGH,QAAA,OAAO,EAAE,MAAM,CAAC;AAHb,OAAP;AAKH,KAND,MAMO;AACH,aAAO,SAAP;AACH;AACJ;;AA/CqB;;AAA1B,OAAA,CAAA,OAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oasUtils_1 = require(\"../oasUtils\");\nconst Path_1 = __importDefault(require(\"../Path\"));\nconst PathResolver_1 = __importDefault(require(\"./PathResolver\"));\nconst extensions_1 = require(\"../extensions\");\nclass Paths {\n    constructor(context, exegesisController) {\n        this._pathResolver = new PathResolver_1.default();\n        const { openApiDoc } = context;\n        exegesisController = openApiDoc.paths[extensions_1.EXEGESIS_CONTROLLER] || exegesisController;\n        for (const path of Object.keys(openApiDoc.paths)) {\n            const pathObject = new Path_1.default(context.childContext(path), openApiDoc.paths[path], exegesisController);\n            if (oasUtils_1.isSpecificationExtension(path)) {\n                // Skip extentions\n                continue;\n            }\n            this._pathResolver.registerPath(path, pathObject);\n        }\n    }\n    /**\n     * Given a `pathname` from a URL (e.g. \"/foo/bar\") this will return the\n     * PathObject from the OpenAPI document's `paths` section.\n     *\n     * @param urlPathname - The pathname to search for.  Note that any\n     *   URL prefix defined by the `servers` section of the OpenAPI doc needs\n     *   to be stripped before calling this.\n     * @returns A `{path, rawPathParams}` object.\n     *   `rawPathParams` will be an object where keys are parameter names from path\n     *   templating.  If the path cannot be resolved, returns null, although\n     *   note that if the path is resolved and the operation is not found, this\n     *   will return an object with a null `operationObject`.\n     */\n    resolvePath(urlPathname) {\n        const result = this._pathResolver.resolvePath(urlPathname);\n        if (result) {\n            return {\n                path: result.value,\n                rawPathParams: result.rawPathParams,\n                pathKey: result.path,\n            };\n        }\n        else {\n            return undefined;\n        }\n    }\n}\nexports.default = Paths;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}