{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printTriggerUrls = exports.printSuccess = exports.logAndTrackDeployStats = exports.getFunctionLabel = exports.getFunctionId = exports.getFilterGroups = exports.functionMatchesGroup = exports.functionMatchesAnyGroup = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst backend = require(\"./backend\");\n\nconst track = require(\"../../track\");\n\nconst utils = require(\"../../utils\");\n\nfunction functionMatchesAnyGroup(func, filterGroups) {\n  if (!filterGroups.length) {\n    return true;\n  }\n\n  return filterGroups.some(groupChunk => functionMatchesGroup(func, groupChunk));\n}\n\nexports.functionMatchesAnyGroup = functionMatchesAnyGroup;\n\nfunction functionMatchesGroup(func, groupChunks) {\n  const functionNameChunks = func.id.split(\"-\").slice(0, groupChunks.length);\n\n  if (functionNameChunks.length != groupChunks.length) {\n    return false;\n  }\n\n  for (let i = 0; i < groupChunks.length; i += 1) {\n    if (groupChunks[i] !== functionNameChunks[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.functionMatchesGroup = functionMatchesGroup;\n\nfunction getFilterGroups(options) {\n  if (!options.only) {\n    return [];\n  }\n\n  const only = options.only.split(\",\");\n  const onlyFunctions = only.filter(filter => {\n    const opts = filter.split(\":\");\n    return opts[0] == \"functions\" && opts[1];\n  });\n  return onlyFunctions.map(filter => {\n    return filter.split(\":\")[1].split(/[.-]/);\n  });\n}\n\nexports.getFilterGroups = getFilterGroups;\n\nfunction getFunctionId(fullName) {\n  return fullName.split(\"/\")[5];\n}\n\nexports.getFunctionId = getFunctionId;\n\nfunction getRegion(fullName) {\n  return fullName.split(\"/\")[3];\n}\n\nfunction getFunctionLabel(fnOrName) {\n  if (typeof fnOrName === \"string\") {\n    return getFunctionId(fnOrName) + \"(\" + getRegion(fnOrName) + \")\";\n  } else {\n    return `${fnOrName.id}(${fnOrName.region})`;\n  }\n}\n\nexports.getFunctionLabel = getFunctionLabel;\n\nfunction logAndTrackDeployStats(queue, errorHandler) {\n  const stats = queue.stats();\n  logger_1.logger.debug(`Total Function Deployment time: ${stats.elapsed}`);\n  logger_1.logger.debug(`${stats.total} Functions Deployed`);\n  logger_1.logger.debug(`${errorHandler.errors.length} Functions Errored`);\n  logger_1.logger.debug(`Average Function Deployment time: ${stats.avg}`);\n\n  if (stats.total > 0) {\n    if (errorHandler.errors.length === 0) {\n      track(\"functions_deploy_result\", \"success\", stats.total);\n    } else if (errorHandler.errors.length < stats.total) {\n      track(\"functions_deploy_result\", \"partial_success\", stats.total - errorHandler.errors.length);\n      track(\"functions_deploy_result\", \"partial_failure\", errorHandler.errors.length);\n      track(\"functions_deploy_result\", \"partial_error_ratio\", errorHandler.errors.length / stats.total);\n    } else {\n      track(\"functions_deploy_result\", \"failure\", stats.total);\n    }\n  }\n}\n\nexports.logAndTrackDeployStats = logAndTrackDeployStats;\n\nfunction printSuccess(func, type) {\n  utils.logSuccess(clc.bold.green(\"functions[\" + getFunctionLabel(func) + \"]: \") + \"Successful \" + type + \" operation. \");\n}\n\nexports.printSuccess = printSuccess;\n\nasync function printTriggerUrls(context, want) {\n  const have = await backend.existingBackend(context, true);\n  const httpsFunctions = have.cloudFunctions.filter(fn => {\n    if (backend.isEventTrigger(fn.trigger)) {\n      return false;\n    }\n\n    return want.cloudFunctions.some(backend.sameFunctionName(fn));\n  });\n\n  if (httpsFunctions.length === 0) {\n    return;\n  }\n\n  for (const httpsFunc of httpsFunctions) {\n    if (!httpsFunc.uri) {\n      logger_1.logger.debug(\"Missing URI for HTTPS function in printTriggerUrls. This shouldn't happen\");\n      continue;\n    }\n\n    logger_1.logger.info(clc.bold(\"Function URL\"), `(${getFunctionLabel(httpsFunc)}):`, httpsFunc.uri);\n  }\n}\n\nexports.printTriggerUrls = printTriggerUrls;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/functionsDeployHelper.js"],"names":["Object","defineProperty","exports","value","printTriggerUrls","printSuccess","logAndTrackDeployStats","getFunctionLabel","getFunctionId","getFilterGroups","functionMatchesGroup","functionMatchesAnyGroup","clc","require","logger_1","backend","track","utils","func","filterGroups","length","some","groupChunk","groupChunks","functionNameChunks","id","split","slice","i","options","only","onlyFunctions","filter","opts","map","fullName","getRegion","fnOrName","region","queue","errorHandler","stats","logger","debug","elapsed","total","errors","avg","type","logSuccess","bold","green","context","want","have","existingBackend","httpsFunctions","cloudFunctions","fn","isEventTrigger","trigger","sameFunctionName","httpsFunc","uri","info"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.printTriggerUrls = exports.printSuccess = exports.logAndTrackDeployStats = exports.getFunctionLabel = exports.getFunctionId = exports.getFilterGroups = exports.functionMatchesGroup = exports.functionMatchesAnyGroup = void 0;\nconst clc = require(\"cli-color\");\nconst logger_1 = require(\"../../logger\");\nconst backend = require(\"./backend\");\nconst track = require(\"../../track\");\nconst utils = require(\"../../utils\");\nfunction functionMatchesAnyGroup(func, filterGroups) {\n    if (!filterGroups.length) {\n        return true;\n    }\n    return filterGroups.some((groupChunk) => functionMatchesGroup(func, groupChunk));\n}\nexports.functionMatchesAnyGroup = functionMatchesAnyGroup;\nfunction functionMatchesGroup(func, groupChunks) {\n    const functionNameChunks = func.id.split(\"-\").slice(0, groupChunks.length);\n    if (functionNameChunks.length != groupChunks.length) {\n        return false;\n    }\n    for (let i = 0; i < groupChunks.length; i += 1) {\n        if (groupChunks[i] !== functionNameChunks[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.functionMatchesGroup = functionMatchesGroup;\nfunction getFilterGroups(options) {\n    if (!options.only) {\n        return [];\n    }\n    const only = options.only.split(\",\");\n    const onlyFunctions = only.filter((filter) => {\n        const opts = filter.split(\":\");\n        return opts[0] == \"functions\" && opts[1];\n    });\n    return onlyFunctions.map((filter) => {\n        return filter.split(\":\")[1].split(/[.-]/);\n    });\n}\nexports.getFilterGroups = getFilterGroups;\nfunction getFunctionId(fullName) {\n    return fullName.split(\"/\")[5];\n}\nexports.getFunctionId = getFunctionId;\nfunction getRegion(fullName) {\n    return fullName.split(\"/\")[3];\n}\nfunction getFunctionLabel(fnOrName) {\n    if (typeof fnOrName === \"string\") {\n        return getFunctionId(fnOrName) + \"(\" + getRegion(fnOrName) + \")\";\n    }\n    else {\n        return `${fnOrName.id}(${fnOrName.region})`;\n    }\n}\nexports.getFunctionLabel = getFunctionLabel;\nfunction logAndTrackDeployStats(queue, errorHandler) {\n    const stats = queue.stats();\n    logger_1.logger.debug(`Total Function Deployment time: ${stats.elapsed}`);\n    logger_1.logger.debug(`${stats.total} Functions Deployed`);\n    logger_1.logger.debug(`${errorHandler.errors.length} Functions Errored`);\n    logger_1.logger.debug(`Average Function Deployment time: ${stats.avg}`);\n    if (stats.total > 0) {\n        if (errorHandler.errors.length === 0) {\n            track(\"functions_deploy_result\", \"success\", stats.total);\n        }\n        else if (errorHandler.errors.length < stats.total) {\n            track(\"functions_deploy_result\", \"partial_success\", stats.total - errorHandler.errors.length);\n            track(\"functions_deploy_result\", \"partial_failure\", errorHandler.errors.length);\n            track(\"functions_deploy_result\", \"partial_error_ratio\", errorHandler.errors.length / stats.total);\n        }\n        else {\n            track(\"functions_deploy_result\", \"failure\", stats.total);\n        }\n    }\n}\nexports.logAndTrackDeployStats = logAndTrackDeployStats;\nfunction printSuccess(func, type) {\n    utils.logSuccess(clc.bold.green(\"functions[\" + getFunctionLabel(func) + \"]: \") +\n        \"Successful \" +\n        type +\n        \" operation. \");\n}\nexports.printSuccess = printSuccess;\nasync function printTriggerUrls(context, want) {\n    const have = await backend.existingBackend(context, true);\n    const httpsFunctions = have.cloudFunctions.filter((fn) => {\n        if (backend.isEventTrigger(fn.trigger)) {\n            return false;\n        }\n        return want.cloudFunctions.some(backend.sameFunctionName(fn));\n    });\n    if (httpsFunctions.length === 0) {\n        return;\n    }\n    for (const httpsFunc of httpsFunctions) {\n        if (!httpsFunc.uri) {\n            logger_1.logger.debug(\"Missing URI for HTTPS function in printTriggerUrls. This shouldn't happen\");\n            continue;\n        }\n        logger_1.logger.info(clc.bold(\"Function URL\"), `(${getFunctionLabel(httpsFunc)}):`, httpsFunc.uri);\n    }\n}\nexports.printTriggerUrls = printTriggerUrls;\n"]},"metadata":{},"sourceType":"script"}