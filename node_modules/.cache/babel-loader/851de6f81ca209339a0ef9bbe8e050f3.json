{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFirebaseProject = exports.listFirebaseProjects = exports.getAvailableCloudProjectPage = exports.getFirebaseProjectPage = exports.addFirebaseToCloudProject = exports.createCloudProject = exports.promptAvailableProjectId = exports.getOrPromptProject = exports.addFirebaseToCloudProjectAndLog = exports.createFirebaseProjectAndLog = exports.PROJECTS_CREATE_QUESTIONS = exports.ProjectParentResourceType = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst ora = require(\"ora\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst error_1 = require(\"../error\");\n\nconst operation_poller_1 = require(\"../operation-poller\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst api = require(\"../api\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nconst TIMEOUT_MILLIS = 30000;\nconst MAXIMUM_PROMPT_LIST = 100;\nconst PROJECT_LIST_PAGE_SIZE = 1000;\nconst CREATE_PROJECT_API_REQUEST_TIMEOUT_MILLIS = 15000;\nvar ProjectParentResourceType;\n\n(function (ProjectParentResourceType) {\n  ProjectParentResourceType[\"ORGANIZATION\"] = \"organization\";\n  ProjectParentResourceType[\"FOLDER\"] = \"folder\";\n})(ProjectParentResourceType = exports.ProjectParentResourceType || (exports.ProjectParentResourceType = {}));\n\nexports.PROJECTS_CREATE_QUESTIONS = [{\n  type: \"input\",\n  name: \"projectId\",\n  default: \"\",\n  message: \"Please specify a unique project id \" + `(${clc.yellow(\"warning\")}: cannot be modified afterward) [6-30 characters]:\\n`\n}, {\n  type: \"input\",\n  name: \"displayName\",\n  default: \"\",\n  message: \"What would you like to call your project? (defaults to your project ID)\"\n}];\nconst firebaseAPIClient = new apiv2_1.Client({\n  urlPrefix: api.firebaseApiOrigin,\n  auth: true,\n  apiVersion: \"v1beta1\"\n});\n\nasync function createFirebaseProjectAndLog(projectId, options) {\n  const spinner = ora(\"Creating Google Cloud Platform project\").start();\n\n  try {\n    await createCloudProject(projectId, options);\n    spinner.succeed();\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n\n  return addFirebaseToCloudProjectAndLog(projectId);\n}\n\nexports.createFirebaseProjectAndLog = createFirebaseProjectAndLog;\n\nasync function addFirebaseToCloudProjectAndLog(projectId) {\n  let projectInfo;\n  const spinner = ora(\"Adding Firebase resources to Google Cloud Platform project\").start();\n\n  try {\n    projectInfo = await addFirebaseToCloudProject(projectId);\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n\n  spinner.succeed();\n  logNewFirebaseProjectInfo(projectInfo);\n  return projectInfo;\n}\n\nexports.addFirebaseToCloudProjectAndLog = addFirebaseToCloudProjectAndLog;\n\nfunction logNewFirebaseProjectInfo(projectInfo) {\n  logger_1.logger.info(\"\");\n\n  if (process.platform === \"win32\") {\n    logger_1.logger.info(\"=== Your Firebase project is ready! ===\");\n  } else {\n    logger_1.logger.info(\"ðŸŽ‰ðŸŽ‰ðŸŽ‰ Your Firebase project is ready! ðŸŽ‰ðŸŽ‰ðŸŽ‰\");\n  }\n\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(\"Project information:\");\n  logger_1.logger.info(`   - Project ID: ${clc.bold(projectInfo.projectId)}`);\n  logger_1.logger.info(`   - Project Name: ${clc.bold(projectInfo.displayName)}`);\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(\"Firebase console is available at\");\n  logger_1.logger.info(`https://console.firebase.google.com/project/${clc.bold(projectInfo.projectId)}/overview`);\n}\n\nasync function getOrPromptProject(options) {\n  if (options.project) {\n    return await getFirebaseProject(options.project);\n  }\n\n  return selectProjectInteractively();\n}\n\nexports.getOrPromptProject = getOrPromptProject;\n\nasync function selectProjectInteractively(pageSize = MAXIMUM_PROMPT_LIST) {\n  const {\n    projects,\n    nextPageToken\n  } = await getFirebaseProjectPage(pageSize);\n\n  if (projects.length === 0) {\n    throw new error_1.FirebaseError(\"There are no Firebase projects associated with this account.\");\n  }\n\n  if (nextPageToken) {\n    logger_1.logger.debug(`Found more than ${projects.length} projects, selecting via prompt`);\n    return selectProjectByPrompting();\n  }\n\n  return selectProjectFromList(projects);\n}\n\nasync function selectProjectByPrompting() {\n  const projectId = await prompt_1.promptOnce({\n    type: \"input\",\n    message: \"Please input the project ID you would like to use:\"\n  });\n  return await getFirebaseProject(projectId);\n}\n\nasync function selectProjectFromList(projects = []) {\n  let choices = projects.filter(p => !!p).map(p => {\n    return {\n      name: p.projectId + (p.displayName ? ` (${p.displayName})` : \"\"),\n      value: p.projectId\n    };\n  });\n  choices = _.orderBy(choices, [\"name\"], [\"asc\"]);\n\n  if (choices.length >= 25) {\n    utils.logBullet(`Don't want to scroll through all your projects? If you know your project ID, ` + `you can initialize it directly using ${clc.bold(\"firebase init --project <project_id>\")}.\\n`);\n  }\n\n  const projectId = await prompt_1.promptOnce({\n    type: \"list\",\n    name: \"id\",\n    message: \"Select a default Firebase project for this directory:\",\n    choices\n  });\n  const project = projects.find(p => p.projectId === projectId);\n\n  if (!project) {\n    throw new error_1.FirebaseError(\"Unexpected error. Project does not exist\");\n  }\n\n  return project;\n}\n\nfunction getProjectId(cloudProject) {\n  const resourceName = cloudProject.project;\n  return resourceName.substring(resourceName.lastIndexOf(\"/\") + 1);\n}\n\nasync function promptAvailableProjectId() {\n  const {\n    projects,\n    nextPageToken\n  } = await getAvailableCloudProjectPage(MAXIMUM_PROMPT_LIST);\n\n  if (projects.length === 0) {\n    throw new error_1.FirebaseError(\"There are no available Google Cloud projects to add Firebase services.\");\n  }\n\n  if (nextPageToken) {\n    return await prompt_1.promptOnce({\n      type: \"input\",\n      message: \"Please input the ID of the Google Cloud Project you would like to add Firebase:\"\n    });\n  } else {\n    let choices = projects.filter(p => !!p).map(p => {\n      const projectId = getProjectId(p);\n      return {\n        name: projectId + (p.displayName ? ` (${p.displayName})` : \"\"),\n        value: projectId\n      };\n    });\n    choices = _.orderBy(choices, [\"name\"], [\"asc\"]);\n    return await prompt_1.promptOnce({\n      type: \"list\",\n      name: \"id\",\n      message: \"Select the Google Cloud Platform project you would like to add Firebase:\",\n      choices\n    });\n  }\n}\n\nexports.promptAvailableProjectId = promptAvailableProjectId;\n\nasync function createCloudProject(projectId, options) {\n  try {\n    const response = await api.request(\"POST\", \"/v1/projects\", {\n      auth: true,\n      origin: api.resourceManagerOrigin,\n      timeout: CREATE_PROJECT_API_REQUEST_TIMEOUT_MILLIS,\n      data: {\n        projectId,\n        name: options.displayName || projectId,\n        parent: options.parentResource\n      }\n    });\n    const projectInfo = await operation_poller_1.pollOperation({\n      pollerName: \"Project Creation Poller\",\n      apiOrigin: api.resourceManagerOrigin,\n      apiVersion: \"v1\",\n      operationResourceName: response.body.name\n    });\n    return projectInfo;\n  } catch (err) {\n    if (err.status === 409) {\n      throw new error_1.FirebaseError(`Failed to create project because there is already a project with ID ${clc.bold(projectId)}. Please try again with a unique project ID.`, {\n        exit: 2,\n        original: err\n      });\n    } else {\n      throw new error_1.FirebaseError(\"Failed to create project. See firebase-debug.log for more info.\", {\n        exit: 2,\n        original: err\n      });\n    }\n  }\n}\n\nexports.createCloudProject = createCloudProject;\n\nasync function addFirebaseToCloudProject(projectId) {\n  try {\n    const response = await api.request(\"POST\", `/v1beta1/projects/${projectId}:addFirebase`, {\n      auth: true,\n      origin: api.firebaseApiOrigin,\n      timeout: CREATE_PROJECT_API_REQUEST_TIMEOUT_MILLIS\n    });\n    const projectInfo = await operation_poller_1.pollOperation({\n      pollerName: \"Add Firebase Poller\",\n      apiOrigin: api.firebaseApiOrigin,\n      apiVersion: \"v1beta1\",\n      operationResourceName: response.body.name\n    });\n    return projectInfo;\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    throw new error_1.FirebaseError(\"Failed to add Firebase to Google Cloud Platform project. See firebase-debug.log for more info.\", {\n      exit: 2,\n      original: err\n    });\n  }\n}\n\nexports.addFirebaseToCloudProject = addFirebaseToCloudProject;\n\nasync function getProjectPage(apiResource, options) {\n  const queryParams = {\n    pageSize: `${options.pageSize}`\n  };\n\n  if (options.pageToken) {\n    queryParams.pageToken = options.pageToken;\n  }\n\n  const res = await firebaseAPIClient.request({\n    method: \"GET\",\n    path: apiResource,\n    queryParams,\n    timeout: TIMEOUT_MILLIS,\n    skipLog: {\n      resBody: true\n    }\n  });\n  const projects = res.body[options.responseKey];\n  const token = res.body.nextPageToken;\n  return {\n    projects: Array.isArray(projects) ? projects : [],\n    nextPageToken: typeof token === \"string\" ? token : undefined\n  };\n}\n\nasync function getFirebaseProjectPage(pageSize = PROJECT_LIST_PAGE_SIZE, pageToken) {\n  let projectPage;\n\n  try {\n    projectPage = await getProjectPage(\"/projects\", {\n      responseKey: \"results\",\n      pageSize,\n      pageToken\n    });\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    throw new error_1.FirebaseError(\"Failed to list Firebase projects. See firebase-debug.log for more info.\", {\n      exit: 2,\n      original: err\n    });\n  }\n\n  return projectPage;\n}\n\nexports.getFirebaseProjectPage = getFirebaseProjectPage;\n\nasync function getAvailableCloudProjectPage(pageSize = PROJECT_LIST_PAGE_SIZE, pageToken) {\n  try {\n    return await getProjectPage(\"/availableProjects\", {\n      responseKey: \"projectInfo\",\n      pageSize,\n      pageToken\n    });\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    throw new error_1.FirebaseError(\"Failed to list available Google Cloud Platform projects. See firebase-debug.log for more info.\", {\n      exit: 2,\n      original: err\n    });\n  }\n}\n\nexports.getAvailableCloudProjectPage = getAvailableCloudProjectPage;\n\nasync function listFirebaseProjects(pageSize) {\n  const projects = [];\n  let nextPageToken;\n\n  do {\n    const projectPage = await getFirebaseProjectPage(pageSize, nextPageToken);\n    projects.push(...projectPage.projects);\n    nextPageToken = projectPage.nextPageToken;\n  } while (nextPageToken);\n\n  return projects;\n}\n\nexports.listFirebaseProjects = listFirebaseProjects;\n\nasync function getFirebaseProject(projectId) {\n  try {\n    const res = await firebaseAPIClient.request({\n      method: \"GET\",\n      path: `/projects/${projectId}`,\n      timeout: TIMEOUT_MILLIS\n    });\n    return res.body;\n  } catch (err) {\n    logger_1.logger.debug(err.message);\n    throw new error_1.FirebaseError(`Failed to get Firebase project ${projectId}. ` + \"Please make sure the project exists and your account has permission to access it.\", {\n      exit: 2,\n      original: err\n    });\n  }\n}\n\nexports.getFirebaseProject = getFirebaseProject;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/management/projects.js"],"names":["Object","defineProperty","exports","value","getFirebaseProject","listFirebaseProjects","getAvailableCloudProjectPage","getFirebaseProjectPage","addFirebaseToCloudProject","createCloudProject","promptAvailableProjectId","getOrPromptProject","addFirebaseToCloudProjectAndLog","createFirebaseProjectAndLog","PROJECTS_CREATE_QUESTIONS","ProjectParentResourceType","_","require","clc","ora","apiv2_1","error_1","operation_poller_1","prompt_1","api","logger_1","utils","TIMEOUT_MILLIS","MAXIMUM_PROMPT_LIST","PROJECT_LIST_PAGE_SIZE","CREATE_PROJECT_API_REQUEST_TIMEOUT_MILLIS","type","name","default","message","yellow","firebaseAPIClient","Client","urlPrefix","firebaseApiOrigin","auth","apiVersion","projectId","options","spinner","start","succeed","err","fail","projectInfo","logNewFirebaseProjectInfo","logger","info","process","platform","bold","displayName","project","selectProjectInteractively","pageSize","projects","nextPageToken","length","FirebaseError","debug","selectProjectByPrompting","selectProjectFromList","promptOnce","choices","filter","p","map","orderBy","logBullet","find","getProjectId","cloudProject","resourceName","substring","lastIndexOf","response","request","origin","resourceManagerOrigin","timeout","data","parent","parentResource","pollOperation","pollerName","apiOrigin","operationResourceName","body","status","exit","original","getProjectPage","apiResource","queryParams","pageToken","res","method","path","skipLog","resBody","responseKey","token","Array","isArray","undefined","projectPage","push"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,oBAAR,GAA+BH,OAAO,CAACI,4BAAR,GAAuCJ,OAAO,CAACK,sBAAR,GAAiCL,OAAO,CAACM,yBAAR,GAAoCN,OAAO,CAACO,kBAAR,GAA6BP,OAAO,CAACQ,wBAAR,GAAmCR,OAAO,CAACS,kBAAR,GAA6BT,OAAO,CAACU,+BAAR,GAA0CV,OAAO,CAACW,2BAAR,GAAsCX,OAAO,CAACY,yBAAR,GAAoCZ,OAAO,CAACa,yBAAR,GAAoC,KAAK,CAAla;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,qBAAD,CAAlC;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMO,GAAG,GAAGP,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMU,cAAc,GAAG,KAAvB;AACA,MAAMC,mBAAmB,GAAG,GAA5B;AACA,MAAMC,sBAAsB,GAAG,IAA/B;AACA,MAAMC,yCAAyC,GAAG,KAAlD;AACA,IAAIf,yBAAJ;;AACA,CAAC,UAAUA,yBAAV,EAAqC;AAClCA,EAAAA,yBAAyB,CAAC,cAAD,CAAzB,GAA4C,cAA5C;AACAA,EAAAA,yBAAyB,CAAC,QAAD,CAAzB,GAAsC,QAAtC;AACH,CAHD,EAGGA,yBAAyB,GAAGb,OAAO,CAACa,yBAAR,KAAsCb,OAAO,CAACa,yBAAR,GAAoC,EAA1E,CAH/B;;AAIAb,OAAO,CAACY,yBAAR,GAAoC,CAChC;AACIiB,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,IAAI,EAAE,WAFV;AAGIC,EAAAA,OAAO,EAAE,EAHb;AAIIC,EAAAA,OAAO,EAAE,wCACJ,IAAGhB,GAAG,CAACiB,MAAJ,CAAW,SAAX,CAAsB;AALlC,CADgC,EAQhC;AACIJ,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,IAAI,EAAE,aAFV;AAGIC,EAAAA,OAAO,EAAE,EAHb;AAIIC,EAAAA,OAAO,EAAE;AAJb,CARgC,CAApC;AAeA,MAAME,iBAAiB,GAAG,IAAIhB,OAAO,CAACiB,MAAZ,CAAmB;AACzCC,EAAAA,SAAS,EAAEd,GAAG,CAACe,iBAD0B;AAEzCC,EAAAA,IAAI,EAAE,IAFmC;AAGzCC,EAAAA,UAAU,EAAE;AAH6B,CAAnB,CAA1B;;AAKA,eAAe5B,2BAAf,CAA2C6B,SAA3C,EAAsDC,OAAtD,EAA+D;AAC3D,QAAMC,OAAO,GAAGzB,GAAG,CAAC,wCAAD,CAAH,CAA8C0B,KAA9C,EAAhB;;AACA,MAAI;AACA,UAAMpC,kBAAkB,CAACiC,SAAD,EAAYC,OAAZ,CAAxB;AACAC,IAAAA,OAAO,CAACE,OAAR;AACH,GAHD,CAIA,OAAOC,GAAP,EAAY;AACRH,IAAAA,OAAO,CAACI,IAAR;AACA,UAAMD,GAAN;AACH;;AACD,SAAOnC,+BAA+B,CAAC8B,SAAD,CAAtC;AACH;;AACDxC,OAAO,CAACW,2BAAR,GAAsCA,2BAAtC;;AACA,eAAeD,+BAAf,CAA+C8B,SAA/C,EAA0D;AACtD,MAAIO,WAAJ;AACA,QAAML,OAAO,GAAGzB,GAAG,CAAC,4DAAD,CAAH,CAAkE0B,KAAlE,EAAhB;;AACA,MAAI;AACAI,IAAAA,WAAW,GAAG,MAAMzC,yBAAyB,CAACkC,SAAD,CAA7C;AACH,GAFD,CAGA,OAAOK,GAAP,EAAY;AACRH,IAAAA,OAAO,CAACI,IAAR;AACA,UAAMD,GAAN;AACH;;AACDH,EAAAA,OAAO,CAACE,OAAR;AACAI,EAAAA,yBAAyB,CAACD,WAAD,CAAzB;AACA,SAAOA,WAAP;AACH;;AACD/C,OAAO,CAACU,+BAAR,GAA0CA,+BAA1C;;AACA,SAASsC,yBAAT,CAAmCD,WAAnC,EAAgD;AAC5CxB,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqB,EAArB;;AACA,MAAIC,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AAC9B7B,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqB,yCAArB;AACH,GAFD,MAGK;AACD3B,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqB,+CAArB;AACH;;AACD3B,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqB,EAArB;AACA3B,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqB,sBAArB;AACA3B,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAsB,oBAAmBlC,GAAG,CAACqC,IAAJ,CAASN,WAAW,CAACP,SAArB,CAAgC,EAAzE;AACAjB,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAsB,sBAAqBlC,GAAG,CAACqC,IAAJ,CAASN,WAAW,CAACO,WAArB,CAAkC,EAA7E;AACA/B,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqB,EAArB;AACA3B,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAqB,kCAArB;AACA3B,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,CAAsB,+CAA8ClC,GAAG,CAACqC,IAAJ,CAASN,WAAW,CAACP,SAArB,CAAgC,WAApG;AACH;;AACD,eAAe/B,kBAAf,CAAkCgC,OAAlC,EAA2C;AACvC,MAAIA,OAAO,CAACc,OAAZ,EAAqB;AACjB,WAAO,MAAMrD,kBAAkB,CAACuC,OAAO,CAACc,OAAT,CAA/B;AACH;;AACD,SAAOC,0BAA0B,EAAjC;AACH;;AACDxD,OAAO,CAACS,kBAAR,GAA6BA,kBAA7B;;AACA,eAAe+C,0BAAf,CAA0CC,QAAQ,GAAG/B,mBAArD,EAA0E;AACtE,QAAM;AAAEgC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA8B,MAAMtD,sBAAsB,CAACoD,QAAD,CAAhE;;AACA,MAAIC,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACvB,UAAM,IAAIzC,OAAO,CAAC0C,aAAZ,CAA0B,8DAA1B,CAAN;AACH;;AACD,MAAIF,aAAJ,EAAmB;AACfpC,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBa,KAAhB,CAAuB,mBAAkBJ,QAAQ,CAACE,MAAO,iCAAzD;AACA,WAAOG,wBAAwB,EAA/B;AACH;;AACD,SAAOC,qBAAqB,CAACN,QAAD,CAA5B;AACH;;AACD,eAAeK,wBAAf,GAA0C;AACtC,QAAMvB,SAAS,GAAG,MAAMnB,QAAQ,CAAC4C,UAAT,CAAoB;AACxCpC,IAAAA,IAAI,EAAE,OADkC;AAExCG,IAAAA,OAAO,EAAE;AAF+B,GAApB,CAAxB;AAIA,SAAO,MAAM9B,kBAAkB,CAACsC,SAAD,CAA/B;AACH;;AACD,eAAewB,qBAAf,CAAqCN,QAAQ,GAAG,EAAhD,EAAoD;AAChD,MAAIQ,OAAO,GAAGR,QAAQ,CACjBS,MADS,CACDC,CAAD,IAAO,CAAC,CAACA,CADP,EAETC,GAFS,CAEJD,CAAD,IAAO;AACZ,WAAO;AACHtC,MAAAA,IAAI,EAAEsC,CAAC,CAAC5B,SAAF,IAAe4B,CAAC,CAACd,WAAF,GAAiB,KAAIc,CAAC,CAACd,WAAY,GAAnC,GAAwC,EAAvD,CADH;AAEHrD,MAAAA,KAAK,EAAEmE,CAAC,CAAC5B;AAFN,KAAP;AAIH,GAPa,CAAd;AAQA0B,EAAAA,OAAO,GAAGpD,CAAC,CAACwD,OAAF,CAAUJ,OAAV,EAAmB,CAAC,MAAD,CAAnB,EAA6B,CAAC,KAAD,CAA7B,CAAV;;AACA,MAAIA,OAAO,CAACN,MAAR,IAAkB,EAAtB,EAA0B;AACtBpC,IAAAA,KAAK,CAAC+C,SAAN,CAAiB,+EAAD,GACX,wCAAuCvD,GAAG,CAACqC,IAAJ,CAAS,sCAAT,CAAiD,KAD7F;AAEH;;AACD,QAAMb,SAAS,GAAG,MAAMnB,QAAQ,CAAC4C,UAAT,CAAoB;AACxCpC,IAAAA,IAAI,EAAE,MADkC;AAExCC,IAAAA,IAAI,EAAE,IAFkC;AAGxCE,IAAAA,OAAO,EAAE,uDAH+B;AAIxCkC,IAAAA;AAJwC,GAApB,CAAxB;AAMA,QAAMX,OAAO,GAAGG,QAAQ,CAACc,IAAT,CAAeJ,CAAD,IAAOA,CAAC,CAAC5B,SAAF,KAAgBA,SAArC,CAAhB;;AACA,MAAI,CAACe,OAAL,EAAc;AACV,UAAM,IAAIpC,OAAO,CAAC0C,aAAZ,CAA0B,0CAA1B,CAAN;AACH;;AACD,SAAON,OAAP;AACH;;AACD,SAASkB,YAAT,CAAsBC,YAAtB,EAAoC;AAChC,QAAMC,YAAY,GAAGD,YAAY,CAACnB,OAAlC;AACA,SAAOoB,YAAY,CAACC,SAAb,CAAuBD,YAAY,CAACE,WAAb,CAAyB,GAAzB,IAAgC,CAAvD,CAAP;AACH;;AACD,eAAerE,wBAAf,GAA0C;AACtC,QAAM;AAAEkD,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA8B,MAAMvD,4BAA4B,CAACsB,mBAAD,CAAtE;;AACA,MAAIgC,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACvB,UAAM,IAAIzC,OAAO,CAAC0C,aAAZ,CAA0B,wEAA1B,CAAN;AACH;;AACD,MAAIF,aAAJ,EAAmB;AACf,WAAO,MAAMtC,QAAQ,CAAC4C,UAAT,CAAoB;AAC7BpC,MAAAA,IAAI,EAAE,OADuB;AAE7BG,MAAAA,OAAO,EAAE;AAFoB,KAApB,CAAb;AAIH,GALD,MAMK;AACD,QAAIkC,OAAO,GAAGR,QAAQ,CACjBS,MADS,CACDC,CAAD,IAAO,CAAC,CAACA,CADP,EAETC,GAFS,CAEJD,CAAD,IAAO;AACZ,YAAM5B,SAAS,GAAGiC,YAAY,CAACL,CAAD,CAA9B;AACA,aAAO;AACHtC,QAAAA,IAAI,EAAEU,SAAS,IAAI4B,CAAC,CAACd,WAAF,GAAiB,KAAIc,CAAC,CAACd,WAAY,GAAnC,GAAwC,EAA5C,CADZ;AAEHrD,QAAAA,KAAK,EAAEuC;AAFJ,OAAP;AAIH,KARa,CAAd;AASA0B,IAAAA,OAAO,GAAGpD,CAAC,CAACwD,OAAF,CAAUJ,OAAV,EAAmB,CAAC,MAAD,CAAnB,EAA6B,CAAC,KAAD,CAA7B,CAAV;AACA,WAAO,MAAM7C,QAAQ,CAAC4C,UAAT,CAAoB;AAC7BpC,MAAAA,IAAI,EAAE,MADuB;AAE7BC,MAAAA,IAAI,EAAE,IAFuB;AAG7BE,MAAAA,OAAO,EAAE,0EAHoB;AAI7BkC,MAAAA;AAJ6B,KAApB,CAAb;AAMH;AACJ;;AACDlE,OAAO,CAACQ,wBAAR,GAAmCA,wBAAnC;;AACA,eAAeD,kBAAf,CAAkCiC,SAAlC,EAA6CC,OAA7C,EAAsD;AAClD,MAAI;AACA,UAAMqC,QAAQ,GAAG,MAAMxD,GAAG,CAACyD,OAAJ,CAAY,MAAZ,EAAoB,cAApB,EAAoC;AACvDzC,MAAAA,IAAI,EAAE,IADiD;AAEvD0C,MAAAA,MAAM,EAAE1D,GAAG,CAAC2D,qBAF2C;AAGvDC,MAAAA,OAAO,EAAEtD,yCAH8C;AAIvDuD,MAAAA,IAAI,EAAE;AAAE3C,QAAAA,SAAF;AAAaV,QAAAA,IAAI,EAAEW,OAAO,CAACa,WAAR,IAAuBd,SAA1C;AAAqD4C,QAAAA,MAAM,EAAE3C,OAAO,CAAC4C;AAArE;AAJiD,KAApC,CAAvB;AAMA,UAAMtC,WAAW,GAAG,MAAM3B,kBAAkB,CAACkE,aAAnB,CAAiC;AACvDC,MAAAA,UAAU,EAAE,yBAD2C;AAEvDC,MAAAA,SAAS,EAAElE,GAAG,CAAC2D,qBAFwC;AAGvD1C,MAAAA,UAAU,EAAE,IAH2C;AAIvDkD,MAAAA,qBAAqB,EAAEX,QAAQ,CAACY,IAAT,CAAc5D;AAJkB,KAAjC,CAA1B;AAMA,WAAOiB,WAAP;AACH,GAdD,CAeA,OAAOF,GAAP,EAAY;AACR,QAAIA,GAAG,CAAC8C,MAAJ,KAAe,GAAnB,EAAwB;AACpB,YAAM,IAAIxE,OAAO,CAAC0C,aAAZ,CAA2B,uEAAsE7C,GAAG,CAACqC,IAAJ,CAASb,SAAT,CAAoB,8CAArH,EAAoK;AACtKoD,QAAAA,IAAI,EAAE,CADgK;AAEtKC,QAAAA,QAAQ,EAAEhD;AAF4J,OAApK,CAAN;AAIH,KALD,MAMK;AACD,YAAM,IAAI1B,OAAO,CAAC0C,aAAZ,CAA0B,iEAA1B,EAA6F;AAC/F+B,QAAAA,IAAI,EAAE,CADyF;AAE/FC,QAAAA,QAAQ,EAAEhD;AAFqF,OAA7F,CAAN;AAIH;AACJ;AACJ;;AACD7C,OAAO,CAACO,kBAAR,GAA6BA,kBAA7B;;AACA,eAAeD,yBAAf,CAAyCkC,SAAzC,EAAoD;AAChD,MAAI;AACA,UAAMsC,QAAQ,GAAG,MAAMxD,GAAG,CAACyD,OAAJ,CAAY,MAAZ,EAAqB,qBAAoBvC,SAAU,cAAnD,EAAkE;AACrFF,MAAAA,IAAI,EAAE,IAD+E;AAErF0C,MAAAA,MAAM,EAAE1D,GAAG,CAACe,iBAFyE;AAGrF6C,MAAAA,OAAO,EAAEtD;AAH4E,KAAlE,CAAvB;AAKA,UAAMmB,WAAW,GAAG,MAAM3B,kBAAkB,CAACkE,aAAnB,CAAiC;AACvDC,MAAAA,UAAU,EAAE,qBAD2C;AAEvDC,MAAAA,SAAS,EAAElE,GAAG,CAACe,iBAFwC;AAGvDE,MAAAA,UAAU,EAAE,SAH2C;AAIvDkD,MAAAA,qBAAqB,EAAEX,QAAQ,CAACY,IAAT,CAAc5D;AAJkB,KAAjC,CAA1B;AAMA,WAAOiB,WAAP;AACH,GAbD,CAcA,OAAOF,GAAP,EAAY;AACRtB,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBa,KAAhB,CAAsBjB,GAAG,CAACb,OAA1B;AACA,UAAM,IAAIb,OAAO,CAAC0C,aAAZ,CAA0B,gGAA1B,EAA4H;AAAE+B,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,QAAQ,EAAEhD;AAArB,KAA5H,CAAN;AACH;AACJ;;AACD7C,OAAO,CAACM,yBAAR,GAAoCA,yBAApC;;AACA,eAAewF,cAAf,CAA8BC,WAA9B,EAA2CtD,OAA3C,EAAoD;AAChD,QAAMuD,WAAW,GAAG;AAChBvC,IAAAA,QAAQ,EAAG,GAAEhB,OAAO,CAACgB,QAAS;AADd,GAApB;;AAGA,MAAIhB,OAAO,CAACwD,SAAZ,EAAuB;AACnBD,IAAAA,WAAW,CAACC,SAAZ,GAAwBxD,OAAO,CAACwD,SAAhC;AACH;;AACD,QAAMC,GAAG,GAAG,MAAMhE,iBAAiB,CAAC6C,OAAlB,CAA0B;AACxCoB,IAAAA,MAAM,EAAE,KADgC;AAExCC,IAAAA,IAAI,EAAEL,WAFkC;AAGxCC,IAAAA,WAHwC;AAIxCd,IAAAA,OAAO,EAAEzD,cAJ+B;AAKxC4E,IAAAA,OAAO,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AAL+B,GAA1B,CAAlB;AAOA,QAAM5C,QAAQ,GAAGwC,GAAG,CAACR,IAAJ,CAASjD,OAAO,CAAC8D,WAAjB,CAAjB;AACA,QAAMC,KAAK,GAAGN,GAAG,CAACR,IAAJ,CAAS/B,aAAvB;AACA,SAAO;AACHD,IAAAA,QAAQ,EAAE+C,KAAK,CAACC,OAAN,CAAchD,QAAd,IAA0BA,QAA1B,GAAqC,EAD5C;AAEHC,IAAAA,aAAa,EAAE,OAAO6C,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCG;AAFhD,GAAP;AAIH;;AACD,eAAetG,sBAAf,CAAsCoD,QAAQ,GAAG9B,sBAAjD,EAAyEsE,SAAzE,EAAoF;AAChF,MAAIW,WAAJ;;AACA,MAAI;AACAA,IAAAA,WAAW,GAAG,MAAMd,cAAc,CAAC,WAAD,EAAc;AAC5CS,MAAAA,WAAW,EAAE,SAD+B;AAE5C9C,MAAAA,QAF4C;AAG5CwC,MAAAA;AAH4C,KAAd,CAAlC;AAKH,GAND,CAOA,OAAOpD,GAAP,EAAY;AACRtB,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBa,KAAhB,CAAsBjB,GAAG,CAACb,OAA1B;AACA,UAAM,IAAIb,OAAO,CAAC0C,aAAZ,CAA0B,yEAA1B,EAAqG;AAAE+B,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,QAAQ,EAAEhD;AAArB,KAArG,CAAN;AACH;;AACD,SAAO+D,WAAP;AACH;;AACD5G,OAAO,CAACK,sBAAR,GAAiCA,sBAAjC;;AACA,eAAeD,4BAAf,CAA4CqD,QAAQ,GAAG9B,sBAAvD,EAA+EsE,SAA/E,EAA0F;AACtF,MAAI;AACA,WAAO,MAAMH,cAAc,CAAC,oBAAD,EAAuB;AAC9CS,MAAAA,WAAW,EAAE,aADiC;AAE9C9C,MAAAA,QAF8C;AAG9CwC,MAAAA;AAH8C,KAAvB,CAA3B;AAKH,GAND,CAOA,OAAOpD,GAAP,EAAY;AACRtB,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBa,KAAhB,CAAsBjB,GAAG,CAACb,OAA1B;AACA,UAAM,IAAIb,OAAO,CAAC0C,aAAZ,CAA0B,gGAA1B,EAA4H;AAAE+B,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,QAAQ,EAAEhD;AAArB,KAA5H,CAAN;AACH;AACJ;;AACD7C,OAAO,CAACI,4BAAR,GAAuCA,4BAAvC;;AACA,eAAeD,oBAAf,CAAoCsD,QAApC,EAA8C;AAC1C,QAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,aAAJ;;AACA,KAAG;AACC,UAAMiD,WAAW,GAAG,MAAMvG,sBAAsB,CAACoD,QAAD,EAAWE,aAAX,CAAhD;AACAD,IAAAA,QAAQ,CAACmD,IAAT,CAAc,GAAGD,WAAW,CAAClD,QAA7B;AACAC,IAAAA,aAAa,GAAGiD,WAAW,CAACjD,aAA5B;AACH,GAJD,QAISA,aAJT;;AAKA,SAAOD,QAAP;AACH;;AACD1D,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;;AACA,eAAeD,kBAAf,CAAkCsC,SAAlC,EAA6C;AACzC,MAAI;AACA,UAAM0D,GAAG,GAAG,MAAMhE,iBAAiB,CAAC6C,OAAlB,CAA0B;AACxCoB,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,IAAI,EAAG,aAAY5D,SAAU,EAFW;AAGxC0C,MAAAA,OAAO,EAAEzD;AAH+B,KAA1B,CAAlB;AAKA,WAAOyE,GAAG,CAACR,IAAX;AACH,GAPD,CAQA,OAAO7C,GAAP,EAAY;AACRtB,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBa,KAAhB,CAAsBjB,GAAG,CAACb,OAA1B;AACA,UAAM,IAAIb,OAAO,CAAC0C,aAAZ,CAA2B,kCAAiCrB,SAAU,IAA5C,GAC5B,mFADE,EACmF;AAAEoD,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,QAAQ,EAAEhD;AAArB,KADnF,CAAN;AAEH;AACJ;;AACD7C,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFirebaseProject = exports.listFirebaseProjects = exports.getAvailableCloudProjectPage = exports.getFirebaseProjectPage = exports.addFirebaseToCloudProject = exports.createCloudProject = exports.promptAvailableProjectId = exports.getOrPromptProject = exports.addFirebaseToCloudProjectAndLog = exports.createFirebaseProjectAndLog = exports.PROJECTS_CREATE_QUESTIONS = exports.ProjectParentResourceType = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst ora = require(\"ora\");\nconst apiv2_1 = require(\"../apiv2\");\nconst error_1 = require(\"../error\");\nconst operation_poller_1 = require(\"../operation-poller\");\nconst prompt_1 = require(\"../prompt\");\nconst api = require(\"../api\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nconst TIMEOUT_MILLIS = 30000;\nconst MAXIMUM_PROMPT_LIST = 100;\nconst PROJECT_LIST_PAGE_SIZE = 1000;\nconst CREATE_PROJECT_API_REQUEST_TIMEOUT_MILLIS = 15000;\nvar ProjectParentResourceType;\n(function (ProjectParentResourceType) {\n    ProjectParentResourceType[\"ORGANIZATION\"] = \"organization\";\n    ProjectParentResourceType[\"FOLDER\"] = \"folder\";\n})(ProjectParentResourceType = exports.ProjectParentResourceType || (exports.ProjectParentResourceType = {}));\nexports.PROJECTS_CREATE_QUESTIONS = [\n    {\n        type: \"input\",\n        name: \"projectId\",\n        default: \"\",\n        message: \"Please specify a unique project id \" +\n            `(${clc.yellow(\"warning\")}: cannot be modified afterward) [6-30 characters]:\\n`,\n    },\n    {\n        type: \"input\",\n        name: \"displayName\",\n        default: \"\",\n        message: \"What would you like to call your project? (defaults to your project ID)\",\n    },\n];\nconst firebaseAPIClient = new apiv2_1.Client({\n    urlPrefix: api.firebaseApiOrigin,\n    auth: true,\n    apiVersion: \"v1beta1\",\n});\nasync function createFirebaseProjectAndLog(projectId, options) {\n    const spinner = ora(\"Creating Google Cloud Platform project\").start();\n    try {\n        await createCloudProject(projectId, options);\n        spinner.succeed();\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n    return addFirebaseToCloudProjectAndLog(projectId);\n}\nexports.createFirebaseProjectAndLog = createFirebaseProjectAndLog;\nasync function addFirebaseToCloudProjectAndLog(projectId) {\n    let projectInfo;\n    const spinner = ora(\"Adding Firebase resources to Google Cloud Platform project\").start();\n    try {\n        projectInfo = await addFirebaseToCloudProject(projectId);\n    }\n    catch (err) {\n        spinner.fail();\n        throw err;\n    }\n    spinner.succeed();\n    logNewFirebaseProjectInfo(projectInfo);\n    return projectInfo;\n}\nexports.addFirebaseToCloudProjectAndLog = addFirebaseToCloudProjectAndLog;\nfunction logNewFirebaseProjectInfo(projectInfo) {\n    logger_1.logger.info(\"\");\n    if (process.platform === \"win32\") {\n        logger_1.logger.info(\"=== Your Firebase project is ready! ===\");\n    }\n    else {\n        logger_1.logger.info(\"ðŸŽ‰ðŸŽ‰ðŸŽ‰ Your Firebase project is ready! ðŸŽ‰ðŸŽ‰ðŸŽ‰\");\n    }\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(\"Project information:\");\n    logger_1.logger.info(`   - Project ID: ${clc.bold(projectInfo.projectId)}`);\n    logger_1.logger.info(`   - Project Name: ${clc.bold(projectInfo.displayName)}`);\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(\"Firebase console is available at\");\n    logger_1.logger.info(`https://console.firebase.google.com/project/${clc.bold(projectInfo.projectId)}/overview`);\n}\nasync function getOrPromptProject(options) {\n    if (options.project) {\n        return await getFirebaseProject(options.project);\n    }\n    return selectProjectInteractively();\n}\nexports.getOrPromptProject = getOrPromptProject;\nasync function selectProjectInteractively(pageSize = MAXIMUM_PROMPT_LIST) {\n    const { projects, nextPageToken } = await getFirebaseProjectPage(pageSize);\n    if (projects.length === 0) {\n        throw new error_1.FirebaseError(\"There are no Firebase projects associated with this account.\");\n    }\n    if (nextPageToken) {\n        logger_1.logger.debug(`Found more than ${projects.length} projects, selecting via prompt`);\n        return selectProjectByPrompting();\n    }\n    return selectProjectFromList(projects);\n}\nasync function selectProjectByPrompting() {\n    const projectId = await prompt_1.promptOnce({\n        type: \"input\",\n        message: \"Please input the project ID you would like to use:\",\n    });\n    return await getFirebaseProject(projectId);\n}\nasync function selectProjectFromList(projects = []) {\n    let choices = projects\n        .filter((p) => !!p)\n        .map((p) => {\n        return {\n            name: p.projectId + (p.displayName ? ` (${p.displayName})` : \"\"),\n            value: p.projectId,\n        };\n    });\n    choices = _.orderBy(choices, [\"name\"], [\"asc\"]);\n    if (choices.length >= 25) {\n        utils.logBullet(`Don't want to scroll through all your projects? If you know your project ID, ` +\n            `you can initialize it directly using ${clc.bold(\"firebase init --project <project_id>\")}.\\n`);\n    }\n    const projectId = await prompt_1.promptOnce({\n        type: \"list\",\n        name: \"id\",\n        message: \"Select a default Firebase project for this directory:\",\n        choices,\n    });\n    const project = projects.find((p) => p.projectId === projectId);\n    if (!project) {\n        throw new error_1.FirebaseError(\"Unexpected error. Project does not exist\");\n    }\n    return project;\n}\nfunction getProjectId(cloudProject) {\n    const resourceName = cloudProject.project;\n    return resourceName.substring(resourceName.lastIndexOf(\"/\") + 1);\n}\nasync function promptAvailableProjectId() {\n    const { projects, nextPageToken } = await getAvailableCloudProjectPage(MAXIMUM_PROMPT_LIST);\n    if (projects.length === 0) {\n        throw new error_1.FirebaseError(\"There are no available Google Cloud projects to add Firebase services.\");\n    }\n    if (nextPageToken) {\n        return await prompt_1.promptOnce({\n            type: \"input\",\n            message: \"Please input the ID of the Google Cloud Project you would like to add Firebase:\",\n        });\n    }\n    else {\n        let choices = projects\n            .filter((p) => !!p)\n            .map((p) => {\n            const projectId = getProjectId(p);\n            return {\n                name: projectId + (p.displayName ? ` (${p.displayName})` : \"\"),\n                value: projectId,\n            };\n        });\n        choices = _.orderBy(choices, [\"name\"], [\"asc\"]);\n        return await prompt_1.promptOnce({\n            type: \"list\",\n            name: \"id\",\n            message: \"Select the Google Cloud Platform project you would like to add Firebase:\",\n            choices,\n        });\n    }\n}\nexports.promptAvailableProjectId = promptAvailableProjectId;\nasync function createCloudProject(projectId, options) {\n    try {\n        const response = await api.request(\"POST\", \"/v1/projects\", {\n            auth: true,\n            origin: api.resourceManagerOrigin,\n            timeout: CREATE_PROJECT_API_REQUEST_TIMEOUT_MILLIS,\n            data: { projectId, name: options.displayName || projectId, parent: options.parentResource },\n        });\n        const projectInfo = await operation_poller_1.pollOperation({\n            pollerName: \"Project Creation Poller\",\n            apiOrigin: api.resourceManagerOrigin,\n            apiVersion: \"v1\",\n            operationResourceName: response.body.name,\n        });\n        return projectInfo;\n    }\n    catch (err) {\n        if (err.status === 409) {\n            throw new error_1.FirebaseError(`Failed to create project because there is already a project with ID ${clc.bold(projectId)}. Please try again with a unique project ID.`, {\n                exit: 2,\n                original: err,\n            });\n        }\n        else {\n            throw new error_1.FirebaseError(\"Failed to create project. See firebase-debug.log for more info.\", {\n                exit: 2,\n                original: err,\n            });\n        }\n    }\n}\nexports.createCloudProject = createCloudProject;\nasync function addFirebaseToCloudProject(projectId) {\n    try {\n        const response = await api.request(\"POST\", `/v1beta1/projects/${projectId}:addFirebase`, {\n            auth: true,\n            origin: api.firebaseApiOrigin,\n            timeout: CREATE_PROJECT_API_REQUEST_TIMEOUT_MILLIS,\n        });\n        const projectInfo = await operation_poller_1.pollOperation({\n            pollerName: \"Add Firebase Poller\",\n            apiOrigin: api.firebaseApiOrigin,\n            apiVersion: \"v1beta1\",\n            operationResourceName: response.body.name,\n        });\n        return projectInfo;\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        throw new error_1.FirebaseError(\"Failed to add Firebase to Google Cloud Platform project. See firebase-debug.log for more info.\", { exit: 2, original: err });\n    }\n}\nexports.addFirebaseToCloudProject = addFirebaseToCloudProject;\nasync function getProjectPage(apiResource, options) {\n    const queryParams = {\n        pageSize: `${options.pageSize}`,\n    };\n    if (options.pageToken) {\n        queryParams.pageToken = options.pageToken;\n    }\n    const res = await firebaseAPIClient.request({\n        method: \"GET\",\n        path: apiResource,\n        queryParams,\n        timeout: TIMEOUT_MILLIS,\n        skipLog: { resBody: true },\n    });\n    const projects = res.body[options.responseKey];\n    const token = res.body.nextPageToken;\n    return {\n        projects: Array.isArray(projects) ? projects : [],\n        nextPageToken: typeof token === \"string\" ? token : undefined,\n    };\n}\nasync function getFirebaseProjectPage(pageSize = PROJECT_LIST_PAGE_SIZE, pageToken) {\n    let projectPage;\n    try {\n        projectPage = await getProjectPage(\"/projects\", {\n            responseKey: \"results\",\n            pageSize,\n            pageToken,\n        });\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        throw new error_1.FirebaseError(\"Failed to list Firebase projects. See firebase-debug.log for more info.\", { exit: 2, original: err });\n    }\n    return projectPage;\n}\nexports.getFirebaseProjectPage = getFirebaseProjectPage;\nasync function getAvailableCloudProjectPage(pageSize = PROJECT_LIST_PAGE_SIZE, pageToken) {\n    try {\n        return await getProjectPage(\"/availableProjects\", {\n            responseKey: \"projectInfo\",\n            pageSize,\n            pageToken,\n        });\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        throw new error_1.FirebaseError(\"Failed to list available Google Cloud Platform projects. See firebase-debug.log for more info.\", { exit: 2, original: err });\n    }\n}\nexports.getAvailableCloudProjectPage = getAvailableCloudProjectPage;\nasync function listFirebaseProjects(pageSize) {\n    const projects = [];\n    let nextPageToken;\n    do {\n        const projectPage = await getFirebaseProjectPage(pageSize, nextPageToken);\n        projects.push(...projectPage.projects);\n        nextPageToken = projectPage.nextPageToken;\n    } while (nextPageToken);\n    return projects;\n}\nexports.listFirebaseProjects = listFirebaseProjects;\nasync function getFirebaseProject(projectId) {\n    try {\n        const res = await firebaseAPIClient.request({\n            method: \"GET\",\n            path: `/projects/${projectId}`,\n            timeout: TIMEOUT_MILLIS,\n        });\n        return res.body;\n    }\n    catch (err) {\n        logger_1.logger.debug(err.message);\n        throw new error_1.FirebaseError(`Failed to get Firebase project ${projectId}. ` +\n            \"Please make sure the project exists and your account has permission to access it.\", { exit: 2, original: err });\n    }\n}\nexports.getFirebaseProject = getFirebaseProject;\n"]},"metadata":{},"sourceType":"script"}