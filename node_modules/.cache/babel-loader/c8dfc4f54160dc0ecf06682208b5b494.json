{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"util\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst spawn = require(\"cross-spawn\");\n\nconst error_1 = require(\"../../../error\");\n\nconst prompt_1 = require(\"../../../prompt\");\n\nconst utils = require(\"../../../utils\");\n\nconst go = require(\"../../../deploy/functions/runtimes/golang\");\n\nconst logger_1 = require(\"../../../logger\");\n\nconst clc = require(\"cli-color\");\n\nconst RUNTIME_VERSION = \"1.13\";\nconst TEMPLATE_ROOT = path.resolve(__dirname, \"../../../../templates/init/functions/golang\");\nconst MAIN_TEMPLATE = fs.readFileSync(path.join(TEMPLATE_ROOT, \"functions.go\"), \"utf8\");\nconst GITIGNORE_TEMPLATE = fs.readFileSync(path.join(TEMPLATE_ROOT, \"_gitignore\"), \"utf8\");\n\nasync function init(setup, config) {\n  await writeModFile(config);\n  const modName = config.get(\"functions.go.module\");\n  const [pkg] = modName.split(\"/\").slice(-1);\n  await config.askWriteProjectFile(\"functions/functions.go\", MAIN_TEMPLATE.replace(\"PACKAGE\", pkg));\n  await config.askWriteProjectFile(\"functions/.gitignore\", GITIGNORE_TEMPLATE);\n}\n\nasync function writeModFile(config) {\n  const modPath = config.path(\"functions/go.mod\");\n\n  if (await util_1.promisify(fs.exists)(modPath)) {\n    const shoudlWriteModFile = await prompt_1.promptOnce({\n      type: \"confirm\",\n      message: \"File \" + clc.underline(\"functions/go.mod\") + \" already exists. Overwrite?\",\n      default: false\n    });\n\n    if (!shoudlWriteModFile) {\n      return;\n    }\n\n    await util_1.promisify(fs.unlink)(modPath);\n  }\n\n  const modName = await prompt_1.promptOnce({\n    type: \"input\",\n    message: \"What would you like to name your module?\",\n    default: \"acme.com/functions\"\n  });\n  config.set(\"functions.go.module\", modName);\n  config.writeProjectFile(\"functions/go.mod\", `module ${modName} \\n\\ngo ${RUNTIME_VERSION}\\n\\n`);\n  utils.logSuccess(\"Wrote \" + clc.bold(\"functions/go.mod\"));\n\n  for (const dep of [go.FUNCTIONS_SDK, go.ADMIN_SDK, go.FUNCTIONS_CODEGEN, go.FUNCTIONS_RUNTIME]) {\n    const result = spawn.sync(\"go\", [\"get\", dep], {\n      cwd: config.path(\"functions\"),\n      stdio: \"inherit\"\n    });\n\n    if (result.error) {\n      logger_1.logger.debug(\"Full output from go get command:\", JSON.stringify(result, null, 2));\n      throw new error_1.FirebaseError(\"Error installing dependencies\", {\n        children: [result.error]\n      });\n    }\n  }\n\n  utils.logSuccess(\"Installed dependencies\");\n}\n\nmodule.exports = init;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/functions/golang.js"],"names":["Object","defineProperty","exports","value","util_1","require","fs","path","spawn","error_1","prompt_1","utils","go","logger_1","clc","RUNTIME_VERSION","TEMPLATE_ROOT","resolve","__dirname","MAIN_TEMPLATE","readFileSync","join","GITIGNORE_TEMPLATE","init","setup","config","writeModFile","modName","get","pkg","split","slice","askWriteProjectFile","replace","modPath","promisify","exists","shoudlWriteModFile","promptOnce","type","message","underline","default","unlink","set","writeProjectFile","logSuccess","bold","dep","FUNCTIONS_SDK","ADMIN_SDK","FUNCTIONS_CODEGEN","FUNCTIONS_RUNTIME","result","sync","cwd","stdio","error","logger","debug","JSON","stringify","FirebaseError","children","module"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"util\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst spawn = require(\"cross-spawn\");\nconst error_1 = require(\"../../../error\");\nconst prompt_1 = require(\"../../../prompt\");\nconst utils = require(\"../../../utils\");\nconst go = require(\"../../../deploy/functions/runtimes/golang\");\nconst logger_1 = require(\"../../../logger\");\nconst clc = require(\"cli-color\");\nconst RUNTIME_VERSION = \"1.13\";\nconst TEMPLATE_ROOT = path.resolve(__dirname, \"../../../../templates/init/functions/golang\");\nconst MAIN_TEMPLATE = fs.readFileSync(path.join(TEMPLATE_ROOT, \"functions.go\"), \"utf8\");\nconst GITIGNORE_TEMPLATE = fs.readFileSync(path.join(TEMPLATE_ROOT, \"_gitignore\"), \"utf8\");\nasync function init(setup, config) {\n    await writeModFile(config);\n    const modName = config.get(\"functions.go.module\");\n    const [pkg] = modName.split(\"/\").slice(-1);\n    await config.askWriteProjectFile(\"functions/functions.go\", MAIN_TEMPLATE.replace(\"PACKAGE\", pkg));\n    await config.askWriteProjectFile(\"functions/.gitignore\", GITIGNORE_TEMPLATE);\n}\nasync function writeModFile(config) {\n    const modPath = config.path(\"functions/go.mod\");\n    if (await util_1.promisify(fs.exists)(modPath)) {\n        const shoudlWriteModFile = await prompt_1.promptOnce({\n            type: \"confirm\",\n            message: \"File \" + clc.underline(\"functions/go.mod\") + \" already exists. Overwrite?\",\n            default: false,\n        });\n        if (!shoudlWriteModFile) {\n            return;\n        }\n        await util_1.promisify(fs.unlink)(modPath);\n    }\n    const modName = await prompt_1.promptOnce({\n        type: \"input\",\n        message: \"What would you like to name your module?\",\n        default: \"acme.com/functions\",\n    });\n    config.set(\"functions.go.module\", modName);\n    config.writeProjectFile(\"functions/go.mod\", `module ${modName} \\n\\ngo ${RUNTIME_VERSION}\\n\\n`);\n    utils.logSuccess(\"Wrote \" + clc.bold(\"functions/go.mod\"));\n    for (const dep of [go.FUNCTIONS_SDK, go.ADMIN_SDK, go.FUNCTIONS_CODEGEN, go.FUNCTIONS_RUNTIME]) {\n        const result = spawn.sync(\"go\", [\"get\", dep], {\n            cwd: config.path(\"functions\"),\n            stdio: \"inherit\",\n        });\n        if (result.error) {\n            logger_1.logger.debug(\"Full output from go get command:\", JSON.stringify(result, null, 2));\n            throw new error_1.FirebaseError(\"Error installing dependencies\", { children: [result.error] });\n        }\n    }\n    utils.logSuccess(\"Installed dependencies\");\n}\nmodule.exports = init;\n"]},"metadata":{},"sourceType":"script"}