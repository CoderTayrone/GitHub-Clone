{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar fork_1 = tslib_1.__importDefault(require(\"./fork\"));\n\nvar core_1 = tslib_1.__importDefault(require(\"./def/core\"));\n\nvar es6_1 = tslib_1.__importDefault(require(\"./def/es6\"));\n\nvar es7_1 = tslib_1.__importDefault(require(\"./def/es7\"));\n\nvar es2020_1 = tslib_1.__importDefault(require(\"./def/es2020\"));\n\nvar jsx_1 = tslib_1.__importDefault(require(\"./def/jsx\"));\n\nvar flow_1 = tslib_1.__importDefault(require(\"./def/flow\"));\n\nvar esprima_1 = tslib_1.__importDefault(require(\"./def/esprima\"));\n\nvar babel_1 = tslib_1.__importDefault(require(\"./def/babel\"));\n\nvar typescript_1 = tslib_1.__importDefault(require(\"./def/typescript\"));\n\nvar es_proposals_1 = tslib_1.__importDefault(require(\"./def/es-proposals\"));\n\nvar namedTypes_1 = require(\"./gen/namedTypes\");\n\nObject.defineProperty(exports, \"namedTypes\", {\n  enumerable: true,\n  get: function () {\n    return namedTypes_1.namedTypes;\n  }\n});\n\nvar _a = fork_1.default([// This core module of AST types captures ES5 as it is parsed today by\n// git://github.com/ariya/esprima.git#master.\ncore_1.default, // Feel free to add to or remove from this list of extension modules to\n// configure the precise type hierarchy that you need.\nes6_1.default, es7_1.default, es2020_1.default, jsx_1.default, flow_1.default, esprima_1.default, babel_1.default, typescript_1.default, es_proposals_1.default]),\n    astNodesAreEquivalent = _a.astNodesAreEquivalent,\n    builders = _a.builders,\n    builtInTypes = _a.builtInTypes,\n    defineMethod = _a.defineMethod,\n    eachField = _a.eachField,\n    finalize = _a.finalize,\n    getBuilderName = _a.getBuilderName,\n    getFieldNames = _a.getFieldNames,\n    getFieldValue = _a.getFieldValue,\n    getSupertypeNames = _a.getSupertypeNames,\n    n = _a.namedTypes,\n    NodePath = _a.NodePath,\n    Path = _a.Path,\n    PathVisitor = _a.PathVisitor,\n    someField = _a.someField,\n    Type = _a.Type,\n    use = _a.use,\n    visit = _a.visit;\n\nexports.astNodesAreEquivalent = astNodesAreEquivalent;\nexports.builders = builders;\nexports.builtInTypes = builtInTypes;\nexports.defineMethod = defineMethod;\nexports.eachField = eachField;\nexports.finalize = finalize;\nexports.getBuilderName = getBuilderName;\nexports.getFieldNames = getFieldNames;\nexports.getFieldValue = getFieldValue;\nexports.getSupertypeNames = getSupertypeNames;\nexports.NodePath = NodePath;\nexports.Path = Path;\nexports.PathVisitor = PathVisitor;\nexports.someField = someField;\nexports.Type = Type;\nexports.use = use;\nexports.visit = visit; // Populate the exported fields of the namedTypes namespace, while still\n// retaining its member types.\n\nObject.assign(namedTypes_1.namedTypes, n);","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/ast-types/main.js"],"names":["Object","defineProperty","exports","value","visit","use","Type","someField","PathVisitor","Path","NodePath","namedTypes","getSupertypeNames","getFieldValue","getFieldNames","getBuilderName","finalize","eachField","defineMethod","builtInTypes","builders","astNodesAreEquivalent","tslib_1","require","fork_1","__importDefault","core_1","es6_1","es7_1","es2020_1","jsx_1","flow_1","esprima_1","babel_1","typescript_1","es_proposals_1","namedTypes_1","enumerable","get","_a","default","n","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;\nvar tslib_1 = require(\"tslib\");\nvar fork_1 = tslib_1.__importDefault(require(\"./fork\"));\nvar core_1 = tslib_1.__importDefault(require(\"./def/core\"));\nvar es6_1 = tslib_1.__importDefault(require(\"./def/es6\"));\nvar es7_1 = tslib_1.__importDefault(require(\"./def/es7\"));\nvar es2020_1 = tslib_1.__importDefault(require(\"./def/es2020\"));\nvar jsx_1 = tslib_1.__importDefault(require(\"./def/jsx\"));\nvar flow_1 = tslib_1.__importDefault(require(\"./def/flow\"));\nvar esprima_1 = tslib_1.__importDefault(require(\"./def/esprima\"));\nvar babel_1 = tslib_1.__importDefault(require(\"./def/babel\"));\nvar typescript_1 = tslib_1.__importDefault(require(\"./def/typescript\"));\nvar es_proposals_1 = tslib_1.__importDefault(require(\"./def/es-proposals\"));\nvar namedTypes_1 = require(\"./gen/namedTypes\");\nObject.defineProperty(exports, \"namedTypes\", { enumerable: true, get: function () { return namedTypes_1.namedTypes; } });\nvar _a = fork_1.default([\n    // This core module of AST types captures ES5 as it is parsed today by\n    // git://github.com/ariya/esprima.git#master.\n    core_1.default,\n    // Feel free to add to or remove from this list of extension modules to\n    // configure the precise type hierarchy that you need.\n    es6_1.default,\n    es7_1.default,\n    es2020_1.default,\n    jsx_1.default,\n    flow_1.default,\n    esprima_1.default,\n    babel_1.default,\n    typescript_1.default,\n    es_proposals_1.default,\n]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n = _a.namedTypes, NodePath = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit = _a.visit;\nexports.astNodesAreEquivalent = astNodesAreEquivalent;\nexports.builders = builders;\nexports.builtInTypes = builtInTypes;\nexports.defineMethod = defineMethod;\nexports.eachField = eachField;\nexports.finalize = finalize;\nexports.getBuilderName = getBuilderName;\nexports.getFieldNames = getFieldNames;\nexports.getFieldValue = getFieldValue;\nexports.getSupertypeNames = getSupertypeNames;\nexports.NodePath = NodePath;\nexports.Path = Path;\nexports.PathVisitor = PathVisitor;\nexports.someField = someField;\nexports.Type = Type;\nexports.use = use;\nexports.visit = visit;\n// Populate the exported fields of the namedTypes namespace, while still\n// retaining its member types.\nObject.assign(namedTypes_1.namedTypes, n);\n"]},"metadata":{},"sourceType":"script"}