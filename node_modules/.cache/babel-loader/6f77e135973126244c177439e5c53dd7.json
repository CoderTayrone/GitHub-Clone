{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Table = require(\"cli-table\");\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst apps_1 = require(\"../management/apps\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils_1 = require(\"../utils\");\n\nfunction logCertificatesList(certificates) {\n  if (certificates.length === 0) {\n    logger_1.logger.info(\"No SHA certificate hashes found.\");\n    return;\n  }\n\n  const tableHead = [\"App Id\", \"SHA Id\", \"SHA Hash\", \"SHA Hash Type\"];\n  const table = new Table({\n    head: tableHead,\n    style: {\n      head: [\"green\"]\n    }\n  });\n  certificates.forEach(({\n    name,\n    shaHash,\n    certType\n  }) => {\n    const splitted = name.split(\"/\");\n    const appId = splitted[3];\n    const shaId = splitted[5];\n    table.push([appId, shaId, shaHash, certType]);\n  });\n  logger_1.logger.info(table.toString());\n}\n\nfunction logCertificatesCount(count = 0) {\n  if (count === 0) {\n    return;\n  }\n\n  logger_1.logger.info(\"\");\n  logger_1.logger.info(`${count} SHA hash(es) total.`);\n}\n\nmodule.exports = new command_1.Command(\"apps:android:sha:list <appId>\").description(\"list the SHA certificate hashes for a given app id. \").before(requireAuth_1.requireAuth).action(async (appId = \"\", options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const shaCertificates = await utils_1.promiseWithSpinner(async () => await apps_1.listAppAndroidSha(projectId, appId), \"Preparing the list of your Firebase Android app SHA certificate hashes\");\n  logCertificatesList(shaCertificates);\n  logCertificatesCount(shaCertificates.length);\n  return shaCertificates;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/apps-android-sha-list.js"],"names":["Object","defineProperty","exports","value","Table","require","command_1","projectUtils_1","apps_1","requireAuth_1","logger_1","utils_1","logCertificatesList","certificates","length","logger","info","tableHead","table","head","style","forEach","name","shaHash","certType","splitted","split","appId","shaId","push","toString","logCertificatesCount","count","module","Command","description","before","requireAuth","action","options","projectId","needProjectId","shaCertificates","promiseWithSpinner","listAppAndroidSha"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,UAAD,CAAvB;;AACA,SAASO,mBAAT,CAA6BC,YAA7B,EAA2C;AACvC,MAAIA,YAAY,CAACC,MAAb,KAAwB,CAA5B,EAA+B;AAC3BJ,IAAAA,QAAQ,CAACK,MAAT,CAAgBC,IAAhB,CAAqB,kCAArB;AACA;AACH;;AACD,QAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,UAArB,EAAiC,eAAjC,CAAlB;AACA,QAAMC,KAAK,GAAG,IAAId,KAAJ,CAAU;AAAEe,IAAAA,IAAI,EAAEF,SAAR;AAAmBG,IAAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAE,CAAC,OAAD;AAAR;AAA1B,GAAV,CAAd;AACAN,EAAAA,YAAY,CAACQ,OAAb,CAAqB,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,KAAiC;AAClD,UAAMC,QAAQ,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAjB;AACA,UAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAD,CAAtB;AACA,UAAMG,KAAK,GAAGH,QAAQ,CAAC,CAAD,CAAtB;AACAP,IAAAA,KAAK,CAACW,IAAN,CAAW,CAACF,KAAD,EAAQC,KAAR,EAAeL,OAAf,EAAwBC,QAAxB,CAAX;AACH,GALD;AAMAd,EAAAA,QAAQ,CAACK,MAAT,CAAgBC,IAAhB,CAAqBE,KAAK,CAACY,QAAN,EAArB;AACH;;AACD,SAASC,oBAAT,CAA8BC,KAAK,GAAG,CAAtC,EAAyC;AACrC,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACb;AACH;;AACDtB,EAAAA,QAAQ,CAACK,MAAT,CAAgBC,IAAhB,CAAqB,EAArB;AACAN,EAAAA,QAAQ,CAACK,MAAT,CAAgBC,IAAhB,CAAsB,GAAEgB,KAAM,sBAA9B;AACH;;AACDC,MAAM,CAAC/B,OAAP,GAAiB,IAAII,SAAS,CAAC4B,OAAd,CAAsB,+BAAtB,EACZC,WADY,CACA,sDADA,EAEZC,MAFY,CAEL3B,aAAa,CAAC4B,WAFT,EAGZC,MAHY,CAGL,OAAOX,KAAK,GAAG,EAAf,EAAmBY,OAAnB,KAA+B;AACvC,QAAMC,SAAS,GAAGjC,cAAc,CAACkC,aAAf,CAA6BF,OAA7B,CAAlB;AACA,QAAMG,eAAe,GAAG,MAAM/B,OAAO,CAACgC,kBAAR,CAA2B,YAAY,MAAMnC,MAAM,CAACoC,iBAAP,CAAyBJ,SAAzB,EAAoCb,KAApC,CAA7C,EAAyF,wEAAzF,CAA9B;AACAf,EAAAA,mBAAmB,CAAC8B,eAAD,CAAnB;AACAX,EAAAA,oBAAoB,CAACW,eAAe,CAAC5B,MAAjB,CAApB;AACA,SAAO4B,eAAP;AACH,CATgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Table = require(\"cli-table\");\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst apps_1 = require(\"../management/apps\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst logger_1 = require(\"../logger\");\nconst utils_1 = require(\"../utils\");\nfunction logCertificatesList(certificates) {\n    if (certificates.length === 0) {\n        logger_1.logger.info(\"No SHA certificate hashes found.\");\n        return;\n    }\n    const tableHead = [\"App Id\", \"SHA Id\", \"SHA Hash\", \"SHA Hash Type\"];\n    const table = new Table({ head: tableHead, style: { head: [\"green\"] } });\n    certificates.forEach(({ name, shaHash, certType }) => {\n        const splitted = name.split(\"/\");\n        const appId = splitted[3];\n        const shaId = splitted[5];\n        table.push([appId, shaId, shaHash, certType]);\n    });\n    logger_1.logger.info(table.toString());\n}\nfunction logCertificatesCount(count = 0) {\n    if (count === 0) {\n        return;\n    }\n    logger_1.logger.info(\"\");\n    logger_1.logger.info(`${count} SHA hash(es) total.`);\n}\nmodule.exports = new command_1.Command(\"apps:android:sha:list <appId>\")\n    .description(\"list the SHA certificate hashes for a given app id. \")\n    .before(requireAuth_1.requireAuth)\n    .action(async (appId = \"\", options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const shaCertificates = await utils_1.promiseWithSpinner(async () => await apps_1.listAppAndroidSha(projectId, appId), \"Preparing the list of your Firebase Android app SHA certificate hashes\");\n    logCertificatesList(shaCertificates);\n    logCertificatesCount(shaCertificates.length);\n    return shaCertificates;\n});\n"]},"metadata":{},"sourceType":"script"}