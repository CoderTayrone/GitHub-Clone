{"ast":null,"code":"'use strict';\n/**\n * `confirm` type prompt\n */\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n\nvar {\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nclass ConfirmPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n    var rawDefault = true;\n\n    _.extend(this.opt, {\n      filter: function (input) {\n        var value = rawDefault;\n\n        if (input != null && input !== '') {\n          value = /^y(es)?/i.test(input);\n        }\n\n        return value;\n      }\n    });\n\n    if (_.isBoolean(this.opt.default)) {\n      rawDefault = this.opt.default;\n    }\n\n    this.opt.default = rawDefault ? 'Y/n' : 'y/N';\n    return this;\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb   Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb; // Once user confirm (enter key)\n\n    var events = observe(this.rl);\n    events.keypress.pipe(takeUntil(events.line)).forEach(this.onKeypress.bind(this));\n    events.line.pipe(take(1)).forEach(this.onEnd.bind(this)); // Init\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {ConfirmPrompt} self\n   */\n\n\n  render(answer) {\n    var message = this.getQuestion();\n\n    if (typeof answer === 'boolean') {\n      message += chalk.cyan(answer ? 'Yes' : 'No');\n    } else {\n      message += this.rl.line;\n    }\n\n    this.screen.render(message);\n    return this;\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onEnd(input) {\n    this.status = 'answered';\n    var output = this.opt.filter(input);\n    this.render(output);\n    this.screen.done();\n    this.done(output);\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onKeypress() {\n    this.render();\n  }\n\n}\n\nmodule.exports = ConfirmPrompt;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/prompts/confirm.js"],"names":["_","require","chalk","take","takeUntil","Base","observe","ConfirmPrompt","constructor","questions","rl","answers","rawDefault","extend","opt","filter","input","value","test","isBoolean","default","_run","cb","done","events","keypress","pipe","line","forEach","onKeypress","bind","onEnd","render","answer","message","getQuestion","cyan","screen","status","output","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `confirm` type prompt\n */\n\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar { take, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\n\nclass ConfirmPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    var rawDefault = true;\n\n    _.extend(this.opt, {\n      filter: function(input) {\n        var value = rawDefault;\n        if (input != null && input !== '') {\n          value = /^y(es)?/i.test(input);\n        }\n\n        return value;\n      }\n    });\n\n    if (_.isBoolean(this.opt.default)) {\n      rawDefault = this.opt.default;\n    }\n\n    this.opt.default = rawDefault ? 'Y/n' : 'y/N';\n\n    return this;\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb   Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    var events = observe(this.rl);\n    events.keypress.pipe(takeUntil(events.line)).forEach(this.onKeypress.bind(this));\n\n    events.line.pipe(take(1)).forEach(this.onEnd.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ConfirmPrompt} self\n   */\n\n  render(answer) {\n    var message = this.getQuestion();\n\n    if (typeof answer === 'boolean') {\n      message += chalk.cyan(answer ? 'Yes' : 'No');\n    } else {\n      message += this.rl.line;\n    }\n\n    this.screen.render(message);\n\n    return this;\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onEnd(input) {\n    this.status = 'answered';\n\n    var output = this.opt.filter(input);\n    this.render(output);\n\n    this.screen.done();\n    this.done(output);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.render();\n  }\n}\n\nmodule.exports = ConfirmPrompt;\n"]},"metadata":{},"sourceType":"script"}