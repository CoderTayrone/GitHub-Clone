{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst clc = require(\"cli-color\");\n\nconst functionsConfig = require(\"../functionsConfig\");\n\nconst functionsDelete_1 = require(\"../functionsDelete\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst helper = require(\"../deploy/functions/functionsDeployHelper\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst backend = require(\"../deploy/functions/backend\");\n\nexports.default = new command_1.Command(\"functions:delete [filters...]\").description(\"delete one or more Cloud Functions by name or group name.\").option(\"--region <region>\", \"Specify region of the function to be deleted. \" + \"If omitted, functions from all regions whose names match the filters will be deleted. \").withForce().before(requirePermissions_1.requirePermissions, [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.delete\"]).action(async (filters, options) => {\n  if (!filters.length) {\n    return utils.reject(\"Must supply at least function or group name.\");\n  }\n\n  const context = {\n    projectId: projectUtils_1.needProjectId(options)\n  };\n  const filterChunks = filters.map(filter => {\n    return filter.split(\".\");\n  });\n  const [config, existingBackend] = await Promise.all([functionsConfig.getFirebaseConfig(options), backend.existingBackend(context)]);\n  await backend.checkAvailability(context, backend.empty());\n  const appEngineLocation = functionsConfig.getAppEngineLocation(config);\n  const functionsToDelete = existingBackend.cloudFunctions.filter(fn => {\n    const regionMatches = options.region ? fn.region === options.region : true;\n    const nameMatches = helper.functionMatchesAnyGroup(fn, filterChunks);\n    return regionMatches && nameMatches;\n  });\n\n  if (functionsToDelete.length === 0) {\n    return utils.reject(`The specified filters do not match any existing functions in project ${clc.bold(context.projectId)}.`, {\n      exit: 1\n    });\n  }\n\n  const schedulesToDelete = existingBackend.schedules.filter(schedule => {\n    functionsToDelete.some(backend.sameFunctionName(schedule.targetService));\n  });\n  const topicsToDelete = existingBackend.topics.filter(topic => {\n    functionsToDelete.some(backend.sameFunctionName(topic.targetService));\n  });\n  const deleteList = functionsToDelete.map(func => {\n    return \"\\t\" + helper.getFunctionLabel(func);\n  }).join(\"\\n\");\n  const confirmDeletion = await prompt_1.promptOnce({\n    type: \"confirm\",\n    name: \"force\",\n    default: false,\n    message: \"You are about to delete the following Cloud Functions:\\n\" + deleteList + \"\\n  Are you sure?\"\n  }, options);\n\n  if (!confirmDeletion) {\n    return utils.reject(\"Command aborted.\", {\n      exit: 1\n    });\n  }\n\n  return await functionsDelete_1.deleteFunctions(functionsToDelete, schedulesToDelete, topicsToDelete, appEngineLocation);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/functions-delete.js"],"names":["Object","defineProperty","exports","value","command_1","require","clc","functionsConfig","functionsDelete_1","projectUtils_1","prompt_1","helper","requirePermissions_1","utils","backend","default","Command","description","option","withForce","before","requirePermissions","action","filters","options","length","reject","context","projectId","needProjectId","filterChunks","map","filter","split","config","existingBackend","Promise","all","getFirebaseConfig","checkAvailability","empty","appEngineLocation","getAppEngineLocation","functionsToDelete","cloudFunctions","fn","regionMatches","region","nameMatches","functionMatchesAnyGroup","bold","exit","schedulesToDelete","schedules","schedule","some","sameFunctionName","targetService","topicsToDelete","topics","topic","deleteList","func","getFunctionLabel","join","confirmDeletion","promptOnce","type","name","message","deleteFunctions"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst clc = require(\"cli-color\");\nconst functionsConfig = require(\"../functionsConfig\");\nconst functionsDelete_1 = require(\"../functionsDelete\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst prompt_1 = require(\"../prompt\");\nconst helper = require(\"../deploy/functions/functionsDeployHelper\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst backend = require(\"../deploy/functions/backend\");\nexports.default = new command_1.Command(\"functions:delete [filters...]\")\n    .description(\"delete one or more Cloud Functions by name or group name.\")\n    .option(\"--region <region>\", \"Specify region of the function to be deleted. \" +\n    \"If omitted, functions from all regions whose names match the filters will be deleted. \")\n    .withForce()\n    .before(requirePermissions_1.requirePermissions, [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.delete\"])\n    .action(async (filters, options) => {\n    if (!filters.length) {\n        return utils.reject(\"Must supply at least function or group name.\");\n    }\n    const context = {\n        projectId: projectUtils_1.needProjectId(options),\n    };\n    const filterChunks = filters.map((filter) => {\n        return filter.split(\".\");\n    });\n    const [config, existingBackend] = await Promise.all([\n        functionsConfig.getFirebaseConfig(options),\n        backend.existingBackend(context),\n    ]);\n    await backend.checkAvailability(context, backend.empty());\n    const appEngineLocation = functionsConfig.getAppEngineLocation(config);\n    const functionsToDelete = existingBackend.cloudFunctions.filter((fn) => {\n        const regionMatches = options.region ? fn.region === options.region : true;\n        const nameMatches = helper.functionMatchesAnyGroup(fn, filterChunks);\n        return regionMatches && nameMatches;\n    });\n    if (functionsToDelete.length === 0) {\n        return utils.reject(`The specified filters do not match any existing functions in project ${clc.bold(context.projectId)}.`, { exit: 1 });\n    }\n    const schedulesToDelete = existingBackend.schedules.filter((schedule) => {\n        functionsToDelete.some(backend.sameFunctionName(schedule.targetService));\n    });\n    const topicsToDelete = existingBackend.topics.filter((topic) => {\n        functionsToDelete.some(backend.sameFunctionName(topic.targetService));\n    });\n    const deleteList = functionsToDelete\n        .map((func) => {\n        return \"\\t\" + helper.getFunctionLabel(func);\n    })\n        .join(\"\\n\");\n    const confirmDeletion = await prompt_1.promptOnce({\n        type: \"confirm\",\n        name: \"force\",\n        default: false,\n        message: \"You are about to delete the following Cloud Functions:\\n\" +\n            deleteList +\n            \"\\n  Are you sure?\",\n    }, options);\n    if (!confirmDeletion) {\n        return utils.reject(\"Command aborted.\", { exit: 1 });\n    }\n    return await functionsDelete_1.deleteFunctions(functionsToDelete, schedulesToDelete, topicsToDelete, appEngineLocation);\n});\n"]},"metadata":{},"sourceType":"script"}