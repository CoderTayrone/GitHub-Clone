{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logger = void 0;\n\nconst winston = require(\"winston\");\n\nfunction expandErrors(logger) {\n  const oldLogFunc = logger.log.bind(logger);\n\n  const newLogFunc = function (levelOrEntry, message, ...meta) {\n    if (message && message instanceof Error) {\n      message = message.stack || message.message;\n      return oldLogFunc(levelOrEntry, message, ...meta);\n    }\n\n    return oldLogFunc(levelOrEntry, message, ...meta);\n  };\n\n  logger.log = newLogFunc;\n  return logger;\n}\n\nfunction annotateDebugLines(logger) {\n  const debug = logger.debug.bind(logger);\n\n  const newDebug = function (message, ...meta) {\n    if (typeof message === \"string\") {\n      message = `[${new Date().toISOString()}] ${message || \"\"}`;\n    }\n\n    return debug(message, ...meta);\n  };\n\n  logger.debug = newDebug;\n  return logger;\n}\n\nconst rawLogger = winston.createLogger();\nrawLogger.add(new winston.transports.Console({\n  silent: true\n}));\nrawLogger.exitOnError = false;\nexports.logger = annotateDebugLines(expandErrors(rawLogger));","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/logger.js"],"names":["Object","defineProperty","exports","value","logger","winston","require","expandErrors","oldLogFunc","log","bind","newLogFunc","levelOrEntry","message","meta","Error","stack","annotateDebugLines","debug","newDebug","Date","toISOString","rawLogger","createLogger","add","transports","Console","silent","exitOnError"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,SAASC,YAAT,CAAsBH,MAAtB,EAA8B;AAC1B,QAAMI,UAAU,GAAGJ,MAAM,CAACK,GAAP,CAAWC,IAAX,CAAgBN,MAAhB,CAAnB;;AACA,QAAMO,UAAU,GAAG,UAAUC,YAAV,EAAwBC,OAAxB,EAAiC,GAAGC,IAApC,EAA0C;AACzD,QAAID,OAAO,IAAIA,OAAO,YAAYE,KAAlC,EAAyC;AACrCF,MAAAA,OAAO,GAAGA,OAAO,CAACG,KAAR,IAAiBH,OAAO,CAACA,OAAnC;AACA,aAAOL,UAAU,CAACI,YAAD,EAAeC,OAAf,EAAwB,GAAGC,IAA3B,CAAjB;AACH;;AACD,WAAON,UAAU,CAACI,YAAD,EAAeC,OAAf,EAAwB,GAAGC,IAA3B,CAAjB;AACH,GAND;;AAOAV,EAAAA,MAAM,CAACK,GAAP,GAAaE,UAAb;AACA,SAAOP,MAAP;AACH;;AACD,SAASa,kBAAT,CAA4Bb,MAA5B,EAAoC;AAChC,QAAMc,KAAK,GAAGd,MAAM,CAACc,KAAP,CAAaR,IAAb,CAAkBN,MAAlB,CAAd;;AACA,QAAMe,QAAQ,GAAG,UAAUN,OAAV,EAAmB,GAAGC,IAAtB,EAA4B;AACzC,QAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC7BA,MAAAA,OAAO,GAAI,IAAG,IAAIO,IAAJ,GAAWC,WAAX,EAAyB,KAAIR,OAAO,IAAI,EAAG,EAAzD;AACH;;AACD,WAAOK,KAAK,CAACL,OAAD,EAAU,GAAGC,IAAb,CAAZ;AACH,GALD;;AAMAV,EAAAA,MAAM,CAACc,KAAP,GAAeC,QAAf;AACA,SAAOf,MAAP;AACH;;AACD,MAAMkB,SAAS,GAAGjB,OAAO,CAACkB,YAAR,EAAlB;AACAD,SAAS,CAACE,GAAV,CAAc,IAAInB,OAAO,CAACoB,UAAR,CAAmBC,OAAvB,CAA+B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA/B,CAAd;AACAL,SAAS,CAACM,WAAV,GAAwB,KAAxB;AACA1B,OAAO,CAACE,MAAR,GAAiBa,kBAAkB,CAACV,YAAY,CAACe,SAAD,CAAb,CAAnC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logger = void 0;\nconst winston = require(\"winston\");\nfunction expandErrors(logger) {\n    const oldLogFunc = logger.log.bind(logger);\n    const newLogFunc = function (levelOrEntry, message, ...meta) {\n        if (message && message instanceof Error) {\n            message = message.stack || message.message;\n            return oldLogFunc(levelOrEntry, message, ...meta);\n        }\n        return oldLogFunc(levelOrEntry, message, ...meta);\n    };\n    logger.log = newLogFunc;\n    return logger;\n}\nfunction annotateDebugLines(logger) {\n    const debug = logger.debug.bind(logger);\n    const newDebug = function (message, ...meta) {\n        if (typeof message === \"string\") {\n            message = `[${new Date().toISOString()}] ${message || \"\"}`;\n        }\n        return debug(message, ...meta);\n    };\n    logger.debug = newDebug;\n    return logger;\n}\nconst rawLogger = winston.createLogger();\nrawLogger.add(new winston.transports.Console({ silent: true }));\nrawLogger.exitOnError = false;\nexports.logger = annotateDebugLines(expandErrors(rawLogger));\n"]},"metadata":{},"sourceType":"script"}