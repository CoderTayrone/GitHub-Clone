{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst ora = require(\"ora\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst askUserForConsent = require(\"../extensions/askUserForConsent\");\n\nconst displayExtensionInfo_1 = require(\"../extensions/displayExtensionInfo\");\n\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\n\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\n\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\n\nconst warnings_1 = require(\"../extensions/warnings\");\n\nconst paramHelper = require(\"../extensions/paramHelper\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst utils_1 = require(\"../extensions/utils\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst previews_1 = require(\"../previews\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\n\nasync function installExtension(options) {\n  const {\n    projectId,\n    extensionName,\n    source,\n    extVersion,\n    paramFilePath\n  } = options;\n  const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n\n  if (!spec) {\n    throw new error_1.FirebaseError(`Could not find the extension.yaml for ${extensionName}. Please make sure this is a valid extension and try again.`);\n  }\n\n  const spinner = ora.default(\"Installing your extension instance. This usually takes 3 to 5 minutes...\");\n\n  try {\n    await provisioningHelper.checkProductsProvisioned(projectId, spec);\n\n    if (spec.billingRequired) {\n      const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n\n      if (!enabled) {\n        await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, false);\n        await checkProjectBilling_1.enableBilling(projectId, spec.displayName || spec.name);\n      } else {\n        await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, true);\n      }\n    }\n\n    const roles = spec.roles ? spec.roles.map(role => role.role) : [];\n    await askUserForConsent.prompt(spec.displayName || spec.name, projectId, roles);\n    let instanceId = spec.name;\n    const anotherInstanceExists = await extensionsHelper_1.instanceIdExists(projectId, instanceId);\n\n    if (anotherInstanceExists) {\n      const consent = await extensionsHelper_1.promptForRepeatInstance(projectId, spec.name);\n\n      if (!consent) {\n        logger_1.logger.info(marked(\"Installation cancelled. For a list of all available Firebase Extensions commands, run `firebase ext`.\"));\n        return;\n      }\n\n      instanceId = await extensionsHelper_1.promptForValidInstanceId(`${instanceId}-${utils_1.getRandomString(4)}`);\n    }\n\n    const params = await paramHelper.getParams(projectId, _.get(spec, \"params\", []), paramFilePath);\n    spinner.start();\n\n    if (!source && extVersion) {\n      await extensionsApi.createInstanceFromExtensionVersion(projectId, instanceId, extVersion, params);\n    } else if (source) {\n      await extensionsApi.createInstanceFromSource(projectId, instanceId, source, params);\n    } else {\n      throw new error_1.FirebaseError(`Neither a extension source nor an extension version was supplied for ${extensionName}. Please make sure this is a valid extension and try again.`);\n    }\n\n    spinner.stop();\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Successfully installed your instance of ${clc.bold(spec.displayName || spec.name)}! ` + `Its Instance ID is ${clc.bold(instanceId)}.`);\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(\"Go to the Firebase console to view instructions for using your extension, \" + `which may include some required post-installation tasks: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n    logger_1.logger.info(marked(\"You can run `firebase ext` to view available Firebase Extensions commands, \" + \"including those to update, reconfigure, or delete your installed extension.\"));\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (err instanceof error_1.FirebaseError) {\n      throw err;\n    }\n\n    throw new error_1.FirebaseError(`Error occurred installing extension: ${err.message}`, {\n      original: err\n    });\n  }\n}\n\nasync function confirmInstallBySource(projectId, extensionName) {\n  let source;\n\n  try {\n    source = await extensionsHelper_1.createSourceFromLocation(projectId, extensionName);\n  } catch (err) {\n    throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}', ` + `and encountered the following error when trying to create an instance of extension '${clc.bold(extensionName)}':\\n ${err.message}`);\n  }\n\n  displayExtensionInfo_1.displayExtInfo(extensionName, \"\", source.spec);\n  const confirm = await extensionsHelper_1.confirmInstallInstance();\n\n  if (!confirm) {\n    throw new error_1.FirebaseError(\"Install cancelled.\");\n  }\n\n  return source;\n}\n\nasync function confirmInstallByReference(extensionName) {\n  if (extensionName.split(\"/\").length < 2) {\n    const [extensionID, version] = extensionName.split(\"@\");\n    extensionName = `firebase/${extensionID}@${version || \"latest\"}`;\n  }\n\n  const ref = extensionsApi.parseRef(extensionName);\n  const extension = await extensionsApi.getExtension(`${ref.publisherId}/${ref.extensionId}`);\n\n  if (!ref.version) {\n    extensionName = `${extensionName}@latest`;\n  }\n\n  const extVersion = await extensionsApi.getExtensionVersion(extensionName);\n  displayExtensionInfo_1.displayExtInfo(extensionName, ref.publisherId, extVersion.spec, true);\n  const confirm = await extensionsHelper_1.confirmInstallInstance();\n\n  if (!confirm) {\n    throw new error_1.FirebaseError(\"Install cancelled.\");\n  }\n\n  const warningConsent = await warnings_1.displayWarningPrompts(ref.publisherId, extension.registryLaunchStage, extVersion);\n\n  if (!warningConsent) {\n    throw new error_1.FirebaseError(\"Install cancelled.\");\n  }\n\n  return extVersion;\n}\n\nexports.default = new command_1.Command(\"ext:install [extensionName]\").description(\"install an official extension if [extensionName] or [extensionName@version] is provided; \" + (previews_1.previews.extdev ? \"install a local extension if [localPathOrUrl] or [url#root] is provided; install a published extension (not authored by Firebase) if [publisherId/extensionId] is provided \" : \"\") + \"or run with `-i` to see all available extensions.\").option(\"--params <paramsFile>\", \"name of params variables file with .env format.\").before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.create\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").action(async (extensionName, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const paramFilePath = options.params;\n  let learnMore = false;\n\n  if (!extensionName) {\n    if (options.interactive) {\n      learnMore = true;\n      extensionName = await extensionsHelper_1.promptForOfficialExtension(\"Which official extension do you wish to install?\\n\" + \"  Select an extension, then press Enter to learn more.\");\n    } else {\n      throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}'. ` + `Run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available published extensions.`);\n    }\n  }\n\n  let source;\n  let extVersion;\n\n  if (extensionsHelper_1.isLocalOrURLPath(extensionName)) {\n    source = await confirmInstallBySource(projectId, extensionName);\n  } else {\n    extVersion = await confirmInstallByReference(extensionName);\n  }\n\n  if (!source && !extVersion) {\n    throw new error_1.FirebaseError(\"Could not find a source. Please specify a valid source to continue.\");\n  }\n\n  const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n\n  if (!spec) {\n    throw new error_1.FirebaseError(`Could not find the extension.yaml for extension '${clc.bold(extensionName)}'. Please make sure this is a valid extension and try again.`);\n  }\n\n  if (learnMore) {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `You selected: ${clc.bold(spec.displayName)}.\\n` + `${spec.description}\\n` + `View details: https://firebase.google.com/products/extensions/${spec.name}\\n`);\n    const confirm = await extensionsHelper_1.confirmInstallInstance();\n\n    if (!confirm) {\n      return;\n    }\n  }\n\n  try {\n    return installExtension({\n      paramFilePath,\n      projectId,\n      extensionName,\n      source,\n      extVersion\n    });\n  } catch (err) {\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred installing the extension: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-install.js"],"names":["Object","defineProperty","exports","value","_","require","clc","marked","ora","TerminalRenderer","askUserForConsent","displayExtensionInfo_1","billingMigrationHelper_1","checkProjectBilling_1","cloudbilling_1","checkMinRequiredVersion_1","command_1","error_1","projectUtils_1","extensionsApi","provisioningHelper","warnings_1","paramHelper","extensionsHelper_1","utils_1","requirePermissions_1","utils","logger_1","previews_1","setOptions","renderer","installExtension","options","projectId","extensionName","source","extVersion","paramFilePath","spec","FirebaseError","spinner","default","checkProductsProvisioned","billingRequired","enabled","checkBillingEnabled","displayNode10CreateBillingNotice","enableBilling","displayName","name","roles","map","role","prompt","instanceId","anotherInstanceExists","instanceIdExists","consent","promptForRepeatInstance","logger","info","promptForValidInstanceId","getRandomString","params","getParams","get","start","createInstanceFromExtensionVersion","createInstanceFromSource","stop","logLabeledSuccess","logPrefix","bold","logLabeledBullet","consoleUrl","err","isSpinning","fail","message","original","confirmInstallBySource","createSourceFromLocation","displayExtInfo","confirm","confirmInstallInstance","confirmInstallByReference","split","length","extensionID","version","ref","parseRef","extension","getExtension","publisherId","extensionId","getExtensionVersion","warningConsent","displayWarningPrompts","registryLaunchStage","Command","description","previews","extdev","option","before","requirePermissions","ensureExtensionsApiEnabled","checkMinRequiredVersion","action","needProjectId","learnMore","interactive","promptForOfficialExtension","isLocalOrURLPath"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst ora = require(\"ora\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst askUserForConsent = require(\"../extensions/askUserForConsent\");\nconst displayExtensionInfo_1 = require(\"../extensions/displayExtensionInfo\");\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\nconst warnings_1 = require(\"../extensions/warnings\");\nconst paramHelper = require(\"../extensions/paramHelper\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst utils_1 = require(\"../extensions/utils\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nconst previews_1 = require(\"../previews\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nasync function installExtension(options) {\n    const { projectId, extensionName, source, extVersion, paramFilePath } = options;\n    const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n    if (!spec) {\n        throw new error_1.FirebaseError(`Could not find the extension.yaml for ${extensionName}. Please make sure this is a valid extension and try again.`);\n    }\n    const spinner = ora.default(\"Installing your extension instance. This usually takes 3 to 5 minutes...\");\n    try {\n        await provisioningHelper.checkProductsProvisioned(projectId, spec);\n        if (spec.billingRequired) {\n            const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n            if (!enabled) {\n                await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, false);\n                await checkProjectBilling_1.enableBilling(projectId, spec.displayName || spec.name);\n            }\n            else {\n                await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, true);\n            }\n        }\n        const roles = spec.roles ? spec.roles.map((role) => role.role) : [];\n        await askUserForConsent.prompt(spec.displayName || spec.name, projectId, roles);\n        let instanceId = spec.name;\n        const anotherInstanceExists = await extensionsHelper_1.instanceIdExists(projectId, instanceId);\n        if (anotherInstanceExists) {\n            const consent = await extensionsHelper_1.promptForRepeatInstance(projectId, spec.name);\n            if (!consent) {\n                logger_1.logger.info(marked(\"Installation cancelled. For a list of all available Firebase Extensions commands, run `firebase ext`.\"));\n                return;\n            }\n            instanceId = await extensionsHelper_1.promptForValidInstanceId(`${instanceId}-${utils_1.getRandomString(4)}`);\n        }\n        const params = await paramHelper.getParams(projectId, _.get(spec, \"params\", []), paramFilePath);\n        spinner.start();\n        if (!source && extVersion) {\n            await extensionsApi.createInstanceFromExtensionVersion(projectId, instanceId, extVersion, params);\n        }\n        else if (source) {\n            await extensionsApi.createInstanceFromSource(projectId, instanceId, source, params);\n        }\n        else {\n            throw new error_1.FirebaseError(`Neither a extension source nor an extension version was supplied for ${extensionName}. Please make sure this is a valid extension and try again.`);\n        }\n        spinner.stop();\n        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Successfully installed your instance of ${clc.bold(spec.displayName || spec.name)}! ` +\n            `Its Instance ID is ${clc.bold(instanceId)}.`);\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(\"Go to the Firebase console to view instructions for using your extension, \" +\n            `which may include some required post-installation tasks: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n        logger_1.logger.info(marked(\"You can run `firebase ext` to view available Firebase Extensions commands, \" +\n            \"including those to update, reconfigure, or delete your installed extension.\"));\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (err instanceof error_1.FirebaseError) {\n            throw err;\n        }\n        throw new error_1.FirebaseError(`Error occurred installing extension: ${err.message}`, {\n            original: err,\n        });\n    }\n}\nasync function confirmInstallBySource(projectId, extensionName) {\n    let source;\n    try {\n        source = await extensionsHelper_1.createSourceFromLocation(projectId, extensionName);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}', ` +\n            `and encountered the following error when trying to create an instance of extension '${clc.bold(extensionName)}':\\n ${err.message}`);\n    }\n    displayExtensionInfo_1.displayExtInfo(extensionName, \"\", source.spec);\n    const confirm = await extensionsHelper_1.confirmInstallInstance();\n    if (!confirm) {\n        throw new error_1.FirebaseError(\"Install cancelled.\");\n    }\n    return source;\n}\nasync function confirmInstallByReference(extensionName) {\n    if (extensionName.split(\"/\").length < 2) {\n        const [extensionID, version] = extensionName.split(\"@\");\n        extensionName = `firebase/${extensionID}@${version || \"latest\"}`;\n    }\n    const ref = extensionsApi.parseRef(extensionName);\n    const extension = await extensionsApi.getExtension(`${ref.publisherId}/${ref.extensionId}`);\n    if (!ref.version) {\n        extensionName = `${extensionName}@latest`;\n    }\n    const extVersion = await extensionsApi.getExtensionVersion(extensionName);\n    displayExtensionInfo_1.displayExtInfo(extensionName, ref.publisherId, extVersion.spec, true);\n    const confirm = await extensionsHelper_1.confirmInstallInstance();\n    if (!confirm) {\n        throw new error_1.FirebaseError(\"Install cancelled.\");\n    }\n    const warningConsent = await warnings_1.displayWarningPrompts(ref.publisherId, extension.registryLaunchStage, extVersion);\n    if (!warningConsent) {\n        throw new error_1.FirebaseError(\"Install cancelled.\");\n    }\n    return extVersion;\n}\nexports.default = new command_1.Command(\"ext:install [extensionName]\")\n    .description(\"install an official extension if [extensionName] or [extensionName@version] is provided; \" +\n    (previews_1.previews.extdev\n        ? \"install a local extension if [localPathOrUrl] or [url#root] is provided; install a published extension (not authored by Firebase) if [publisherId/extensionId] is provided \"\n        : \"\") +\n    \"or run with `-i` to see all available extensions.\")\n    .option(\"--params <paramsFile>\", \"name of params variables file with .env format.\")\n    .before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.create\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .action(async (extensionName, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const paramFilePath = options.params;\n    let learnMore = false;\n    if (!extensionName) {\n        if (options.interactive) {\n            learnMore = true;\n            extensionName = await extensionsHelper_1.promptForOfficialExtension(\"Which official extension do you wish to install?\\n\" +\n                \"  Select an extension, then press Enter to learn more.\");\n        }\n        else {\n            throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}'. ` +\n                `Run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available published extensions.`);\n        }\n    }\n    let source;\n    let extVersion;\n    if (extensionsHelper_1.isLocalOrURLPath(extensionName)) {\n        source = await confirmInstallBySource(projectId, extensionName);\n    }\n    else {\n        extVersion = await confirmInstallByReference(extensionName);\n    }\n    if (!source && !extVersion) {\n        throw new error_1.FirebaseError(\"Could not find a source. Please specify a valid source to continue.\");\n    }\n    const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n    if (!spec) {\n        throw new error_1.FirebaseError(`Could not find the extension.yaml for extension '${clc.bold(extensionName)}'. Please make sure this is a valid extension and try again.`);\n    }\n    if (learnMore) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `You selected: ${clc.bold(spec.displayName)}.\\n` +\n            `${spec.description}\\n` +\n            `View details: https://firebase.google.com/products/extensions/${spec.name}\\n`);\n        const confirm = await extensionsHelper_1.confirmInstallInstance();\n        if (!confirm) {\n            return;\n        }\n    }\n    try {\n        return installExtension({\n            paramFilePath,\n            projectId,\n            extensionName,\n            source,\n            extVersion,\n        });\n    }\n    catch (err) {\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred installing the extension: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}