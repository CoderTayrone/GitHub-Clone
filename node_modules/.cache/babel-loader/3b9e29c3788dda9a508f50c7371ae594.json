{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst auth = require(\"../auth\");\n\nmodule.exports = new command_1.Command(\"login:add [email]\").description(\"authorize the CLI for an additional account\").option(\"--no-localhost\", \"copy and paste a code instead of starting a local server for authentication\").action(async (email, options) => {\n  if (options.nonInteractive) {\n    throw new error_1.FirebaseError(`Cannot run \"${clc.bold(\"login:add\")}\" in non-interactive mode.`);\n  }\n\n  const account = auth.getGlobalDefaultAccount();\n\n  if (!account) {\n    throw new error_1.FirebaseError(`No existing accounts found, please run \"${clc.bold(\"firebase login\")}\" to add your first account`);\n  }\n\n  const hintUser = auth.getAllAccounts().find(a => a.user.email === email);\n\n  if (email && hintUser) {\n    throw new error_1.FirebaseError(`Already signed in as ${email}, use \"${clc.bold(\"firebase login --reauth\")}\" to reauthenticate.`);\n  }\n\n  const useLocalhost = utils.isCloudEnvironment() ? false : options.localhost;\n  const newAccount = await auth.loginAdditionalAccount(useLocalhost, email);\n\n  if (newAccount) {\n    logger_1.logger.info();\n    utils.logSuccess(\"Success! Added account \" + clc.bold(newAccount.user.email));\n  }\n\n  return newAccount;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/login-add.js"],"names":["Object","defineProperty","exports","value","clc","require","command_1","logger_1","utils","error_1","auth","module","Command","description","option","action","email","options","nonInteractive","FirebaseError","bold","account","getGlobalDefaultAccount","hintUser","getAllAccounts","find","a","user","useLocalhost","isCloudEnvironment","localhost","newAccount","loginAdditionalAccount","logger","info","logSuccess"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,SAAD,CAApB;;AACAM,MAAM,CAACT,OAAP,GAAiB,IAAII,SAAS,CAACM,OAAd,CAAsB,mBAAtB,EACZC,WADY,CACA,6CADA,EAEZC,MAFY,CAEL,gBAFK,EAEa,6EAFb,EAGZC,MAHY,CAGL,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAClC,MAAIA,OAAO,CAACC,cAAZ,EAA4B;AACxB,UAAM,IAAIT,OAAO,CAACU,aAAZ,CAA2B,eAAcf,GAAG,CAACgB,IAAJ,CAAS,WAAT,CAAsB,4BAA/D,CAAN;AACH;;AACD,QAAMC,OAAO,GAAGX,IAAI,CAACY,uBAAL,EAAhB;;AACA,MAAI,CAACD,OAAL,EAAc;AACV,UAAM,IAAIZ,OAAO,CAACU,aAAZ,CAA2B,2CAA0Cf,GAAG,CAACgB,IAAJ,CAAS,gBAAT,CAA2B,6BAAhG,CAAN;AACH;;AACD,QAAMG,QAAQ,GAAGb,IAAI,CAACc,cAAL,GAAsBC,IAAtB,CAA4BC,CAAD,IAAOA,CAAC,CAACC,IAAF,CAAOX,KAAP,KAAiBA,KAAnD,CAAjB;;AACA,MAAIA,KAAK,IAAIO,QAAb,EAAuB;AACnB,UAAM,IAAId,OAAO,CAACU,aAAZ,CAA2B,wBAAuBH,KAAM,UAASZ,GAAG,CAACgB,IAAJ,CAAS,yBAAT,CAAoC,sBAArG,CAAN;AACH;;AACD,QAAMQ,YAAY,GAAGpB,KAAK,CAACqB,kBAAN,KAA6B,KAA7B,GAAqCZ,OAAO,CAACa,SAAlE;AACA,QAAMC,UAAU,GAAG,MAAMrB,IAAI,CAACsB,sBAAL,CAA4BJ,YAA5B,EAA0CZ,KAA1C,CAAzB;;AACA,MAAIe,UAAJ,EAAgB;AACZxB,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB;AACA1B,IAAAA,KAAK,CAAC2B,UAAN,CAAiB,4BAA4B/B,GAAG,CAACgB,IAAJ,CAASW,UAAU,CAACJ,IAAX,CAAgBX,KAAzB,CAA7C;AACH;;AACD,SAAOe,UAAP;AACH,CAtBgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst auth = require(\"../auth\");\nmodule.exports = new command_1.Command(\"login:add [email]\")\n    .description(\"authorize the CLI for an additional account\")\n    .option(\"--no-localhost\", \"copy and paste a code instead of starting a local server for authentication\")\n    .action(async (email, options) => {\n    if (options.nonInteractive) {\n        throw new error_1.FirebaseError(`Cannot run \"${clc.bold(\"login:add\")}\" in non-interactive mode.`);\n    }\n    const account = auth.getGlobalDefaultAccount();\n    if (!account) {\n        throw new error_1.FirebaseError(`No existing accounts found, please run \"${clc.bold(\"firebase login\")}\" to add your first account`);\n    }\n    const hintUser = auth.getAllAccounts().find((a) => a.user.email === email);\n    if (email && hintUser) {\n        throw new error_1.FirebaseError(`Already signed in as ${email}, use \"${clc.bold(\"firebase login --reauth\")}\" to reauthenticate.`);\n    }\n    const useLocalhost = utils.isCloudEnvironment() ? false : options.localhost;\n    const newAccount = await auth.loginAdditionalAccount(useLocalhost, email);\n    if (newAccount) {\n        logger_1.logger.info();\n        utils.logSuccess(\"Success! Added account \" + clc.bold(newAccount.user.email));\n    }\n    return newAccount;\n});\n"]},"metadata":{},"sourceType":"script"}