{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst logger_1 = require(\"../../../logger\");\n\nconst prompt_1 = require(\"../../../prompt\");\n\nconst requirePermissions_1 = require(\"../../../requirePermissions\");\n\nconst previews_1 = require(\"../../../previews\");\n\nconst ensureApiEnabled = require(\"../../../ensureApiEnabled\");\n\nmodule.exports = async function (setup, config, options) {\n  var _a, _b;\n\n  logger_1.logger.info();\n  logger_1.logger.info(\"A \" + clc.bold(\"functions\") + \" directory will be created in your project with sample code\");\n  logger_1.logger.info(\"pre-configured. Functions can be deployed with \" + clc.bold(\"firebase deploy\") + \".\");\n  logger_1.logger.info();\n  setup.functions = {};\n  const projectId = (_b = (_a = setup === null || setup === void 0 ? void 0 : setup.rcfile) === null || _a === void 0 ? void 0 : _a.projects) === null || _b === void 0 ? void 0 : _b.default;\n\n  if (projectId) {\n    await requirePermissions_1.requirePermissions(Object.assign(Object.assign({}, options), {\n      project: projectId\n    }));\n    await Promise.all([ensureApiEnabled.enable(projectId, \"cloudfunctions.googleapis.com\"), ensureApiEnabled.enable(projectId, \"runtimeconfig.googleapis.com\")]);\n  }\n\n  const choices = [{\n    name: \"JavaScript\",\n    value: \"javascript\"\n  }, {\n    name: \"TypeScript\",\n    value: \"typescript\"\n  }];\n\n  if (previews_1.previews.golang) {\n    choices.push({\n      name: \"Go\",\n      value: \"golang\"\n    });\n  }\n\n  const language = await prompt_1.promptOnce({\n    type: \"list\",\n    message: \"What language would you like to use to write Cloud Functions?\",\n    default: \"javascript\",\n    choices\n  });\n  return require(\"./\" + language)(setup, config);\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/functions/index.js"],"names":["Object","defineProperty","exports","value","clc","require","logger_1","prompt_1","requirePermissions_1","previews_1","ensureApiEnabled","module","setup","config","options","_a","_b","logger","info","bold","functions","projectId","rcfile","projects","default","requirePermissions","assign","project","Promise","all","enable","choices","name","previews","golang","push","language","promptOnce","type","message"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,6BAAD,CAApC;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,mBAAD,CAA1B;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,2BAAD,CAAhC;;AACAM,MAAM,CAACT,OAAP,GAAiB,gBAAgBU,KAAhB,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AACrD,MAAIC,EAAJ,EAAQC,EAAR;;AACAV,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB;AACAZ,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB,CAAqB,OAAOd,GAAG,CAACe,IAAJ,CAAS,WAAT,CAAP,GAA+B,6DAApD;AACAb,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB,CAAqB,oDAAoDd,GAAG,CAACe,IAAJ,CAAS,iBAAT,CAApD,GAAkF,GAAvG;AACAb,EAAAA,QAAQ,CAACW,MAAT,CAAgBC,IAAhB;AACAN,EAAAA,KAAK,CAACQ,SAAN,GAAkB,EAAlB;AACA,QAAMC,SAAS,GAAG,CAACL,EAAE,GAAG,CAACD,EAAE,GAAGH,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACU,MAA1D,MAAsE,IAAtE,IAA8EP,EAAE,KAAK,KAAK,CAA1F,GAA8F,KAAK,CAAnG,GAAuGA,EAAE,CAACQ,QAAhH,MAA8H,IAA9H,IAAsIP,EAAE,KAAK,KAAK,CAAlJ,GAAsJ,KAAK,CAA3J,GAA+JA,EAAE,CAACQ,OAApL;;AACA,MAAIH,SAAJ,EAAe;AACX,UAAMb,oBAAoB,CAACiB,kBAArB,CAAwCzB,MAAM,CAAC0B,MAAP,CAAc1B,MAAM,CAAC0B,MAAP,CAAc,EAAd,EAAkBZ,OAAlB,CAAd,EAA0C;AAAEa,MAAAA,OAAO,EAAEN;AAAX,KAA1C,CAAxC,CAAN;AACA,UAAMO,OAAO,CAACC,GAAR,CAAY,CACdnB,gBAAgB,CAACoB,MAAjB,CAAwBT,SAAxB,EAAmC,+BAAnC,CADc,EAEdX,gBAAgB,CAACoB,MAAjB,CAAwBT,SAAxB,EAAmC,8BAAnC,CAFc,CAAZ,CAAN;AAIH;;AACD,QAAMU,OAAO,GAAG,CACZ;AACIC,IAAAA,IAAI,EAAE,YADV;AAEI7B,IAAAA,KAAK,EAAE;AAFX,GADY,EAKZ;AACI6B,IAAAA,IAAI,EAAE,YADV;AAEI7B,IAAAA,KAAK,EAAE;AAFX,GALY,CAAhB;;AAUA,MAAIM,UAAU,CAACwB,QAAX,CAAoBC,MAAxB,EAAgC;AAC5BH,IAAAA,OAAO,CAACI,IAAR,CAAa;AACTH,MAAAA,IAAI,EAAE,IADG;AAET7B,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIH;;AACD,QAAMiC,QAAQ,GAAG,MAAM7B,QAAQ,CAAC8B,UAAT,CAAoB;AACvCC,IAAAA,IAAI,EAAE,MADiC;AAEvCC,IAAAA,OAAO,EAAE,+DAF8B;AAGvCf,IAAAA,OAAO,EAAE,YAH8B;AAIvCO,IAAAA;AAJuC,GAApB,CAAvB;AAMA,SAAO1B,OAAO,CAAC,OAAO+B,QAAR,CAAP,CAAyBxB,KAAzB,EAAgCC,MAAhC,CAAP;AACH,CAtCD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst logger_1 = require(\"../../../logger\");\nconst prompt_1 = require(\"../../../prompt\");\nconst requirePermissions_1 = require(\"../../../requirePermissions\");\nconst previews_1 = require(\"../../../previews\");\nconst ensureApiEnabled = require(\"../../../ensureApiEnabled\");\nmodule.exports = async function (setup, config, options) {\n    var _a, _b;\n    logger_1.logger.info();\n    logger_1.logger.info(\"A \" + clc.bold(\"functions\") + \" directory will be created in your project with sample code\");\n    logger_1.logger.info(\"pre-configured. Functions can be deployed with \" + clc.bold(\"firebase deploy\") + \".\");\n    logger_1.logger.info();\n    setup.functions = {};\n    const projectId = (_b = (_a = setup === null || setup === void 0 ? void 0 : setup.rcfile) === null || _a === void 0 ? void 0 : _a.projects) === null || _b === void 0 ? void 0 : _b.default;\n    if (projectId) {\n        await requirePermissions_1.requirePermissions(Object.assign(Object.assign({}, options), { project: projectId }));\n        await Promise.all([\n            ensureApiEnabled.enable(projectId, \"cloudfunctions.googleapis.com\"),\n            ensureApiEnabled.enable(projectId, \"runtimeconfig.googleapis.com\"),\n        ]);\n    }\n    const choices = [\n        {\n            name: \"JavaScript\",\n            value: \"javascript\",\n        },\n        {\n            name: \"TypeScript\",\n            value: \"typescript\",\n        },\n    ];\n    if (previews_1.previews.golang) {\n        choices.push({\n            name: \"Go\",\n            value: \"golang\",\n        });\n    }\n    const language = await prompt_1.promptOnce({\n        type: \"list\",\n        message: \"What language would you like to use to write Cloud Functions?\",\n        default: \"javascript\",\n        choices,\n    });\n    return require(\"./\" + language)(setup, config);\n};\n"]},"metadata":{},"sourceType":"script"}