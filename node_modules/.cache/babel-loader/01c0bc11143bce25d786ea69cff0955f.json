{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst opn = require(\"open\");\n\nconst qs = require(\"querystring\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst gcp = require(\"../gcp\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nmodule.exports = new command_1.Command(\"functions:log\").description(\"read logs from deployed functions\").option(\"--only <function_names>\", 'only show logs of specified, comma-seperated functions (e.g. \"funcA,funcB\")').option(\"-n, --lines <num_lines>\", \"specify number of log lines to fetch\").option(\"--open\", \"open logs page in web browser\").before(requirePermissions_1.requirePermissions, [\"logging.logEntries.list\", \"logging.logs.list\"]).action(async options => {\n  try {\n    const projectId = projectUtils_1.needProjectId(options);\n    let apiFilter = `resource.type=\"cloud_function\"`;\n\n    if (options.only) {\n      const funcNames = options.only.split(\",\");\n\n      const apiFuncFilters = _.map(funcNames, funcName => {\n        return `resource.labels.function_name=\"${funcName}\"`;\n      });\n\n      apiFilter += `\\n(${apiFuncFilters.join(\" OR \")})`;\n    }\n\n    if (options.open) {\n      const url = `https://console.developers.google.com/logs/viewer?advancedFilter=${qs.escape(apiFilter)}&project=${projectId}`;\n      opn(url);\n      return;\n    }\n\n    const entries = await gcp.cloudlogging.listEntries(projectId, apiFilter, options.lines || 35, \"desc\");\n\n    for (let i = _.size(entries) - 1; i >= 0; i--) {\n      const entry = entries[i];\n      logger_1.logger.info(entry.timestamp, _.get(entry, \"severity\", \"?\").substring(0, 1), _.get(entry, \"resource.labels.function_name\") + \":\", entry.textPayload || JSON.stringify(entry.jsonPayload) || JSON.stringify(entry.protoPayload) || \"\");\n    }\n\n    if (_.isEmpty(entries)) {\n      logger_1.logger.info(\"No log entries found.\");\n    }\n\n    return entries;\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to list log entries ${err.message}`, {\n      exit: 1\n    });\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/functions-log.js"],"names":["Object","defineProperty","exports","value","_","require","opn","qs","command_1","error_1","gcp","projectUtils_1","logger_1","requirePermissions_1","module","Command","description","option","before","requirePermissions","action","options","projectId","needProjectId","apiFilter","only","funcNames","split","apiFuncFilters","map","funcName","join","open","url","escape","entries","cloudlogging","listEntries","lines","i","size","entry","logger","info","timestamp","get","substring","textPayload","JSON","stringify","jsonPayload","protoPayload","isEmpty","err","FirebaseError","message","exit"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst opn = require(\"open\");\nconst qs = require(\"querystring\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst gcp = require(\"../gcp\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst logger_1 = require(\"../logger\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nmodule.exports = new command_1.Command(\"functions:log\")\n    .description(\"read logs from deployed functions\")\n    .option(\"--only <function_names>\", 'only show logs of specified, comma-seperated functions (e.g. \"funcA,funcB\")')\n    .option(\"-n, --lines <num_lines>\", \"specify number of log lines to fetch\")\n    .option(\"--open\", \"open logs page in web browser\")\n    .before(requirePermissions_1.requirePermissions, [\"logging.logEntries.list\", \"logging.logs.list\"])\n    .action(async (options) => {\n    try {\n        const projectId = projectUtils_1.needProjectId(options);\n        let apiFilter = `resource.type=\"cloud_function\"`;\n        if (options.only) {\n            const funcNames = options.only.split(\",\");\n            const apiFuncFilters = _.map(funcNames, (funcName) => {\n                return `resource.labels.function_name=\"${funcName}\"`;\n            });\n            apiFilter += `\\n(${apiFuncFilters.join(\" OR \")})`;\n        }\n        if (options.open) {\n            const url = `https://console.developers.google.com/logs/viewer?advancedFilter=${qs.escape(apiFilter)}&project=${projectId}`;\n            opn(url);\n            return;\n        }\n        const entries = await gcp.cloudlogging.listEntries(projectId, apiFilter, options.lines || 35, \"desc\");\n        for (let i = _.size(entries) - 1; i >= 0; i--) {\n            const entry = entries[i];\n            logger_1.logger.info(entry.timestamp, _.get(entry, \"severity\", \"?\").substring(0, 1), _.get(entry, \"resource.labels.function_name\") + \":\", entry.textPayload ||\n                JSON.stringify(entry.jsonPayload) ||\n                JSON.stringify(entry.protoPayload) ||\n                \"\");\n        }\n        if (_.isEmpty(entries)) {\n            logger_1.logger.info(\"No log entries found.\");\n        }\n        return entries;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to list log entries ${err.message}`, { exit: 1 });\n    }\n});\n"]},"metadata":{},"sourceType":"script"}