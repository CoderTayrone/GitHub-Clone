{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst metadata = require(\"../database/metadata\");\n\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nexports.default = new command_1.Command(\"database:rules:stage\").description(\"create a new realtime database ruleset\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async options => {\n  const filepath = options.config.data.database.rules;\n  logger_1.logger.info(`staging ruleset from ${filepath}`);\n  const source = fs.readFileSync(path.resolve(filepath), \"utf8\");\n  const rulesetId = await metadata.createRuleset(options.instance, source);\n  logger_1.logger.info(`staged ruleset ${rulesetId}`);\n  return rulesetId;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-rules-stage.js"],"names":["Object","defineProperty","exports","value","command_1","require","logger_1","requireDatabaseInstance_1","requirePermissions_1","metadata","fs","path","types_1","commandUtils_1","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","warnEmulatorNotSupported","Emulators","DATABASE","action","options","filepath","config","data","database","rules","logger","info","source","readFileSync","resolve","rulesetId","createRuleset","instance"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,4BAAD,CAAzC;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMM,IAAI,GAAGN,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMQ,cAAc,GAAGR,OAAO,CAAC,0BAAD,CAA9B;;AACAH,OAAO,CAACY,OAAR,GAAkB,IAAIV,SAAS,CAACW,OAAd,CAAsB,sBAAtB,EACbC,WADa,CACD,wCADC,EAEbC,MAFa,CAEN,uBAFM,EAEmB,yFAFnB,EAGbC,MAHa,CAGNV,oBAAoB,CAACW,kBAHf,EAGmC,CAAC,mCAAD,CAHnC,EAIbD,MAJa,CAINX,yBAAyB,CAACa,uBAJpB,EAKbF,MALa,CAKNL,cAAc,CAACQ,wBALT,EAKmCT,OAAO,CAACU,SAAR,CAAkBC,QALrD,EAMbC,MANa,CAMN,MAAOC,OAAP,IAAmB;AAC3B,QAAMC,QAAQ,GAAGD,OAAO,CAACE,MAAR,CAAeC,IAAf,CAAoBC,QAApB,CAA6BC,KAA9C;AACAxB,EAAAA,QAAQ,CAACyB,MAAT,CAAgBC,IAAhB,CAAsB,wBAAuBN,QAAS,EAAtD;AACA,QAAMO,MAAM,GAAGvB,EAAE,CAACwB,YAAH,CAAgBvB,IAAI,CAACwB,OAAL,CAAaT,QAAb,CAAhB,EAAwC,MAAxC,CAAf;AACA,QAAMU,SAAS,GAAG,MAAM3B,QAAQ,CAAC4B,aAAT,CAAuBZ,OAAO,CAACa,QAA/B,EAAyCL,MAAzC,CAAxB;AACA3B,EAAAA,QAAQ,CAACyB,MAAT,CAAgBC,IAAhB,CAAsB,kBAAiBI,SAAU,EAAjD;AACA,SAAOA,SAAP;AACH,CAbiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst metadata = require(\"../database/metadata\");\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst types_1 = require(\"../emulator/types\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nexports.default = new command_1.Command(\"database:rules:stage\")\n    .description(\"create a new realtime database ruleset\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (options) => {\n    const filepath = options.config.data.database.rules;\n    logger_1.logger.info(`staging ruleset from ${filepath}`);\n    const source = fs.readFileSync(path.resolve(filepath), \"utf8\");\n    const rulesetId = await metadata.createRuleset(options.instance, source);\n    logger_1.logger.info(`staged ruleset ${rulesetId}`);\n    return rulesetId;\n});\n"]},"metadata":{},"sourceType":"script"}