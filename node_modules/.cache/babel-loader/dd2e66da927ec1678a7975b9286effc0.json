{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst localHelper_1 = require(\"../extensions/localHelper\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst marked = require(\"marked\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst FUNCTION_TYPE_REGEX = /\\..+\\.function/;\nexports.default = new command_1.Command(\"ext:info <extensionName>\").description(\"display information about an extension by name (extensionName@x.y.z for a specific version)\").option(\"--markdown\", \"output info in Markdown suitable for constructing a README file\").before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").action(async (extensionName, options) => {\n  var _a, _b;\n\n  let spec;\n\n  if (localHelper_1.isLocalExtension(extensionName)) {\n    if (!options.markdown) {\n      utils.logLabeledBullet(extensionsHelper_1.logPrefix, `reading extension from directory: ${extensionName}`);\n    }\n\n    spec = await localHelper_1.getLocalExtensionSpec(extensionName);\n  } else {\n    await requirePermissions_1.requirePermissions(options, [\"firebaseextensions.sources.get\"]);\n    await extensionsHelper_1.ensureExtensionsApiEnabled(options);\n    const hasPublisherId = extensionName.split(\"/\").length >= 2;\n\n    if (hasPublisherId) {\n      const nameAndVersion = extensionName.split(\"/\")[1];\n\n      if (nameAndVersion.split(\"@\").length < 2) {\n        extensionName = extensionName + \"@latest\";\n      }\n    } else {\n      const [name, version] = extensionName.split(\"@\");\n      extensionName = `firebase/${name}@${version || \"latest\"}`;\n    }\n\n    const version = await extensionsApi.getExtensionVersion(extensionName);\n    spec = version.spec;\n  }\n\n  if (!options.markdown) {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `information about ${extensionName}:\\n`);\n  }\n\n  const lines = [];\n\n  if (options.markdown) {\n    lines.push(`# ${spec.displayName}`);\n  } else {\n    lines.push(`**Name**: ${spec.displayName}`);\n  }\n\n  const authorName = (_a = spec.author) === null || _a === void 0 ? void 0 : _a.authorName;\n  const url = (_b = spec.author) === null || _b === void 0 ? void 0 : _b.url;\n  const urlMarkdown = url ? `(**[${url}](${url})**)` : \"\";\n  lines.push(`**Author**: ${authorName} ${urlMarkdown}`);\n\n  if (spec.description) {\n    lines.push(`**Description**: ${spec.description}`);\n  }\n\n  if (spec.preinstallContent) {\n    lines.push(\"\", `**Details**: ${spec.preinstallContent}`);\n  }\n\n  if (spec.params && Array.isArray(spec.params) && spec.params.length > 0) {\n    lines.push(\"\", \"**Configuration Parameters:**\");\n\n    _.forEach(spec.params, param => {\n      lines.push(`* ${param.label}` + (param.description ? `: ${param.description}` : \"\"));\n    });\n  }\n\n  const functions = [];\n  const otherResources = [];\n\n  _.forEach(spec.resources, resource => {\n    if (FUNCTION_TYPE_REGEX.test(resource.type)) {\n      functions.push(resource);\n    } else {\n      otherResources.push(resource);\n    }\n  });\n\n  if (functions.length > 0) {\n    lines.push(\"\", \"**Cloud Functions:**\");\n\n    _.forEach(functions, func => {\n      lines.push(`* **${func.name}:** ${func.description}`);\n    });\n  }\n\n  if (otherResources.length > 0) {\n    lines.push(\"\", \"**Other Resources**:\");\n\n    _.forEach(otherResources, resource => {\n      lines.push(`* ${resource.name} (${resource.type})`);\n    });\n  }\n\n  if (spec.apis) {\n    lines.push(\"\", \"**APIs Used**:\");\n\n    _.forEach(spec.apis, api => {\n      lines.push(`* ${api.apiName}` + (api.reason ? ` (Reason: ${api.reason})` : \"\"));\n    });\n  }\n\n  if (spec.roles) {\n    lines.push(\"\", \"**Access Required**:\");\n    lines.push(\"\", \"This extension will operate with the following project IAM roles:\");\n\n    _.forEach(spec.roles, role => {\n      lines.push(`* ${role.role}` + (role.reason ? ` (Reason: ${role.reason})` : \"\"));\n    });\n  }\n\n  if (options.markdown) {\n    logger_1.logger.info(lines.join(\"\\n\\n\"));\n  } else {\n    marked.setOptions({\n      renderer: new TerminalRenderer()\n    });\n    logger_1.logger.info(marked(lines.join(\"\\n\")));\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `to install this extension, type ` + clc.bold(`firebase ext:install ${extensionName} --project=YOUR_PROJECT`));\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-info.js"],"names":["Object","defineProperty","exports","value","clc","require","_","checkMinRequiredVersion_1","command_1","extensionsApi","extensionsHelper_1","localHelper_1","logger_1","requirePermissions_1","utils","marked","TerminalRenderer","FUNCTION_TYPE_REGEX","default","Command","description","option","before","checkMinRequiredVersion","action","extensionName","options","_a","_b","spec","isLocalExtension","markdown","logLabeledBullet","logPrefix","getLocalExtensionSpec","requirePermissions","ensureExtensionsApiEnabled","hasPublisherId","split","length","nameAndVersion","name","version","getExtensionVersion","lines","push","displayName","authorName","author","url","urlMarkdown","preinstallContent","params","Array","isArray","forEach","param","label","functions","otherResources","resources","resource","test","type","func","apis","api","apiName","reason","roles","role","logger","info","join","setOptions","renderer","bold"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst localHelper_1 = require(\"../extensions/localHelper\");\nconst logger_1 = require(\"../logger\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst marked = require(\"marked\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst FUNCTION_TYPE_REGEX = /\\..+\\.function/;\nexports.default = new command_1.Command(\"ext:info <extensionName>\")\n    .description(\"display information about an extension by name (extensionName@x.y.z for a specific version)\")\n    .option(\"--markdown\", \"output info in Markdown suitable for constructing a README file\")\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .action(async (extensionName, options) => {\n    var _a, _b;\n    let spec;\n    if (localHelper_1.isLocalExtension(extensionName)) {\n        if (!options.markdown) {\n            utils.logLabeledBullet(extensionsHelper_1.logPrefix, `reading extension from directory: ${extensionName}`);\n        }\n        spec = await localHelper_1.getLocalExtensionSpec(extensionName);\n    }\n    else {\n        await requirePermissions_1.requirePermissions(options, [\"firebaseextensions.sources.get\"]);\n        await extensionsHelper_1.ensureExtensionsApiEnabled(options);\n        const hasPublisherId = extensionName.split(\"/\").length >= 2;\n        if (hasPublisherId) {\n            const nameAndVersion = extensionName.split(\"/\")[1];\n            if (nameAndVersion.split(\"@\").length < 2) {\n                extensionName = extensionName + \"@latest\";\n            }\n        }\n        else {\n            const [name, version] = extensionName.split(\"@\");\n            extensionName = `firebase/${name}@${version || \"latest\"}`;\n        }\n        const version = await extensionsApi.getExtensionVersion(extensionName);\n        spec = version.spec;\n    }\n    if (!options.markdown) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `information about ${extensionName}:\\n`);\n    }\n    const lines = [];\n    if (options.markdown) {\n        lines.push(`# ${spec.displayName}`);\n    }\n    else {\n        lines.push(`**Name**: ${spec.displayName}`);\n    }\n    const authorName = (_a = spec.author) === null || _a === void 0 ? void 0 : _a.authorName;\n    const url = (_b = spec.author) === null || _b === void 0 ? void 0 : _b.url;\n    const urlMarkdown = url ? `(**[${url}](${url})**)` : \"\";\n    lines.push(`**Author**: ${authorName} ${urlMarkdown}`);\n    if (spec.description) {\n        lines.push(`**Description**: ${spec.description}`);\n    }\n    if (spec.preinstallContent) {\n        lines.push(\"\", `**Details**: ${spec.preinstallContent}`);\n    }\n    if (spec.params && Array.isArray(spec.params) && spec.params.length > 0) {\n        lines.push(\"\", \"**Configuration Parameters:**\");\n        _.forEach(spec.params, (param) => {\n            lines.push(`* ${param.label}` + (param.description ? `: ${param.description}` : \"\"));\n        });\n    }\n    const functions = [];\n    const otherResources = [];\n    _.forEach(spec.resources, (resource) => {\n        if (FUNCTION_TYPE_REGEX.test(resource.type)) {\n            functions.push(resource);\n        }\n        else {\n            otherResources.push(resource);\n        }\n    });\n    if (functions.length > 0) {\n        lines.push(\"\", \"**Cloud Functions:**\");\n        _.forEach(functions, (func) => {\n            lines.push(`* **${func.name}:** ${func.description}`);\n        });\n    }\n    if (otherResources.length > 0) {\n        lines.push(\"\", \"**Other Resources**:\");\n        _.forEach(otherResources, (resource) => {\n            lines.push(`* ${resource.name} (${resource.type})`);\n        });\n    }\n    if (spec.apis) {\n        lines.push(\"\", \"**APIs Used**:\");\n        _.forEach(spec.apis, (api) => {\n            lines.push(`* ${api.apiName}` + (api.reason ? ` (Reason: ${api.reason})` : \"\"));\n        });\n    }\n    if (spec.roles) {\n        lines.push(\"\", \"**Access Required**:\");\n        lines.push(\"\", \"This extension will operate with the following project IAM roles:\");\n        _.forEach(spec.roles, (role) => {\n            lines.push(`* ${role.role}` + (role.reason ? ` (Reason: ${role.reason})` : \"\"));\n        });\n    }\n    if (options.markdown) {\n        logger_1.logger.info(lines.join(\"\\n\\n\"));\n    }\n    else {\n        marked.setOptions({\n            renderer: new TerminalRenderer(),\n        });\n        logger_1.logger.info(marked(lines.join(\"\\n\")));\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `to install this extension, type ` +\n            clc.bold(`firebase ext:install ${extensionName} --project=YOUR_PROJECT`));\n    }\n});\n"]},"metadata":{},"sourceType":"script"}