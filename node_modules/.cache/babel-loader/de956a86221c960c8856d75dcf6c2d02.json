{"ast":null,"code":"\"use strict\"; // Implements 'spaceDelimited' and 'pipeDelimited' from OAS 3.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.spaceDelimitedParser = exports.pipeDelimitedParser = exports.generateDelimitedParser = void 0;\n\nfunction generateDelimitedParser(delimiter) {\n  return function delimitedParser(location, rawParamValues) {\n    const value = rawParamValues[location.name];\n\n    if (value === null || value === undefined) {\n      return value;\n    } else if (Array.isArray(value)) {\n      // Client is supposed to send us a delimited string, but it looks\n      // like they sent us multiple copies of the var instead.  Just\n      // decode the array.\n      return value.map(decodeURIComponent);\n    } else {\n      return decodeURIComponent(value).split(delimiter);\n    }\n  };\n}\n\nexports.generateDelimitedParser = generateDelimitedParser;\nexports.pipeDelimitedParser = generateDelimitedParser('|');\nexports.spaceDelimitedParser = generateDelimitedParser(' ');","map":{"version":3,"sources":["../../../src/oas3/parameterParsers/delimitedParser.ts"],"names":[],"mappings":"cAAA;;;;;;;AAKA,SAAgB,uBAAhB,CAAwC,SAAxC,EAAyD;AACrD,SAAO,SAAS,eAAT,CACH,QADG,EAEH,cAFG,EAEsB;AAEzB,UAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAV,CAA5B;;AACA,QAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAhC,EAA2C;AACvC,aAAO,KAAP;AACH,KAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AAC7B;AACA;AACA;AACA,aAAO,KAAK,CAAC,GAAN,CAAU,kBAAV,CAAP;AACH,KALM,MAKA;AACH,aAAO,kBAAkB,CAAC,KAAD,CAAlB,CAA0B,KAA1B,CAAgC,SAAhC,CAAP;AACH;AACJ,GAfD;AAgBH;;AAjBD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAmBa,OAAA,CAAA,mBAAA,GAAsB,uBAAuB,CAAC,GAAD,CAA7C;AACA,OAAA,CAAA,oBAAA,GAAuB,uBAAuB,CAAC,GAAD,CAA9C","sourceRoot":"","sourcesContent":["\"use strict\";\n// Implements 'spaceDelimited' and 'pipeDelimited' from OAS 3.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.spaceDelimitedParser = exports.pipeDelimitedParser = exports.generateDelimitedParser = void 0;\nfunction generateDelimitedParser(delimiter) {\n    return function delimitedParser(location, rawParamValues) {\n        const value = rawParamValues[location.name];\n        if (value === null || value === undefined) {\n            return value;\n        }\n        else if (Array.isArray(value)) {\n            // Client is supposed to send us a delimited string, but it looks\n            // like they sent us multiple copies of the var instead.  Just\n            // decode the array.\n            return value.map(decodeURIComponent);\n        }\n        else {\n            return decodeURIComponent(value).split(delimiter);\n        }\n    };\n}\nexports.generateDelimitedParser = generateDelimitedParser;\nexports.pipeDelimitedParser = generateDelimitedParser('|');\nexports.spaceDelimitedParser = generateDelimitedParser(' ');\n//# sourceMappingURL=delimitedParser.js.map"]},"metadata":{},"sourceType":"script"}