{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getParams = exports.buildOptions = void 0;\n\nconst fs = require(\"fs-extra\");\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst paramHelper = require(\"../paramHelper\");\n\nconst specHelper = require(\"./specHelper\");\n\nconst localHelper = require(\"../localHelper\");\n\nconst triggerHelper = require(\"./triggerHelper\");\n\nconst extensionsHelper = require(\"../extensionsHelper\");\n\nconst config_1 = require(\"../../config\");\n\nconst error_1 = require(\"../../error\");\n\nconst emulatorLogger_1 = require(\"../../emulator/emulatorLogger\");\n\nconst projectUtils_1 = require(\"../../projectUtils\");\n\nconst types_1 = require(\"../../emulator/types\");\n\nasync function buildOptions(options) {\n  const extensionDir = localHelper.findExtensionYaml(process.cwd());\n  options.extensionDir = extensionDir;\n  const spec = await specHelper.readExtensionYaml(extensionDir);\n  extensionsHelper.validateSpec(spec);\n  const params = await getParams(options, spec);\n  extensionsHelper.validateCommandLineParams(params, spec.params);\n  const functionResources = specHelper.getFunctionResourcesWithParamSubstitution(spec, params);\n  let testConfig;\n\n  if (options.testConfig) {\n    testConfig = readTestConfigFile(options.testConfig);\n    checkTestConfig(testConfig, functionResources);\n  }\n\n  options.config = buildConfig(functionResources, testConfig);\n  options.extensionEnv = params;\n  const functionEmuTriggerDefs = functionResources.map(r => triggerHelper.functionResourceToEmulatedTriggerDefintion(r));\n  options.extensionTriggers = functionEmuTriggerDefs;\n  options.extensionNodeVersion = specHelper.getNodeVersion(functionResources);\n  return options;\n}\n\nexports.buildOptions = buildOptions;\n\nasync function getParams(options, extensionSpec) {\n  const projectId = projectUtils_1.needProjectId(options);\n  const userParams = await paramHelper.readParamsFile(options.testParams);\n  const autoParams = {\n    PROJECT_ID: projectId,\n    EXT_INSTANCE_ID: extensionSpec.name,\n    DATABASE_INSTANCE: projectId,\n    DATABASE_URL: `https://${projectId}.firebaseio.com`,\n    STORAGE_BUCKET: `${projectId}.appspot.com`\n  };\n  const unsubbedParamsWithoutDefaults = Object.assign(autoParams, userParams);\n  const unsubbedParams = extensionsHelper.populateDefaultParams(unsubbedParamsWithoutDefaults, extensionSpec.params);\n  return extensionsHelper.substituteParams(unsubbedParams, unsubbedParams);\n}\n\nexports.getParams = getParams;\n\nfunction checkTestConfig(testConfig, functionResources) {\n  const logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS);\n\n  if (!testConfig.functions && functionResources.length) {\n    logger.log(\"WARN\", \"This extension uses functions,\" + \"but 'firebase.json' provided by --test-config is missing a top-level 'functions' object.\" + \"Functions will not be emulated.\");\n  }\n\n  if (!testConfig.firestore && shouldEmulateFirestore(functionResources)) {\n    logger.log(\"WARN\", \"This extension interacts with Cloud Firestore,\" + \"but 'firebase.json' provided by --test-config is missing a top-level 'firestore' object.\" + \"Cloud Firestore will not be emulated.\");\n  }\n\n  if (!testConfig.database && shouldEmulateDatabase(functionResources)) {\n    logger.log(\"WARN\", \"This extension interacts with Realtime Database,\" + \"but 'firebase.json' provided by --test-config is missing a top-level 'database' object.\" + \"Realtime Database will not be emulated.\");\n  }\n\n  if (!testConfig.storage && shouldEmulateStorage(functionResources)) {\n    logger.log(\"WARN\", \"This extension interacts with Cloud Storage,\" + \"but 'firebase.json' provided by --test-config is missing a top-level 'storage' object.\" + \"Cloud Storage will not be emulated.\");\n  }\n}\n\nfunction readTestConfigFile(testConfigPath) {\n  try {\n    const buf = fs.readFileSync(path.resolve(testConfigPath));\n    return JSON.parse(buf.toString());\n  } catch (err) {\n    throw new error_1.FirebaseError(`Error reading --test-config file: ${err.message}\\n`, {\n      original: err\n    });\n  }\n}\n\nfunction buildConfig(functionResources, testConfig) {\n  const config = new config_1.Config(testConfig || {}, {\n    projectDir: process.cwd(),\n    cwd: process.cwd()\n  });\n  const emulateFunctions = shouldEmulateFunctions(functionResources);\n\n  if (!testConfig) {\n    if (emulateFunctions) {\n      config.set(\"functions\", {});\n    }\n\n    if (shouldEmulateFirestore(functionResources)) {\n      config.set(\"firestore\", {});\n    }\n\n    if (shouldEmulateDatabase(functionResources)) {\n      config.set(\"database\", {});\n    }\n\n    if (shouldEmulatePubsub(functionResources)) {\n      config.set(\"pubsub\", {});\n    }\n\n    if (shouldEmulateStorage(functionResources)) {\n      config.set(\"storage\", {});\n    }\n  }\n\n  if (config.src.functions) {\n    const sourceDirectory = getFunctionSourceDirectory(functionResources);\n    config.set(\"functions.source\", sourceDirectory);\n  }\n\n  return config;\n}\n\nfunction getFunctionSourceDirectory(functionResources) {\n  let sourceDirectory;\n\n  for (const r of functionResources) {\n    let dir = _.get(r, \"properties.sourceDirectory\");\n\n    if (!dir) {\n      dir = \"functions\";\n    }\n\n    if (!sourceDirectory) {\n      sourceDirectory = dir;\n    } else if (sourceDirectory != dir) {\n      throw new error_1.FirebaseError(`Found function resources with different sourceDirectories: '${sourceDirectory}' and '${dir}'. The extensions emulator only supports a single sourceDirectory.`);\n    }\n  }\n\n  return sourceDirectory;\n}\n\nfunction shouldEmulateFunctions(resources) {\n  return resources.length > 0;\n}\n\nfunction shouldEmulate(emulatorName, resources) {\n  for (const r of resources) {\n    const eventType = _.get(r, \"properties.eventTrigger.eventType\", \"\");\n\n    if (eventType.includes(emulatorName)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction shouldEmulateFirestore(resources) {\n  return shouldEmulate(\"cloud.firestore\", resources);\n}\n\nfunction shouldEmulateDatabase(resources) {\n  return shouldEmulate(\"google.firebase.database\", resources);\n}\n\nfunction shouldEmulatePubsub(resources) {\n  return shouldEmulate(\"google.pubsub\", resources);\n}\n\nfunction shouldEmulateStorage(resources) {\n  return shouldEmulate(\"google.storage\", resources);\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/emulator/optionsHelper.js"],"names":["Object","defineProperty","exports","value","getParams","buildOptions","fs","require","_","path","paramHelper","specHelper","localHelper","triggerHelper","extensionsHelper","config_1","error_1","emulatorLogger_1","projectUtils_1","types_1","options","extensionDir","findExtensionYaml","process","cwd","spec","readExtensionYaml","validateSpec","params","validateCommandLineParams","functionResources","getFunctionResourcesWithParamSubstitution","testConfig","readTestConfigFile","checkTestConfig","config","buildConfig","extensionEnv","functionEmuTriggerDefs","map","r","functionResourceToEmulatedTriggerDefintion","extensionTriggers","extensionNodeVersion","getNodeVersion","extensionSpec","projectId","needProjectId","userParams","readParamsFile","testParams","autoParams","PROJECT_ID","EXT_INSTANCE_ID","name","DATABASE_INSTANCE","DATABASE_URL","STORAGE_BUCKET","unsubbedParamsWithoutDefaults","assign","unsubbedParams","populateDefaultParams","substituteParams","logger","EmulatorLogger","forEmulator","Emulators","FUNCTIONS","functions","length","log","firestore","shouldEmulateFirestore","database","shouldEmulateDatabase","storage","shouldEmulateStorage","testConfigPath","buf","readFileSync","resolve","JSON","parse","toString","err","FirebaseError","message","original","Config","projectDir","emulateFunctions","shouldEmulateFunctions","set","shouldEmulatePubsub","src","sourceDirectory","getFunctionSourceDirectory","dir","get","resources","shouldEmulate","emulatorName","eventType","includes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getParams = exports.buildOptions = void 0;\nconst fs = require(\"fs-extra\");\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nconst paramHelper = require(\"../paramHelper\");\nconst specHelper = require(\"./specHelper\");\nconst localHelper = require(\"../localHelper\");\nconst triggerHelper = require(\"./triggerHelper\");\nconst extensionsHelper = require(\"../extensionsHelper\");\nconst config_1 = require(\"../../config\");\nconst error_1 = require(\"../../error\");\nconst emulatorLogger_1 = require(\"../../emulator/emulatorLogger\");\nconst projectUtils_1 = require(\"../../projectUtils\");\nconst types_1 = require(\"../../emulator/types\");\nasync function buildOptions(options) {\n    const extensionDir = localHelper.findExtensionYaml(process.cwd());\n    options.extensionDir = extensionDir;\n    const spec = await specHelper.readExtensionYaml(extensionDir);\n    extensionsHelper.validateSpec(spec);\n    const params = await getParams(options, spec);\n    extensionsHelper.validateCommandLineParams(params, spec.params);\n    const functionResources = specHelper.getFunctionResourcesWithParamSubstitution(spec, params);\n    let testConfig;\n    if (options.testConfig) {\n        testConfig = readTestConfigFile(options.testConfig);\n        checkTestConfig(testConfig, functionResources);\n    }\n    options.config = buildConfig(functionResources, testConfig);\n    options.extensionEnv = params;\n    const functionEmuTriggerDefs = functionResources.map((r) => triggerHelper.functionResourceToEmulatedTriggerDefintion(r));\n    options.extensionTriggers = functionEmuTriggerDefs;\n    options.extensionNodeVersion = specHelper.getNodeVersion(functionResources);\n    return options;\n}\nexports.buildOptions = buildOptions;\nasync function getParams(options, extensionSpec) {\n    const projectId = projectUtils_1.needProjectId(options);\n    const userParams = await paramHelper.readParamsFile(options.testParams);\n    const autoParams = {\n        PROJECT_ID: projectId,\n        EXT_INSTANCE_ID: extensionSpec.name,\n        DATABASE_INSTANCE: projectId,\n        DATABASE_URL: `https://${projectId}.firebaseio.com`,\n        STORAGE_BUCKET: `${projectId}.appspot.com`,\n    };\n    const unsubbedParamsWithoutDefaults = Object.assign(autoParams, userParams);\n    const unsubbedParams = extensionsHelper.populateDefaultParams(unsubbedParamsWithoutDefaults, extensionSpec.params);\n    return extensionsHelper.substituteParams(unsubbedParams, unsubbedParams);\n}\nexports.getParams = getParams;\nfunction checkTestConfig(testConfig, functionResources) {\n    const logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS);\n    if (!testConfig.functions && functionResources.length) {\n        logger.log(\"WARN\", \"This extension uses functions,\" +\n            \"but 'firebase.json' provided by --test-config is missing a top-level 'functions' object.\" +\n            \"Functions will not be emulated.\");\n    }\n    if (!testConfig.firestore && shouldEmulateFirestore(functionResources)) {\n        logger.log(\"WARN\", \"This extension interacts with Cloud Firestore,\" +\n            \"but 'firebase.json' provided by --test-config is missing a top-level 'firestore' object.\" +\n            \"Cloud Firestore will not be emulated.\");\n    }\n    if (!testConfig.database && shouldEmulateDatabase(functionResources)) {\n        logger.log(\"WARN\", \"This extension interacts with Realtime Database,\" +\n            \"but 'firebase.json' provided by --test-config is missing a top-level 'database' object.\" +\n            \"Realtime Database will not be emulated.\");\n    }\n    if (!testConfig.storage && shouldEmulateStorage(functionResources)) {\n        logger.log(\"WARN\", \"This extension interacts with Cloud Storage,\" +\n            \"but 'firebase.json' provided by --test-config is missing a top-level 'storage' object.\" +\n            \"Cloud Storage will not be emulated.\");\n    }\n}\nfunction readTestConfigFile(testConfigPath) {\n    try {\n        const buf = fs.readFileSync(path.resolve(testConfigPath));\n        return JSON.parse(buf.toString());\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Error reading --test-config file: ${err.message}\\n`, {\n            original: err,\n        });\n    }\n}\nfunction buildConfig(functionResources, testConfig) {\n    const config = new config_1.Config(testConfig || {}, { projectDir: process.cwd(), cwd: process.cwd() });\n    const emulateFunctions = shouldEmulateFunctions(functionResources);\n    if (!testConfig) {\n        if (emulateFunctions) {\n            config.set(\"functions\", {});\n        }\n        if (shouldEmulateFirestore(functionResources)) {\n            config.set(\"firestore\", {});\n        }\n        if (shouldEmulateDatabase(functionResources)) {\n            config.set(\"database\", {});\n        }\n        if (shouldEmulatePubsub(functionResources)) {\n            config.set(\"pubsub\", {});\n        }\n        if (shouldEmulateStorage(functionResources)) {\n            config.set(\"storage\", {});\n        }\n    }\n    if (config.src.functions) {\n        const sourceDirectory = getFunctionSourceDirectory(functionResources);\n        config.set(\"functions.source\", sourceDirectory);\n    }\n    return config;\n}\nfunction getFunctionSourceDirectory(functionResources) {\n    let sourceDirectory;\n    for (const r of functionResources) {\n        let dir = _.get(r, \"properties.sourceDirectory\");\n        if (!dir) {\n            dir = \"functions\";\n        }\n        if (!sourceDirectory) {\n            sourceDirectory = dir;\n        }\n        else if (sourceDirectory != dir) {\n            throw new error_1.FirebaseError(`Found function resources with different sourceDirectories: '${sourceDirectory}' and '${dir}'. The extensions emulator only supports a single sourceDirectory.`);\n        }\n    }\n    return sourceDirectory;\n}\nfunction shouldEmulateFunctions(resources) {\n    return resources.length > 0;\n}\nfunction shouldEmulate(emulatorName, resources) {\n    for (const r of resources) {\n        const eventType = _.get(r, \"properties.eventTrigger.eventType\", \"\");\n        if (eventType.includes(emulatorName)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction shouldEmulateFirestore(resources) {\n    return shouldEmulate(\"cloud.firestore\", resources);\n}\nfunction shouldEmulateDatabase(resources) {\n    return shouldEmulate(\"google.firebase.database\", resources);\n}\nfunction shouldEmulatePubsub(resources) {\n    return shouldEmulate(\"google.pubsub\", resources);\n}\nfunction shouldEmulateStorage(resources) {\n    return shouldEmulate(\"google.storage\", resources);\n}\n"]},"metadata":{},"sourceType":"script"}