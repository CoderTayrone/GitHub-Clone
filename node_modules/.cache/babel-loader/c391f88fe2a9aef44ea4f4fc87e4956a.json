{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst clc = require(\"cli-color\");\n\nconst fsi = require(\"../firestore/indexes\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nmodule.exports = new command_1.Command(\"firestore:indexes\").description(\"List indexes in your project's Cloud Firestore database.\").option(\"--pretty\", \"Pretty print. When not specified the indexes are printed in the \" + \"JSON specification format.\").before(requirePermissions_1.requirePermissions, [\"datastore.indexes.list\"]).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.FIRESTORE).action(async options => {\n  const indexApi = new fsi.FirestoreIndexes();\n  const indexes = await indexApi.listIndexes(options.project);\n  const fieldOverrides = await indexApi.listFieldOverrides(options.project);\n  const indexSpec = indexApi.makeIndexSpec(indexes, fieldOverrides);\n\n  if (options.pretty) {\n    logger_1.logger.info(clc.bold.white(\"Compound Indexes\"));\n    indexApi.prettyPrintIndexes(indexes);\n\n    if (fieldOverrides) {\n      logger_1.logger.info();\n      logger_1.logger.info(clc.bold.white(\"Field Overrides\"));\n      indexApi.printFieldOverrides(fieldOverrides);\n    }\n  } else {\n    logger_1.logger.info(JSON.stringify(indexSpec, undefined, 2));\n  }\n\n  return indexSpec;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/firestore-indexes-list.js"],"names":["Object","defineProperty","exports","value","command_1","require","clc","fsi","logger_1","requirePermissions_1","types_1","commandUtils_1","module","Command","description","option","before","requirePermissions","warnEmulatorNotSupported","Emulators","FIRESTORE","action","options","indexApi","FirestoreIndexes","indexes","listIndexes","project","fieldOverrides","listFieldOverrides","indexSpec","makeIndexSpec","pretty","logger","info","bold","white","prettyPrintIndexes","printFieldOverrides","JSON","stringify","undefined"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,sBAAD,CAAnB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,0BAAD,CAA9B;;AACAO,MAAM,CAACV,OAAP,GAAiB,IAAIE,SAAS,CAACS,OAAd,CAAsB,mBAAtB,EACZC,WADY,CACA,0DADA,EAEZC,MAFY,CAEL,UAFK,EAEO,qEACpB,4BAHa,EAIZC,MAJY,CAILP,oBAAoB,CAACQ,kBAJhB,EAIoC,CAAC,wBAAD,CAJpC,EAKZD,MALY,CAKLL,cAAc,CAACO,wBALV,EAKoCR,OAAO,CAACS,SAAR,CAAkBC,SALtD,EAMZC,MANY,CAML,MAAOC,OAAP,IAAmB;AAC3B,QAAMC,QAAQ,GAAG,IAAIhB,GAAG,CAACiB,gBAAR,EAAjB;AACA,QAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,WAAT,CAAqBJ,OAAO,CAACK,OAA7B,CAAtB;AACA,QAAMC,cAAc,GAAG,MAAML,QAAQ,CAACM,kBAAT,CAA4BP,OAAO,CAACK,OAApC,CAA7B;AACA,QAAMG,SAAS,GAAGP,QAAQ,CAACQ,aAAT,CAAuBN,OAAvB,EAAgCG,cAAhC,CAAlB;;AACA,MAAIN,OAAO,CAACU,MAAZ,EAAoB;AAChBxB,IAAAA,QAAQ,CAACyB,MAAT,CAAgBC,IAAhB,CAAqB5B,GAAG,CAAC6B,IAAJ,CAASC,KAAT,CAAe,kBAAf,CAArB;AACAb,IAAAA,QAAQ,CAACc,kBAAT,CAA4BZ,OAA5B;;AACA,QAAIG,cAAJ,EAAoB;AAChBpB,MAAAA,QAAQ,CAACyB,MAAT,CAAgBC,IAAhB;AACA1B,MAAAA,QAAQ,CAACyB,MAAT,CAAgBC,IAAhB,CAAqB5B,GAAG,CAAC6B,IAAJ,CAASC,KAAT,CAAe,iBAAf,CAArB;AACAb,MAAAA,QAAQ,CAACe,mBAAT,CAA6BV,cAA7B;AACH;AACJ,GARD,MASK;AACDpB,IAAAA,QAAQ,CAACyB,MAAT,CAAgBC,IAAhB,CAAqBK,IAAI,CAACC,SAAL,CAAeV,SAAf,EAA0BW,SAA1B,EAAqC,CAArC,CAArB;AACH;;AACD,SAAOX,SAAP;AACH,CAxBgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst clc = require(\"cli-color\");\nconst fsi = require(\"../firestore/indexes\");\nconst logger_1 = require(\"../logger\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst types_1 = require(\"../emulator/types\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nmodule.exports = new command_1.Command(\"firestore:indexes\")\n    .description(\"List indexes in your project's Cloud Firestore database.\")\n    .option(\"--pretty\", \"Pretty print. When not specified the indexes are printed in the \" +\n    \"JSON specification format.\")\n    .before(requirePermissions_1.requirePermissions, [\"datastore.indexes.list\"])\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.FIRESTORE)\n    .action(async (options) => {\n    const indexApi = new fsi.FirestoreIndexes();\n    const indexes = await indexApi.listIndexes(options.project);\n    const fieldOverrides = await indexApi.listFieldOverrides(options.project);\n    const indexSpec = indexApi.makeIndexSpec(indexes, fieldOverrides);\n    if (options.pretty) {\n        logger_1.logger.info(clc.bold.white(\"Compound Indexes\"));\n        indexApi.prettyPrintIndexes(indexes);\n        if (fieldOverrides) {\n            logger_1.logger.info();\n            logger_1.logger.info(clc.bold.white(\"Field Overrides\"));\n            indexApi.printFieldOverrides(fieldOverrides);\n        }\n    }\n    else {\n        logger_1.logger.info(JSON.stringify(indexSpec, undefined, 2));\n    }\n    return indexSpec;\n});\n"]},"metadata":{},"sourceType":"script"}