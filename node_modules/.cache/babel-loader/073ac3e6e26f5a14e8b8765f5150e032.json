{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmulatorHub = void 0;\n\nconst cors = require(\"cors\");\n\nconst express = require(\"express\");\n\nconst os = require(\"os\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst bodyParser = require(\"body-parser\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst constants_1 = require(\"./constants\");\n\nconst types_1 = require(\"./types\");\n\nconst hubExport_1 = require(\"./hubExport\");\n\nconst registry_1 = require(\"./registry\");\n\nconst pkg = require(\"../../package.json\");\n\nclass EmulatorHub {\n  constructor(args) {\n    this.args = args;\n    this.hub = express();\n    this.hub.use(cors({\n      origin: true\n    }));\n    this.hub.use(bodyParser.json());\n    this.hub.get(\"/\", (req, res) => {\n      res.json(this.getLocator());\n    });\n    this.hub.get(EmulatorHub.PATH_EMULATORS, (req, res) => {\n      const body = {};\n      registry_1.EmulatorRegistry.listRunning().forEach(name => {\n        body[name] = registry_1.EmulatorRegistry.get(name).getInfo();\n      });\n      res.json(body);\n    });\n    this.hub.post(EmulatorHub.PATH_EXPORT, async (req, res) => {\n      const exportPath = req.body.path;\n      utils.logLabeledBullet(\"emulators\", `Received export request. Exporting data to ${exportPath}.`);\n\n      try {\n        await new hubExport_1.HubExport(this.args.projectId, exportPath).exportAll();\n        utils.logLabeledSuccess(\"emulators\", \"Export complete.\");\n        res.status(200).send({\n          message: \"OK\"\n        });\n      } catch (e) {\n        const errorString = e.message || JSON.stringify(e);\n        utils.logLabeledWarning(\"emulators\", `Export failed: ${errorString}`);\n        res.status(500).json({\n          message: errorString\n        });\n      }\n    });\n    this.hub.put(EmulatorHub.PATH_DISABLE_FUNCTIONS, async (req, res) => {\n      utils.logLabeledBullet(\"emulators\", `Disabling Cloud Functions triggers, non-HTTP functions will not execute.`);\n      const instance = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n\n      if (!instance) {\n        res.status(400).json({\n          error: \"The Cloud Functions emulator is not running.\"\n        });\n        return;\n      }\n\n      const emu = instance;\n      await emu.disableBackgroundTriggers();\n      res.status(200).json({\n        enabled: false\n      });\n    });\n    this.hub.put(EmulatorHub.PATH_ENABLE_FUNCTIONS, async (req, res) => {\n      utils.logLabeledBullet(\"emulators\", `Enabling Cloud Functions triggers, non-HTTP functions will execute.`);\n      const instance = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n\n      if (!instance) {\n        res.status(400).send(\"The Cloud Functions emulator is not running.\");\n        return;\n      }\n\n      const emu = instance;\n      await emu.reloadTriggers();\n      res.status(200).json({\n        enabled: true\n      });\n    });\n  }\n\n  static readLocatorFile(projectId) {\n    const locatorPath = this.getLocatorFilePath(projectId);\n\n    if (!fs.existsSync(locatorPath)) {\n      return undefined;\n    }\n\n    const data = fs.readFileSync(locatorPath, \"utf8\").toString();\n    const locator = JSON.parse(data);\n\n    if (locator.version !== this.CLI_VERSION) {\n      logger_1.logger.debug(`Found locator with mismatched version, ignoring: ${JSON.stringify(locator)}`);\n      return undefined;\n    }\n\n    return locator;\n  }\n\n  static getLocatorFilePath(projectId) {\n    const dir = os.tmpdir();\n    const filename = `hub-${projectId}.json`;\n    return path.join(dir, filename);\n  }\n\n  async start() {\n    const {\n      host,\n      port\n    } = this.getInfo();\n    const server = this.hub.listen(port, host);\n    this.destroyServer = utils.createDestroyer(server);\n    await this.writeLocatorFile();\n  }\n\n  async connect() {}\n\n  async stop() {\n    if (this.destroyServer) {\n      await this.destroyServer();\n    }\n\n    await this.deleteLocatorFile();\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.HUB);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.HUB);\n    return {\n      name: this.getName(),\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.HUB;\n  }\n\n  getLocator() {\n    const {\n      host,\n      port\n    } = this.getInfo();\n    const version = pkg.version;\n    return {\n      version,\n      host,\n      port\n    };\n  }\n\n  async writeLocatorFile() {\n    const projectId = this.args.projectId;\n    const locatorPath = EmulatorHub.getLocatorFilePath(projectId);\n    const locator = this.getLocator();\n\n    if (fs.existsSync(locatorPath)) {\n      utils.logLabeledWarning(\"emulators\", `It seems that you are running multiple instances of the emulator suite for project ${projectId}. This may result in unexpected behavior.`);\n    }\n\n    logger_1.logger.debug(`[hub] writing locator at ${locatorPath}`);\n    return new Promise((resolve, reject) => {\n      fs.writeFile(locatorPath, JSON.stringify(locator), e => {\n        if (e) {\n          reject(e);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  async deleteLocatorFile() {\n    const locatorPath = EmulatorHub.getLocatorFilePath(this.args.projectId);\n    return new Promise((resolve, reject) => {\n      fs.unlink(locatorPath, e => {\n        if (e) {\n          reject(e);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n}\n\nexports.EmulatorHub = EmulatorHub;\nEmulatorHub.CLI_VERSION = pkg.version;\nEmulatorHub.PATH_EXPORT = \"/_admin/export\";\nEmulatorHub.PATH_DISABLE_FUNCTIONS = \"/functions/disableBackgroundTriggers\";\nEmulatorHub.PATH_ENABLE_FUNCTIONS = \"/functions/enableBackgroundTriggers\";\nEmulatorHub.PATH_EMULATORS = \"/emulators\";","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/hub.js"],"names":["Object","defineProperty","exports","value","EmulatorHub","cors","require","express","os","fs","path","bodyParser","utils","logger_1","constants_1","types_1","hubExport_1","registry_1","pkg","constructor","args","hub","use","origin","json","get","req","res","getLocator","PATH_EMULATORS","body","EmulatorRegistry","listRunning","forEach","name","getInfo","post","PATH_EXPORT","exportPath","logLabeledBullet","HubExport","projectId","exportAll","logLabeledSuccess","status","send","message","e","errorString","JSON","stringify","logLabeledWarning","put","PATH_DISABLE_FUNCTIONS","instance","Emulators","FUNCTIONS","error","emu","disableBackgroundTriggers","enabled","PATH_ENABLE_FUNCTIONS","reloadTriggers","readLocatorFile","locatorPath","getLocatorFilePath","existsSync","undefined","data","readFileSync","toString","locator","parse","version","CLI_VERSION","logger","debug","dir","tmpdir","filename","join","start","host","port","server","listen","destroyServer","createDestroyer","writeLocatorFile","connect","stop","deleteLocatorFile","Constants","getDefaultHost","HUB","getDefaultPort","getName","Promise","resolve","reject","writeFile","unlink"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EmulatorHub = void 0;\nconst cors = require(\"cors\");\nconst express = require(\"express\");\nconst os = require(\"os\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst bodyParser = require(\"body-parser\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"./types\");\nconst hubExport_1 = require(\"./hubExport\");\nconst registry_1 = require(\"./registry\");\nconst pkg = require(\"../../package.json\");\nclass EmulatorHub {\n    constructor(args) {\n        this.args = args;\n        this.hub = express();\n        this.hub.use(cors({ origin: true }));\n        this.hub.use(bodyParser.json());\n        this.hub.get(\"/\", (req, res) => {\n            res.json(this.getLocator());\n        });\n        this.hub.get(EmulatorHub.PATH_EMULATORS, (req, res) => {\n            const body = {};\n            registry_1.EmulatorRegistry.listRunning().forEach((name) => {\n                body[name] = registry_1.EmulatorRegistry.get(name).getInfo();\n            });\n            res.json(body);\n        });\n        this.hub.post(EmulatorHub.PATH_EXPORT, async (req, res) => {\n            const exportPath = req.body.path;\n            utils.logLabeledBullet(\"emulators\", `Received export request. Exporting data to ${exportPath}.`);\n            try {\n                await new hubExport_1.HubExport(this.args.projectId, exportPath).exportAll();\n                utils.logLabeledSuccess(\"emulators\", \"Export complete.\");\n                res.status(200).send({\n                    message: \"OK\",\n                });\n            }\n            catch (e) {\n                const errorString = e.message || JSON.stringify(e);\n                utils.logLabeledWarning(\"emulators\", `Export failed: ${errorString}`);\n                res.status(500).json({\n                    message: errorString,\n                });\n            }\n        });\n        this.hub.put(EmulatorHub.PATH_DISABLE_FUNCTIONS, async (req, res) => {\n            utils.logLabeledBullet(\"emulators\", `Disabling Cloud Functions triggers, non-HTTP functions will not execute.`);\n            const instance = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n            if (!instance) {\n                res.status(400).json({ error: \"The Cloud Functions emulator is not running.\" });\n                return;\n            }\n            const emu = instance;\n            await emu.disableBackgroundTriggers();\n            res.status(200).json({ enabled: false });\n        });\n        this.hub.put(EmulatorHub.PATH_ENABLE_FUNCTIONS, async (req, res) => {\n            utils.logLabeledBullet(\"emulators\", `Enabling Cloud Functions triggers, non-HTTP functions will execute.`);\n            const instance = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n            if (!instance) {\n                res.status(400).send(\"The Cloud Functions emulator is not running.\");\n                return;\n            }\n            const emu = instance;\n            await emu.reloadTriggers();\n            res.status(200).json({ enabled: true });\n        });\n    }\n    static readLocatorFile(projectId) {\n        const locatorPath = this.getLocatorFilePath(projectId);\n        if (!fs.existsSync(locatorPath)) {\n            return undefined;\n        }\n        const data = fs.readFileSync(locatorPath, \"utf8\").toString();\n        const locator = JSON.parse(data);\n        if (locator.version !== this.CLI_VERSION) {\n            logger_1.logger.debug(`Found locator with mismatched version, ignoring: ${JSON.stringify(locator)}`);\n            return undefined;\n        }\n        return locator;\n    }\n    static getLocatorFilePath(projectId) {\n        const dir = os.tmpdir();\n        const filename = `hub-${projectId}.json`;\n        return path.join(dir, filename);\n    }\n    async start() {\n        const { host, port } = this.getInfo();\n        const server = this.hub.listen(port, host);\n        this.destroyServer = utils.createDestroyer(server);\n        await this.writeLocatorFile();\n    }\n    async connect() {\n    }\n    async stop() {\n        if (this.destroyServer) {\n            await this.destroyServer();\n        }\n        await this.deleteLocatorFile();\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.HUB);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.HUB);\n        return {\n            name: this.getName(),\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.HUB;\n    }\n    getLocator() {\n        const { host, port } = this.getInfo();\n        const version = pkg.version;\n        return {\n            version,\n            host,\n            port,\n        };\n    }\n    async writeLocatorFile() {\n        const projectId = this.args.projectId;\n        const locatorPath = EmulatorHub.getLocatorFilePath(projectId);\n        const locator = this.getLocator();\n        if (fs.existsSync(locatorPath)) {\n            utils.logLabeledWarning(\"emulators\", `It seems that you are running multiple instances of the emulator suite for project ${projectId}. This may result in unexpected behavior.`);\n        }\n        logger_1.logger.debug(`[hub] writing locator at ${locatorPath}`);\n        return new Promise((resolve, reject) => {\n            fs.writeFile(locatorPath, JSON.stringify(locator), (e) => {\n                if (e) {\n                    reject(e);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    async deleteLocatorFile() {\n        const locatorPath = EmulatorHub.getLocatorFilePath(this.args.projectId);\n        return new Promise((resolve, reject) => {\n            fs.unlink(locatorPath, (e) => {\n                if (e) {\n                    reject(e);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\nexports.EmulatorHub = EmulatorHub;\nEmulatorHub.CLI_VERSION = pkg.version;\nEmulatorHub.PATH_EXPORT = \"/_admin/export\";\nEmulatorHub.PATH_DISABLE_FUNCTIONS = \"/functions/disableBackgroundTriggers\";\nEmulatorHub.PATH_ENABLE_FUNCTIONS = \"/functions/enableBackgroundTriggers\";\nEmulatorHub.PATH_EMULATORS = \"/emulators\";\n"]},"metadata":{},"sourceType":"script"}