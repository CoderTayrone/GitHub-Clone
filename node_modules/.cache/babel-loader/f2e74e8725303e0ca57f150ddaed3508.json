{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTimestamp = exports.getRandomString = exports.convertOfficialExtensionsToList = exports.convertExtensionOptionToLabeledList = exports.onceWithJoin = void 0;\n\nconst _ = require(\"lodash\");\n\nconst prompt_1 = require(\"../prompt\");\n\nasync function onceWithJoin(question) {\n  const response = await prompt_1.promptOnce(question);\n\n  if (Array.isArray(response)) {\n    return response.join(\",\");\n  }\n\n  return response;\n}\n\nexports.onceWithJoin = onceWithJoin;\n\nfunction convertExtensionOptionToLabeledList(options) {\n  return options.map(option => {\n    return {\n      checked: false,\n      name: option.label,\n      value: option.value\n    };\n  });\n}\n\nexports.convertExtensionOptionToLabeledList = convertExtensionOptionToLabeledList;\n\nfunction convertOfficialExtensionsToList(officialExts) {\n  return _.map(officialExts, (entry, key) => {\n    return {\n      checked: false,\n      value: key\n    };\n  });\n}\n\nexports.convertOfficialExtensionsToList = convertOfficialExtensionsToList;\n\nfunction getRandomString(length) {\n  const SUFFIX_CHAR_SET = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  let result = \"\";\n\n  for (let i = 0; i < length; i++) {\n    result += SUFFIX_CHAR_SET.charAt(Math.floor(Math.random() * SUFFIX_CHAR_SET.length));\n  }\n\n  return result;\n}\n\nexports.getRandomString = getRandomString;\n\nfunction formatTimestamp(timestamp) {\n  if (!timestamp) {\n    return \"\";\n  }\n\n  const withoutMs = timestamp.split(\".\")[0];\n  return withoutMs.replace(\"T\", \" \");\n}\n\nexports.formatTimestamp = formatTimestamp;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/utils.js"],"names":["Object","defineProperty","exports","value","formatTimestamp","getRandomString","convertOfficialExtensionsToList","convertExtensionOptionToLabeledList","onceWithJoin","_","require","prompt_1","question","response","promptOnce","Array","isArray","join","options","map","option","checked","name","label","officialExts","entry","key","length","SUFFIX_CHAR_SET","result","i","charAt","Math","floor","random","timestamp","withoutMs","split","replace"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0BF,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,+BAAR,GAA0CJ,OAAO,CAACK,mCAAR,GAA8CL,OAAO,CAACM,YAAR,GAAuB,KAAK,CAAxK;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,eAAeF,YAAf,CAA4BI,QAA5B,EAAsC;AAClC,QAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,UAAT,CAAoBF,QAApB,CAAvB;;AACA,MAAIG,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AACzB,WAAOA,QAAQ,CAACI,IAAT,CAAc,GAAd,CAAP;AACH;;AACD,SAAOJ,QAAP;AACH;;AACDX,OAAO,CAACM,YAAR,GAAuBA,YAAvB;;AACA,SAASD,mCAAT,CAA6CW,OAA7C,EAAsD;AAClD,SAAOA,OAAO,CAACC,GAAR,CAAaC,MAAD,IAAY;AAC3B,WAAO;AACHC,MAAAA,OAAO,EAAE,KADN;AAEHC,MAAAA,IAAI,EAAEF,MAAM,CAACG,KAFV;AAGHpB,MAAAA,KAAK,EAAEiB,MAAM,CAACjB;AAHX,KAAP;AAKH,GANM,CAAP;AAOH;;AACDD,OAAO,CAACK,mCAAR,GAA8CA,mCAA9C;;AACA,SAASD,+BAAT,CAAyCkB,YAAzC,EAAuD;AACnD,SAAOf,CAAC,CAACU,GAAF,CAAMK,YAAN,EAAoB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvC,WAAO;AACHL,MAAAA,OAAO,EAAE,KADN;AAEHlB,MAAAA,KAAK,EAAEuB;AAFJ,KAAP;AAIH,GALM,CAAP;AAMH;;AACDxB,OAAO,CAACI,+BAAR,GAA0CA,+BAA1C;;AACA,SAASD,eAAT,CAAyBsB,MAAzB,EAAiC;AAC7B,QAAMC,eAAe,GAAG,sCAAxB;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC7BD,IAAAA,MAAM,IAAID,eAAe,CAACG,MAAhB,CAAuBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,eAAe,CAACD,MAA3C,CAAvB,CAAV;AACH;;AACD,SAAOE,MAAP;AACH;;AACD3B,OAAO,CAACG,eAAR,GAA0BA,eAA1B;;AACA,SAASD,eAAT,CAAyB+B,SAAzB,EAAoC;AAChC,MAAI,CAACA,SAAL,EAAgB;AACZ,WAAO,EAAP;AACH;;AACD,QAAMC,SAAS,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAlB;AACA,SAAOD,SAAS,CAACE,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,CAAP;AACH;;AACDpC,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatTimestamp = exports.getRandomString = exports.convertOfficialExtensionsToList = exports.convertExtensionOptionToLabeledList = exports.onceWithJoin = void 0;\nconst _ = require(\"lodash\");\nconst prompt_1 = require(\"../prompt\");\nasync function onceWithJoin(question) {\n    const response = await prompt_1.promptOnce(question);\n    if (Array.isArray(response)) {\n        return response.join(\",\");\n    }\n    return response;\n}\nexports.onceWithJoin = onceWithJoin;\nfunction convertExtensionOptionToLabeledList(options) {\n    return options.map((option) => {\n        return {\n            checked: false,\n            name: option.label,\n            value: option.value,\n        };\n    });\n}\nexports.convertExtensionOptionToLabeledList = convertExtensionOptionToLabeledList;\nfunction convertOfficialExtensionsToList(officialExts) {\n    return _.map(officialExts, (entry, key) => {\n        return {\n            checked: false,\n            value: key,\n        };\n    });\n}\nexports.convertOfficialExtensionsToList = convertOfficialExtensionsToList;\nfunction getRandomString(length) {\n    const SUFFIX_CHAR_SET = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n    let result = \"\";\n    for (let i = 0; i < length; i++) {\n        result += SUFFIX_CHAR_SET.charAt(Math.floor(Math.random() * SUFFIX_CHAR_SET.length));\n    }\n    return result;\n}\nexports.getRandomString = getRandomString;\nfunction formatTimestamp(timestamp) {\n    if (!timestamp) {\n        return \"\";\n    }\n    const withoutMs = timestamp.split(\".\")[0];\n    return withoutMs.replace(\"T\", \" \");\n}\nexports.formatTimestamp = formatTimestamp;\n"]},"metadata":{},"sourceType":"script"}