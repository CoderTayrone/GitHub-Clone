{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeFirestoreValue = void 0;\n\nconst _ = require(\"lodash\");\n\nconst error_1 = require(\"../error\");\n\nfunction isPlainObject(input) {\n  return typeof input === \"object\" && input !== null && _.isEqual(Object.getPrototypeOf(input), Object.prototype);\n}\n\nfunction encodeHelper(val) {\n  if (_.isString(val)) {\n    return {\n      stringValue: val\n    };\n  }\n\n  if (_.isBoolean(val)) {\n    return {\n      booleanValue: val\n    };\n  }\n\n  if (_.isInteger(val)) {\n    return {\n      integerValue: val\n    };\n  }\n\n  if (_.isNumber(val)) {\n    return {\n      doubleValue: val\n    };\n  }\n\n  if (_.isDate(val)) {\n    return {\n      timestampValue: val.toISOString()\n    };\n  }\n\n  if (_.isArray(val)) {\n    const encodedElements = [];\n\n    for (const v of val) {\n      const enc = encodeHelper(v);\n\n      if (enc) {\n        encodedElements.push(enc);\n      }\n    }\n\n    return {\n      arrayValue: {\n        values: encodedElements\n      }\n    };\n  }\n\n  if (_.isNull(val)) {\n    return {\n      nullValue: \"NULL_VALUE\"\n    };\n  }\n\n  if (val instanceof Buffer || val instanceof Uint8Array) {\n    return {\n      bytesValue: val\n    };\n  }\n\n  if (isPlainObject(val)) {\n    return {\n      mapValue: {\n        fields: encodeFirestoreValue(val)\n      }\n    };\n  }\n\n  throw new error_1.FirebaseError(`Cannot encode ${val} to a Firestore Value. ` + \"The emulator does not yet support Firestore document reference values or geo points.\");\n}\n\nfunction encodeFirestoreValue(data) {\n  return _.mapValues(data, encodeHelper);\n}\n\nexports.encodeFirestoreValue = encodeFirestoreValue;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/firestore/encodeFirestoreValue.js"],"names":["Object","defineProperty","exports","value","encodeFirestoreValue","_","require","error_1","isPlainObject","input","isEqual","getPrototypeOf","prototype","encodeHelper","val","isString","stringValue","isBoolean","booleanValue","isInteger","integerValue","isNumber","doubleValue","isDate","timestampValue","toISOString","isArray","encodedElements","v","enc","push","arrayValue","values","isNull","nullValue","Buffer","Uint8Array","bytesValue","mapValue","fields","FirebaseError","data","mapValues"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,SAASE,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,SAAQ,OAAOA,KAAP,KAAiB,QAAjB,IACJA,KAAK,KAAK,IADN,IAEJJ,CAAC,CAACK,OAAF,CAAUV,MAAM,CAACW,cAAP,CAAsBF,KAAtB,CAAV,EAAwCT,MAAM,CAACY,SAA/C,CAFJ;AAGH;;AACD,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,MAAIT,CAAC,CAACU,QAAF,CAAWD,GAAX,CAAJ,EAAqB;AACjB,WAAO;AAAEE,MAAAA,WAAW,EAAEF;AAAf,KAAP;AACH;;AACD,MAAIT,CAAC,CAACY,SAAF,CAAYH,GAAZ,CAAJ,EAAsB;AAClB,WAAO;AAAEI,MAAAA,YAAY,EAAEJ;AAAhB,KAAP;AACH;;AACD,MAAIT,CAAC,CAACc,SAAF,CAAYL,GAAZ,CAAJ,EAAsB;AAClB,WAAO;AAAEM,MAAAA,YAAY,EAAEN;AAAhB,KAAP;AACH;;AACD,MAAIT,CAAC,CAACgB,QAAF,CAAWP,GAAX,CAAJ,EAAqB;AACjB,WAAO;AAAEQ,MAAAA,WAAW,EAAER;AAAf,KAAP;AACH;;AACD,MAAIT,CAAC,CAACkB,MAAF,CAAST,GAAT,CAAJ,EAAmB;AACf,WAAO;AAAEU,MAAAA,cAAc,EAAEV,GAAG,CAACW,WAAJ;AAAlB,KAAP;AACH;;AACD,MAAIpB,CAAC,CAACqB,OAAF,CAAUZ,GAAV,CAAJ,EAAoB;AAChB,UAAMa,eAAe,GAAG,EAAxB;;AACA,SAAK,MAAMC,CAAX,IAAgBd,GAAhB,EAAqB;AACjB,YAAMe,GAAG,GAAGhB,YAAY,CAACe,CAAD,CAAxB;;AACA,UAAIC,GAAJ,EAAS;AACLF,QAAAA,eAAe,CAACG,IAAhB,CAAqBD,GAArB;AACH;AACJ;;AACD,WAAO;AACHE,MAAAA,UAAU,EAAE;AAAEC,QAAAA,MAAM,EAAEL;AAAV;AADT,KAAP;AAGH;;AACD,MAAItB,CAAC,CAAC4B,MAAF,CAASnB,GAAT,CAAJ,EAAmB;AACf,WAAO;AAAEoB,MAAAA,SAAS,EAAE;AAAb,KAAP;AACH;;AACD,MAAIpB,GAAG,YAAYqB,MAAf,IAAyBrB,GAAG,YAAYsB,UAA5C,EAAwD;AACpD,WAAO;AAAEC,MAAAA,UAAU,EAAEvB;AAAd,KAAP;AACH;;AACD,MAAIN,aAAa,CAACM,GAAD,CAAjB,EAAwB;AACpB,WAAO;AACHwB,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,MAAM,EAAEnC,oBAAoB,CAACU,GAAD;AAA9B;AADP,KAAP;AAGH;;AACD,QAAM,IAAIP,OAAO,CAACiC,aAAZ,CAA2B,iBAAgB1B,GAAI,yBAArB,GAC5B,sFADE,CAAN;AAEH;;AACD,SAASV,oBAAT,CAA8BqC,IAA9B,EAAoC;AAChC,SAAOpC,CAAC,CAACqC,SAAF,CAAYD,IAAZ,EAAkB5B,YAAlB,CAAP;AACH;;AACDX,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeFirestoreValue = void 0;\nconst _ = require(\"lodash\");\nconst error_1 = require(\"../error\");\nfunction isPlainObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        _.isEqual(Object.getPrototypeOf(input), Object.prototype));\n}\nfunction encodeHelper(val) {\n    if (_.isString(val)) {\n        return { stringValue: val };\n    }\n    if (_.isBoolean(val)) {\n        return { booleanValue: val };\n    }\n    if (_.isInteger(val)) {\n        return { integerValue: val };\n    }\n    if (_.isNumber(val)) {\n        return { doubleValue: val };\n    }\n    if (_.isDate(val)) {\n        return { timestampValue: val.toISOString() };\n    }\n    if (_.isArray(val)) {\n        const encodedElements = [];\n        for (const v of val) {\n            const enc = encodeHelper(v);\n            if (enc) {\n                encodedElements.push(enc);\n            }\n        }\n        return {\n            arrayValue: { values: encodedElements },\n        };\n    }\n    if (_.isNull(val)) {\n        return { nullValue: \"NULL_VALUE\" };\n    }\n    if (val instanceof Buffer || val instanceof Uint8Array) {\n        return { bytesValue: val };\n    }\n    if (isPlainObject(val)) {\n        return {\n            mapValue: { fields: encodeFirestoreValue(val) },\n        };\n    }\n    throw new error_1.FirebaseError(`Cannot encode ${val} to a Firestore Value. ` +\n        \"The emulator does not yet support Firestore document reference values or geo points.\");\n}\nfunction encodeFirestoreValue(data) {\n    return _.mapValues(data, encodeHelper);\n}\nexports.encodeFirestoreValue = encodeFirestoreValue;\n"]},"metadata":{},"sourceType":"script"}