{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar clc = require(\"cli-color\");\n\nvar path = require(\"path\");\n\nvar {\n  FirebaseError\n} = require(\"../../error\");\n\nvar parseBoltRules = require(\"../../parseBoltRules\");\n\nvar rtdb = require(\"../../rtdb\");\n\nvar utils = require(\"../../utils\");\n\nconst dbRulesConfig = require(\"../../database/rulesConfig\");\n\nmodule.exports = function (context, options) {\n  var rulesConfig = dbRulesConfig.getRulesConfig(context.projectId, options);\n  var next = Promise.resolve();\n\n  if (!rulesConfig || rulesConfig.length === 0) {\n    return next;\n  }\n\n  var ruleFiles = {};\n  var deploys = [];\n  rulesConfig.forEach(function (ruleConfig) {\n    if (!ruleConfig.rules) {\n      return;\n    }\n\n    ruleFiles[ruleConfig.rules] = null;\n    deploys.push(ruleConfig);\n  });\n\n  _.forEach(ruleFiles, function (v, file) {\n    switch (path.extname(file)) {\n      case \".json\":\n        ruleFiles[file] = options.config.readProjectFile(file);\n        break;\n\n      case \".bolt\":\n        ruleFiles[file] = parseBoltRules(file);\n        break;\n\n      default:\n        throw new FirebaseError(\"Unexpected rules format \" + path.extname(file));\n    }\n  });\n\n  context.database = {\n    deploys: deploys,\n    ruleFiles: ruleFiles\n  };\n  utils.logBullet(clc.bold.cyan(\"database: \") + \"checking rules syntax...\");\n  return Promise.all(deploys.map(function (deploy) {\n    return rtdb.updateRules(context.projectId, deploy.instance, ruleFiles[deploy.rules], {\n      dryRun: true\n    }).then(function () {\n      utils.logSuccess(clc.bold.green(\"database: \") + \"rules syntax for database \" + clc.bold(deploy.instance) + \" is valid\");\n    });\n  }));\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/database/prepare.js"],"names":["_","require","clc","path","FirebaseError","parseBoltRules","rtdb","utils","dbRulesConfig","module","exports","context","options","rulesConfig","getRulesConfig","projectId","next","Promise","resolve","length","ruleFiles","deploys","forEach","ruleConfig","rules","push","v","file","extname","config","readProjectFile","database","logBullet","bold","cyan","all","map","deploy","updateRules","instance","dryRun","then","logSuccess","green"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAI;AAAEG,EAAAA;AAAF,IAAoBH,OAAO,CAAC,aAAD,CAA/B;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,sBAAD,CAA5B;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,aAAD,CAAnB;;AACA,MAAMO,aAAa,GAAGP,OAAO,CAAC,4BAAD,CAA7B;;AACAQ,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACzC,MAAIC,WAAW,GAAGL,aAAa,CAACM,cAAd,CAA6BH,OAAO,CAACI,SAArC,EAAgDH,OAAhD,CAAlB;AACA,MAAII,IAAI,GAAGC,OAAO,CAACC,OAAR,EAAX;;AACA,MAAI,CAACL,WAAD,IAAgBA,WAAW,CAACM,MAAZ,KAAuB,CAA3C,EAA8C;AAC1C,WAAOH,IAAP;AACH;;AACD,MAAII,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACAR,EAAAA,WAAW,CAACS,OAAZ,CAAoB,UAAUC,UAAV,EAAsB;AACtC,QAAI,CAACA,UAAU,CAACC,KAAhB,EAAuB;AACnB;AACH;;AACDJ,IAAAA,SAAS,CAACG,UAAU,CAACC,KAAZ,CAAT,GAA8B,IAA9B;AACAH,IAAAA,OAAO,CAACI,IAAR,CAAaF,UAAb;AACH,GAND;;AAOAvB,EAAAA,CAAC,CAACsB,OAAF,CAAUF,SAAV,EAAqB,UAAUM,CAAV,EAAaC,IAAb,EAAmB;AACpC,YAAQxB,IAAI,CAACyB,OAAL,CAAaD,IAAb,CAAR;AACI,WAAK,OAAL;AACIP,QAAAA,SAAS,CAACO,IAAD,CAAT,GAAkBf,OAAO,CAACiB,MAAR,CAAeC,eAAf,CAA+BH,IAA/B,CAAlB;AACA;;AACJ,WAAK,OAAL;AACIP,QAAAA,SAAS,CAACO,IAAD,CAAT,GAAkBtB,cAAc,CAACsB,IAAD,CAAhC;AACA;;AACJ;AACI,cAAM,IAAIvB,aAAJ,CAAkB,6BAA6BD,IAAI,CAACyB,OAAL,CAAaD,IAAb,CAA/C,CAAN;AARR;AAUH,GAXD;;AAYAhB,EAAAA,OAAO,CAACoB,QAAR,GAAmB;AACfV,IAAAA,OAAO,EAAEA,OADM;AAEfD,IAAAA,SAAS,EAAEA;AAFI,GAAnB;AAIAb,EAAAA,KAAK,CAACyB,SAAN,CAAgB9B,GAAG,CAAC+B,IAAJ,CAASC,IAAT,CAAc,YAAd,IAA8B,0BAA9C;AACA,SAAOjB,OAAO,CAACkB,GAAR,CAAYd,OAAO,CAACe,GAAR,CAAY,UAAUC,MAAV,EAAkB;AAC7C,WAAO/B,IAAI,CACNgC,WADE,CACU3B,OAAO,CAACI,SADlB,EAC6BsB,MAAM,CAACE,QADpC,EAC8CnB,SAAS,CAACiB,MAAM,CAACb,KAAR,CADvD,EACuE;AAAEgB,MAAAA,MAAM,EAAE;AAAV,KADvE,EAEFC,IAFE,CAEG,YAAY;AAClBlC,MAAAA,KAAK,CAACmC,UAAN,CAAiBxC,GAAG,CAAC+B,IAAJ,CAASU,KAAT,CAAe,YAAf,IACb,4BADa,GAEbzC,GAAG,CAAC+B,IAAJ,CAASI,MAAM,CAACE,QAAhB,CAFa,GAGb,WAHJ;AAIH,KAPM,CAAP;AAQH,GATkB,CAAZ,CAAP;AAUH,CA1CD","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar clc = require(\"cli-color\");\nvar path = require(\"path\");\nvar { FirebaseError } = require(\"../../error\");\nvar parseBoltRules = require(\"../../parseBoltRules\");\nvar rtdb = require(\"../../rtdb\");\nvar utils = require(\"../../utils\");\nconst dbRulesConfig = require(\"../../database/rulesConfig\");\nmodule.exports = function (context, options) {\n    var rulesConfig = dbRulesConfig.getRulesConfig(context.projectId, options);\n    var next = Promise.resolve();\n    if (!rulesConfig || rulesConfig.length === 0) {\n        return next;\n    }\n    var ruleFiles = {};\n    var deploys = [];\n    rulesConfig.forEach(function (ruleConfig) {\n        if (!ruleConfig.rules) {\n            return;\n        }\n        ruleFiles[ruleConfig.rules] = null;\n        deploys.push(ruleConfig);\n    });\n    _.forEach(ruleFiles, function (v, file) {\n        switch (path.extname(file)) {\n            case \".json\":\n                ruleFiles[file] = options.config.readProjectFile(file);\n                break;\n            case \".bolt\":\n                ruleFiles[file] = parseBoltRules(file);\n                break;\n            default:\n                throw new FirebaseError(\"Unexpected rules format \" + path.extname(file));\n        }\n    });\n    context.database = {\n        deploys: deploys,\n        ruleFiles: ruleFiles,\n    };\n    utils.logBullet(clc.bold.cyan(\"database: \") + \"checking rules syntax...\");\n    return Promise.all(deploys.map(function (deploy) {\n        return rtdb\n            .updateRules(context.projectId, deploy.instance, ruleFiles[deploy.rules], { dryRun: true })\n            .then(function () {\n            utils.logSuccess(clc.bold.green(\"database: \") +\n                \"rules syntax for database \" +\n                clc.bold(deploy.instance) +\n                \" is valid\");\n        });\n    }));\n};\n"]},"metadata":{},"sourceType":"script"}