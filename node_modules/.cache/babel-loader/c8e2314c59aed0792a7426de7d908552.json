{"ast":null,"code":"\"use strict\";\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst {\n  Client\n} = require(\"../../../apiv2\");\n\nconst {\n  initGitHub\n} = require(\"./github\");\n\nconst {\n  prompt\n} = require(\"../../../prompt\");\n\nconst {\n  logger\n} = require(\"../../../logger\");\n\nconst INDEX_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/hosting/index.html\", \"utf8\");\nconst MISSING_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/hosting/404.html\", \"utf8\");\nconst DEFAULT_IGNORES = [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"];\n\nmodule.exports = function (setup, config, options) {\n  setup.hosting = {};\n  logger.info();\n  logger.info(\"Your \" + clc.bold(\"public\") + \" directory is the folder (relative to your project directory) that\");\n  logger.info(\"will contain Hosting assets to be uploaded with \" + clc.bold(\"firebase deploy\") + \". If you\");\n  logger.info(\"have a build process for your assets, use your build's output directory.\");\n  logger.info();\n  return prompt(setup.hosting, [{\n    name: \"public\",\n    type: \"input\",\n    default: \"public\",\n    message: \"What do you want to use as your public directory?\"\n  }, {\n    name: \"spa\",\n    type: \"confirm\",\n    default: false,\n    message: \"Configure as a single-page app (rewrite all urls to /index.html)?\"\n  }, {\n    name: \"github\",\n    type: \"confirm\",\n    default: false,\n    message: \"Set up automatic builds and deploys with GitHub?\"\n  }]).then(function () {\n    setup.config.hosting = {\n      public: setup.hosting.public,\n      ignore: DEFAULT_IGNORES\n    };\n    let next;\n\n    if (setup.hosting.spa) {\n      setup.config.hosting.rewrites = [{\n        source: \"**\",\n        destination: \"/index.html\"\n      }];\n      next = Promise.resolve();\n    } else {\n      next = config.askWriteProjectFile(setup.hosting.public + \"/404.html\", MISSING_TEMPLATE);\n    }\n\n    return next.then(() => {\n      const c = new Client({\n        urlPrefix: \"https://www.gstatic.com\",\n        auth: false\n      });\n      return c.get(\"/firebasejs/releases.json\");\n    }).then(response => {\n      return config.askWriteProjectFile(setup.hosting.public + \"/index.html\", INDEX_TEMPLATE.replace(/{{VERSION}}/g, response.body.current.version));\n    }).then(() => {\n      if (setup.hosting.github) {\n        return initGitHub(setup, config, options);\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/hosting/index.js"],"names":["clc","require","fs","Client","initGitHub","prompt","logger","INDEX_TEMPLATE","readFileSync","__dirname","MISSING_TEMPLATE","DEFAULT_IGNORES","module","exports","setup","config","options","hosting","info","bold","name","type","default","message","then","public","ignore","next","spa","rewrites","source","destination","Promise","resolve","askWriteProjectFile","c","urlPrefix","auth","get","response","replace","body","current","version","github"],"mappings":"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","sourcesContent":["\"use strict\";\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst { Client } = require(\"../../../apiv2\");\nconst { initGitHub } = require(\"./github\");\nconst { prompt } = require(\"../../../prompt\");\nconst { logger } = require(\"../../../logger\");\nconst INDEX_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/hosting/index.html\", \"utf8\");\nconst MISSING_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/hosting/404.html\", \"utf8\");\nconst DEFAULT_IGNORES = [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"];\nmodule.exports = function (setup, config, options) {\n    setup.hosting = {};\n    logger.info();\n    logger.info(\"Your \" +\n        clc.bold(\"public\") +\n        \" directory is the folder (relative to your project directory) that\");\n    logger.info(\"will contain Hosting assets to be uploaded with \" + clc.bold(\"firebase deploy\") + \". If you\");\n    logger.info(\"have a build process for your assets, use your build's output directory.\");\n    logger.info();\n    return prompt(setup.hosting, [\n        {\n            name: \"public\",\n            type: \"input\",\n            default: \"public\",\n            message: \"What do you want to use as your public directory?\",\n        },\n        {\n            name: \"spa\",\n            type: \"confirm\",\n            default: false,\n            message: \"Configure as a single-page app (rewrite all urls to /index.html)?\",\n        },\n        {\n            name: \"github\",\n            type: \"confirm\",\n            default: false,\n            message: \"Set up automatic builds and deploys with GitHub?\",\n        },\n    ]).then(function () {\n        setup.config.hosting = {\n            public: setup.hosting.public,\n            ignore: DEFAULT_IGNORES,\n        };\n        let next;\n        if (setup.hosting.spa) {\n            setup.config.hosting.rewrites = [{ source: \"**\", destination: \"/index.html\" }];\n            next = Promise.resolve();\n        }\n        else {\n            next = config.askWriteProjectFile(setup.hosting.public + \"/404.html\", MISSING_TEMPLATE);\n        }\n        return next\n            .then(() => {\n            const c = new Client({ urlPrefix: \"https://www.gstatic.com\", auth: false });\n            return c.get(\"/firebasejs/releases.json\");\n        })\n            .then((response) => {\n            return config.askWriteProjectFile(setup.hosting.public + \"/index.html\", INDEX_TEMPLATE.replace(/{{VERSION}}/g, response.body.current.version));\n        })\n            .then(() => {\n            if (setup.hosting.github) {\n                return initGitHub(setup, config, options);\n            }\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"script"}