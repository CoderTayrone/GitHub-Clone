{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst command_1 = require(\"../command\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst error_1 = require(\"../error\");\n\nconst database_1 = require(\"../management/database\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst api_1 = require(\"../database/api\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst url_1 = require(\"url\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst utils = require(\"../utils\");\n\nexports.default = new command_1.Command(\"database:push <path> [infile]\").description(\"add a new JSON object to a list of data in your Firebase\").option(\"-d, --data <data>\", \"specify escaped JSON directly\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(database_1.populateInstanceDetails).before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE).action(async (path, infile, options) => {\n  if (!_.startsWith(path, \"/\")) {\n    throw new error_1.FirebaseError(\"Path must begin with /\");\n  }\n\n  const inStream = utils.stringToStream(options.data) || (infile ? fs.createReadStream(infile) : process.stdin);\n  const origin = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n  const u = new url_1.URL(utils.getDatabaseUrl(origin, options.instance, path + \".json\"));\n\n  if (!infile && !options.data) {\n    utils.explainStdin();\n  }\n\n  logger_1.logger.debug(`Database URL: ${u}`);\n  const c = new apiv2_1.Client({\n    urlPrefix: u.origin,\n    auth: true\n  });\n  let res;\n\n  try {\n    res = await c.request({\n      method: \"POST\",\n      path: u.pathname,\n      body: inStream\n    });\n  } catch (err) {\n    logger_1.logger.debug(err);\n    throw new error_1.FirebaseError(`Unexpected error while pushing data: ${err}`, {\n      exit: 2\n    });\n  }\n\n  if (!_.endsWith(path, \"/\")) {\n    path += \"/\";\n  }\n\n  const consoleUrl = utils.getDatabaseViewDataUrl(origin, options.project, options.instance, path + res.body.name);\n  utils.logSuccess(\"Data pushed successfully\");\n  logger_1.logger.info();\n  logger_1.logger.info(clc.bold(\"View data at:\"), consoleUrl);\n  return {\n    key: res.body.name\n  };\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-push.js"],"names":["Object","defineProperty","exports","value","_","require","clc","fs","apiv2_1","command_1","types_1","error_1","database_1","commandUtils_1","api_1","requirePermissions_1","url_1","logger_1","requireDatabaseInstance_1","utils","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","populateInstanceDetails","printNoticeIfEmulated","Emulators","DATABASE","action","path","infile","options","startsWith","FirebaseError","inStream","stringToStream","data","createReadStream","process","stdin","origin","realtimeOriginOrEmulatorOrCustomUrl","instanceDetails","databaseUrl","u","URL","getDatabaseUrl","instance","explainStdin","logger","debug","c","Client","urlPrefix","auth","res","request","method","pathname","body","err","exit","endsWith","consoleUrl","getDatabaseViewDataUrl","project","name","logSuccess","info","bold","key"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst apiv2_1 = require(\"../apiv2\");\nconst command_1 = require(\"../command\");\nconst types_1 = require(\"../emulator/types\");\nconst error_1 = require(\"../error\");\nconst database_1 = require(\"../management/database\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst api_1 = require(\"../database/api\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst url_1 = require(\"url\");\nconst logger_1 = require(\"../logger\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst utils = require(\"../utils\");\nexports.default = new command_1.Command(\"database:push <path> [infile]\")\n    .description(\"add a new JSON object to a list of data in your Firebase\")\n    .option(\"-d, --data <data>\", \"specify escaped JSON directly\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(database_1.populateInstanceDetails)\n    .before(commandUtils_1.printNoticeIfEmulated, types_1.Emulators.DATABASE)\n    .action(async (path, infile, options) => {\n    if (!_.startsWith(path, \"/\")) {\n        throw new error_1.FirebaseError(\"Path must begin with /\");\n    }\n    const inStream = utils.stringToStream(options.data) || (infile ? fs.createReadStream(infile) : process.stdin);\n    const origin = api_1.realtimeOriginOrEmulatorOrCustomUrl(options.instanceDetails.databaseUrl);\n    const u = new url_1.URL(utils.getDatabaseUrl(origin, options.instance, path + \".json\"));\n    if (!infile && !options.data) {\n        utils.explainStdin();\n    }\n    logger_1.logger.debug(`Database URL: ${u}`);\n    const c = new apiv2_1.Client({ urlPrefix: u.origin, auth: true });\n    let res;\n    try {\n        res = await c.request({\n            method: \"POST\",\n            path: u.pathname,\n            body: inStream,\n        });\n    }\n    catch (err) {\n        logger_1.logger.debug(err);\n        throw new error_1.FirebaseError(`Unexpected error while pushing data: ${err}`, { exit: 2 });\n    }\n    if (!_.endsWith(path, \"/\")) {\n        path += \"/\";\n    }\n    const consoleUrl = utils.getDatabaseViewDataUrl(origin, options.project, options.instance, path + res.body.name);\n    utils.logSuccess(\"Data pushed successfully\");\n    logger_1.logger.info();\n    logger_1.logger.info(clc.bold(\"View data at:\"), consoleUrl);\n    return { key: res.body.name };\n});\n"]},"metadata":{},"sourceType":"script"}