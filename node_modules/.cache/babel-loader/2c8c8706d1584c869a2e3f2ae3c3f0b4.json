{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar MuteStream = require('mute-stream');\n\nvar readline = require('readline');\n/**\n * Base interface class other can inherits from\n */\n\n\nclass UI {\n  constructor(opt) {\n    // Instantiate the Readline interface\n    // @Note: Don't reassign if already present (allow test to override the Stream)\n    if (!this.rl) {\n      this.rl = readline.createInterface(setupReadlineOptions(opt));\n    }\n\n    this.rl.resume();\n    this.onForceClose = this.onForceClose.bind(this); // Make sure new prompt start on a newline when closing\n\n    process.on('exit', this.onForceClose); // Terminate process on SIGINT (which will call process.on('exit') in return)\n\n    this.rl.on('SIGINT', this.onForceClose);\n  }\n  /**\n   * Handle the ^C exit\n   * @return {null}\n   */\n\n\n  onForceClose() {\n    this.close();\n    process.kill(process.pid, 'SIGINT');\n    console.log('');\n  }\n  /**\n   * Close the interface and cleanup listeners\n   */\n\n\n  close() {\n    // Remove events listeners\n    this.rl.removeListener('SIGINT', this.onForceClose);\n    process.removeListener('exit', this.onForceClose);\n    this.rl.output.unmute();\n\n    if (this.activePrompt && typeof this.activePrompt.close === 'function') {\n      this.activePrompt.close();\n    } // Close the readline\n\n\n    this.rl.output.end();\n    this.rl.pause();\n    this.rl.close();\n  }\n\n}\n\nfunction setupReadlineOptions(opt) {\n  opt = opt || {}; // Default `input` to stdin\n\n  var input = opt.input || process.stdin; // Add mute capabilities to the output\n\n  var ms = new MuteStream();\n  ms.pipe(opt.output || process.stdout);\n  var output = ms;\n  return _.extend({\n    terminal: true,\n    input: input,\n    output: output\n  }, _.omit(opt, ['input', 'output']));\n}\n\nmodule.exports = UI;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/ui/baseUI.js"],"names":["_","require","MuteStream","readline","UI","constructor","opt","rl","createInterface","setupReadlineOptions","resume","onForceClose","bind","process","on","close","kill","pid","console","log","removeListener","output","unmute","activePrompt","end","pause","input","stdin","ms","pipe","stdout","extend","terminal","omit","module","exports"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;;;AAEA,MAAMG,EAAN,CAAS;AACPC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf;AACA;AACA,QAAI,CAAC,KAAKC,EAAV,EAAc;AACZ,WAAKA,EAAL,GAAUJ,QAAQ,CAACK,eAAT,CAAyBC,oBAAoB,CAACH,GAAD,CAA7C,CAAV;AACD;;AAED,SAAKC,EAAL,CAAQG,MAAR;AAEA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB,CATe,CAWf;;AACAC,IAAAA,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmB,KAAKH,YAAxB,EAZe,CAcf;;AACA,SAAKJ,EAAL,CAAQO,EAAR,CAAW,QAAX,EAAqB,KAAKH,YAA1B;AACD;AAED;AACF;AACA;AACA;;;AAEEA,EAAAA,YAAY,GAAG;AACb,SAAKI,KAAL;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAaH,OAAO,CAACI,GAArB,EAA0B,QAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACD;AAED;AACF;AACA;;;AAEEJ,EAAAA,KAAK,GAAG;AACN;AACA,SAAKR,EAAL,CAAQa,cAAR,CAAuB,QAAvB,EAAiC,KAAKT,YAAtC;AACAE,IAAAA,OAAO,CAACO,cAAR,CAAuB,MAAvB,EAA+B,KAAKT,YAApC;AAEA,SAAKJ,EAAL,CAAQc,MAAR,CAAeC,MAAf;;AAEA,QAAI,KAAKC,YAAL,IAAqB,OAAO,KAAKA,YAAL,CAAkBR,KAAzB,KAAmC,UAA5D,EAAwE;AACtE,WAAKQ,YAAL,CAAkBR,KAAlB;AACD,KATK,CAWN;;;AACA,SAAKR,EAAL,CAAQc,MAAR,CAAeG,GAAf;AACA,SAAKjB,EAAL,CAAQkB,KAAR;AACA,SAAKlB,EAAL,CAAQQ,KAAR;AACD;;AAjDM;;AAoDT,SAASN,oBAAT,CAA8BH,GAA9B,EAAmC;AACjCA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb,CADiC,CAGjC;;AACA,MAAIoB,KAAK,GAAGpB,GAAG,CAACoB,KAAJ,IAAab,OAAO,CAACc,KAAjC,CAJiC,CAMjC;;AACA,MAAIC,EAAE,GAAG,IAAI1B,UAAJ,EAAT;AACA0B,EAAAA,EAAE,CAACC,IAAH,CAAQvB,GAAG,CAACe,MAAJ,IAAcR,OAAO,CAACiB,MAA9B;AACA,MAAIT,MAAM,GAAGO,EAAb;AAEA,SAAO5B,CAAC,CAAC+B,MAAF,CACL;AACEC,IAAAA,QAAQ,EAAE,IADZ;AAEEN,IAAAA,KAAK,EAAEA,KAFT;AAGEL,IAAAA,MAAM,EAAEA;AAHV,GADK,EAMLrB,CAAC,CAACiC,IAAF,CAAO3B,GAAP,EAAY,CAAC,OAAD,EAAU,QAAV,CAAZ,CANK,CAAP;AAQD;;AAED4B,MAAM,CAACC,OAAP,GAAiB/B,EAAjB","sourcesContent":["'use strict';\nvar _ = require('lodash');\nvar MuteStream = require('mute-stream');\nvar readline = require('readline');\n\n/**\n * Base interface class other can inherits from\n */\n\nclass UI {\n  constructor(opt) {\n    // Instantiate the Readline interface\n    // @Note: Don't reassign if already present (allow test to override the Stream)\n    if (!this.rl) {\n      this.rl = readline.createInterface(setupReadlineOptions(opt));\n    }\n\n    this.rl.resume();\n\n    this.onForceClose = this.onForceClose.bind(this);\n\n    // Make sure new prompt start on a newline when closing\n    process.on('exit', this.onForceClose);\n\n    // Terminate process on SIGINT (which will call process.on('exit') in return)\n    this.rl.on('SIGINT', this.onForceClose);\n  }\n\n  /**\n   * Handle the ^C exit\n   * @return {null}\n   */\n\n  onForceClose() {\n    this.close();\n    process.kill(process.pid, 'SIGINT');\n    console.log('');\n  }\n\n  /**\n   * Close the interface and cleanup listeners\n   */\n\n  close() {\n    // Remove events listeners\n    this.rl.removeListener('SIGINT', this.onForceClose);\n    process.removeListener('exit', this.onForceClose);\n\n    this.rl.output.unmute();\n\n    if (this.activePrompt && typeof this.activePrompt.close === 'function') {\n      this.activePrompt.close();\n    }\n\n    // Close the readline\n    this.rl.output.end();\n    this.rl.pause();\n    this.rl.close();\n  }\n}\n\nfunction setupReadlineOptions(opt) {\n  opt = opt || {};\n\n  // Default `input` to stdin\n  var input = opt.input || process.stdin;\n\n  // Add mute capabilities to the output\n  var ms = new MuteStream();\n  ms.pipe(opt.output || process.stdout);\n  var output = ms;\n\n  return _.extend(\n    {\n      terminal: true,\n      input: input,\n      output: output\n    },\n    _.omit(opt, ['input', 'output'])\n  );\n}\n\nmodule.exports = UI;\n"]},"metadata":{},"sourceType":"script"}