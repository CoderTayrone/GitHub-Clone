{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.publishTemplate = exports.deployTemplate = exports.validateInputRemoteConfigTemplate = exports.getEtag = void 0;\n\nconst error_1 = require(\"../../error\");\n\nconst api = require(\"../../api\");\n\nconst TIMEOUT = 30000;\n\nasync function getEtag(projectNumber, versionNumber) {\n  let reqPath = `/v1/projects/${projectNumber}/remoteConfig`;\n\n  if (versionNumber) {\n    reqPath = reqPath + \"?versionNumber=\" + versionNumber;\n  }\n\n  const response = await api.request(\"GET\", reqPath, {\n    auth: true,\n    origin: api.remoteConfigApiOrigin,\n    timeout: TIMEOUT,\n    headers: {\n      \"Accept-Encoding\": \"gzip\"\n    }\n  });\n  return response.response.headers.etag;\n}\n\nexports.getEtag = getEtag;\n\nfunction validateInputRemoteConfigTemplate(template) {\n  const templateCopy = JSON.parse(JSON.stringify(template));\n\n  if (!templateCopy || templateCopy == \"null\" || templateCopy == \"undefined\") {\n    throw new error_1.FirebaseError(`Invalid Remote Config template: ${JSON.stringify(templateCopy)}`);\n  }\n\n  if (typeof templateCopy.etag !== \"string\" || templateCopy.etag == \"\") {\n    throw new error_1.FirebaseError(\"ETag must be a non-empty string\");\n  }\n\n  if (templateCopy.conditions && !Array.isArray(templateCopy.conditions)) {\n    throw new error_1.FirebaseError(\"Remote Config conditions must be an array\");\n  }\n\n  return templateCopy;\n}\n\nexports.validateInputRemoteConfigTemplate = validateInputRemoteConfigTemplate;\n\nasync function deployTemplate(projectNumber, template, etag, options) {\n  const reqPath = `/v1/projects/${projectNumber}/remoteConfig`;\n\n  if (options === null || options === void 0 ? void 0 : options.force) {\n    etag = \"*\";\n  }\n\n  const response = await api.request(\"PUT\", reqPath, {\n    auth: true,\n    origin: api.remoteConfigApiOrigin,\n    timeout: TIMEOUT,\n    headers: {\n      \"If-Match\": etag\n    },\n    data: {\n      conditions: template.conditions,\n      parameters: template.parameters,\n      parameterGroups: template.parameterGroups\n    }\n  });\n  return response.body;\n}\n\nexports.deployTemplate = deployTemplate;\n\nfunction publishTemplate(projectNumber, template, etag, options) {\n  const temporaryTemplate = {\n    conditions: template.conditions,\n    parameters: template.parameters,\n    parameterGroups: template.parameterGroups,\n    etag: etag\n  };\n  let validTemplate = temporaryTemplate;\n  validTemplate = validateInputRemoteConfigTemplate(template);\n  return deployTemplate(projectNumber, validTemplate, etag, options);\n}\n\nexports.publishTemplate = publishTemplate;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/remoteconfig/functions.js"],"names":["Object","defineProperty","exports","value","publishTemplate","deployTemplate","validateInputRemoteConfigTemplate","getEtag","error_1","require","api","TIMEOUT","projectNumber","versionNumber","reqPath","response","request","auth","origin","remoteConfigApiOrigin","timeout","headers","etag","template","templateCopy","JSON","parse","stringify","FirebaseError","conditions","Array","isArray","options","force","data","parameters","parameterGroups","body","temporaryTemplate","validTemplate"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.publishTemplate = exports.deployTemplate = exports.validateInputRemoteConfigTemplate = exports.getEtag = void 0;\nconst error_1 = require(\"../../error\");\nconst api = require(\"../../api\");\nconst TIMEOUT = 30000;\nasync function getEtag(projectNumber, versionNumber) {\n    let reqPath = `/v1/projects/${projectNumber}/remoteConfig`;\n    if (versionNumber) {\n        reqPath = reqPath + \"?versionNumber=\" + versionNumber;\n    }\n    const response = await api.request(\"GET\", reqPath, {\n        auth: true,\n        origin: api.remoteConfigApiOrigin,\n        timeout: TIMEOUT,\n        headers: { \"Accept-Encoding\": \"gzip\" },\n    });\n    return response.response.headers.etag;\n}\nexports.getEtag = getEtag;\nfunction validateInputRemoteConfigTemplate(template) {\n    const templateCopy = JSON.parse(JSON.stringify(template));\n    if (!templateCopy || templateCopy == \"null\" || templateCopy == \"undefined\") {\n        throw new error_1.FirebaseError(`Invalid Remote Config template: ${JSON.stringify(templateCopy)}`);\n    }\n    if (typeof templateCopy.etag !== \"string\" || templateCopy.etag == \"\") {\n        throw new error_1.FirebaseError(\"ETag must be a non-empty string\");\n    }\n    if (templateCopy.conditions && !Array.isArray(templateCopy.conditions)) {\n        throw new error_1.FirebaseError(\"Remote Config conditions must be an array\");\n    }\n    return templateCopy;\n}\nexports.validateInputRemoteConfigTemplate = validateInputRemoteConfigTemplate;\nasync function deployTemplate(projectNumber, template, etag, options) {\n    const reqPath = `/v1/projects/${projectNumber}/remoteConfig`;\n    if (options === null || options === void 0 ? void 0 : options.force) {\n        etag = \"*\";\n    }\n    const response = await api.request(\"PUT\", reqPath, {\n        auth: true,\n        origin: api.remoteConfigApiOrigin,\n        timeout: TIMEOUT,\n        headers: { \"If-Match\": etag },\n        data: {\n            conditions: template.conditions,\n            parameters: template.parameters,\n            parameterGroups: template.parameterGroups,\n        },\n    });\n    return response.body;\n}\nexports.deployTemplate = deployTemplate;\nfunction publishTemplate(projectNumber, template, etag, options) {\n    const temporaryTemplate = {\n        conditions: template.conditions,\n        parameters: template.parameters,\n        parameterGroups: template.parameterGroups,\n        etag: etag,\n    };\n    let validTemplate = temporaryTemplate;\n    validTemplate = validateInputRemoteConfigTemplate(template);\n    return deployTemplate(projectNumber, validTemplate, etag, options);\n}\nexports.publishTemplate = publishTemplate;\n"]},"metadata":{},"sourceType":"script"}