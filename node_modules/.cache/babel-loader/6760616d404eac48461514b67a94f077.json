{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNodeVersion = exports.getFunctionProperties = exports.getFunctionResourcesWithParamSubstitution = exports.readFileFromDirectory = exports.readExtensionYaml = void 0;\n\nconst yaml = require(\"js-yaml\");\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../../error\");\n\nconst extensionsHelper_1 = require(\"../extensionsHelper\");\n\nconst emulatorLogger_1 = require(\"../../emulator/emulatorLogger\");\n\nconst types_1 = require(\"../../emulator/types\");\n\nconst SPEC_FILE = \"extension.yaml\";\nconst validFunctionTypes = [\"firebaseextensions.v1beta.function\", \"firebaseextensions.v1beta.scheduledFunction\"];\n\nfunction wrappedSafeLoad(source) {\n  try {\n    return yaml.safeLoad(source);\n  } catch (err) {\n    if (err instanceof yaml.YAMLException) {\n      throw new error_1.FirebaseError(`YAML Error: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n}\n\nasync function readExtensionYaml(directory) {\n  const extensionYaml = await readFileFromDirectory(directory, SPEC_FILE);\n  const source = extensionYaml.source;\n  return wrappedSafeLoad(source);\n}\n\nexports.readExtensionYaml = readExtensionYaml;\n\nfunction readFileFromDirectory(directory, file) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path.resolve(directory, file), \"utf8\", (err, data) => {\n      if (err) {\n        if (err.code === \"ENOENT\") {\n          return reject(new error_1.FirebaseError(`Could not find \"${file}\" in \"${directory}\"`, {\n            original: err\n          }));\n        }\n\n        reject(new error_1.FirebaseError(`Failed to read file \"${file}\" in \"${directory}\"`, {\n          original: err\n        }));\n      } else {\n        resolve(data);\n      }\n    });\n  }).then(source => {\n    return {\n      source,\n      sourceDirectory: directory\n    };\n  });\n}\n\nexports.readFileFromDirectory = readFileFromDirectory;\n\nfunction getFunctionResourcesWithParamSubstitution(extensionSpec, params) {\n  const rawResources = extensionSpec.resources.filter(resource => validFunctionTypes.includes(resource.type));\n  return extensionsHelper_1.substituteParams(rawResources, params);\n}\n\nexports.getFunctionResourcesWithParamSubstitution = getFunctionResourcesWithParamSubstitution;\n\nfunction getFunctionProperties(resources) {\n  return resources.map(r => r.properties);\n}\n\nexports.getFunctionProperties = getFunctionProperties;\n\nfunction getNodeVersion(resources) {\n  const functionNamesWithoutRuntime = [];\n  const versions = resources.map(r => {\n    var _a, _b;\n\n    if (_.includes(r.type, \"function\")) {\n      if ((_a = r.properties) === null || _a === void 0 ? void 0 : _a.runtime) {\n        return (_b = r.properties) === null || _b === void 0 ? void 0 : _b.runtime;\n      } else {\n        functionNamesWithoutRuntime.push(r.name);\n      }\n    }\n\n    return \"nodejs8\";\n  });\n\n  if (functionNamesWithoutRuntime.length) {\n    emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS).logLabeled(\"WARN\", \"extensions\", `No 'runtime' property found for the following functions, defaulting to nodejs8: ${functionNamesWithoutRuntime.join(\", \")}`);\n  }\n\n  const invalidRuntimes = _.filter(versions, v => {\n    return !_.includes(v, \"nodejs\");\n  });\n\n  if (invalidRuntimes.length) {\n    throw new error_1.FirebaseError(`The following runtimes are not supported by the Emulator Suite: ${invalidRuntimes.join(\", \")}. \\n Only Node runtimes are supported.`);\n  }\n\n  if (_.includes(versions, \"nodejs10\")) {\n    return \"10\";\n  }\n\n  if (_.includes(versions, \"nodejs6\")) {\n    emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS).logLabeled(\"WARN\", \"extensions\", \"Node 6 is deprecated. We recommend upgrading to a newer version.\");\n    return \"6\";\n  }\n\n  return \"8\";\n}\n\nexports.getNodeVersion = getNodeVersion;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/emulator/specHelper.js"],"names":["Object","defineProperty","exports","value","getNodeVersion","getFunctionProperties","getFunctionResourcesWithParamSubstitution","readFileFromDirectory","readExtensionYaml","yaml","require","_","path","fs","error_1","extensionsHelper_1","emulatorLogger_1","types_1","SPEC_FILE","validFunctionTypes","wrappedSafeLoad","source","safeLoad","err","YAMLException","FirebaseError","message","original","directory","extensionYaml","file","Promise","resolve","reject","readFile","data","code","then","sourceDirectory","extensionSpec","params","rawResources","resources","filter","resource","includes","type","substituteParams","map","r","properties","functionNamesWithoutRuntime","versions","_a","_b","runtime","push","name","length","EmulatorLogger","forEmulator","Emulators","FUNCTIONS","logLabeled","join","invalidRuntimes","v"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNodeVersion = exports.getFunctionProperties = exports.getFunctionResourcesWithParamSubstitution = exports.readFileFromDirectory = exports.readExtensionYaml = void 0;\nconst yaml = require(\"js-yaml\");\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../../error\");\nconst extensionsHelper_1 = require(\"../extensionsHelper\");\nconst emulatorLogger_1 = require(\"../../emulator/emulatorLogger\");\nconst types_1 = require(\"../../emulator/types\");\nconst SPEC_FILE = \"extension.yaml\";\nconst validFunctionTypes = [\n    \"firebaseextensions.v1beta.function\",\n    \"firebaseextensions.v1beta.scheduledFunction\",\n];\nfunction wrappedSafeLoad(source) {\n    try {\n        return yaml.safeLoad(source);\n    }\n    catch (err) {\n        if (err instanceof yaml.YAMLException) {\n            throw new error_1.FirebaseError(`YAML Error: ${err.message}`, { original: err });\n        }\n        throw err;\n    }\n}\nasync function readExtensionYaml(directory) {\n    const extensionYaml = await readFileFromDirectory(directory, SPEC_FILE);\n    const source = extensionYaml.source;\n    return wrappedSafeLoad(source);\n}\nexports.readExtensionYaml = readExtensionYaml;\nfunction readFileFromDirectory(directory, file) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path.resolve(directory, file), \"utf8\", (err, data) => {\n            if (err) {\n                if (err.code === \"ENOENT\") {\n                    return reject(new error_1.FirebaseError(`Could not find \"${file}\" in \"${directory}\"`, { original: err }));\n                }\n                reject(new error_1.FirebaseError(`Failed to read file \"${file}\" in \"${directory}\"`, { original: err }));\n            }\n            else {\n                resolve(data);\n            }\n        });\n    }).then((source) => {\n        return {\n            source,\n            sourceDirectory: directory,\n        };\n    });\n}\nexports.readFileFromDirectory = readFileFromDirectory;\nfunction getFunctionResourcesWithParamSubstitution(extensionSpec, params) {\n    const rawResources = extensionSpec.resources.filter((resource) => validFunctionTypes.includes(resource.type));\n    return extensionsHelper_1.substituteParams(rawResources, params);\n}\nexports.getFunctionResourcesWithParamSubstitution = getFunctionResourcesWithParamSubstitution;\nfunction getFunctionProperties(resources) {\n    return resources.map((r) => r.properties);\n}\nexports.getFunctionProperties = getFunctionProperties;\nfunction getNodeVersion(resources) {\n    const functionNamesWithoutRuntime = [];\n    const versions = resources.map((r) => {\n        var _a, _b;\n        if (_.includes(r.type, \"function\")) {\n            if ((_a = r.properties) === null || _a === void 0 ? void 0 : _a.runtime) {\n                return (_b = r.properties) === null || _b === void 0 ? void 0 : _b.runtime;\n            }\n            else {\n                functionNamesWithoutRuntime.push(r.name);\n            }\n        }\n        return \"nodejs8\";\n    });\n    if (functionNamesWithoutRuntime.length) {\n        emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS).logLabeled(\"WARN\", \"extensions\", `No 'runtime' property found for the following functions, defaulting to nodejs8: ${functionNamesWithoutRuntime.join(\", \")}`);\n    }\n    const invalidRuntimes = _.filter(versions, (v) => {\n        return !_.includes(v, \"nodejs\");\n    });\n    if (invalidRuntimes.length) {\n        throw new error_1.FirebaseError(`The following runtimes are not supported by the Emulator Suite: ${invalidRuntimes.join(\", \")}. \\n Only Node runtimes are supported.`);\n    }\n    if (_.includes(versions, \"nodejs10\")) {\n        return \"10\";\n    }\n    if (_.includes(versions, \"nodejs6\")) {\n        emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.FUNCTIONS).logLabeled(\"WARN\", \"extensions\", \"Node 6 is deprecated. We recommend upgrading to a newer version.\");\n        return \"6\";\n    }\n    return \"8\";\n}\nexports.getNodeVersion = getNodeVersion;\n"]},"metadata":{},"sourceType":"script"}