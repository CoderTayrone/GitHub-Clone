{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst controller = require(\"../emulator/controller\");\n\nconst commandUtils = require(\"../emulator/commandUtils\");\n\nconst optionsHelper = require(\"../extensions/emulator/optionsHelper\");\n\nconst utils = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nmodule.exports = new command_1.Command(\"ext:dev:emulators:start\").description(\"start the local Firebase extension emulator\").before(commandUtils.setExportOnExitOptions).option(commandUtils.FLAG_INSPECT_FUNCTIONS, commandUtils.DESC_INSPECT_FUNCTIONS).option(commandUtils.FLAG_TEST_CONFIG, commandUtils.DESC_TEST_CONFIG).option(commandUtils.FLAG_TEST_PARAMS, commandUtils.DESC_TEST_PARAMS).option(commandUtils.FLAG_IMPORT, commandUtils.DESC_IMPORT).option(commandUtils.FLAG_EXPORT_ON_EXIT, commandUtils.DESC_EXPORT_ON_EXIT).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\").action(async options => {\n  const killSignalPromise = commandUtils.shutdownWhenKilled(options);\n  const emulatorOptions = await optionsHelper.buildOptions(options);\n\n  try {\n    commandUtils.beforeEmulatorCommand(emulatorOptions);\n    await controller.startAll(emulatorOptions);\n  } catch (e) {\n    await controller.cleanShutdown();\n\n    if (!(e instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(\"Error in ext:dev:emulator:start\", e);\n    }\n\n    throw e;\n  }\n\n  utils.logSuccess(\"All emulators ready, it is now safe to connect.\");\n  await killSignalPromise;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-dev-emulators-start.js"],"names":["Object","defineProperty","exports","value","checkMinRequiredVersion_1","require","command_1","controller","commandUtils","optionsHelper","utils","error_1","module","Command","description","before","setExportOnExitOptions","option","FLAG_INSPECT_FUNCTIONS","DESC_INSPECT_FUNCTIONS","FLAG_TEST_CONFIG","DESC_TEST_CONFIG","FLAG_TEST_PARAMS","DESC_TEST_PARAMS","FLAG_IMPORT","DESC_IMPORT","FLAG_EXPORT_ON_EXIT","DESC_EXPORT_ON_EXIT","checkMinRequiredVersion","action","options","killSignalPromise","shutdownWhenKilled","emulatorOptions","buildOptions","beforeEmulatorCommand","startAll","e","cleanShutdown","FirebaseError","logSuccess"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,4BAAD,CAAzC;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,sCAAD,CAA7B;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,UAAD,CAAvB;;AACAO,MAAM,CAACV,OAAP,GAAiB,IAAII,SAAS,CAACO,OAAd,CAAsB,yBAAtB,EACZC,WADY,CACA,6CADA,EAEZC,MAFY,CAELP,YAAY,CAACQ,sBAFR,EAGZC,MAHY,CAGLT,YAAY,CAACU,sBAHR,EAGgCV,YAAY,CAACW,sBAH7C,EAIZF,MAJY,CAILT,YAAY,CAACY,gBAJR,EAI0BZ,YAAY,CAACa,gBAJvC,EAKZJ,MALY,CAKLT,YAAY,CAACc,gBALR,EAK0Bd,YAAY,CAACe,gBALvC,EAMZN,MANY,CAMLT,YAAY,CAACgB,WANR,EAMqBhB,YAAY,CAACiB,WANlC,EAOZR,MAPY,CAOLT,YAAY,CAACkB,mBAPR,EAO6BlB,YAAY,CAACmB,mBAP1C,EAQZZ,MARY,CAQLX,yBAAyB,CAACwB,uBARrB,EAQ8C,kBAR9C,EASZC,MATY,CASL,MAAOC,OAAP,IAAmB;AAC3B,QAAMC,iBAAiB,GAAGvB,YAAY,CAACwB,kBAAb,CAAgCF,OAAhC,CAA1B;AACA,QAAMG,eAAe,GAAG,MAAMxB,aAAa,CAACyB,YAAd,CAA2BJ,OAA3B,CAA9B;;AACA,MAAI;AACAtB,IAAAA,YAAY,CAAC2B,qBAAb,CAAmCF,eAAnC;AACA,UAAM1B,UAAU,CAAC6B,QAAX,CAAoBH,eAApB,CAAN;AACH,GAHD,CAIA,OAAOI,CAAP,EAAU;AACN,UAAM9B,UAAU,CAAC+B,aAAX,EAAN;;AACA,QAAI,EAAED,CAAC,YAAY1B,OAAO,CAAC4B,aAAvB,CAAJ,EAA2C;AACvC,YAAM,IAAI5B,OAAO,CAAC4B,aAAZ,CAA0B,iCAA1B,EAA6DF,CAA7D,CAAN;AACH;;AACD,UAAMA,CAAN;AACH;;AACD3B,EAAAA,KAAK,CAAC8B,UAAN,CAAiB,iDAAjB;AACA,QAAMT,iBAAN;AACH,CAzBgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst controller = require(\"../emulator/controller\");\nconst commandUtils = require(\"../emulator/commandUtils\");\nconst optionsHelper = require(\"../extensions/emulator/optionsHelper\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../error\");\nmodule.exports = new command_1.Command(\"ext:dev:emulators:start\")\n    .description(\"start the local Firebase extension emulator\")\n    .before(commandUtils.setExportOnExitOptions)\n    .option(commandUtils.FLAG_INSPECT_FUNCTIONS, commandUtils.DESC_INSPECT_FUNCTIONS)\n    .option(commandUtils.FLAG_TEST_CONFIG, commandUtils.DESC_TEST_CONFIG)\n    .option(commandUtils.FLAG_TEST_PARAMS, commandUtils.DESC_TEST_PARAMS)\n    .option(commandUtils.FLAG_IMPORT, commandUtils.DESC_IMPORT)\n    .option(commandUtils.FLAG_EXPORT_ON_EXIT, commandUtils.DESC_EXPORT_ON_EXIT)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\")\n    .action(async (options) => {\n    const killSignalPromise = commandUtils.shutdownWhenKilled(options);\n    const emulatorOptions = await optionsHelper.buildOptions(options);\n    try {\n        commandUtils.beforeEmulatorCommand(emulatorOptions);\n        await controller.startAll(emulatorOptions);\n    }\n    catch (e) {\n        await controller.cleanShutdown();\n        if (!(e instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(\"Error in ext:dev:emulator:start\", e);\n        }\n        throw e;\n    }\n    utils.logSuccess(\"All emulators ready, it is now safe to connect.\");\n    await killSignalPromise;\n});\n"]},"metadata":{},"sourceType":"script"}