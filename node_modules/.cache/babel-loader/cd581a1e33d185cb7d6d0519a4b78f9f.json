{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanAuthState = exports.getCleanDomains = exports.removeAuthDomain = exports.addAuthDomains = exports.deleteSite = exports.updateSite = exports.createSite = exports.getSite = exports.listSites = exports.createRelease = exports.cloneVersion = exports.deleteChannel = exports.updateChannelTtl = exports.createChannel = exports.listChannels = exports.getChannel = exports.normalizeName = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst api_1 = require(\"../api\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst operationPoller = require(\"../operation-poller\");\n\nconst expireUtils_1 = require(\"../hosting/expireUtils\");\n\nconst auth_1 = require(\"../gcp/auth\");\n\nconst ONE_WEEK_MS = 604800000;\nvar ReleaseType;\n\n(function (ReleaseType) {\n  ReleaseType[\"TYPE_UNSPECIFIED\"] = \"TYPE_UNSPECIFIED\";\n  ReleaseType[\"DEPLOY\"] = \"DEPLOY\";\n  ReleaseType[\"ROLLBACK\"] = \"ROLLBACK\";\n  ReleaseType[\"SITE_DISABLE\"] = \"SITE_DISABLE\";\n})(ReleaseType || (ReleaseType = {}));\n\nvar VersionStatus;\n\n(function (VersionStatus) {\n  VersionStatus[\"VERSION_STATUS_UNSPECIFIED\"] = \"VERSION_STATUS_UNSPECIFIED\";\n  VersionStatus[\"CREATED\"] = \"CREATED\";\n  VersionStatus[\"FINALIZED\"] = \"FINALIZED\";\n  VersionStatus[\"DELETED\"] = \"DELETED\";\n  VersionStatus[\"ABANDONED\"] = \"ABANDONED\";\n  VersionStatus[\"EXPIRED\"] = \"EXPIRED\";\n  VersionStatus[\"CLONING\"] = \"CLONING\";\n})(VersionStatus || (VersionStatus = {}));\n\nvar ServingConfig;\n\n(function (ServingConfig) {})(ServingConfig || (ServingConfig = {}));\n\nfunction normalizeName(s) {\n  return s.replace(/[/:_#]/g, \"-\");\n}\n\nexports.normalizeName = normalizeName;\nconst apiClient = new apiv2_1.Client({\n  urlPrefix: api_1.hostingApiOrigin,\n  apiVersion: \"v1beta1\",\n  auth: true\n});\n\nasync function getChannel(project = \"-\", site, channelId) {\n  try {\n    const res = await apiClient.get(`/projects/${project}/sites/${site}/channels/${channelId}`);\n    return res.body;\n  } catch (e) {\n    if (e.status === 404) {\n      return null;\n    }\n\n    throw e;\n  }\n}\n\nexports.getChannel = getChannel;\n\nasync function listChannels(project = \"-\", site) {\n  var _a, _b;\n\n  const channels = [];\n  let nextPageToken = \"\";\n\n  for (;;) {\n    try {\n      const res = await apiClient.get(`/projects/${project}/sites/${site}/channels`, {\n        queryParams: {\n          pageToken: nextPageToken,\n          pageSize: 10\n        }\n      });\n      const c = (_a = res.body) === null || _a === void 0 ? void 0 : _a.channels;\n\n      if (c) {\n        channels.push(...c);\n      }\n\n      nextPageToken = ((_b = res.body) === null || _b === void 0 ? void 0 : _b.nextPageToken) || \"\";\n\n      if (!nextPageToken) {\n        return channels;\n      }\n    } catch (e) {\n      if (e.status === 404) {\n        throw new error_1.FirebaseError(`could not find channels for site \"${site}\"`, {\n          original: e\n        });\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.listChannels = listChannels;\n\nasync function createChannel(project = \"-\", site, channelId, ttlMillis = expireUtils_1.DEFAULT_DURATION) {\n  const res = await apiClient.post(`/projects/${project}/sites/${site}/channels?channelId=${channelId}`, {\n    ttl: `${ttlMillis / 1000}s`\n  });\n  return res.body;\n}\n\nexports.createChannel = createChannel;\n\nasync function updateChannelTtl(project = \"-\", site, channelId, ttlMillis = ONE_WEEK_MS) {\n  const res = await apiClient.patch(`/projects/${project}/sites/${site}/channels/${channelId}`, {\n    ttl: `${ttlMillis / 1000}s`\n  }, {\n    queryParams: {\n      updateMask: [\"ttl\"].join(\",\")\n    }\n  });\n  return res.body;\n}\n\nexports.updateChannelTtl = updateChannelTtl;\n\nasync function deleteChannel(project = \"-\", site, channelId) {\n  await apiClient.delete(`/projects/${project}/sites/${site}/channels/${channelId}`);\n}\n\nexports.deleteChannel = deleteChannel;\n\nasync function cloneVersion(site, versionName, finalize = false) {\n  const res = await apiClient.post(`/projects/-/sites/${site}/versions:clone`, {\n    sourceVersion: versionName,\n    finalize\n  });\n  const {\n    name: operationName\n  } = res.body;\n  const pollRes = await operationPoller.pollOperation({\n    apiOrigin: api_1.hostingApiOrigin,\n    apiVersion: \"v1beta1\",\n    operationResourceName: operationName,\n    masterTimeout: 600000\n  });\n  return pollRes;\n}\n\nexports.cloneVersion = cloneVersion;\n\nasync function createRelease(site, channel, version) {\n  const res = await apiClient.request({\n    method: \"POST\",\n    path: `/projects/-/sites/${site}/channels/${channel}/releases`,\n    queryParams: {\n      versionName: version\n    }\n  });\n  return res.body;\n}\n\nexports.createRelease = createRelease;\n\nasync function listSites(project) {\n  var _a, _b;\n\n  const sites = [];\n  let nextPageToken = \"\";\n\n  for (;;) {\n    try {\n      const res = await apiClient.get(`/projects/${project}/sites`, {\n        queryParams: {\n          pageToken: nextPageToken,\n          pageSize: 10\n        }\n      });\n      const c = (_a = res.body) === null || _a === void 0 ? void 0 : _a.sites;\n\n      if (c) {\n        sites.push(...c);\n      }\n\n      nextPageToken = ((_b = res.body) === null || _b === void 0 ? void 0 : _b.nextPageToken) || \"\";\n\n      if (!nextPageToken) {\n        return sites;\n      }\n    } catch (e) {\n      if (e.status === 404) {\n        throw new error_1.FirebaseError(`could not find sites for project \"${project}\"`, {\n          original: e\n        });\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.listSites = listSites;\n\nasync function getSite(project, site) {\n  try {\n    const res = await apiClient.get(`/projects/${project}/sites/${site}`);\n    return res.body;\n  } catch (e) {\n    if (e.status === 404) {\n      throw new error_1.FirebaseError(`could not find site \"${site}\" for project \"${project}\"`, {\n        original: e\n      });\n    }\n\n    throw e;\n  }\n}\n\nexports.getSite = getSite;\n\nasync function createSite(project, site, appId = \"\") {\n  const res = await apiClient.post(`/projects/${project}/sites`, {\n    appId: appId\n  }, {\n    queryParams: {\n      site_id: site\n    }\n  });\n  return res.body;\n}\n\nexports.createSite = createSite;\n\nasync function updateSite(project, site, fields) {\n  const res = await apiClient.patch(`/projects/${project}/sites/${site.name}`, site, {\n    queryParams: {\n      updateMask: fields.join(\",\")\n    }\n  });\n  return res.body;\n}\n\nexports.updateSite = updateSite;\n\nasync function deleteSite(project, site) {\n  await apiClient.delete(`/projects/${project}/sites/${site}`);\n}\n\nexports.deleteSite = deleteSite;\n\nasync function addAuthDomains(project, urls) {\n  const domains = await auth_1.getAuthDomains(project);\n  const authDomains = domains || [];\n\n  for (const url of urls) {\n    const domain = url.replace(\"https://\", \"\");\n\n    if (authDomains.includes(domain)) {\n      continue;\n    }\n\n    authDomains.push(domain);\n  }\n\n  return await auth_1.updateAuthDomains(project, authDomains);\n}\n\nexports.addAuthDomains = addAuthDomains;\n\nasync function removeAuthDomain(project, url) {\n  const domains = await auth_1.getAuthDomains(project);\n\n  if (!domains.length) {\n    return domains;\n  }\n\n  const targetDomain = url.replace(\"https://\", \"\");\n  const authDomains = domains.filter(domain => domain != targetDomain);\n  return auth_1.updateAuthDomains(project, authDomains);\n}\n\nexports.removeAuthDomain = removeAuthDomain;\n\nasync function getCleanDomains(project, site) {\n  const channels = await listChannels(project, site);\n  const channelMap = channels.map(channel => channel.url.replace(\"https://\", \"\")).reduce((acc, current) => {\n    acc[current] = true;\n    return acc;\n  }, {});\n  const siteMatch = new RegExp(`${site}--`, \"i\");\n  const firebaseAppMatch = new RegExp(/firebaseapp.com$/);\n  const domains = await auth_1.getAuthDomains(project);\n  const authDomains = [];\n  domains.forEach(domain => {\n    const endsWithFirebaseApp = firebaseAppMatch.test(domain);\n\n    if (endsWithFirebaseApp) {\n      authDomains.push(domain);\n      return;\n    }\n\n    const domainWithNoChannel = siteMatch.test(domain) && !channelMap[domain];\n\n    if (domainWithNoChannel) {\n      return;\n    }\n\n    authDomains.push(domain);\n  });\n  return authDomains;\n}\n\nexports.getCleanDomains = getCleanDomains;\n\nasync function cleanAuthState(project, sites) {\n  const siteDomainMap = new Map();\n\n  for (const site of sites) {\n    const authDomains = await getCleanDomains(project, site);\n    const updatedDomains = await auth_1.updateAuthDomains(project, authDomains);\n    siteDomainMap.set(site, updatedDomains);\n  }\n\n  return siteDomainMap;\n}\n\nexports.cleanAuthState = cleanAuthState;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/hosting/api.js"],"names":["Object","defineProperty","exports","value","cleanAuthState","getCleanDomains","removeAuthDomain","addAuthDomains","deleteSite","updateSite","createSite","getSite","listSites","createRelease","cloneVersion","deleteChannel","updateChannelTtl","createChannel","listChannels","getChannel","normalizeName","error_1","require","api_1","apiv2_1","operationPoller","expireUtils_1","auth_1","ONE_WEEK_MS","ReleaseType","VersionStatus","ServingConfig","s","replace","apiClient","Client","urlPrefix","hostingApiOrigin","apiVersion","auth","project","site","channelId","res","get","body","e","status","_a","_b","channels","nextPageToken","queryParams","pageToken","pageSize","c","push","FirebaseError","original","ttlMillis","DEFAULT_DURATION","post","ttl","patch","updateMask","join","delete","versionName","finalize","sourceVersion","name","operationName","pollRes","pollOperation","apiOrigin","operationResourceName","masterTimeout","channel","version","request","method","path","sites","appId","site_id","fields","urls","domains","getAuthDomains","authDomains","url","domain","includes","updateAuthDomains","length","targetDomain","filter","channelMap","map","reduce","acc","current","siteMatch","RegExp","firebaseAppMatch","forEach","endsWithFirebaseApp","test","domainWithNoChannel","siteDomainMap","Map","updatedDomains","set"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cleanAuthState = exports.getCleanDomains = exports.removeAuthDomain = exports.addAuthDomains = exports.deleteSite = exports.updateSite = exports.createSite = exports.getSite = exports.listSites = exports.createRelease = exports.cloneVersion = exports.deleteChannel = exports.updateChannelTtl = exports.createChannel = exports.listChannels = exports.getChannel = exports.normalizeName = void 0;\nconst error_1 = require(\"../error\");\nconst api_1 = require(\"../api\");\nconst apiv2_1 = require(\"../apiv2\");\nconst operationPoller = require(\"../operation-poller\");\nconst expireUtils_1 = require(\"../hosting/expireUtils\");\nconst auth_1 = require(\"../gcp/auth\");\nconst ONE_WEEK_MS = 604800000;\nvar ReleaseType;\n(function (ReleaseType) {\n    ReleaseType[\"TYPE_UNSPECIFIED\"] = \"TYPE_UNSPECIFIED\";\n    ReleaseType[\"DEPLOY\"] = \"DEPLOY\";\n    ReleaseType[\"ROLLBACK\"] = \"ROLLBACK\";\n    ReleaseType[\"SITE_DISABLE\"] = \"SITE_DISABLE\";\n})(ReleaseType || (ReleaseType = {}));\nvar VersionStatus;\n(function (VersionStatus) {\n    VersionStatus[\"VERSION_STATUS_UNSPECIFIED\"] = \"VERSION_STATUS_UNSPECIFIED\";\n    VersionStatus[\"CREATED\"] = \"CREATED\";\n    VersionStatus[\"FINALIZED\"] = \"FINALIZED\";\n    VersionStatus[\"DELETED\"] = \"DELETED\";\n    VersionStatus[\"ABANDONED\"] = \"ABANDONED\";\n    VersionStatus[\"EXPIRED\"] = \"EXPIRED\";\n    VersionStatus[\"CLONING\"] = \"CLONING\";\n})(VersionStatus || (VersionStatus = {}));\nvar ServingConfig;\n(function (ServingConfig) {\n})(ServingConfig || (ServingConfig = {}));\nfunction normalizeName(s) {\n    return s.replace(/[/:_#]/g, \"-\");\n}\nexports.normalizeName = normalizeName;\nconst apiClient = new apiv2_1.Client({\n    urlPrefix: api_1.hostingApiOrigin,\n    apiVersion: \"v1beta1\",\n    auth: true,\n});\nasync function getChannel(project = \"-\", site, channelId) {\n    try {\n        const res = await apiClient.get(`/projects/${project}/sites/${site}/channels/${channelId}`);\n        return res.body;\n    }\n    catch (e) {\n        if (e.status === 404) {\n            return null;\n        }\n        throw e;\n    }\n}\nexports.getChannel = getChannel;\nasync function listChannels(project = \"-\", site) {\n    var _a, _b;\n    const channels = [];\n    let nextPageToken = \"\";\n    for (;;) {\n        try {\n            const res = await apiClient.get(`/projects/${project}/sites/${site}/channels`, { queryParams: { pageToken: nextPageToken, pageSize: 10 } });\n            const c = (_a = res.body) === null || _a === void 0 ? void 0 : _a.channels;\n            if (c) {\n                channels.push(...c);\n            }\n            nextPageToken = ((_b = res.body) === null || _b === void 0 ? void 0 : _b.nextPageToken) || \"\";\n            if (!nextPageToken) {\n                return channels;\n            }\n        }\n        catch (e) {\n            if (e.status === 404) {\n                throw new error_1.FirebaseError(`could not find channels for site \"${site}\"`, {\n                    original: e,\n                });\n            }\n            throw e;\n        }\n    }\n}\nexports.listChannels = listChannels;\nasync function createChannel(project = \"-\", site, channelId, ttlMillis = expireUtils_1.DEFAULT_DURATION) {\n    const res = await apiClient.post(`/projects/${project}/sites/${site}/channels?channelId=${channelId}`, { ttl: `${ttlMillis / 1000}s` });\n    return res.body;\n}\nexports.createChannel = createChannel;\nasync function updateChannelTtl(project = \"-\", site, channelId, ttlMillis = ONE_WEEK_MS) {\n    const res = await apiClient.patch(`/projects/${project}/sites/${site}/channels/${channelId}`, { ttl: `${ttlMillis / 1000}s` }, { queryParams: { updateMask: [\"ttl\"].join(\",\") } });\n    return res.body;\n}\nexports.updateChannelTtl = updateChannelTtl;\nasync function deleteChannel(project = \"-\", site, channelId) {\n    await apiClient.delete(`/projects/${project}/sites/${site}/channels/${channelId}`);\n}\nexports.deleteChannel = deleteChannel;\nasync function cloneVersion(site, versionName, finalize = false) {\n    const res = await apiClient.post(`/projects/-/sites/${site}/versions:clone`, {\n        sourceVersion: versionName,\n        finalize,\n    });\n    const { name: operationName } = res.body;\n    const pollRes = await operationPoller.pollOperation({\n        apiOrigin: api_1.hostingApiOrigin,\n        apiVersion: \"v1beta1\",\n        operationResourceName: operationName,\n        masterTimeout: 600000,\n    });\n    return pollRes;\n}\nexports.cloneVersion = cloneVersion;\nasync function createRelease(site, channel, version) {\n    const res = await apiClient.request({\n        method: \"POST\",\n        path: `/projects/-/sites/${site}/channels/${channel}/releases`,\n        queryParams: { versionName: version },\n    });\n    return res.body;\n}\nexports.createRelease = createRelease;\nasync function listSites(project) {\n    var _a, _b;\n    const sites = [];\n    let nextPageToken = \"\";\n    for (;;) {\n        try {\n            const res = await apiClient.get(`/projects/${project}/sites`, { queryParams: { pageToken: nextPageToken, pageSize: 10 } });\n            const c = (_a = res.body) === null || _a === void 0 ? void 0 : _a.sites;\n            if (c) {\n                sites.push(...c);\n            }\n            nextPageToken = ((_b = res.body) === null || _b === void 0 ? void 0 : _b.nextPageToken) || \"\";\n            if (!nextPageToken) {\n                return sites;\n            }\n        }\n        catch (e) {\n            if (e.status === 404) {\n                throw new error_1.FirebaseError(`could not find sites for project \"${project}\"`, {\n                    original: e,\n                });\n            }\n            throw e;\n        }\n    }\n}\nexports.listSites = listSites;\nasync function getSite(project, site) {\n    try {\n        const res = await apiClient.get(`/projects/${project}/sites/${site}`);\n        return res.body;\n    }\n    catch (e) {\n        if (e.status === 404) {\n            throw new error_1.FirebaseError(`could not find site \"${site}\" for project \"${project}\"`, {\n                original: e,\n            });\n        }\n        throw e;\n    }\n}\nexports.getSite = getSite;\nasync function createSite(project, site, appId = \"\") {\n    const res = await apiClient.post(`/projects/${project}/sites`, { appId: appId }, { queryParams: { site_id: site } });\n    return res.body;\n}\nexports.createSite = createSite;\nasync function updateSite(project, site, fields) {\n    const res = await apiClient.patch(`/projects/${project}/sites/${site.name}`, site, {\n        queryParams: { updateMask: fields.join(\",\") },\n    });\n    return res.body;\n}\nexports.updateSite = updateSite;\nasync function deleteSite(project, site) {\n    await apiClient.delete(`/projects/${project}/sites/${site}`);\n}\nexports.deleteSite = deleteSite;\nasync function addAuthDomains(project, urls) {\n    const domains = await auth_1.getAuthDomains(project);\n    const authDomains = domains || [];\n    for (const url of urls) {\n        const domain = url.replace(\"https://\", \"\");\n        if (authDomains.includes(domain)) {\n            continue;\n        }\n        authDomains.push(domain);\n    }\n    return await auth_1.updateAuthDomains(project, authDomains);\n}\nexports.addAuthDomains = addAuthDomains;\nasync function removeAuthDomain(project, url) {\n    const domains = await auth_1.getAuthDomains(project);\n    if (!domains.length) {\n        return domains;\n    }\n    const targetDomain = url.replace(\"https://\", \"\");\n    const authDomains = domains.filter((domain) => domain != targetDomain);\n    return auth_1.updateAuthDomains(project, authDomains);\n}\nexports.removeAuthDomain = removeAuthDomain;\nasync function getCleanDomains(project, site) {\n    const channels = await listChannels(project, site);\n    const channelMap = channels\n        .map((channel) => channel.url.replace(\"https://\", \"\"))\n        .reduce((acc, current) => {\n        acc[current] = true;\n        return acc;\n    }, {});\n    const siteMatch = new RegExp(`${site}--`, \"i\");\n    const firebaseAppMatch = new RegExp(/firebaseapp.com$/);\n    const domains = await auth_1.getAuthDomains(project);\n    const authDomains = [];\n    domains.forEach((domain) => {\n        const endsWithFirebaseApp = firebaseAppMatch.test(domain);\n        if (endsWithFirebaseApp) {\n            authDomains.push(domain);\n            return;\n        }\n        const domainWithNoChannel = siteMatch.test(domain) && !channelMap[domain];\n        if (domainWithNoChannel) {\n            return;\n        }\n        authDomains.push(domain);\n    });\n    return authDomains;\n}\nexports.getCleanDomains = getCleanDomains;\nasync function cleanAuthState(project, sites) {\n    const siteDomainMap = new Map();\n    for (const site of sites) {\n        const authDomains = await getCleanDomains(project, site);\n        const updatedDomains = await auth_1.updateAuthDomains(project, authDomains);\n        siteDomainMap.set(site, updatedDomains);\n    }\n    return siteDomainMap;\n}\nexports.cleanAuthState = cleanAuthState;\n"]},"metadata":{},"sourceType":"script"}