{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projects_1 = require(\"../management/projects\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nmodule.exports = new command_1.Command(\"projects:create [projectId]\").description(\"creates a new Google Cloud Platform project, then adds Firebase resources to the project\").option(\"-n, --display-name <displayName>\", \"(optional) display name for the project\").option(\"-o, --organization <organizationId>\", \"(optional) ID of the parent Google Cloud Platform organization under which to create this project\").option(\"-f, --folder <folderId>\", \"(optional) ID of the parent Google Cloud Platform folder in which to create this project\").before(requireAuth_1.requireAuth).action(async (projectId, options) => {\n  options.projectId = projectId;\n\n  if (options.organization && options.folder) {\n    throw new error_1.FirebaseError(\"Invalid argument, please provide only one type of project parent (organization or folder)\");\n  }\n\n  if (!options.nonInteractive) {\n    await prompt_1.prompt(options, projects_1.PROJECTS_CREATE_QUESTIONS);\n  }\n\n  if (!options.projectId) {\n    throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n  }\n\n  let parentResource;\n\n  if (options.organization) {\n    parentResource = {\n      type: projects_1.ProjectParentResourceType.ORGANIZATION,\n      id: options.organization\n    };\n  } else if (options.folder) {\n    parentResource = {\n      type: projects_1.ProjectParentResourceType.FOLDER,\n      id: options.folder\n    };\n  }\n\n  return projects_1.createFirebaseProjectAndLog(options.projectId, {\n    displayName: options.displayName,\n    parentResource\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/projects-create.js"],"names":["Object","defineProperty","exports","value","command_1","require","error_1","projects_1","prompt_1","requireAuth_1","module","Command","description","option","before","requireAuth","action","projectId","options","organization","folder","FirebaseError","nonInteractive","prompt","PROJECTS_CREATE_QUESTIONS","parentResource","type","ProjectParentResourceType","ORGANIZATION","id","FOLDER","createFirebaseProjectAndLog","displayName"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,gBAAD,CAA7B;;AACAK,MAAM,CAACR,OAAP,GAAiB,IAAIE,SAAS,CAACO,OAAd,CAAsB,6BAAtB,EACZC,WADY,CACA,0FADA,EAEZC,MAFY,CAEL,kCAFK,EAE+B,yCAF/B,EAGZA,MAHY,CAGL,qCAHK,EAGkC,mGAHlC,EAIZA,MAJY,CAIL,yBAJK,EAIsB,0FAJtB,EAKZC,MALY,CAKLL,aAAa,CAACM,WALT,EAMZC,MANY,CAML,OAAOC,SAAP,EAAkBC,OAAlB,KAA8B;AACtCA,EAAAA,OAAO,CAACD,SAAR,GAAoBA,SAApB;;AACA,MAAIC,OAAO,CAACC,YAAR,IAAwBD,OAAO,CAACE,MAApC,EAA4C;AACxC,UAAM,IAAId,OAAO,CAACe,aAAZ,CAA0B,2FAA1B,CAAN;AACH;;AACD,MAAI,CAACH,OAAO,CAACI,cAAb,EAA6B;AACzB,UAAMd,QAAQ,CAACe,MAAT,CAAgBL,OAAhB,EAAyBX,UAAU,CAACiB,yBAApC,CAAN;AACH;;AACD,MAAI,CAACN,OAAO,CAACD,SAAb,EAAwB;AACpB,UAAM,IAAIX,OAAO,CAACe,aAAZ,CAA0B,4BAA1B,CAAN;AACH;;AACD,MAAII,cAAJ;;AACA,MAAIP,OAAO,CAACC,YAAZ,EAA0B;AACtBM,IAAAA,cAAc,GAAG;AAAEC,MAAAA,IAAI,EAAEnB,UAAU,CAACoB,yBAAX,CAAqCC,YAA7C;AAA2DC,MAAAA,EAAE,EAAEX,OAAO,CAACC;AAAvE,KAAjB;AACH,GAFD,MAGK,IAAID,OAAO,CAACE,MAAZ,EAAoB;AACrBK,IAAAA,cAAc,GAAG;AAAEC,MAAAA,IAAI,EAAEnB,UAAU,CAACoB,yBAAX,CAAqCG,MAA7C;AAAqDD,MAAAA,EAAE,EAAEX,OAAO,CAACE;AAAjE,KAAjB;AACH;;AACD,SAAOb,UAAU,CAACwB,2BAAX,CAAuCb,OAAO,CAACD,SAA/C,EAA0D;AAC7De,IAAAA,WAAW,EAAEd,OAAO,CAACc,WADwC;AAE7DP,IAAAA;AAF6D,GAA1D,CAAP;AAIH,CA5BgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projects_1 = require(\"../management/projects\");\nconst prompt_1 = require(\"../prompt\");\nconst requireAuth_1 = require(\"../requireAuth\");\nmodule.exports = new command_1.Command(\"projects:create [projectId]\")\n    .description(\"creates a new Google Cloud Platform project, then adds Firebase resources to the project\")\n    .option(\"-n, --display-name <displayName>\", \"(optional) display name for the project\")\n    .option(\"-o, --organization <organizationId>\", \"(optional) ID of the parent Google Cloud Platform organization under which to create this project\")\n    .option(\"-f, --folder <folderId>\", \"(optional) ID of the parent Google Cloud Platform folder in which to create this project\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (projectId, options) => {\n    options.projectId = projectId;\n    if (options.organization && options.folder) {\n        throw new error_1.FirebaseError(\"Invalid argument, please provide only one type of project parent (organization or folder)\");\n    }\n    if (!options.nonInteractive) {\n        await prompt_1.prompt(options, projects_1.PROJECTS_CREATE_QUESTIONS);\n    }\n    if (!options.projectId) {\n        throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n    }\n    let parentResource;\n    if (options.organization) {\n        parentResource = { type: projects_1.ProjectParentResourceType.ORGANIZATION, id: options.organization };\n    }\n    else if (options.folder) {\n        parentResource = { type: projects_1.ProjectParentResourceType.FOLDER, id: options.folder };\n    }\n    return projects_1.createFirebaseProjectAndLog(options.projectId, {\n        displayName: options.displayName,\n        parentResource,\n    });\n});\n"]},"metadata":{},"sourceType":"script"}