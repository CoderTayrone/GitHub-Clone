{"ast":null,"code":"// this is the only approach that was significantly faster than using\n// str.replace(/\\/+$/, '') for strings ending with a lot of / chars and\n// containing multiple / chars.\nconst batchStrings = ['/'.repeat(1024), '/'.repeat(512), '/'.repeat(256), '/'.repeat(128), '/'.repeat(64), '/'.repeat(32), '/'.repeat(16), '/'.repeat(8), '/'.repeat(4), '/'.repeat(2), '/'];\n\nmodule.exports = str => {\n  for (const s of batchStrings) {\n    while (str.length >= s.length && str.slice(-1 * s.length) === s) str = str.slice(0, -1 * s.length);\n  }\n\n  return str;\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/node_modules/tar/lib/strip-trailing-slashes.js"],"names":["batchStrings","repeat","module","exports","str","s","length","slice"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,YAAY,GAAG,CACnB,IAAIC,MAAJ,CAAW,IAAX,CADmB,EAEnB,IAAIA,MAAJ,CAAW,GAAX,CAFmB,EAGnB,IAAIA,MAAJ,CAAW,GAAX,CAHmB,EAInB,IAAIA,MAAJ,CAAW,GAAX,CAJmB,EAKnB,IAAIA,MAAJ,CAAW,EAAX,CALmB,EAMnB,IAAIA,MAAJ,CAAW,EAAX,CANmB,EAOnB,IAAIA,MAAJ,CAAW,EAAX,CAPmB,EAQnB,IAAIA,MAAJ,CAAW,CAAX,CARmB,EASnB,IAAIA,MAAJ,CAAW,CAAX,CATmB,EAUnB,IAAIA,MAAJ,CAAW,CAAX,CAVmB,EAWnB,GAXmB,CAArB;;AAcAC,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI;AACtB,OAAK,MAAMC,CAAX,IAAgBL,YAAhB,EAA8B;AAC5B,WAAOI,GAAG,CAACE,MAAJ,IAAcD,CAAC,CAACC,MAAhB,IAA0BF,GAAG,CAACG,KAAJ,CAAU,CAAC,CAAD,GAAKF,CAAC,CAACC,MAAjB,MAA6BD,CAA9D,EACED,GAAG,GAAGA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAD,GAAKF,CAAC,CAACC,MAApB,CAAN;AACH;;AACD,SAAOF,GAAP;AACD,CAND","sourcesContent":["// this is the only approach that was significantly faster than using\n// str.replace(/\\/+$/, '') for strings ending with a lot of / chars and\n// containing multiple / chars.\nconst batchStrings = [\n  '/'.repeat(1024),\n  '/'.repeat(512),\n  '/'.repeat(256),\n  '/'.repeat(128),\n  '/'.repeat(64),\n  '/'.repeat(32),\n  '/'.repeat(16),\n  '/'.repeat(8),\n  '/'.repeat(4),\n  '/'.repeat(2),\n  '/',\n]\n\nmodule.exports = str => {\n  for (const s of batchStrings) {\n    while (str.length >= s.length && str.slice(-1 * s.length) === s)\n      str = str.slice(0, -1 * s.length)\n  }\n  return str\n}\n"]},"metadata":{},"sourceType":"script"}