{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doSetup = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst error_1 = require(\"../../error\");\n\nconst projects_1 = require(\"../../management/projects\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst prompt_1 = require(\"../../prompt\");\n\nconst utils = require(\"../../utils\");\n\nconst OPTION_NO_PROJECT = \"Don't set up a default project\";\nconst OPTION_USE_PROJECT = \"Use an existing project\";\nconst OPTION_NEW_PROJECT = \"Create a new project\";\nconst OPTION_ADD_FIREBASE = \"Add Firebase to an existing Google Cloud Platform project\";\n\nfunction toProjectInfo(projectMetaData) {\n  const {\n    projectId,\n    displayName,\n    resources\n  } = projectMetaData;\n  return {\n    id: projectId,\n    label: `${projectId}` + (displayName ? ` (${displayName})` : \"\"),\n    instance: _.get(resources, \"realtimeDatabaseInstance\"),\n    location: _.get(resources, \"locationId\")\n  };\n}\n\nasync function promptAndCreateNewProject() {\n  utils.logBullet(\"If you want to create a project in a Google Cloud organization or folder, please use \" + `\"firebase projects:create\" instead, and return to this command when you've created the project.`);\n  const promptAnswer = {};\n  await prompt_1.prompt(promptAnswer, projects_1.PROJECTS_CREATE_QUESTIONS);\n\n  if (!promptAnswer.projectId) {\n    throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n  }\n\n  return await projects_1.createFirebaseProjectAndLog(promptAnswer.projectId, {\n    displayName: promptAnswer.displayName\n  });\n}\n\nasync function promptAndAddFirebaseToCloudProject() {\n  const projectId = await projects_1.promptAvailableProjectId();\n\n  if (!projectId) {\n    throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n  }\n\n  return await projects_1.addFirebaseToCloudProjectAndLog(projectId);\n}\n\nasync function projectChoicePrompt(options) {\n  const choices = [{\n    name: OPTION_USE_PROJECT,\n    value: OPTION_USE_PROJECT\n  }, {\n    name: OPTION_NEW_PROJECT,\n    value: OPTION_NEW_PROJECT\n  }, {\n    name: OPTION_ADD_FIREBASE,\n    value: OPTION_ADD_FIREBASE\n  }, {\n    name: OPTION_NO_PROJECT,\n    value: OPTION_NO_PROJECT\n  }];\n  const projectSetupOption = await prompt_1.promptOnce({\n    type: \"list\",\n    name: \"id\",\n    message: \"Please select an option:\",\n    choices\n  });\n\n  switch (projectSetupOption) {\n    case OPTION_USE_PROJECT:\n      return projects_1.getOrPromptProject(options);\n\n    case OPTION_NEW_PROJECT:\n      return promptAndCreateNewProject();\n\n    case OPTION_ADD_FIREBASE:\n      return promptAndAddFirebaseToCloudProject();\n\n    default:\n      return;\n  }\n}\n\nasync function doSetup(setup, config, options) {\n  setup.project = {};\n  logger_1.logger.info();\n  logger_1.logger.info(`First, let's associate this project directory with a Firebase project.`);\n  logger_1.logger.info(`You can create multiple project aliases by running ${clc.bold(\"firebase use --add\")}, `);\n  logger_1.logger.info(`but for now we'll just set up a default project.`);\n  logger_1.logger.info();\n\n  const projectFromRcFile = _.get(setup.rcfile, \"projects.default\");\n\n  if (projectFromRcFile) {\n    utils.logBullet(`.firebaserc already has a default project, using ${projectFromRcFile}.`);\n    const rcProject = await projects_1.getFirebaseProject(projectFromRcFile);\n    setup.projectId = rcProject.projectId;\n    setup.projectLocation = _.get(rcProject, \"resources.locationId\");\n    return;\n  }\n\n  let projectMetaData;\n\n  if (options.project) {\n    projectMetaData = await projects_1.getFirebaseProject(options.project);\n  } else {\n    projectMetaData = await projectChoicePrompt(options);\n\n    if (!projectMetaData) {\n      return;\n    }\n  }\n\n  const projectInfo = toProjectInfo(projectMetaData);\n  utils.logBullet(`Using project ${projectInfo.label}`);\n\n  _.set(setup.rcfile, \"projects.default\", projectInfo.id);\n\n  setup.projectId = projectInfo.id;\n  setup.instance = projectInfo.instance;\n  setup.projectLocation = projectInfo.location;\n  utils.makeActiveProject(config.projectDir, projectInfo.id);\n}\n\nexports.doSetup = doSetup;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/project.js"],"names":["Object","defineProperty","exports","value","doSetup","clc","require","_","error_1","projects_1","logger_1","prompt_1","utils","OPTION_NO_PROJECT","OPTION_USE_PROJECT","OPTION_NEW_PROJECT","OPTION_ADD_FIREBASE","toProjectInfo","projectMetaData","projectId","displayName","resources","id","label","instance","get","location","promptAndCreateNewProject","logBullet","promptAnswer","prompt","PROJECTS_CREATE_QUESTIONS","FirebaseError","createFirebaseProjectAndLog","promptAndAddFirebaseToCloudProject","promptAvailableProjectId","addFirebaseToCloudProjectAndLog","projectChoicePrompt","options","choices","name","projectSetupOption","promptOnce","type","message","getOrPromptProject","setup","config","project","logger","info","bold","projectFromRcFile","rcfile","rcProject","getFirebaseProject","projectLocation","projectInfo","set","makeActiveProject","projectDir"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doSetup = void 0;\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst error_1 = require(\"../../error\");\nconst projects_1 = require(\"../../management/projects\");\nconst logger_1 = require(\"../../logger\");\nconst prompt_1 = require(\"../../prompt\");\nconst utils = require(\"../../utils\");\nconst OPTION_NO_PROJECT = \"Don't set up a default project\";\nconst OPTION_USE_PROJECT = \"Use an existing project\";\nconst OPTION_NEW_PROJECT = \"Create a new project\";\nconst OPTION_ADD_FIREBASE = \"Add Firebase to an existing Google Cloud Platform project\";\nfunction toProjectInfo(projectMetaData) {\n    const { projectId, displayName, resources } = projectMetaData;\n    return {\n        id: projectId,\n        label: `${projectId}` + (displayName ? ` (${displayName})` : \"\"),\n        instance: _.get(resources, \"realtimeDatabaseInstance\"),\n        location: _.get(resources, \"locationId\"),\n    };\n}\nasync function promptAndCreateNewProject() {\n    utils.logBullet(\"If you want to create a project in a Google Cloud organization or folder, please use \" +\n        `\"firebase projects:create\" instead, and return to this command when you've created the project.`);\n    const promptAnswer = {};\n    await prompt_1.prompt(promptAnswer, projects_1.PROJECTS_CREATE_QUESTIONS);\n    if (!promptAnswer.projectId) {\n        throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n    }\n    return await projects_1.createFirebaseProjectAndLog(promptAnswer.projectId, {\n        displayName: promptAnswer.displayName,\n    });\n}\nasync function promptAndAddFirebaseToCloudProject() {\n    const projectId = await projects_1.promptAvailableProjectId();\n    if (!projectId) {\n        throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n    }\n    return await projects_1.addFirebaseToCloudProjectAndLog(projectId);\n}\nasync function projectChoicePrompt(options) {\n    const choices = [\n        { name: OPTION_USE_PROJECT, value: OPTION_USE_PROJECT },\n        { name: OPTION_NEW_PROJECT, value: OPTION_NEW_PROJECT },\n        { name: OPTION_ADD_FIREBASE, value: OPTION_ADD_FIREBASE },\n        { name: OPTION_NO_PROJECT, value: OPTION_NO_PROJECT },\n    ];\n    const projectSetupOption = await prompt_1.promptOnce({\n        type: \"list\",\n        name: \"id\",\n        message: \"Please select an option:\",\n        choices,\n    });\n    switch (projectSetupOption) {\n        case OPTION_USE_PROJECT:\n            return projects_1.getOrPromptProject(options);\n        case OPTION_NEW_PROJECT:\n            return promptAndCreateNewProject();\n        case OPTION_ADD_FIREBASE:\n            return promptAndAddFirebaseToCloudProject();\n        default:\n            return;\n    }\n}\nasync function doSetup(setup, config, options) {\n    setup.project = {};\n    logger_1.logger.info();\n    logger_1.logger.info(`First, let's associate this project directory with a Firebase project.`);\n    logger_1.logger.info(`You can create multiple project aliases by running ${clc.bold(\"firebase use --add\")}, `);\n    logger_1.logger.info(`but for now we'll just set up a default project.`);\n    logger_1.logger.info();\n    const projectFromRcFile = _.get(setup.rcfile, \"projects.default\");\n    if (projectFromRcFile) {\n        utils.logBullet(`.firebaserc already has a default project, using ${projectFromRcFile}.`);\n        const rcProject = await projects_1.getFirebaseProject(projectFromRcFile);\n        setup.projectId = rcProject.projectId;\n        setup.projectLocation = _.get(rcProject, \"resources.locationId\");\n        return;\n    }\n    let projectMetaData;\n    if (options.project) {\n        projectMetaData = await projects_1.getFirebaseProject(options.project);\n    }\n    else {\n        projectMetaData = await projectChoicePrompt(options);\n        if (!projectMetaData) {\n            return;\n        }\n    }\n    const projectInfo = toProjectInfo(projectMetaData);\n    utils.logBullet(`Using project ${projectInfo.label}`);\n    _.set(setup.rcfile, \"projects.default\", projectInfo.id);\n    setup.projectId = projectInfo.id;\n    setup.instance = projectInfo.instance;\n    setup.projectLocation = projectInfo.location;\n    utils.makeActiveProject(config.projectDir, projectInfo.id);\n}\nexports.doSetup = doSetup;\n"]},"metadata":{},"sourceType":"script"}