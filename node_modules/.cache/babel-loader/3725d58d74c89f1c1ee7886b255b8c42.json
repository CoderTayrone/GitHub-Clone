{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.actionFunction = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst repl = require(\"repl\");\n\nconst _ = require(\"lodash\");\n\nconst request = require(\"request\");\n\nconst util = require(\"util\");\n\nconst functions_1 = require(\"./serve/functions\");\n\nconst LocalFunction = require(\"./localFunction\");\n\nconst utils = require(\"./utils\");\n\nconst logger_1 = require(\"./logger\");\n\nconst shell = require(\"./emulator/functionsEmulatorShell\");\n\nconst commandUtils = require(\"./emulator/commandUtils\");\n\nconst types_1 = require(\"./emulator/types\");\n\nconst hubClient_1 = require(\"./emulator/hubClient\");\n\nconst portUtils_1 = require(\"./emulator/portUtils\");\n\nconst serveFunctions = new functions_1.FunctionsServer();\n\nexports.actionFunction = async options => {\n  var _a, _b;\n\n  if (typeof options.port === \"string\") {\n    options.port = parseInt(options.port, 10);\n  }\n\n  let debugPort = undefined;\n\n  if (options.inspectFunctions) {\n    debugPort = commandUtils.parseInspectionPort(options);\n  }\n\n  utils.assertDefined(options.project);\n  const hubClient = new hubClient_1.EmulatorHubClient(options.project);\n  let remoteEmulators = {};\n\n  if (hubClient.foundHub()) {\n    remoteEmulators = await hubClient.getEmulators();\n    logger_1.logger.debug(\"Running emulators: \", remoteEmulators);\n  }\n\n  const runningEmulators = types_1.EMULATORS_SUPPORTED_BY_FUNCTIONS.filter(e => remoteEmulators[e] !== undefined);\n  const otherEmulators = types_1.EMULATORS_SUPPORTED_BY_FUNCTIONS.filter(e => remoteEmulators[e] === undefined);\n  const functionsInfo = remoteEmulators[types_1.Emulators.FUNCTIONS];\n\n  if (functionsInfo) {\n    utils.logLabeledWarning(\"functions\", `You are already running the Cloud Functions emulator on port ${functionsInfo.port}. Running the emulator and the Functions shell simultaenously can result in unexpected behavior.`);\n  } else if (!options.port) {\n    options.port = (_b = (_a = options.config.src.emulators) === null || _a === void 0 ? void 0 : _a.functions) === null || _b === void 0 ? void 0 : _b.port;\n  }\n\n  if (!options.port) {\n    options.port = await portUtils_1.findAvailablePort(\"localhost\", 5000);\n  }\n\n  return serveFunctions.start(options, {\n    quiet: true,\n    remoteEmulators,\n    debugPort\n  }).then(() => {\n    return serveFunctions.connect();\n  }).then(() => {\n    const instance = serveFunctions.get();\n    const emulator = new shell.FunctionsEmulatorShell(instance);\n\n    if (emulator.emulatedFunctions && emulator.emulatedFunctions.length === 0) {\n      logger_1.logger.info(\"No functions emulated.\");\n      process.exit();\n    }\n\n    const initializeContext = context => {\n      for (const trigger of emulator.triggers) {\n        if (emulator.emulatedFunctions.includes(trigger.id)) {\n          const localFunction = new LocalFunction(trigger, emulator.urls, emulator);\n          const triggerNameDotNotation = trigger.name.replace(/-/g, \".\");\n\n          _.set(context, triggerNameDotNotation, localFunction.call);\n        }\n      }\n\n      context.help = \"Instructions for the Functions Shell can be found at: \" + \"https://firebase.google.com/docs/functions/local-emulator\";\n    };\n\n    for (const e of runningEmulators) {\n      const info = remoteEmulators[e];\n      utils.logLabeledBullet(\"functions\", `Connected to running ${clc.bold(e)} emulator at ${info.host}:${info.port}, calls to this service will affect the emulator`);\n    }\n\n    utils.logLabeledWarning(\"functions\", `The following emulators are not running, calls to these services will affect production: ${clc.bold(otherEmulators.join(\", \"))}`);\n\n    const writer = output => {\n      if (output instanceof request.Request) {\n        return \"Sent request to function.\";\n      }\n\n      return util.inspect(output);\n    };\n\n    const prompt = \"firebase > \";\n    const replServer = repl.start({\n      prompt: prompt,\n      writer: writer,\n      useColors: true\n    });\n    initializeContext(replServer.context);\n    replServer.on(\"reset\", initializeContext);\n    return new Promise(resolve => {\n      replServer.on(\"exit\", () => {\n        return serveFunctions.stop().then(resolve).catch(resolve);\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/functionsShellCommandAction.js"],"names":["Object","defineProperty","exports","value","actionFunction","clc","require","repl","_","request","util","functions_1","LocalFunction","utils","logger_1","shell","commandUtils","types_1","hubClient_1","portUtils_1","serveFunctions","FunctionsServer","options","_a","_b","port","parseInt","debugPort","undefined","inspectFunctions","parseInspectionPort","assertDefined","project","hubClient","EmulatorHubClient","remoteEmulators","foundHub","getEmulators","logger","debug","runningEmulators","EMULATORS_SUPPORTED_BY_FUNCTIONS","filter","e","otherEmulators","functionsInfo","Emulators","FUNCTIONS","logLabeledWarning","config","src","emulators","functions","findAvailablePort","start","quiet","then","connect","instance","get","emulator","FunctionsEmulatorShell","emulatedFunctions","length","info","process","exit","initializeContext","context","trigger","triggers","includes","id","localFunction","urls","triggerNameDotNotation","name","replace","set","call","help","logLabeledBullet","bold","host","join","writer","output","Request","inspect","prompt","replServer","useColors","on","Promise","resolve","stop","catch"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMO,KAAK,GAAGP,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,mCAAD,CAArB;;AACA,MAAMU,YAAY,GAAGV,OAAO,CAAC,yBAAD,CAA5B;;AACA,MAAMW,OAAO,GAAGX,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMY,WAAW,GAAGZ,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMa,WAAW,GAAGb,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMc,cAAc,GAAG,IAAIT,WAAW,CAACU,eAAhB,EAAvB;;AACAnB,OAAO,CAACE,cAAR,GAAyB,MAAOkB,OAAP,IAAmB;AACxC,MAAIC,EAAJ,EAAQC,EAAR;;AACA,MAAI,OAAOF,OAAO,CAACG,IAAf,KAAwB,QAA5B,EAAsC;AAClCH,IAAAA,OAAO,CAACG,IAAR,GAAeC,QAAQ,CAACJ,OAAO,CAACG,IAAT,EAAe,EAAf,CAAvB;AACH;;AACD,MAAIE,SAAS,GAAGC,SAAhB;;AACA,MAAIN,OAAO,CAACO,gBAAZ,EAA8B;AAC1BF,IAAAA,SAAS,GAAGX,YAAY,CAACc,mBAAb,CAAiCR,OAAjC,CAAZ;AACH;;AACDT,EAAAA,KAAK,CAACkB,aAAN,CAAoBT,OAAO,CAACU,OAA5B;AACA,QAAMC,SAAS,GAAG,IAAIf,WAAW,CAACgB,iBAAhB,CAAkCZ,OAAO,CAACU,OAA1C,CAAlB;AACA,MAAIG,eAAe,GAAG,EAAtB;;AACA,MAAIF,SAAS,CAACG,QAAV,EAAJ,EAA0B;AACtBD,IAAAA,eAAe,GAAG,MAAMF,SAAS,CAACI,YAAV,EAAxB;AACAvB,IAAAA,QAAQ,CAACwB,MAAT,CAAgBC,KAAhB,CAAsB,qBAAtB,EAA6CJ,eAA7C;AACH;;AACD,QAAMK,gBAAgB,GAAGvB,OAAO,CAACwB,gCAAR,CAAyCC,MAAzC,CAAiDC,CAAD,IAAOR,eAAe,CAACQ,CAAD,CAAf,KAAuBf,SAA9E,CAAzB;AACA,QAAMgB,cAAc,GAAG3B,OAAO,CAACwB,gCAAR,CAAyCC,MAAzC,CAAiDC,CAAD,IAAOR,eAAe,CAACQ,CAAD,CAAf,KAAuBf,SAA9E,CAAvB;AACA,QAAMiB,aAAa,GAAGV,eAAe,CAAClB,OAAO,CAAC6B,SAAR,CAAkBC,SAAnB,CAArC;;AACA,MAAIF,aAAJ,EAAmB;AACfhC,IAAAA,KAAK,CAACmC,iBAAN,CAAwB,WAAxB,EAAsC,gEAA+DH,aAAa,CAACpB,IAAK,kGAAxH;AACH,GAFD,MAGK,IAAI,CAACH,OAAO,CAACG,IAAb,EAAmB;AACpBH,IAAAA,OAAO,CAACG,IAAR,GAAe,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGD,OAAO,CAAC2B,MAAR,CAAeC,GAAf,CAAmBC,SAAzB,MAAwC,IAAxC,IAAgD5B,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAAC6B,SAAlF,MAAiG,IAAjG,IAAyG5B,EAAE,KAAK,KAAK,CAArH,GAAyH,KAAK,CAA9H,GAAkIA,EAAE,CAACC,IAApJ;AACH;;AACD,MAAI,CAACH,OAAO,CAACG,IAAb,EAAmB;AACfH,IAAAA,OAAO,CAACG,IAAR,GAAe,MAAMN,WAAW,CAACkC,iBAAZ,CAA8B,WAA9B,EAA2C,IAA3C,CAArB;AACH;;AACD,SAAOjC,cAAc,CAChBkC,KADE,CACIhC,OADJ,EACa;AAChBiC,IAAAA,KAAK,EAAE,IADS;AAEhBpB,IAAAA,eAFgB;AAGhBR,IAAAA;AAHgB,GADb,EAMF6B,IANE,CAMG,MAAM;AACZ,WAAOpC,cAAc,CAACqC,OAAf,EAAP;AACH,GARM,EASFD,IATE,CASG,MAAM;AACZ,UAAME,QAAQ,GAAGtC,cAAc,CAACuC,GAAf,EAAjB;AACA,UAAMC,QAAQ,GAAG,IAAI7C,KAAK,CAAC8C,sBAAV,CAAiCH,QAAjC,CAAjB;;AACA,QAAIE,QAAQ,CAACE,iBAAT,IAA8BF,QAAQ,CAACE,iBAAT,CAA2BC,MAA3B,KAAsC,CAAxE,EAA2E;AACvEjD,MAAAA,QAAQ,CAACwB,MAAT,CAAgB0B,IAAhB,CAAqB,wBAArB;AACAC,MAAAA,OAAO,CAACC,IAAR;AACH;;AACD,UAAMC,iBAAiB,GAAIC,OAAD,IAAa;AACnC,WAAK,MAAMC,OAAX,IAAsBT,QAAQ,CAACU,QAA/B,EAAyC;AACrC,YAAIV,QAAQ,CAACE,iBAAT,CAA2BS,QAA3B,CAAoCF,OAAO,CAACG,EAA5C,CAAJ,EAAqD;AACjD,gBAAMC,aAAa,GAAG,IAAI7D,aAAJ,CAAkByD,OAAlB,EAA2BT,QAAQ,CAACc,IAApC,EAA0Cd,QAA1C,CAAtB;AACA,gBAAMe,sBAAsB,GAAGN,OAAO,CAACO,IAAR,CAAaC,OAAb,CAAqB,IAArB,EAA2B,GAA3B,CAA/B;;AACArE,UAAAA,CAAC,CAACsE,GAAF,CAAMV,OAAN,EAAeO,sBAAf,EAAuCF,aAAa,CAACM,IAArD;AACH;AACJ;;AACDX,MAAAA,OAAO,CAACY,IAAR,GACI,2DACI,2DAFR;AAGH,KAXD;;AAYA,SAAK,MAAMrC,CAAX,IAAgBH,gBAAhB,EAAkC;AAC9B,YAAMwB,IAAI,GAAG7B,eAAe,CAACQ,CAAD,CAA5B;AACA9B,MAAAA,KAAK,CAACoE,gBAAN,CAAuB,WAAvB,EAAqC,wBAAuB5E,GAAG,CAAC6E,IAAJ,CAASvC,CAAT,CAAY,gBAAeqB,IAAI,CAACmB,IAAK,IAAGnB,IAAI,CAACvC,IAAK,kDAA9G;AACH;;AACDZ,IAAAA,KAAK,CAACmC,iBAAN,CAAwB,WAAxB,EAAsC,4FAA2F3C,GAAG,CAAC6E,IAAJ,CAAStC,cAAc,CAACwC,IAAf,CAAoB,IAApB,CAAT,CAAoC,EAArK;;AACA,UAAMC,MAAM,GAAIC,MAAD,IAAY;AACvB,UAAIA,MAAM,YAAY7E,OAAO,CAAC8E,OAA9B,EAAuC;AACnC,eAAO,2BAAP;AACH;;AACD,aAAO7E,IAAI,CAAC8E,OAAL,CAAaF,MAAb,CAAP;AACH,KALD;;AAMA,UAAMG,MAAM,GAAG,aAAf;AACA,UAAMC,UAAU,GAAGnF,IAAI,CAAC+C,KAAL,CAAW;AAC1BmC,MAAAA,MAAM,EAAEA,MADkB;AAE1BJ,MAAAA,MAAM,EAAEA,MAFkB;AAG1BM,MAAAA,SAAS,EAAE;AAHe,KAAX,CAAnB;AAKAxB,IAAAA,iBAAiB,CAACuB,UAAU,CAACtB,OAAZ,CAAjB;AACAsB,IAAAA,UAAU,CAACE,EAAX,CAAc,OAAd,EAAuBzB,iBAAvB;AACA,WAAO,IAAI0B,OAAJ,CAAaC,OAAD,IAAa;AAC5BJ,MAAAA,UAAU,CAACE,EAAX,CAAc,MAAd,EAAsB,MAAM;AACxB,eAAOxE,cAAc,CAAC2E,IAAf,GAAsBvC,IAAtB,CAA2BsC,OAA3B,EAAoCE,KAApC,CAA0CF,OAA1C,CAAP;AACH,OAFD;AAGH,KAJM,CAAP;AAKH,GApDM,CAAP;AAqDH,CAjFD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.actionFunction = void 0;\nconst clc = require(\"cli-color\");\nconst repl = require(\"repl\");\nconst _ = require(\"lodash\");\nconst request = require(\"request\");\nconst util = require(\"util\");\nconst functions_1 = require(\"./serve/functions\");\nconst LocalFunction = require(\"./localFunction\");\nconst utils = require(\"./utils\");\nconst logger_1 = require(\"./logger\");\nconst shell = require(\"./emulator/functionsEmulatorShell\");\nconst commandUtils = require(\"./emulator/commandUtils\");\nconst types_1 = require(\"./emulator/types\");\nconst hubClient_1 = require(\"./emulator/hubClient\");\nconst portUtils_1 = require(\"./emulator/portUtils\");\nconst serveFunctions = new functions_1.FunctionsServer();\nexports.actionFunction = async (options) => {\n    var _a, _b;\n    if (typeof options.port === \"string\") {\n        options.port = parseInt(options.port, 10);\n    }\n    let debugPort = undefined;\n    if (options.inspectFunctions) {\n        debugPort = commandUtils.parseInspectionPort(options);\n    }\n    utils.assertDefined(options.project);\n    const hubClient = new hubClient_1.EmulatorHubClient(options.project);\n    let remoteEmulators = {};\n    if (hubClient.foundHub()) {\n        remoteEmulators = await hubClient.getEmulators();\n        logger_1.logger.debug(\"Running emulators: \", remoteEmulators);\n    }\n    const runningEmulators = types_1.EMULATORS_SUPPORTED_BY_FUNCTIONS.filter((e) => remoteEmulators[e] !== undefined);\n    const otherEmulators = types_1.EMULATORS_SUPPORTED_BY_FUNCTIONS.filter((e) => remoteEmulators[e] === undefined);\n    const functionsInfo = remoteEmulators[types_1.Emulators.FUNCTIONS];\n    if (functionsInfo) {\n        utils.logLabeledWarning(\"functions\", `You are already running the Cloud Functions emulator on port ${functionsInfo.port}. Running the emulator and the Functions shell simultaenously can result in unexpected behavior.`);\n    }\n    else if (!options.port) {\n        options.port = (_b = (_a = options.config.src.emulators) === null || _a === void 0 ? void 0 : _a.functions) === null || _b === void 0 ? void 0 : _b.port;\n    }\n    if (!options.port) {\n        options.port = await portUtils_1.findAvailablePort(\"localhost\", 5000);\n    }\n    return serveFunctions\n        .start(options, {\n        quiet: true,\n        remoteEmulators,\n        debugPort,\n    })\n        .then(() => {\n        return serveFunctions.connect();\n    })\n        .then(() => {\n        const instance = serveFunctions.get();\n        const emulator = new shell.FunctionsEmulatorShell(instance);\n        if (emulator.emulatedFunctions && emulator.emulatedFunctions.length === 0) {\n            logger_1.logger.info(\"No functions emulated.\");\n            process.exit();\n        }\n        const initializeContext = (context) => {\n            for (const trigger of emulator.triggers) {\n                if (emulator.emulatedFunctions.includes(trigger.id)) {\n                    const localFunction = new LocalFunction(trigger, emulator.urls, emulator);\n                    const triggerNameDotNotation = trigger.name.replace(/-/g, \".\");\n                    _.set(context, triggerNameDotNotation, localFunction.call);\n                }\n            }\n            context.help =\n                \"Instructions for the Functions Shell can be found at: \" +\n                    \"https://firebase.google.com/docs/functions/local-emulator\";\n        };\n        for (const e of runningEmulators) {\n            const info = remoteEmulators[e];\n            utils.logLabeledBullet(\"functions\", `Connected to running ${clc.bold(e)} emulator at ${info.host}:${info.port}, calls to this service will affect the emulator`);\n        }\n        utils.logLabeledWarning(\"functions\", `The following emulators are not running, calls to these services will affect production: ${clc.bold(otherEmulators.join(\", \"))}`);\n        const writer = (output) => {\n            if (output instanceof request.Request) {\n                return \"Sent request to function.\";\n            }\n            return util.inspect(output);\n        };\n        const prompt = \"firebase > \";\n        const replServer = repl.start({\n            prompt: prompt,\n            writer: writer,\n            useColors: true,\n        });\n        initializeContext(replServer.context);\n        replServer.on(\"reset\", initializeContext);\n        return new Promise((resolve) => {\n            replServer.on(\"exit\", () => {\n                return serveFunctions.stop().then(resolve).catch(resolve);\n            });\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"script"}