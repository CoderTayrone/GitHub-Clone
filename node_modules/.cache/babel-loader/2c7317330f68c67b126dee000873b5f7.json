{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerHandlers = void 0;\n\nconst url_1 = require(\"url\");\n\nconst operations_1 = require(\"./operations\");\n\nconst errors_1 = require(\"./errors\");\n\nconst widget_ui_1 = require(\"./widget_ui\");\n\nfunction registerHandlers(app, getProjectStateByApiKey) {\n  app.get(`/emulator/action`, (req, res) => {\n    const {\n      mode,\n      oobCode,\n      continueUrl,\n      apiKey\n    } = req.query;\n\n    if (!apiKey) {\n      return res.status(400).json({\n        authEmulator: {\n          error: \"missing apiKey query parameter\",\n          instructions: `Please modify the URL to specify an apiKey, such as ...&apiKey=YOUR_API_KEY`\n        }\n      });\n    }\n\n    if (!oobCode) {\n      return res.status(400).json({\n        authEmulator: {\n          error: \"missing oobCode query parameter\",\n          instructions: `Please modify the URL to specify an oobCode, such as ...&oobCode=YOUR_OOB_CODE`\n        }\n      });\n    }\n\n    const state = getProjectStateByApiKey(apiKey);\n\n    switch (mode) {\n      case \"recoverEmail\":\n        {\n          const oob = state.validateOobCode(oobCode);\n          const RETRY_INSTRUCTIONS = \"If you're trying to test the reverting email flow, try changing the email again to generate a new link.\";\n\n          if ((oob === null || oob === void 0 ? void 0 : oob.requestType) !== \"RECOVER_EMAIL\") {\n            return res.status(400).json({\n              authEmulator: {\n                error: `Requested mode does not match the OOB code provided.`,\n                instructions: RETRY_INSTRUCTIONS\n              }\n            });\n          }\n\n          try {\n            const resp = operations_1.setAccountInfoImpl(state, {\n              oobCode\n            });\n            const email = resp.email;\n            return res.status(200).json({\n              authEmulator: {\n                success: `The email has been successfully reset.`,\n                email\n              }\n            });\n          } catch (e) {\n            if (e instanceof errors_1.NotImplementedError || e instanceof errors_1.BadRequestError && e.message === \"INVALID_OOB_CODE\") {\n              return res.status(400).json({\n                authEmulator: {\n                  error: `Your request to revert your email has expired or the link has already been used.`,\n                  instructions: RETRY_INSTRUCTIONS\n                }\n              });\n            } else {\n              throw e;\n            }\n          }\n        }\n\n      case \"resetPassword\":\n        {\n          const oob = state.validateOobCode(oobCode);\n\n          if ((oob === null || oob === void 0 ? void 0 : oob.requestType) !== \"PASSWORD_RESET\") {\n            return res.status(400).json({\n              authEmulator: {\n                error: `Your request to reset your password has expired or the link has already been used.`,\n                instructions: `Try resetting your password again.`\n              }\n            });\n          }\n\n          if (!req.query.newPassword) {\n            return res.status(400).json({\n              authEmulator: {\n                error: \"missing newPassword query parameter\",\n                instructions: `To reset the password for ${oob.email}, send an HTTP GET request to the following URL.`,\n                instructions2: \"You may use a web browser or any HTTP client, such as curl.\",\n                urlTemplate: `${oob.oobLink}&newPassword=NEW_PASSWORD_HERE`\n              }\n            });\n          } else if (req.query.newPassword === \"NEW_PASSWORD_HERE\") {\n            return res.status(400).json({\n              authEmulator: {\n                error: \"newPassword must be something other than 'NEW_PASSWORD_HERE'\",\n                instructions: \"The string 'NEW_PASSWORD_HERE' is just a placeholder.\",\n                instructions2: \"Please change the URL to specify a new password instead.\",\n                urlTemplate: `${oob.oobLink}&newPassword=NEW_PASSWORD_HERE`\n              }\n            });\n          }\n\n          const {\n            email\n          } = operations_1.resetPassword(state, {\n            oobCode,\n            newPassword: req.query.newPassword\n          });\n\n          if (continueUrl) {\n            return res.redirect(303, continueUrl);\n          } else {\n            return res.status(200).json({\n              authEmulator: {\n                success: `The password has been successfully updated.`,\n                email\n              }\n            });\n          }\n        }\n\n      case \"verifyEmail\":\n        {\n          try {\n            const {\n              email\n            } = operations_1.setAccountInfoImpl(state, {\n              oobCode\n            });\n\n            if (continueUrl) {\n              return res.redirect(303, continueUrl);\n            } else {\n              return res.status(200).json({\n                authEmulator: {\n                  success: `The email has been successfully verified.`,\n                  email\n                }\n              });\n            }\n          } catch (e) {\n            if (e instanceof errors_1.NotImplementedError || e instanceof errors_1.BadRequestError && e.message === \"INVALID_OOB_CODE\") {\n              return res.status(400).json({\n                authEmulator: {\n                  error: `Your request to verify your email has expired or the link has already been used.`,\n                  instructions: `Try verifying your email again.`\n                }\n              });\n            } else {\n              throw e;\n            }\n          }\n        }\n\n      case \"signIn\":\n        {\n          if (!continueUrl) {\n            return res.status(400).json({\n              authEmulator: {\n                error: \"Missing continueUrl query parameter\",\n                instructions: `To sign in, append &continueUrl=YOUR_APP_URL to the link.`\n              }\n            });\n          }\n\n          const redirectTo = new url_1.URL(continueUrl);\n\n          for (const name of Object.keys(req.query)) {\n            if (name !== \"continueUrl\") {\n              const query = req.query[name];\n\n              if (typeof query === \"string\") {\n                redirectTo.searchParams.set(name, query);\n              }\n            }\n          }\n\n          return res.redirect(303, redirectTo.toString());\n        }\n\n      default:\n        return res.status(400).json({\n          authEmulator: {\n            error: \"Invalid mode\"\n          }\n        });\n    }\n  });\n  app.get(`/emulator/auth/handler`, (req, res) => {\n    res.set(\"Content-Type\", \"text/html; charset=utf-8\");\n    const apiKey = req.query.apiKey;\n    const providerId = req.query.providerId;\n\n    if (!apiKey || !providerId) {\n      return res.status(400).json({\n        authEmulator: {\n          error: \"missing apiKey or providerId query parameters\"\n        }\n      });\n    }\n\n    const state = getProjectStateByApiKey(apiKey);\n    const providerInfos = state.listProviderInfosByProviderId(providerId);\n    const options = providerInfos.map(info => `<li class=\"js-reuse-account mdc-list-item mdc-ripple-upgraded\" tabindex=\"0\" data-id-token=\"${encodeURIComponent(createFakeClaims(info))}\">\n          <span class=\"mdc-list-item__ripple\"></span>\n          ${info.photoUrl ? `\n            <span class=\"mdc-list-item__graphic profile-photo\" style=\"background-image: url('${info.photoUrl}')\"></span>` : `\n            <span class=\"mdc-list-item__graphic material-icons\" aria-hidden=true>person</span>`}\n          <span class=\"mdc-list-item__text\"><span class=\"mdc-list-item__primary-text\">${info.displayName}</span>\n          <span class=\"mdc-list-item__secondary-text fallback-secondary-text\">${info.email}</span>\n      </li>`).join(\"\\n\");\n    res.end(widget_ui_1.WIDGET_UI.replace(widget_ui_1.PROVIDERS_LIST_PLACEHOLDER, options));\n  });\n  app.get(`/emulator/auth/iframe`, (req, res) => {\n    res.set(\"Content-Type\", \"text/html; charset=utf-8\");\n    res.end(`<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>Auth Emulator Helper Iframe</title>\n<script>\n  // TODO: Support older browsers where URLSearchParams is not available.\n  var query = new URLSearchParams(location.search);\n  var apiKey = query.get('apiKey');\n  var appName = query.get('appName');\n  if (!apiKey || !appName) {\n    alert('Auth Emulator Internal Error: Missing query params apiKey or appName for iframe.');\n  }\n  var storageKey = apiKey + ':' + appName;\n\n  var parentContainer = null;\n\n  window.addEventListener('message', function (e) {\n    if (typeof e.data === 'object' && e.data.eventType === 'sendAuthEvent') {\n      if (!e.data.data.storageKey === storageKey) {\n        return alert('Auth Emulator Internal Error: Received request with mismatching storageKey');\n      }\n      var authEvent = e.data.data.authEvent;\n      if (parentContainer) {\n        sendAuthEvent(authEvent);\n      } else {\n        // Store it first, and initFrameMessaging() below will pick it up.\n        sessionStorage['firebase:redirectEvent:' + storageKey] =\n            JSON.stringify(authEvent);\n      }\n    }\n  });\n\n  function initFrameMessaging() {\n    parentContainer = gapi.iframes.getContext().getParentIframe();\n    parentContainer.register('webStorageSupport', function() {\n      // We must reply to this event, or the JS SDK will not continue with the\n      // popup flow. Web storage support is not actually needed though.\n      return { status: 'ACK', webStorageSupport: true };\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n\n    var authEvent = null;\n    var storedEvent = sessionStorage['firebase:redirectEvent:' + storageKey];\n    if (storedEvent) {\n      try {\n        authEvent = JSON.parse(storedEvent);\n      } catch (_) {\n        return alert('Auth Emulator Internal Error: Invalid stored event.');\n      }\n    }\n    sendAuthEvent(authEvent);\n    delete sessionStorage['firebase:redirectEvent:' + storageKey];\n  }\n\n  function sendAuthEvent(authEvent) {\n    parentContainer.send('authEvent', {\n      type: 'authEvent',\n      authEvent: authEvent || { type: 'unknown', error: { code: 'auth/no-auth-event' } },\n    }, function(responses) {\n      if (!responses || !responses.length ||\n          responses[responses.length - 1].status !== 'ACK') {\n        return alert(\"Auth Emulator Internal Error: Sending authEvent failed.\");\n      }\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n  }\n\n  window.gapi_onload = function () {\n    gapi.load('gapi.iframes', {\n      callback: initFrameMessaging,\n      timeout: 10000,\n      ontimeout: function () {\n        return alert(\"Auth Emulator Internal Error: Error loading gapi.iframe! Please check your Internet connection.\");\n      },\n    });\n  }\n</script>\n<script src=\"https://apis.google.com/js/api.js\"></script>\n`);\n  });\n}\n\nexports.registerHandlers = registerHandlers;\n\nfunction createFakeClaims(info) {\n  const claims = {\n    sub: info.rawId,\n    iss: \"\",\n    aud: \"\",\n    exp: 0,\n    iat: 0,\n    name: info.displayName,\n    screen_name: info.screenName,\n    email: info.email,\n    email_verified: true,\n    picture: info.photoUrl\n  };\n  return JSON.stringify(claims);\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/auth/handlers.js"],"names":["Object","defineProperty","exports","value","registerHandlers","url_1","require","operations_1","errors_1","widget_ui_1","app","getProjectStateByApiKey","get","req","res","mode","oobCode","continueUrl","apiKey","query","status","json","authEmulator","error","instructions","state","oob","validateOobCode","RETRY_INSTRUCTIONS","requestType","resp","setAccountInfoImpl","email","success","e","NotImplementedError","BadRequestError","message","newPassword","instructions2","urlTemplate","oobLink","resetPassword","redirect","redirectTo","URL","name","keys","searchParams","set","toString","providerId","providerInfos","listProviderInfosByProviderId","options","map","info","encodeURIComponent","createFakeClaims","photoUrl","displayName","join","end","WIDGET_UI","replace","PROVIDERS_LIST_PLACEHOLDER","claims","sub","rawId","iss","aud","exp","iat","screen_name","screenName","email_verified","picture","JSON","stringify"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,KAAD,CAArB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AACA,SAASF,gBAAT,CAA0BM,GAA1B,EAA+BC,uBAA/B,EAAwD;AACpDD,EAAAA,GAAG,CAACE,GAAJ,CAAS,kBAAT,EAA4B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA,WAAjB;AAA8BC,MAAAA;AAA9B,QAAyCL,GAAG,CAACM,KAAnD;;AACA,QAAI,CAACD,MAAL,EAAa;AACT,aAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,QAAAA,YAAY,EAAE;AACVC,UAAAA,KAAK,EAAE,gCADG;AAEVC,UAAAA,YAAY,EAAG;AAFL;AADU,OAArB,CAAP;AAMH;;AACD,QAAI,CAACR,OAAL,EAAc;AACV,aAAOF,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,QAAAA,YAAY,EAAE;AACVC,UAAAA,KAAK,EAAE,iCADG;AAEVC,UAAAA,YAAY,EAAG;AAFL;AADU,OAArB,CAAP;AAMH;;AACD,UAAMC,KAAK,GAAGd,uBAAuB,CAACO,MAAD,CAArC;;AACA,YAAQH,IAAR;AACI,WAAK,cAAL;AAAqB;AACjB,gBAAMW,GAAG,GAAGD,KAAK,CAACE,eAAN,CAAsBX,OAAtB,CAAZ;AACA,gBAAMY,kBAAkB,GAAG,yGAA3B;;AACA,cAAI,CAACF,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACG,WAA/C,MAAgE,eAApE,EAAqF;AACjF,mBAAOf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,KAAK,EAAG,sDADE;AAEVC,gBAAAA,YAAY,EAAEI;AAFJ;AADU,aAArB,CAAP;AAMH;;AACD,cAAI;AACA,kBAAME,IAAI,GAAGvB,YAAY,CAACwB,kBAAb,CAAgCN,KAAhC,EAAuC;AAChDT,cAAAA;AADgD,aAAvC,CAAb;AAGA,kBAAMgB,KAAK,GAAGF,IAAI,CAACE,KAAnB;AACA,mBAAOlB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,YAAY,EAAE;AAAEW,gBAAAA,OAAO,EAAG,wCAAZ;AAAqDD,gBAAAA;AAArD;AADU,aAArB,CAAP;AAGH,WARD,CASA,OAAOE,CAAP,EAAU;AACN,gBAAIA,CAAC,YAAY1B,QAAQ,CAAC2B,mBAAtB,IACCD,CAAC,YAAY1B,QAAQ,CAAC4B,eAAtB,IAAyCF,CAAC,CAACG,OAAF,KAAc,kBAD5D,EACiF;AAC7E,qBAAOvB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,gBAAAA,YAAY,EAAE;AACVC,kBAAAA,KAAK,EAAG,kFADE;AAEVC,kBAAAA,YAAY,EAAEI;AAFJ;AADU,eAArB,CAAP;AAMH,aARD,MASK;AACD,oBAAMM,CAAN;AACH;AACJ;AACJ;;AACD,WAAK,eAAL;AAAsB;AAClB,gBAAMR,GAAG,GAAGD,KAAK,CAACE,eAAN,CAAsBX,OAAtB,CAAZ;;AACA,cAAI,CAACU,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACG,WAA/C,MAAgE,gBAApE,EAAsF;AAClF,mBAAOf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,KAAK,EAAG,oFADE;AAEVC,gBAAAA,YAAY,EAAG;AAFL;AADU,aAArB,CAAP;AAMH;;AACD,cAAI,CAACX,GAAG,CAACM,KAAJ,CAAUmB,WAAf,EAA4B;AACxB,mBAAOxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,KAAK,EAAE,qCADG;AAEVC,gBAAAA,YAAY,EAAG,6BAA4BE,GAAG,CAACM,KAAM,kDAF3C;AAGVO,gBAAAA,aAAa,EAAE,6DAHL;AAIVC,gBAAAA,WAAW,EAAG,GAAEd,GAAG,CAACe,OAAQ;AAJlB;AADU,aAArB,CAAP;AAQH,WATD,MAUK,IAAI5B,GAAG,CAACM,KAAJ,CAAUmB,WAAV,KAA0B,mBAA9B,EAAmD;AACpD,mBAAOxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,KAAK,EAAE,8DADG;AAEVC,gBAAAA,YAAY,EAAE,uDAFJ;AAGVe,gBAAAA,aAAa,EAAE,0DAHL;AAIVC,gBAAAA,WAAW,EAAG,GAAEd,GAAG,CAACe,OAAQ;AAJlB;AADU,aAArB,CAAP;AAQH;;AACD,gBAAM;AAAET,YAAAA;AAAF,cAAYzB,YAAY,CAACmC,aAAb,CAA2BjB,KAA3B,EAAkC;AAChDT,YAAAA,OADgD;AAEhDsB,YAAAA,WAAW,EAAEzB,GAAG,CAACM,KAAJ,CAAUmB;AAFyB,WAAlC,CAAlB;;AAIA,cAAIrB,WAAJ,EAAiB;AACb,mBAAOH,GAAG,CAAC6B,QAAJ,CAAa,GAAb,EAAkB1B,WAAlB,CAAP;AACH,WAFD,MAGK;AACD,mBAAOH,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,YAAY,EAAE;AAAEW,gBAAAA,OAAO,EAAG,6CAAZ;AAA0DD,gBAAAA;AAA1D;AADU,aAArB,CAAP;AAGH;AACJ;;AACD,WAAK,aAAL;AAAoB;AAChB,cAAI;AACA,kBAAM;AAAEA,cAAAA;AAAF,gBAAYzB,YAAY,CAACwB,kBAAb,CAAgCN,KAAhC,EAAuC;AAAET,cAAAA;AAAF,aAAvC,CAAlB;;AACA,gBAAIC,WAAJ,EAAiB;AACb,qBAAOH,GAAG,CAAC6B,QAAJ,CAAa,GAAb,EAAkB1B,WAAlB,CAAP;AACH,aAFD,MAGK;AACD,qBAAOH,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,gBAAAA,YAAY,EAAE;AAAEW,kBAAAA,OAAO,EAAG,2CAAZ;AAAwDD,kBAAAA;AAAxD;AADU,eAArB,CAAP;AAGH;AACJ,WAVD,CAWA,OAAOE,CAAP,EAAU;AACN,gBAAIA,CAAC,YAAY1B,QAAQ,CAAC2B,mBAAtB,IACCD,CAAC,YAAY1B,QAAQ,CAAC4B,eAAtB,IAAyCF,CAAC,CAACG,OAAF,KAAc,kBAD5D,EACiF;AAC7E,qBAAOvB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,gBAAAA,YAAY,EAAE;AACVC,kBAAAA,KAAK,EAAG,kFADE;AAEVC,kBAAAA,YAAY,EAAG;AAFL;AADU,eAArB,CAAP;AAMH,aARD,MASK;AACD,oBAAMU,CAAN;AACH;AACJ;AACJ;;AACD,WAAK,QAAL;AAAe;AACX,cAAI,CAACjB,WAAL,EAAkB;AACd,mBAAOH,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,KAAK,EAAE,qCADG;AAEVC,gBAAAA,YAAY,EAAG;AAFL;AADU,aAArB,CAAP;AAMH;;AACD,gBAAMoB,UAAU,GAAG,IAAIvC,KAAK,CAACwC,GAAV,CAAc5B,WAAd,CAAnB;;AACA,eAAK,MAAM6B,IAAX,IAAmB9C,MAAM,CAAC+C,IAAP,CAAYlC,GAAG,CAACM,KAAhB,CAAnB,EAA2C;AACvC,gBAAI2B,IAAI,KAAK,aAAb,EAA4B;AACxB,oBAAM3B,KAAK,GAAGN,GAAG,CAACM,KAAJ,CAAU2B,IAAV,CAAd;;AACA,kBAAI,OAAO3B,KAAP,KAAiB,QAArB,EAA+B;AAC3ByB,gBAAAA,UAAU,CAACI,YAAX,CAAwBC,GAAxB,CAA4BH,IAA5B,EAAkC3B,KAAlC;AACH;AACJ;AACJ;;AACD,iBAAOL,GAAG,CAAC6B,QAAJ,CAAa,GAAb,EAAkBC,UAAU,CAACM,QAAX,EAAlB,CAAP;AACH;;AACD;AACI,eAAOpC,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,YAAY,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT;AAAhB,SAArB,CAAP;AA/HR;AAiIH,GApJD;AAqJAb,EAAAA,GAAG,CAACE,GAAJ,CAAS,wBAAT,EAAkC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5CA,IAAAA,GAAG,CAACmC,GAAJ,CAAQ,cAAR,EAAwB,0BAAxB;AACA,UAAM/B,MAAM,GAAGL,GAAG,CAACM,KAAJ,CAAUD,MAAzB;AACA,UAAMiC,UAAU,GAAGtC,GAAG,CAACM,KAAJ,CAAUgC,UAA7B;;AACA,QAAI,CAACjC,MAAD,IAAW,CAACiC,UAAhB,EAA4B;AACxB,aAAOrC,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,QAAAA,YAAY,EAAE;AACVC,UAAAA,KAAK,EAAE;AADG;AADU,OAArB,CAAP;AAKH;;AACD,UAAME,KAAK,GAAGd,uBAAuB,CAACO,MAAD,CAArC;AACA,UAAMkC,aAAa,GAAG3B,KAAK,CAAC4B,6BAAN,CAAoCF,UAApC,CAAtB;AACA,UAAMG,OAAO,GAAGF,aAAa,CACxBG,GADW,CACNC,IAAD,IAAW,8FAA6FC,kBAAkB,CAACC,gBAAgB,CAACF,IAAD,CAAjB,CAAyB;AACpK;AACA,YAAYA,IAAI,CAACG,QAAL,GACG;AACf,+FAA+FH,IAAI,CAACG,QAAS,aAFjG,GAGG;AACf,+FAAgG;AAChG,wFAAwFH,IAAI,CAACI,WAAY;AACzG,gFAAgFJ,IAAI,CAACxB,KAAM;AAC3F,YAVwB,EAWX6B,IAXW,CAWN,IAXM,CAAhB;AAYA/C,IAAAA,GAAG,CAACgD,GAAJ,CAAQrD,WAAW,CAACsD,SAAZ,CAAsBC,OAAtB,CAA8BvD,WAAW,CAACwD,0BAA1C,EAAsEX,OAAtE,CAAR;AACH,GA1BD;AA2BA5C,EAAAA,GAAG,CAACE,GAAJ,CAAS,uBAAT,EAAiC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3CA,IAAAA,GAAG,CAACmC,GAAJ,CAAQ,cAAR,EAAwB,0BAAxB;AACAnC,IAAAA,GAAG,CAACgD,GAAJ,CAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3EQ;AA4EH,GA9ED;AA+EH;;AACD5D,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;;AACA,SAASsD,gBAAT,CAA0BF,IAA1B,EAAgC;AAC5B,QAAMU,MAAM,GAAG;AACXC,IAAAA,GAAG,EAAEX,IAAI,CAACY,KADC;AAEXC,IAAAA,GAAG,EAAE,EAFM;AAGXC,IAAAA,GAAG,EAAE,EAHM;AAIXC,IAAAA,GAAG,EAAE,CAJM;AAKXC,IAAAA,GAAG,EAAE,CALM;AAMX1B,IAAAA,IAAI,EAAEU,IAAI,CAACI,WANA;AAOXa,IAAAA,WAAW,EAAEjB,IAAI,CAACkB,UAPP;AAQX1C,IAAAA,KAAK,EAAEwB,IAAI,CAACxB,KARD;AASX2C,IAAAA,cAAc,EAAE,IATL;AAUXC,IAAAA,OAAO,EAAEpB,IAAI,CAACG;AAVH,GAAf;AAYA,SAAOkB,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerHandlers = void 0;\nconst url_1 = require(\"url\");\nconst operations_1 = require(\"./operations\");\nconst errors_1 = require(\"./errors\");\nconst widget_ui_1 = require(\"./widget_ui\");\nfunction registerHandlers(app, getProjectStateByApiKey) {\n    app.get(`/emulator/action`, (req, res) => {\n        const { mode, oobCode, continueUrl, apiKey } = req.query;\n        if (!apiKey) {\n            return res.status(400).json({\n                authEmulator: {\n                    error: \"missing apiKey query parameter\",\n                    instructions: `Please modify the URL to specify an apiKey, such as ...&apiKey=YOUR_API_KEY`,\n                },\n            });\n        }\n        if (!oobCode) {\n            return res.status(400).json({\n                authEmulator: {\n                    error: \"missing oobCode query parameter\",\n                    instructions: `Please modify the URL to specify an oobCode, such as ...&oobCode=YOUR_OOB_CODE`,\n                },\n            });\n        }\n        const state = getProjectStateByApiKey(apiKey);\n        switch (mode) {\n            case \"recoverEmail\": {\n                const oob = state.validateOobCode(oobCode);\n                const RETRY_INSTRUCTIONS = \"If you're trying to test the reverting email flow, try changing the email again to generate a new link.\";\n                if ((oob === null || oob === void 0 ? void 0 : oob.requestType) !== \"RECOVER_EMAIL\") {\n                    return res.status(400).json({\n                        authEmulator: {\n                            error: `Requested mode does not match the OOB code provided.`,\n                            instructions: RETRY_INSTRUCTIONS,\n                        },\n                    });\n                }\n                try {\n                    const resp = operations_1.setAccountInfoImpl(state, {\n                        oobCode,\n                    });\n                    const email = resp.email;\n                    return res.status(200).json({\n                        authEmulator: { success: `The email has been successfully reset.`, email },\n                    });\n                }\n                catch (e) {\n                    if (e instanceof errors_1.NotImplementedError ||\n                        (e instanceof errors_1.BadRequestError && e.message === \"INVALID_OOB_CODE\")) {\n                        return res.status(400).json({\n                            authEmulator: {\n                                error: `Your request to revert your email has expired or the link has already been used.`,\n                                instructions: RETRY_INSTRUCTIONS,\n                            },\n                        });\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            case \"resetPassword\": {\n                const oob = state.validateOobCode(oobCode);\n                if ((oob === null || oob === void 0 ? void 0 : oob.requestType) !== \"PASSWORD_RESET\") {\n                    return res.status(400).json({\n                        authEmulator: {\n                            error: `Your request to reset your password has expired or the link has already been used.`,\n                            instructions: `Try resetting your password again.`,\n                        },\n                    });\n                }\n                if (!req.query.newPassword) {\n                    return res.status(400).json({\n                        authEmulator: {\n                            error: \"missing newPassword query parameter\",\n                            instructions: `To reset the password for ${oob.email}, send an HTTP GET request to the following URL.`,\n                            instructions2: \"You may use a web browser or any HTTP client, such as curl.\",\n                            urlTemplate: `${oob.oobLink}&newPassword=NEW_PASSWORD_HERE`,\n                        },\n                    });\n                }\n                else if (req.query.newPassword === \"NEW_PASSWORD_HERE\") {\n                    return res.status(400).json({\n                        authEmulator: {\n                            error: \"newPassword must be something other than 'NEW_PASSWORD_HERE'\",\n                            instructions: \"The string 'NEW_PASSWORD_HERE' is just a placeholder.\",\n                            instructions2: \"Please change the URL to specify a new password instead.\",\n                            urlTemplate: `${oob.oobLink}&newPassword=NEW_PASSWORD_HERE`,\n                        },\n                    });\n                }\n                const { email } = operations_1.resetPassword(state, {\n                    oobCode,\n                    newPassword: req.query.newPassword,\n                });\n                if (continueUrl) {\n                    return res.redirect(303, continueUrl);\n                }\n                else {\n                    return res.status(200).json({\n                        authEmulator: { success: `The password has been successfully updated.`, email },\n                    });\n                }\n            }\n            case \"verifyEmail\": {\n                try {\n                    const { email } = operations_1.setAccountInfoImpl(state, { oobCode });\n                    if (continueUrl) {\n                        return res.redirect(303, continueUrl);\n                    }\n                    else {\n                        return res.status(200).json({\n                            authEmulator: { success: `The email has been successfully verified.`, email },\n                        });\n                    }\n                }\n                catch (e) {\n                    if (e instanceof errors_1.NotImplementedError ||\n                        (e instanceof errors_1.BadRequestError && e.message === \"INVALID_OOB_CODE\")) {\n                        return res.status(400).json({\n                            authEmulator: {\n                                error: `Your request to verify your email has expired or the link has already been used.`,\n                                instructions: `Try verifying your email again.`,\n                            },\n                        });\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            case \"signIn\": {\n                if (!continueUrl) {\n                    return res.status(400).json({\n                        authEmulator: {\n                            error: \"Missing continueUrl query parameter\",\n                            instructions: `To sign in, append &continueUrl=YOUR_APP_URL to the link.`,\n                        },\n                    });\n                }\n                const redirectTo = new url_1.URL(continueUrl);\n                for (const name of Object.keys(req.query)) {\n                    if (name !== \"continueUrl\") {\n                        const query = req.query[name];\n                        if (typeof query === \"string\") {\n                            redirectTo.searchParams.set(name, query);\n                        }\n                    }\n                }\n                return res.redirect(303, redirectTo.toString());\n            }\n            default:\n                return res.status(400).json({ authEmulator: { error: \"Invalid mode\" } });\n        }\n    });\n    app.get(`/emulator/auth/handler`, (req, res) => {\n        res.set(\"Content-Type\", \"text/html; charset=utf-8\");\n        const apiKey = req.query.apiKey;\n        const providerId = req.query.providerId;\n        if (!apiKey || !providerId) {\n            return res.status(400).json({\n                authEmulator: {\n                    error: \"missing apiKey or providerId query parameters\",\n                },\n            });\n        }\n        const state = getProjectStateByApiKey(apiKey);\n        const providerInfos = state.listProviderInfosByProviderId(providerId);\n        const options = providerInfos\n            .map((info) => `<li class=\"js-reuse-account mdc-list-item mdc-ripple-upgraded\" tabindex=\"0\" data-id-token=\"${encodeURIComponent(createFakeClaims(info))}\">\n          <span class=\"mdc-list-item__ripple\"></span>\n          ${info.photoUrl\n            ? `\n            <span class=\"mdc-list-item__graphic profile-photo\" style=\"background-image: url('${info.photoUrl}')\"></span>`\n            : `\n            <span class=\"mdc-list-item__graphic material-icons\" aria-hidden=true>person</span>`}\n          <span class=\"mdc-list-item__text\"><span class=\"mdc-list-item__primary-text\">${info.displayName}</span>\n          <span class=\"mdc-list-item__secondary-text fallback-secondary-text\">${info.email}</span>\n      </li>`)\n            .join(\"\\n\");\n        res.end(widget_ui_1.WIDGET_UI.replace(widget_ui_1.PROVIDERS_LIST_PLACEHOLDER, options));\n    });\n    app.get(`/emulator/auth/iframe`, (req, res) => {\n        res.set(\"Content-Type\", \"text/html; charset=utf-8\");\n        res.end(`<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>Auth Emulator Helper Iframe</title>\n<script>\n  // TODO: Support older browsers where URLSearchParams is not available.\n  var query = new URLSearchParams(location.search);\n  var apiKey = query.get('apiKey');\n  var appName = query.get('appName');\n  if (!apiKey || !appName) {\n    alert('Auth Emulator Internal Error: Missing query params apiKey or appName for iframe.');\n  }\n  var storageKey = apiKey + ':' + appName;\n\n  var parentContainer = null;\n\n  window.addEventListener('message', function (e) {\n    if (typeof e.data === 'object' && e.data.eventType === 'sendAuthEvent') {\n      if (!e.data.data.storageKey === storageKey) {\n        return alert('Auth Emulator Internal Error: Received request with mismatching storageKey');\n      }\n      var authEvent = e.data.data.authEvent;\n      if (parentContainer) {\n        sendAuthEvent(authEvent);\n      } else {\n        // Store it first, and initFrameMessaging() below will pick it up.\n        sessionStorage['firebase:redirectEvent:' + storageKey] =\n            JSON.stringify(authEvent);\n      }\n    }\n  });\n\n  function initFrameMessaging() {\n    parentContainer = gapi.iframes.getContext().getParentIframe();\n    parentContainer.register('webStorageSupport', function() {\n      // We must reply to this event, or the JS SDK will not continue with the\n      // popup flow. Web storage support is not actually needed though.\n      return { status: 'ACK', webStorageSupport: true };\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n\n    var authEvent = null;\n    var storedEvent = sessionStorage['firebase:redirectEvent:' + storageKey];\n    if (storedEvent) {\n      try {\n        authEvent = JSON.parse(storedEvent);\n      } catch (_) {\n        return alert('Auth Emulator Internal Error: Invalid stored event.');\n      }\n    }\n    sendAuthEvent(authEvent);\n    delete sessionStorage['firebase:redirectEvent:' + storageKey];\n  }\n\n  function sendAuthEvent(authEvent) {\n    parentContainer.send('authEvent', {\n      type: 'authEvent',\n      authEvent: authEvent || { type: 'unknown', error: { code: 'auth/no-auth-event' } },\n    }, function(responses) {\n      if (!responses || !responses.length ||\n          responses[responses.length - 1].status !== 'ACK') {\n        return alert(\"Auth Emulator Internal Error: Sending authEvent failed.\");\n      }\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n  }\n\n  window.gapi_onload = function () {\n    gapi.load('gapi.iframes', {\n      callback: initFrameMessaging,\n      timeout: 10000,\n      ontimeout: function () {\n        return alert(\"Auth Emulator Internal Error: Error loading gapi.iframe! Please check your Internet connection.\");\n      },\n    });\n  }\n</script>\n<script src=\"https://apis.google.com/js/api.js\"></script>\n`);\n    });\n}\nexports.registerHandlers = registerHandlers;\nfunction createFakeClaims(info) {\n    const claims = {\n        sub: info.rawId,\n        iss: \"\",\n        aud: \"\",\n        exp: 0,\n        iat: 0,\n        name: info.displayName,\n        screen_name: info.screenName,\n        email: info.email,\n        email_verified: true,\n        picture: info.photoUrl,\n    };\n    return JSON.stringify(claims);\n}\n"]},"metadata":{},"sourceType":"script"}