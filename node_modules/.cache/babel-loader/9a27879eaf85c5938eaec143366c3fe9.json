{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCloudEndpoints = void 0;\n\nconst express_1 = require(\"express\");\n\nconst zlib_1 = require(\"zlib\");\n\nconst types_1 = require(\"../../types\");\n\nconst metadata_1 = require(\"../metadata\");\n\nconst registry_1 = require(\"../../registry\");\n\nconst emulatorLogger_1 = require(\"../../emulatorLogger\");\n\nfunction createCloudEndpoints(emulator) {\n  const gcloudStorageAPI = express_1.Router();\n  const {\n    storageLayer\n  } = emulator;\n  gcloudStorageAPI.use(/.*\\/b\\/(.+?)\\/.*/, (req, res, next) => {\n    storageLayer.createBucket(req.params[0]);\n    next();\n  });\n  gcloudStorageAPI.get(\"/b\", (req, res) => {\n    res.json({\n      kind: \"storage#buckets\",\n      items: storageLayer.listBuckets()\n    });\n  });\n  gcloudStorageAPI.get([\"/b/:bucketId/o/:objectId\", \"/download/storage/v1/b/:bucketId/o/:objectId\"], (req, res) => {\n    const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n\n    if (!md) {\n      res.sendStatus(404);\n      return;\n    }\n\n    if (req.query.alt == \"media\") {\n      return sendFileBytes(md, storageLayer, req, res);\n    }\n\n    const outgoingMd = new metadata_1.CloudStorageObjectMetadata(md);\n    res.json(outgoingMd).status(200).send();\n    return;\n  });\n  gcloudStorageAPI.patch(\"/b/:bucketId/o/:objectId\", (req, res) => {\n    const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n\n    if (!md) {\n      res.sendStatus(404);\n      return;\n    }\n\n    md.update(req.body);\n    const outgoingMetadata = new metadata_1.CloudStorageObjectMetadata(md);\n    res.json(outgoingMetadata).status(200).send();\n    return;\n  });\n  gcloudStorageAPI.get(\"/b/:bucketId/o\", (req, res) => {\n    let maxRes = undefined;\n\n    if (req.query.maxResults) {\n      maxRes = +req.query.maxResults.toString();\n    }\n\n    const delimiter = req.query.delimiter ? req.query.delimiter.toString() : \"/\";\n    const pageToken = req.query.pageToken ? req.query.pageToken.toString() : undefined;\n    const prefix = req.query.prefix ? req.query.prefix.toString() : \"\";\n    const listResult = storageLayer.listItems(req.params.bucketId, prefix, delimiter, pageToken, maxRes);\n    res.json(listResult);\n  });\n  gcloudStorageAPI.delete(\"/b/:bucketId/o/:objectId\", (req, res) => {\n    const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n\n    if (!md) {\n      res.sendStatus(404);\n      return;\n    }\n\n    storageLayer.deleteFile(req.params.bucketId, req.params.objectId);\n    res.status(200).send();\n  });\n  gcloudStorageAPI.put(\"/upload/storage/v1/b/:bucketId/o\", async (req, res) => {\n    if (!req.query.upload_id) {\n      res.sendStatus(400);\n      return;\n    }\n\n    const uploadId = req.query.upload_id.toString();\n    const bufs = [];\n    req.on(\"data\", data => {\n      bufs.push(data);\n    });\n    await new Promise(resolve => {\n      req.on(\"end\", () => {\n        req.body = Buffer.concat(bufs);\n        resolve();\n      });\n    });\n    let upload = storageLayer.uploadBytes(uploadId, req.body);\n\n    if (!upload) {\n      res.sendStatus(400);\n      return;\n    }\n\n    const finalizedUpload = storageLayer.finalizeUpload(uploadId);\n\n    if (!finalizedUpload) {\n      res.sendStatus(400);\n      return;\n    }\n\n    upload = finalizedUpload.upload;\n    res.status(200).json(new metadata_1.CloudStorageObjectMetadata(finalizedUpload.file.metadata)).send();\n  });\n  gcloudStorageAPI.post(\"/b/:bucketId/o/:objectId/acl\", (req, res) => {\n    var _a, _b;\n\n    emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log(\"WARN_ONCE\", \"Cloud Storage ACLs are not supported in the Storage Emulator. All related methods will succeed, but have no effect.\");\n    const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n\n    if (!md) {\n      res.sendStatus(404);\n      return;\n    }\n\n    md.update({});\n    res.json({\n      kind: \"storage#objectAccessControl\",\n      object: md.name,\n      id: `${req.params.bucketId}/${md.name}/${md.generation}/allUsers`,\n      selfLink: `http://${(_a = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE)) === null || _a === void 0 ? void 0 : _a.host}:${(_b = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE)) === null || _b === void 0 ? void 0 : _b.port}/storage/v1/b/${md.bucket}/o/${encodeURIComponent(md.name)}/acl/allUsers`,\n      bucket: md.bucket,\n      entity: req.body.entity,\n      role: req.body.role,\n      etag: \"someEtag\",\n      generation: md.generation.toString()\n    }).status(200);\n  });\n  gcloudStorageAPI.post(\"/upload/storage/v1/b/:bucketId/o\", (req, res) => {\n    if (!req.query.name) {\n      res.sendStatus(400);\n      return;\n    }\n\n    let name = req.query.name.toString();\n\n    if (name.startsWith(\"/\")) {\n      name = name.slice(1);\n    }\n\n    const contentType = req.header(\"content-type\") || req.header(\"x-upload-content-type\");\n\n    if (!contentType) {\n      res.sendStatus(400);\n      return;\n    }\n\n    if (req.query.uploadType == \"resumable\") {\n      const upload = storageLayer.startUpload(req.params.bucketId, name, contentType, req.body);\n      const emulatorInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE);\n\n      if (emulatorInfo == undefined) {\n        res.sendStatus(500);\n        return;\n      }\n\n      const {\n        host,\n        port\n      } = emulatorInfo;\n      const uploadUrl = `http://${host}:${port}/upload/storage/v1/b/${upload.bucketId}/o?name=${upload.fileLocation}&uploadType=resumable&upload_id=${upload.uploadId}`;\n      res.header(\"location\", uploadUrl).status(200).send();\n      return;\n    }\n\n    if (!contentType.startsWith(\"multipart/related\")) {\n      res.sendStatus(400);\n      return;\n    }\n\n    const boundary = `--${contentType.split(\"boundary=\")[1]}`;\n    const bodyString = req.body.toString();\n    const bodyStringParts = bodyString.split(boundary).filter(v => v);\n    const metadataString = bodyStringParts[0].split(/\\r?\\n/)[3];\n    const blobParts = bodyStringParts[1].split(/\\r?\\n/);\n    const blobContentTypeString = blobParts[1];\n\n    if (!blobContentTypeString || !blobContentTypeString.startsWith(\"Content-Type: \")) {\n      res.sendStatus(400);\n      return;\n    }\n\n    const blobContentType = blobContentTypeString.slice(\"Content-Type: \".length);\n    const bodyBuffer = req.body;\n    const metadataSegment = `${boundary}${bodyString.split(boundary)[1]}`;\n    const dataSegment = `${boundary}${bodyString.split(boundary).slice(2)[0]}`;\n    const dataSegmentHeader = (dataSegment.match(/.+Content-Type:.+?\\r?\\n\\r?\\n/s) || [])[0];\n\n    if (!dataSegmentHeader) {\n      res.sendStatus(400);\n      return;\n    }\n\n    const bufferOffset = metadataSegment.length + dataSegmentHeader.length;\n    const blobBytes = Buffer.from(bodyBuffer.slice(bufferOffset, -`\\r\\n${boundary}--`.length));\n    const metadata = storageLayer.oneShotUpload(req.params.bucketId, name, blobContentType, JSON.parse(metadataString), blobBytes);\n\n    if (!metadata) {\n      res.sendStatus(400);\n      return;\n    }\n\n    res.status(200).json(new metadata_1.CloudStorageObjectMetadata(metadata)).send();\n    return;\n  });\n  gcloudStorageAPI.get(\"/:bucketId/:objectId(**)\", (req, res) => {\n    const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n\n    if (!md) {\n      res.sendStatus(404);\n      return;\n    }\n\n    return sendFileBytes(md, storageLayer, req, res);\n  });\n  gcloudStorageAPI.all(\"/**\", (req, res) => {\n    if (process.env.STORAGE_EMULATOR_DEBUG) {\n      console.table(req.headers);\n      console.log(req.method, req.url);\n      res.json(\"endpoint not implemented\");\n    } else {\n      res.sendStatus(501);\n    }\n  });\n  return gcloudStorageAPI;\n}\n\nexports.createCloudEndpoints = createCloudEndpoints;\n\nfunction sendFileBytes(md, storageLayer, req, res) {\n  let data = storageLayer.getBytes(req.params.bucketId, req.params.objectId);\n\n  if (!data) {\n    res.sendStatus(404);\n    return;\n  }\n\n  const isGZipped = md.contentEncoding == \"gzip\";\n\n  if (isGZipped) {\n    data = zlib_1.gunzipSync(data);\n  }\n\n  res.setHeader(\"Accept-Ranges\", \"bytes\");\n  res.setHeader(\"Content-Type\", md.contentType);\n  res.setHeader(\"Content-Disposition\", md.contentDisposition);\n  res.setHeader(\"Content-Encoding\", \"identity\");\n  const byteRange = [...(req.header(\"range\") || \"\").split(\"bytes=\"), \"\", \"\"];\n  const [rangeStart, rangeEnd] = byteRange[1].split(\"-\");\n\n  if (rangeStart) {\n    const range = {\n      start: parseInt(rangeStart),\n      end: rangeEnd ? parseInt(rangeEnd) : data.byteLength\n    };\n    res.setHeader(\"Content-Range\", `bytes ${range.start}-${range.end - 1}/${data.byteLength}`);\n    res.status(206).end(data.slice(range.start, range.end));\n  } else {\n    res.end(data);\n  }\n\n  return;\n}","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/storage/apis/gcloud.js"],"names":["Object","defineProperty","exports","value","createCloudEndpoints","express_1","require","zlib_1","types_1","metadata_1","registry_1","emulatorLogger_1","emulator","gcloudStorageAPI","Router","storageLayer","use","req","res","next","createBucket","params","get","json","kind","items","listBuckets","md","getMetadata","bucketId","objectId","sendStatus","query","alt","sendFileBytes","outgoingMd","CloudStorageObjectMetadata","status","send","patch","update","body","outgoingMetadata","maxRes","undefined","maxResults","toString","delimiter","pageToken","prefix","listResult","listItems","delete","deleteFile","put","upload_id","uploadId","bufs","on","data","push","Promise","resolve","Buffer","concat","upload","uploadBytes","finalizedUpload","finalizeUpload","file","metadata","post","_a","_b","EmulatorLogger","forEmulator","Emulators","STORAGE","log","object","name","id","generation","selfLink","EmulatorRegistry","getInfo","host","port","bucket","encodeURIComponent","entity","role","etag","startsWith","slice","contentType","header","uploadType","startUpload","emulatorInfo","uploadUrl","fileLocation","boundary","split","bodyString","bodyStringParts","filter","v","metadataString","blobParts","blobContentTypeString","blobContentType","length","bodyBuffer","metadataSegment","dataSegment","dataSegmentHeader","match","bufferOffset","blobBytes","from","oneShotUpload","JSON","parse","all","process","env","STORAGE_EMULATOR_DEBUG","console","table","headers","method","url","getBytes","isGZipped","contentEncoding","gunzipSync","setHeader","contentDisposition","byteRange","rangeStart","rangeEnd","range","start","parseInt","end","byteLength"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCloudEndpoints = void 0;\nconst express_1 = require(\"express\");\nconst zlib_1 = require(\"zlib\");\nconst types_1 = require(\"../../types\");\nconst metadata_1 = require(\"../metadata\");\nconst registry_1 = require(\"../../registry\");\nconst emulatorLogger_1 = require(\"../../emulatorLogger\");\nfunction createCloudEndpoints(emulator) {\n    const gcloudStorageAPI = express_1.Router();\n    const { storageLayer } = emulator;\n    gcloudStorageAPI.use(/.*\\/b\\/(.+?)\\/.*/, (req, res, next) => {\n        storageLayer.createBucket(req.params[0]);\n        next();\n    });\n    gcloudStorageAPI.get(\"/b\", (req, res) => {\n        res.json({\n            kind: \"storage#buckets\",\n            items: storageLayer.listBuckets(),\n        });\n    });\n    gcloudStorageAPI.get([\"/b/:bucketId/o/:objectId\", \"/download/storage/v1/b/:bucketId/o/:objectId\"], (req, res) => {\n        const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n        if (!md) {\n            res.sendStatus(404);\n            return;\n        }\n        if (req.query.alt == \"media\") {\n            return sendFileBytes(md, storageLayer, req, res);\n        }\n        const outgoingMd = new metadata_1.CloudStorageObjectMetadata(md);\n        res.json(outgoingMd).status(200).send();\n        return;\n    });\n    gcloudStorageAPI.patch(\"/b/:bucketId/o/:objectId\", (req, res) => {\n        const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n        if (!md) {\n            res.sendStatus(404);\n            return;\n        }\n        md.update(req.body);\n        const outgoingMetadata = new metadata_1.CloudStorageObjectMetadata(md);\n        res.json(outgoingMetadata).status(200).send();\n        return;\n    });\n    gcloudStorageAPI.get(\"/b/:bucketId/o\", (req, res) => {\n        let maxRes = undefined;\n        if (req.query.maxResults) {\n            maxRes = +req.query.maxResults.toString();\n        }\n        const delimiter = req.query.delimiter ? req.query.delimiter.toString() : \"/\";\n        const pageToken = req.query.pageToken ? req.query.pageToken.toString() : undefined;\n        const prefix = req.query.prefix ? req.query.prefix.toString() : \"\";\n        const listResult = storageLayer.listItems(req.params.bucketId, prefix, delimiter, pageToken, maxRes);\n        res.json(listResult);\n    });\n    gcloudStorageAPI.delete(\"/b/:bucketId/o/:objectId\", (req, res) => {\n        const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n        if (!md) {\n            res.sendStatus(404);\n            return;\n        }\n        storageLayer.deleteFile(req.params.bucketId, req.params.objectId);\n        res.status(200).send();\n    });\n    gcloudStorageAPI.put(\"/upload/storage/v1/b/:bucketId/o\", async (req, res) => {\n        if (!req.query.upload_id) {\n            res.sendStatus(400);\n            return;\n        }\n        const uploadId = req.query.upload_id.toString();\n        const bufs = [];\n        req.on(\"data\", (data) => {\n            bufs.push(data);\n        });\n        await new Promise((resolve) => {\n            req.on(\"end\", () => {\n                req.body = Buffer.concat(bufs);\n                resolve();\n            });\n        });\n        let upload = storageLayer.uploadBytes(uploadId, req.body);\n        if (!upload) {\n            res.sendStatus(400);\n            return;\n        }\n        const finalizedUpload = storageLayer.finalizeUpload(uploadId);\n        if (!finalizedUpload) {\n            res.sendStatus(400);\n            return;\n        }\n        upload = finalizedUpload.upload;\n        res.status(200).json(new metadata_1.CloudStorageObjectMetadata(finalizedUpload.file.metadata)).send();\n    });\n    gcloudStorageAPI.post(\"/b/:bucketId/o/:objectId/acl\", (req, res) => {\n        var _a, _b;\n        emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log(\"WARN_ONCE\", \"Cloud Storage ACLs are not supported in the Storage Emulator. All related methods will succeed, but have no effect.\");\n        const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n        if (!md) {\n            res.sendStatus(404);\n            return;\n        }\n        md.update({});\n        res\n            .json({\n            kind: \"storage#objectAccessControl\",\n            object: md.name,\n            id: `${req.params.bucketId}/${md.name}/${md.generation}/allUsers`,\n            selfLink: `http://${(_a = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE)) === null || _a === void 0 ? void 0 : _a.host}:${(_b = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE)) === null || _b === void 0 ? void 0 : _b.port}/storage/v1/b/${md.bucket}/o/${encodeURIComponent(md.name)}/acl/allUsers`,\n            bucket: md.bucket,\n            entity: req.body.entity,\n            role: req.body.role,\n            etag: \"someEtag\",\n            generation: md.generation.toString(),\n        })\n            .status(200);\n    });\n    gcloudStorageAPI.post(\"/upload/storage/v1/b/:bucketId/o\", (req, res) => {\n        if (!req.query.name) {\n            res.sendStatus(400);\n            return;\n        }\n        let name = req.query.name.toString();\n        if (name.startsWith(\"/\")) {\n            name = name.slice(1);\n        }\n        const contentType = req.header(\"content-type\") || req.header(\"x-upload-content-type\");\n        if (!contentType) {\n            res.sendStatus(400);\n            return;\n        }\n        if (req.query.uploadType == \"resumable\") {\n            const upload = storageLayer.startUpload(req.params.bucketId, name, contentType, req.body);\n            const emulatorInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE);\n            if (emulatorInfo == undefined) {\n                res.sendStatus(500);\n                return;\n            }\n            const { host, port } = emulatorInfo;\n            const uploadUrl = `http://${host}:${port}/upload/storage/v1/b/${upload.bucketId}/o?name=${upload.fileLocation}&uploadType=resumable&upload_id=${upload.uploadId}`;\n            res.header(\"location\", uploadUrl).status(200).send();\n            return;\n        }\n        if (!contentType.startsWith(\"multipart/related\")) {\n            res.sendStatus(400);\n            return;\n        }\n        const boundary = `--${contentType.split(\"boundary=\")[1]}`;\n        const bodyString = req.body.toString();\n        const bodyStringParts = bodyString.split(boundary).filter((v) => v);\n        const metadataString = bodyStringParts[0].split(/\\r?\\n/)[3];\n        const blobParts = bodyStringParts[1].split(/\\r?\\n/);\n        const blobContentTypeString = blobParts[1];\n        if (!blobContentTypeString || !blobContentTypeString.startsWith(\"Content-Type: \")) {\n            res.sendStatus(400);\n            return;\n        }\n        const blobContentType = blobContentTypeString.slice(\"Content-Type: \".length);\n        const bodyBuffer = req.body;\n        const metadataSegment = `${boundary}${bodyString.split(boundary)[1]}`;\n        const dataSegment = `${boundary}${bodyString.split(boundary).slice(2)[0]}`;\n        const dataSegmentHeader = (dataSegment.match(/.+Content-Type:.+?\\r?\\n\\r?\\n/s) || [])[0];\n        if (!dataSegmentHeader) {\n            res.sendStatus(400);\n            return;\n        }\n        const bufferOffset = metadataSegment.length + dataSegmentHeader.length;\n        const blobBytes = Buffer.from(bodyBuffer.slice(bufferOffset, -`\\r\\n${boundary}--`.length));\n        const metadata = storageLayer.oneShotUpload(req.params.bucketId, name, blobContentType, JSON.parse(metadataString), blobBytes);\n        if (!metadata) {\n            res.sendStatus(400);\n            return;\n        }\n        res.status(200).json(new metadata_1.CloudStorageObjectMetadata(metadata)).send();\n        return;\n    });\n    gcloudStorageAPI.get(\"/:bucketId/:objectId(**)\", (req, res) => {\n        const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);\n        if (!md) {\n            res.sendStatus(404);\n            return;\n        }\n        return sendFileBytes(md, storageLayer, req, res);\n    });\n    gcloudStorageAPI.all(\"/**\", (req, res) => {\n        if (process.env.STORAGE_EMULATOR_DEBUG) {\n            console.table(req.headers);\n            console.log(req.method, req.url);\n            res.json(\"endpoint not implemented\");\n        }\n        else {\n            res.sendStatus(501);\n        }\n    });\n    return gcloudStorageAPI;\n}\nexports.createCloudEndpoints = createCloudEndpoints;\nfunction sendFileBytes(md, storageLayer, req, res) {\n    let data = storageLayer.getBytes(req.params.bucketId, req.params.objectId);\n    if (!data) {\n        res.sendStatus(404);\n        return;\n    }\n    const isGZipped = md.contentEncoding == \"gzip\";\n    if (isGZipped) {\n        data = zlib_1.gunzipSync(data);\n    }\n    res.setHeader(\"Accept-Ranges\", \"bytes\");\n    res.setHeader(\"Content-Type\", md.contentType);\n    res.setHeader(\"Content-Disposition\", md.contentDisposition);\n    res.setHeader(\"Content-Encoding\", \"identity\");\n    const byteRange = [...(req.header(\"range\") || \"\").split(\"bytes=\"), \"\", \"\"];\n    const [rangeStart, rangeEnd] = byteRange[1].split(\"-\");\n    if (rangeStart) {\n        const range = {\n            start: parseInt(rangeStart),\n            end: rangeEnd ? parseInt(rangeEnd) : data.byteLength,\n        };\n        res.setHeader(\"Content-Range\", `bytes ${range.start}-${range.end - 1}/${data.byteLength}`);\n        res.status(206).end(data.slice(range.start, range.end));\n    }\n    else {\n        res.end(data);\n    }\n    return;\n}\n"]},"metadata":{},"sourceType":"script"}