{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTrustedPublishers = exports.getExtensionRegistry = exports.getMinRequiredVersion = exports.getTargetVersion = exports.resolveRegistryEntry = exports.isOfficialSource = exports.resolveSourceUrl = exports.confirmUpdateWarning = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst api = require(\"../api\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst EXTENSIONS_REGISTRY_ENDPOINT = \"/extensions.json\";\n\nasync function confirmUpdateWarning(updateWarning) {\n  logger_1.logger.info(marked(updateWarning.description));\n\n  if (updateWarning.action) {\n    logger_1.logger.info(marked(updateWarning.action));\n  }\n\n  const continueUpdate = await prompt_1.promptOnce({\n    type: \"confirm\",\n    message: \"Do you wish to continue with this update?\",\n    default: false\n  });\n\n  if (!continueUpdate) {\n    throw new error_1.FirebaseError(`Update cancelled.`, {\n      exit: 2\n    });\n  }\n}\n\nexports.confirmUpdateWarning = confirmUpdateWarning;\n\nfunction resolveSourceUrl(registryEntry, name, version) {\n  const targetVersion = getTargetVersion(registryEntry, version);\n\n  const sourceUrl = _.get(registryEntry, [\"versions\", targetVersion]);\n\n  if (!sourceUrl) {\n    throw new error_1.FirebaseError(`Could not find version ${clc.bold(version)} of extension ${clc.bold(name)}.`);\n  }\n\n  return sourceUrl;\n}\n\nexports.resolveSourceUrl = resolveSourceUrl;\n\nfunction isOfficialSource(registryEntry, sourceUrl) {\n  const versions = _.get(registryEntry, \"versions\");\n\n  return _.includes(versions, sourceUrl);\n}\n\nexports.isOfficialSource = isOfficialSource;\n\nasync function resolveRegistryEntry(name) {\n  const extensionsRegistry = await getExtensionRegistry();\n\n  const registryEntry = _.get(extensionsRegistry, name);\n\n  if (!registryEntry) {\n    throw new error_1.FirebaseError(`Unable to find extension source named ${clc.bold(name)}.`);\n  }\n\n  return registryEntry;\n}\n\nexports.resolveRegistryEntry = resolveRegistryEntry;\n\nfunction getTargetVersion(registryEntry, versionOrLabel) {\n  const seekVersion = versionOrLabel || \"latest\";\n\n  const versionFromLabel = _.get(registryEntry, [\"labels\", seekVersion]);\n\n  return versionFromLabel || seekVersion;\n}\n\nexports.getTargetVersion = getTargetVersion;\n\nfunction getMinRequiredVersion(registryEntry) {\n  return _.get(registryEntry, [\"labels\", \"minRequired\"]);\n}\n\nexports.getMinRequiredVersion = getMinRequiredVersion;\n\nasync function getExtensionRegistry(onlyFeatured) {\n  const res = await api.request(\"GET\", EXTENSIONS_REGISTRY_ENDPOINT, {\n    origin: api.firebaseExtensionsRegistryOrigin\n  });\n\n  const extensions = _.get(res, \"body.mods\");\n\n  if (onlyFeatured) {\n    const featuredList = _.get(res, \"body.featured.discover\");\n\n    return _.pickBy(extensions, (_entry, extensionName) => {\n      return _.includes(featuredList, extensionName);\n    });\n  }\n\n  return extensions;\n}\n\nexports.getExtensionRegistry = getExtensionRegistry;\n\nasync function getTrustedPublishers() {\n  let registry;\n\n  try {\n    registry = await getExtensionRegistry();\n  } catch (err) {\n    logger_1.logger.debug(\"Couldn't get extensions registry, assuming no trusted publishers except Firebase.\");\n    return [\"firebase\"];\n  }\n\n  const publisherIds = new Set();\n\n  for (const entry in registry) {\n    publisherIds.add(registry[entry].publisher);\n  }\n\n  return Array.from(publisherIds);\n}\n\nexports.getTrustedPublishers = getTrustedPublishers;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/extensions/resolveSource.js"],"names":["Object","defineProperty","exports","value","getTrustedPublishers","getExtensionRegistry","getMinRequiredVersion","getTargetVersion","resolveRegistryEntry","isOfficialSource","resolveSourceUrl","confirmUpdateWarning","_","require","clc","marked","api","error_1","logger_1","prompt_1","EXTENSIONS_REGISTRY_ENDPOINT","updateWarning","logger","info","description","action","continueUpdate","promptOnce","type","message","default","FirebaseError","exit","registryEntry","name","version","targetVersion","sourceUrl","get","bold","versions","includes","extensionsRegistry","versionOrLabel","seekVersion","versionFromLabel","onlyFeatured","res","request","origin","firebaseExtensionsRegistryOrigin","extensions","featuredList","pickBy","_entry","extensionName","registry","err","debug","publisherIds","Set","entry","add","publisher","Array","from"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+BF,OAAO,CAACG,oBAAR,GAA+BH,OAAO,CAACI,qBAAR,GAAgCJ,OAAO,CAACK,gBAAR,GAA2BL,OAAO,CAACM,oBAAR,GAA+BN,OAAO,CAACO,gBAAR,GAA2BP,OAAO,CAACQ,gBAAR,GAA2BR,OAAO,CAACS,oBAAR,GAA+B,KAAK,CAAlP;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMO,4BAA4B,GAAG,kBAArC;;AACA,eAAeT,oBAAf,CAAoCU,aAApC,EAAmD;AAC/CH,EAAAA,QAAQ,CAACI,MAAT,CAAgBC,IAAhB,CAAqBR,MAAM,CAACM,aAAa,CAACG,WAAf,CAA3B;;AACA,MAAIH,aAAa,CAACI,MAAlB,EAA0B;AACtBP,IAAAA,QAAQ,CAACI,MAAT,CAAgBC,IAAhB,CAAqBR,MAAM,CAACM,aAAa,CAACI,MAAf,CAA3B;AACH;;AACD,QAAMC,cAAc,GAAG,MAAMP,QAAQ,CAACQ,UAAT,CAAoB;AAC7CC,IAAAA,IAAI,EAAE,SADuC;AAE7CC,IAAAA,OAAO,EAAE,2CAFoC;AAG7CC,IAAAA,OAAO,EAAE;AAHoC,GAApB,CAA7B;;AAKA,MAAI,CAACJ,cAAL,EAAqB;AACjB,UAAM,IAAIT,OAAO,CAACc,aAAZ,CAA2B,mBAA3B,EAA+C;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA/C,CAAN;AACH;AACJ;;AACD9B,OAAO,CAACS,oBAAR,GAA+BA,oBAA/B;;AACA,SAASD,gBAAT,CAA0BuB,aAA1B,EAAyCC,IAAzC,EAA+CC,OAA/C,EAAwD;AACpD,QAAMC,aAAa,GAAG7B,gBAAgB,CAAC0B,aAAD,EAAgBE,OAAhB,CAAtC;;AACA,QAAME,SAAS,GAAGzB,CAAC,CAAC0B,GAAF,CAAML,aAAN,EAAqB,CAAC,UAAD,EAAaG,aAAb,CAArB,CAAlB;;AACA,MAAI,CAACC,SAAL,EAAgB;AACZ,UAAM,IAAIpB,OAAO,CAACc,aAAZ,CAA2B,0BAAyBjB,GAAG,CAACyB,IAAJ,CAASJ,OAAT,CAAkB,iBAAgBrB,GAAG,CAACyB,IAAJ,CAASL,IAAT,CAAe,GAArG,CAAN;AACH;;AACD,SAAOG,SAAP;AACH;;AACDnC,OAAO,CAACQ,gBAAR,GAA2BA,gBAA3B;;AACA,SAASD,gBAAT,CAA0BwB,aAA1B,EAAyCI,SAAzC,EAAoD;AAChD,QAAMG,QAAQ,GAAG5B,CAAC,CAAC0B,GAAF,CAAML,aAAN,EAAqB,UAArB,CAAjB;;AACA,SAAOrB,CAAC,CAAC6B,QAAF,CAAWD,QAAX,EAAqBH,SAArB,CAAP;AACH;;AACDnC,OAAO,CAACO,gBAAR,GAA2BA,gBAA3B;;AACA,eAAeD,oBAAf,CAAoC0B,IAApC,EAA0C;AACtC,QAAMQ,kBAAkB,GAAG,MAAMrC,oBAAoB,EAArD;;AACA,QAAM4B,aAAa,GAAGrB,CAAC,CAAC0B,GAAF,CAAMI,kBAAN,EAA0BR,IAA1B,CAAtB;;AACA,MAAI,CAACD,aAAL,EAAoB;AAChB,UAAM,IAAIhB,OAAO,CAACc,aAAZ,CAA2B,yCAAwCjB,GAAG,CAACyB,IAAJ,CAASL,IAAT,CAAe,GAAlF,CAAN;AACH;;AACD,SAAOD,aAAP;AACH;;AACD/B,OAAO,CAACM,oBAAR,GAA+BA,oBAA/B;;AACA,SAASD,gBAAT,CAA0B0B,aAA1B,EAAyCU,cAAzC,EAAyD;AACrD,QAAMC,WAAW,GAAGD,cAAc,IAAI,QAAtC;;AACA,QAAME,gBAAgB,GAAGjC,CAAC,CAAC0B,GAAF,CAAML,aAAN,EAAqB,CAAC,QAAD,EAAWW,WAAX,CAArB,CAAzB;;AACA,SAAOC,gBAAgB,IAAID,WAA3B;AACH;;AACD1C,OAAO,CAACK,gBAAR,GAA2BA,gBAA3B;;AACA,SAASD,qBAAT,CAA+B2B,aAA/B,EAA8C;AAC1C,SAAOrB,CAAC,CAAC0B,GAAF,CAAML,aAAN,EAAqB,CAAC,QAAD,EAAW,aAAX,CAArB,CAAP;AACH;;AACD/B,OAAO,CAACI,qBAAR,GAAgCA,qBAAhC;;AACA,eAAeD,oBAAf,CAAoCyC,YAApC,EAAkD;AAC9C,QAAMC,GAAG,GAAG,MAAM/B,GAAG,CAACgC,OAAJ,CAAY,KAAZ,EAAmB5B,4BAAnB,EAAiD;AAC/D6B,IAAAA,MAAM,EAAEjC,GAAG,CAACkC;AADmD,GAAjD,CAAlB;;AAGA,QAAMC,UAAU,GAAGvC,CAAC,CAAC0B,GAAF,CAAMS,GAAN,EAAW,WAAX,CAAnB;;AACA,MAAID,YAAJ,EAAkB;AACd,UAAMM,YAAY,GAAGxC,CAAC,CAAC0B,GAAF,CAAMS,GAAN,EAAW,wBAAX,CAArB;;AACA,WAAOnC,CAAC,CAACyC,MAAF,CAASF,UAAT,EAAqB,CAACG,MAAD,EAASC,aAAT,KAA2B;AACnD,aAAO3C,CAAC,CAAC6B,QAAF,CAAWW,YAAX,EAAyBG,aAAzB,CAAP;AACH,KAFM,CAAP;AAGH;;AACD,SAAOJ,UAAP;AACH;;AACDjD,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;;AACA,eAAeD,oBAAf,GAAsC;AAClC,MAAIoD,QAAJ;;AACA,MAAI;AACAA,IAAAA,QAAQ,GAAG,MAAMnD,oBAAoB,EAArC;AACH,GAFD,CAGA,OAAOoD,GAAP,EAAY;AACRvC,IAAAA,QAAQ,CAACI,MAAT,CAAgBoC,KAAhB,CAAsB,mFAAtB;AACA,WAAO,CAAC,UAAD,CAAP;AACH;;AACD,QAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AACA,OAAK,MAAMC,KAAX,IAAoBL,QAApB,EAA8B;AAC1BG,IAAAA,YAAY,CAACG,GAAb,CAAiBN,QAAQ,CAACK,KAAD,CAAR,CAAgBE,SAAjC;AACH;;AACD,SAAOC,KAAK,CAACC,IAAN,CAAWN,YAAX,CAAP;AACH;;AACDzD,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTrustedPublishers = exports.getExtensionRegistry = exports.getMinRequiredVersion = exports.getTargetVersion = exports.resolveRegistryEntry = exports.isOfficialSource = exports.resolveSourceUrl = exports.confirmUpdateWarning = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst api = require(\"../api\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst prompt_1 = require(\"../prompt\");\nconst EXTENSIONS_REGISTRY_ENDPOINT = \"/extensions.json\";\nasync function confirmUpdateWarning(updateWarning) {\n    logger_1.logger.info(marked(updateWarning.description));\n    if (updateWarning.action) {\n        logger_1.logger.info(marked(updateWarning.action));\n    }\n    const continueUpdate = await prompt_1.promptOnce({\n        type: \"confirm\",\n        message: \"Do you wish to continue with this update?\",\n        default: false,\n    });\n    if (!continueUpdate) {\n        throw new error_1.FirebaseError(`Update cancelled.`, { exit: 2 });\n    }\n}\nexports.confirmUpdateWarning = confirmUpdateWarning;\nfunction resolveSourceUrl(registryEntry, name, version) {\n    const targetVersion = getTargetVersion(registryEntry, version);\n    const sourceUrl = _.get(registryEntry, [\"versions\", targetVersion]);\n    if (!sourceUrl) {\n        throw new error_1.FirebaseError(`Could not find version ${clc.bold(version)} of extension ${clc.bold(name)}.`);\n    }\n    return sourceUrl;\n}\nexports.resolveSourceUrl = resolveSourceUrl;\nfunction isOfficialSource(registryEntry, sourceUrl) {\n    const versions = _.get(registryEntry, \"versions\");\n    return _.includes(versions, sourceUrl);\n}\nexports.isOfficialSource = isOfficialSource;\nasync function resolveRegistryEntry(name) {\n    const extensionsRegistry = await getExtensionRegistry();\n    const registryEntry = _.get(extensionsRegistry, name);\n    if (!registryEntry) {\n        throw new error_1.FirebaseError(`Unable to find extension source named ${clc.bold(name)}.`);\n    }\n    return registryEntry;\n}\nexports.resolveRegistryEntry = resolveRegistryEntry;\nfunction getTargetVersion(registryEntry, versionOrLabel) {\n    const seekVersion = versionOrLabel || \"latest\";\n    const versionFromLabel = _.get(registryEntry, [\"labels\", seekVersion]);\n    return versionFromLabel || seekVersion;\n}\nexports.getTargetVersion = getTargetVersion;\nfunction getMinRequiredVersion(registryEntry) {\n    return _.get(registryEntry, [\"labels\", \"minRequired\"]);\n}\nexports.getMinRequiredVersion = getMinRequiredVersion;\nasync function getExtensionRegistry(onlyFeatured) {\n    const res = await api.request(\"GET\", EXTENSIONS_REGISTRY_ENDPOINT, {\n        origin: api.firebaseExtensionsRegistryOrigin,\n    });\n    const extensions = _.get(res, \"body.mods\");\n    if (onlyFeatured) {\n        const featuredList = _.get(res, \"body.featured.discover\");\n        return _.pickBy(extensions, (_entry, extensionName) => {\n            return _.includes(featuredList, extensionName);\n        });\n    }\n    return extensions;\n}\nexports.getExtensionRegistry = getExtensionRegistry;\nasync function getTrustedPublishers() {\n    let registry;\n    try {\n        registry = await getExtensionRegistry();\n    }\n    catch (err) {\n        logger_1.logger.debug(\"Couldn't get extensions registry, assuming no trusted publishers except Firebase.\");\n        return [\"firebase\"];\n    }\n    const publisherIds = new Set();\n    for (const entry in registry) {\n        publisherIds.add(registry[entry].publisher);\n    }\n    return Array.from(publisherIds);\n}\nexports.getTrustedPublishers = getTrustedPublishers;\n"]},"metadata":{},"sourceType":"script"}