{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatabaseEmulator = void 0;\n\nconst chokidar = require(\"chokidar\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst http = require(\"http\");\n\nconst api = require(\"../api\");\n\nconst downloadableEmulators = require(\"./downloadableEmulators\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst constants_1 = require(\"./constants\");\n\nconst registry_1 = require(\"./registry\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst error_1 = require(\"../error\");\n\nconst parseBoltRules = require(\"../parseBoltRules\");\n\nclass DatabaseEmulator {\n  constructor(args) {\n    this.args = args;\n    this.importedNamespaces = [];\n    this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.DATABASE);\n  }\n\n  async start() {\n    const functionsInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.FUNCTIONS);\n\n    if (functionsInfo) {\n      this.args.functions_emulator_host = functionsInfo.host;\n      this.args.functions_emulator_port = functionsInfo.port;\n    }\n\n    if (this.args.rules) {\n      for (const c of this.args.rules) {\n        if (!c.instance) {\n          this.logger.log(\"DEBUG\", `args.rules=${JSON.stringify(this.args.rules)}`);\n          this.logger.logLabeled(\"WARN_ONCE\", \"database\", \"Could not determine your Realtime Database instance name, so rules hot reloading is disabled.\");\n          continue;\n        }\n\n        this.rulesWatcher = chokidar.watch(c.rules, {\n          persistent: true,\n          ignoreInitial: true\n        });\n        this.rulesWatcher.on(\"change\", async (event, stats) => {\n          await new Promise(res => setTimeout(res, 5));\n          this.logger.logLabeled(\"BULLET\", \"database\", `Change detected, updating rules for ${c.instance}...`);\n\n          try {\n            await this.updateRules(c.instance, c.rules);\n            this.logger.logLabeled(\"SUCCESS\", \"database\", \"Rules updated.\");\n          } catch (e) {\n            this.logger.logLabeled(\"WARN\", \"database\", this.prettyPrintRulesError(c.rules, e));\n            this.logger.logLabeled(\"WARN\", \"database\", \"Failed to update rules\");\n          }\n        });\n      }\n    }\n\n    return downloadableEmulators.start(types_1.Emulators.DATABASE, this.args);\n  }\n\n  async connect() {\n    if (this.args.rules) {\n      for (const c of this.args.rules) {\n        if (!c.instance) {\n          continue;\n        }\n\n        await this.updateRules(c.instance, c.rules);\n      }\n    }\n  }\n\n  stop() {\n    return downloadableEmulators.stop(types_1.Emulators.DATABASE);\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.DATABASE);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.DATABASE);\n    return {\n      name: this.getName(),\n      host,\n      port,\n      pid: downloadableEmulators.getPID(types_1.Emulators.DATABASE)\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.DATABASE;\n  }\n\n  getImportedNamespaces() {\n    return this.importedNamespaces;\n  }\n\n  async importData(ns, fPath) {\n    this.logger.logLabeled(\"BULLET\", \"database\", `Importing data from ${fPath}`);\n    const readStream = fs.createReadStream(fPath);\n    const {\n      host,\n      port\n    } = this.getInfo();\n    await new Promise((resolve, reject) => {\n      const req = http.request({\n        method: \"PUT\",\n        host,\n        port,\n        path: `/.json?ns=${ns}&disableTriggers=true&writeSizeLimit=unlimited`,\n        headers: {\n          Authorization: \"Bearer owner\",\n          \"Content-Type\": \"application/json\"\n        }\n      }, response => {\n        if (response.statusCode === 200) {\n          this.importedNamespaces.push(ns);\n          resolve();\n        } else {\n          this.logger.log(\"DEBUG\", \"Database import failed: \" + response.statusCode);\n          response.on(\"data\", d => {\n            this.logger.log(\"DEBUG\", d.toString());\n          }).on(\"end\", reject);\n        }\n      });\n      req.on(\"error\", reject);\n      readStream.pipe(req, {\n        end: true\n      });\n    }).catch(e => {\n      throw new error_1.FirebaseError(\"Error during database import.\", {\n        original: e,\n        exit: 1\n      });\n    });\n  }\n\n  async updateRules(instance, rulesPath) {\n    const rulesExt = path.extname(rulesPath);\n    const content = rulesExt === \".bolt\" ? parseBoltRules(rulesPath).toString() : fs.readFileSync(rulesPath, \"utf8\");\n    const info = this.getInfo();\n\n    try {\n      await api.request(\"PUT\", `/.settings/rules.json?ns=${instance}`, {\n        origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(info)}`,\n        headers: {\n          Authorization: \"Bearer owner\"\n        },\n        data: content,\n        json: false\n      });\n    } catch (e) {\n      if (e.context && e.context.body) {\n        throw e.context.body.error;\n      }\n\n      throw e.original;\n    }\n  }\n\n  prettyPrintRulesError(filePath, error) {\n    const relativePath = path.relative(process.cwd(), filePath);\n    return `${clc.cyan(relativePath)}:${error.trim()}`;\n  }\n\n}\n\nexports.DatabaseEmulator = DatabaseEmulator;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/databaseEmulator.js"],"names":["Object","defineProperty","exports","value","DatabaseEmulator","chokidar","require","clc","fs","path","http","api","downloadableEmulators","types_1","constants_1","registry_1","emulatorLogger_1","error_1","parseBoltRules","constructor","args","importedNamespaces","logger","EmulatorLogger","forEmulator","Emulators","DATABASE","start","functionsInfo","EmulatorRegistry","getInfo","FUNCTIONS","functions_emulator_host","host","functions_emulator_port","port","rules","c","instance","log","JSON","stringify","logLabeled","rulesWatcher","watch","persistent","ignoreInitial","on","event","stats","Promise","res","setTimeout","updateRules","e","prettyPrintRulesError","connect","stop","Constants","getDefaultHost","getDefaultPort","name","getName","pid","getPID","getImportedNamespaces","importData","ns","fPath","readStream","createReadStream","resolve","reject","req","request","method","headers","Authorization","response","statusCode","push","d","toString","pipe","end","catch","FirebaseError","original","exit","rulesPath","rulesExt","extname","content","readFileSync","info","origin","getInfoHostString","data","json","context","body","error","filePath","relativePath","relative","process","cwd","cyan","trim"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseEmulator = void 0;\nconst chokidar = require(\"chokidar\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst http = require(\"http\");\nconst api = require(\"../api\");\nconst downloadableEmulators = require(\"./downloadableEmulators\");\nconst types_1 = require(\"../emulator/types\");\nconst constants_1 = require(\"./constants\");\nconst registry_1 = require(\"./registry\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst error_1 = require(\"../error\");\nconst parseBoltRules = require(\"../parseBoltRules\");\nclass DatabaseEmulator {\n    constructor(args) {\n        this.args = args;\n        this.importedNamespaces = [];\n        this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.DATABASE);\n    }\n    async start() {\n        const functionsInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.FUNCTIONS);\n        if (functionsInfo) {\n            this.args.functions_emulator_host = functionsInfo.host;\n            this.args.functions_emulator_port = functionsInfo.port;\n        }\n        if (this.args.rules) {\n            for (const c of this.args.rules) {\n                if (!c.instance) {\n                    this.logger.log(\"DEBUG\", `args.rules=${JSON.stringify(this.args.rules)}`);\n                    this.logger.logLabeled(\"WARN_ONCE\", \"database\", \"Could not determine your Realtime Database instance name, so rules hot reloading is disabled.\");\n                    continue;\n                }\n                this.rulesWatcher = chokidar.watch(c.rules, { persistent: true, ignoreInitial: true });\n                this.rulesWatcher.on(\"change\", async (event, stats) => {\n                    await new Promise((res) => setTimeout(res, 5));\n                    this.logger.logLabeled(\"BULLET\", \"database\", `Change detected, updating rules for ${c.instance}...`);\n                    try {\n                        await this.updateRules(c.instance, c.rules);\n                        this.logger.logLabeled(\"SUCCESS\", \"database\", \"Rules updated.\");\n                    }\n                    catch (e) {\n                        this.logger.logLabeled(\"WARN\", \"database\", this.prettyPrintRulesError(c.rules, e));\n                        this.logger.logLabeled(\"WARN\", \"database\", \"Failed to update rules\");\n                    }\n                });\n            }\n        }\n        return downloadableEmulators.start(types_1.Emulators.DATABASE, this.args);\n    }\n    async connect() {\n        if (this.args.rules) {\n            for (const c of this.args.rules) {\n                if (!c.instance) {\n                    continue;\n                }\n                await this.updateRules(c.instance, c.rules);\n            }\n        }\n    }\n    stop() {\n        return downloadableEmulators.stop(types_1.Emulators.DATABASE);\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.DATABASE);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.DATABASE);\n        return {\n            name: this.getName(),\n            host,\n            port,\n            pid: downloadableEmulators.getPID(types_1.Emulators.DATABASE),\n        };\n    }\n    getName() {\n        return types_1.Emulators.DATABASE;\n    }\n    getImportedNamespaces() {\n        return this.importedNamespaces;\n    }\n    async importData(ns, fPath) {\n        this.logger.logLabeled(\"BULLET\", \"database\", `Importing data from ${fPath}`);\n        const readStream = fs.createReadStream(fPath);\n        const { host, port } = this.getInfo();\n        await new Promise((resolve, reject) => {\n            const req = http.request({\n                method: \"PUT\",\n                host,\n                port,\n                path: `/.json?ns=${ns}&disableTriggers=true&writeSizeLimit=unlimited`,\n                headers: {\n                    Authorization: \"Bearer owner\",\n                    \"Content-Type\": \"application/json\",\n                },\n            }, (response) => {\n                if (response.statusCode === 200) {\n                    this.importedNamespaces.push(ns);\n                    resolve();\n                }\n                else {\n                    this.logger.log(\"DEBUG\", \"Database import failed: \" + response.statusCode);\n                    response\n                        .on(\"data\", (d) => {\n                        this.logger.log(\"DEBUG\", d.toString());\n                    })\n                        .on(\"end\", reject);\n                }\n            });\n            req.on(\"error\", reject);\n            readStream.pipe(req, { end: true });\n        }).catch((e) => {\n            throw new error_1.FirebaseError(\"Error during database import.\", { original: e, exit: 1 });\n        });\n    }\n    async updateRules(instance, rulesPath) {\n        const rulesExt = path.extname(rulesPath);\n        const content = rulesExt === \".bolt\"\n            ? parseBoltRules(rulesPath).toString()\n            : fs.readFileSync(rulesPath, \"utf8\");\n        const info = this.getInfo();\n        try {\n            await api.request(\"PUT\", `/.settings/rules.json?ns=${instance}`, {\n                origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(info)}`,\n                headers: { Authorization: \"Bearer owner\" },\n                data: content,\n                json: false,\n            });\n        }\n        catch (e) {\n            if (e.context && e.context.body) {\n                throw e.context.body.error;\n            }\n            throw e.original;\n        }\n    }\n    prettyPrintRulesError(filePath, error) {\n        const relativePath = path.relative(process.cwd(), filePath);\n        return `${clc.cyan(relativePath)}:${error.trim()}`;\n    }\n}\nexports.DatabaseEmulator = DatabaseEmulator;\n"]},"metadata":{},"sourceType":"script"}