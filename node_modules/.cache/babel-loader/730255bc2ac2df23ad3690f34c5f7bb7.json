{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateGenericSimpleParser = exports.simpleStringArrayParser = exports.simpleArrayParser = exports.simpleStringParser = exports.getSimpleStringParser = void 0;\n\nconst json_schema_infer_types_1 = __importDefault(require(\"../../utils/json-schema-infer-types\"));\n\nconst common_1 = require(\"./common\");\n\nfunction getSimpleStringParser(schema, explode) {\n  const allowedTypes = common_1.removeSimpleTypes(json_schema_infer_types_1.default(schema));\n\n  if (allowedTypes.length === 1 && allowedTypes[0] === 'string') {\n    return simpleStringParser;\n  } else if (allowedTypes.length === 1 && allowedTypes[0] === 'array') {\n    return simpleArrayParser;\n  } else if (allowedTypes.includes('string') && allowedTypes.includes('array') && !allowedTypes.includes('object')) {\n    return simpleStringArrayParser;\n  } else {\n    return generateGenericSimpleParser(schema, explode);\n  }\n}\n\nexports.getSimpleStringParser = getSimpleStringParser; // This is for the case where the result is only allowed to be a string.\n\nfunction simpleStringParser(value) {\n  return !value ? value : decodeURIComponent(value);\n}\n\nexports.simpleStringParser = simpleStringParser; // This is for the case where the result allowed to be a string or an array.\n\nfunction simpleArrayParser(value) {\n  return value === undefined || value === null ? value : value.split(',').map(decodeURIComponent);\n}\n\nexports.simpleArrayParser = simpleArrayParser;\n\nfunction simpleStringArrayParser(value) {\n  const result = simpleArrayParser(value);\n\n  if (!result) {\n    return result;\n  } else if (result.length === 0) {\n    return '';\n  } else if (result.length === 1) {\n    return result[0];\n  } else {\n    return result;\n  }\n}\n\nexports.simpleStringArrayParser = simpleStringArrayParser;\n\nfunction generateGenericSimpleParser(schema, explode) {\n  const allowedTypes = common_1.removeSimpleTypes(json_schema_infer_types_1.default(schema));\n  const allowedTypesMap = common_1.allowedTypesToMap(allowedTypes);\n  return function genericSimplerParser(value) {\n    const result = simpleArrayParser(value);\n\n    if (result === null || result === undefined) {\n      return value;\n    } else if (result.length === 0 && allowedTypesMap.string) {\n      return '';\n    } else if (result.length === 1 && allowedTypesMap.string) {\n      return result[0];\n    } else if (allowedTypesMap.array) {\n      return result;\n    } else if (!explode) {\n      // Has to be object\n      return common_1.arrayToObject(result);\n    } else {\n      // Exploded object\n      return result.reduce((object, pair) => {\n        const [k, v] = pair.split('=');\n        object[decodeURIComponent(k)] = decodeURIComponent(v);\n        return object;\n      }, {});\n    }\n  };\n}\n\nexports.generateGenericSimpleParser = generateGenericSimpleParser;","map":{"version":3,"sources":["../../../src/oas3/parameterParsers/simpleStringParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateGenericSimpleParser = exports.simpleStringArrayParser = exports.simpleArrayParser = exports.simpleStringParser = exports.getSimpleStringParser = void 0;\nconst json_schema_infer_types_1 = __importDefault(require(\"../../utils/json-schema-infer-types\"));\nconst common_1 = require(\"./common\");\nfunction getSimpleStringParser(schema, explode) {\n    const allowedTypes = common_1.removeSimpleTypes(json_schema_infer_types_1.default(schema));\n    if (allowedTypes.length === 1 && allowedTypes[0] === 'string') {\n        return simpleStringParser;\n    }\n    else if (allowedTypes.length === 1 && allowedTypes[0] === 'array') {\n        return simpleArrayParser;\n    }\n    else if (allowedTypes.includes('string') &&\n        allowedTypes.includes('array') &&\n        !allowedTypes.includes('object')) {\n        return simpleStringArrayParser;\n    }\n    else {\n        return generateGenericSimpleParser(schema, explode);\n    }\n}\nexports.getSimpleStringParser = getSimpleStringParser;\n// This is for the case where the result is only allowed to be a string.\nfunction simpleStringParser(value) {\n    return !value ? value : decodeURIComponent(value);\n}\nexports.simpleStringParser = simpleStringParser;\n// This is for the case where the result allowed to be a string or an array.\nfunction simpleArrayParser(value) {\n    return value === undefined || value === null ? value : value.split(',').map(decodeURIComponent);\n}\nexports.simpleArrayParser = simpleArrayParser;\nfunction simpleStringArrayParser(value) {\n    const result = simpleArrayParser(value);\n    if (!result) {\n        return result;\n    }\n    else if (result.length === 0) {\n        return '';\n    }\n    else if (result.length === 1) {\n        return result[0];\n    }\n    else {\n        return result;\n    }\n}\nexports.simpleStringArrayParser = simpleStringArrayParser;\nfunction generateGenericSimpleParser(schema, explode) {\n    const allowedTypes = common_1.removeSimpleTypes(json_schema_infer_types_1.default(schema));\n    const allowedTypesMap = common_1.allowedTypesToMap(allowedTypes);\n    return function genericSimplerParser(value) {\n        const result = simpleArrayParser(value);\n        if (result === null || result === undefined) {\n            return value;\n        }\n        else if (result.length === 0 && allowedTypesMap.string) {\n            return '';\n        }\n        else if (result.length === 1 && allowedTypesMap.string) {\n            return result[0];\n        }\n        else if (allowedTypesMap.array) {\n            return result;\n        }\n        else if (!explode) {\n            // Has to be object\n            return common_1.arrayToObject(result);\n        }\n        else {\n            // Exploded object\n            return result.reduce((object, pair) => {\n                const [k, v] = pair.split('=');\n                object[decodeURIComponent(k)] = decodeURIComponent(v);\n                return object;\n            }, {});\n        }\n    };\n}\nexports.generateGenericSimpleParser = generateGenericSimpleParser;\n//# sourceMappingURL=simpleStringParser.js.map"]},"metadata":{},"sourceType":"script"}