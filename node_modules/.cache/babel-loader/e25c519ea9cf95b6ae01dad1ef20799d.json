{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmulatorRegistry = void 0;\n\nconst types_1 = require(\"./types\");\n\nconst error_1 = require(\"../error\");\n\nconst portUtils = require(\"./portUtils\");\n\nconst constants_1 = require(\"./constants\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nclass EmulatorRegistry {\n  static async start(instance) {\n    const description = constants_1.Constants.description(instance.getName());\n\n    if (this.isRunning(instance.getName())) {\n      throw new error_1.FirebaseError(`${description} is already running!`, {});\n    }\n\n    this.set(instance.getName(), instance);\n    await instance.start();\n    const info = instance.getInfo();\n    await portUtils.waitForPortClosed(info.port, info.host);\n  }\n\n  static async stop(name) {\n    emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `Stopping ${constants_1.Constants.description(name)}`);\n    const instance = this.get(name);\n\n    if (!instance) {\n      return;\n    }\n\n    await instance.stop();\n    this.clear(instance.getName());\n  }\n\n  static async stopAll() {\n    const stopPriority = {\n      ui: 0,\n      functions: 1,\n      hosting: 2,\n      database: 3.0,\n      firestore: 3.1,\n      pubsub: 3.2,\n      auth: 3.3,\n      storage: 3.5,\n      hub: 4,\n      logging: 5\n    };\n    const emulatorsToStop = this.listRunning().sort((a, b) => {\n      return stopPriority[a] - stopPriority[b];\n    });\n\n    for (const name of emulatorsToStop) {\n      try {\n        await this.stop(name);\n      } catch (e) {\n        emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"WARN\", name, `Error stopping ${constants_1.Constants.description(name)}`);\n      }\n    }\n  }\n\n  static isRunning(emulator) {\n    const instance = this.INSTANCES.get(emulator);\n    return instance !== undefined;\n  }\n\n  static listRunning() {\n    return types_1.ALL_EMULATORS.filter(name => this.isRunning(name));\n  }\n\n  static listRunningWithInfo() {\n    return this.listRunning().map(emulator => this.getInfo(emulator)).filter(info => typeof info !== \"undefined\");\n  }\n\n  static get(emulator) {\n    return this.INSTANCES.get(emulator);\n  }\n\n  static getInfo(emulator) {\n    const instance = this.INSTANCES.get(emulator);\n\n    if (!instance) {\n      return undefined;\n    }\n\n    return instance.getInfo();\n  }\n\n  static getInfoHostString(info) {\n    const {\n      host,\n      port\n    } = info;\n\n    if (host.includes(\":\")) {\n      return `[${host}]:${port}`;\n    } else {\n      return `${host}:${port}`;\n    }\n  }\n\n  static getPort(emulator) {\n    const instance = this.INSTANCES.get(emulator);\n\n    if (!instance) {\n      return undefined;\n    }\n\n    return instance.getInfo().port;\n  }\n\n  static set(emulator, instance) {\n    this.INSTANCES.set(emulator, instance);\n  }\n\n  static clear(emulator) {\n    this.INSTANCES.delete(emulator);\n  }\n\n}\n\nexports.EmulatorRegistry = EmulatorRegistry;\nEmulatorRegistry.INSTANCES = new Map();","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/registry.js"],"names":["Object","defineProperty","exports","value","EmulatorRegistry","types_1","require","error_1","portUtils","constants_1","emulatorLogger_1","start","instance","description","Constants","getName","isRunning","FirebaseError","set","info","getInfo","waitForPortClosed","port","host","stop","name","EmulatorLogger","forEmulator","logLabeled","get","clear","stopAll","stopPriority","ui","functions","hosting","database","firestore","pubsub","auth","storage","hub","logging","emulatorsToStop","listRunning","sort","a","b","e","emulator","INSTANCES","undefined","ALL_EMULATORS","filter","listRunningWithInfo","map","getInfoHostString","includes","getPort","delete","Map"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EmulatorRegistry = void 0;\nconst types_1 = require(\"./types\");\nconst error_1 = require(\"../error\");\nconst portUtils = require(\"./portUtils\");\nconst constants_1 = require(\"./constants\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nclass EmulatorRegistry {\n    static async start(instance) {\n        const description = constants_1.Constants.description(instance.getName());\n        if (this.isRunning(instance.getName())) {\n            throw new error_1.FirebaseError(`${description} is already running!`, {});\n        }\n        this.set(instance.getName(), instance);\n        await instance.start();\n        const info = instance.getInfo();\n        await portUtils.waitForPortClosed(info.port, info.host);\n    }\n    static async stop(name) {\n        emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `Stopping ${constants_1.Constants.description(name)}`);\n        const instance = this.get(name);\n        if (!instance) {\n            return;\n        }\n        await instance.stop();\n        this.clear(instance.getName());\n    }\n    static async stopAll() {\n        const stopPriority = {\n            ui: 0,\n            functions: 1,\n            hosting: 2,\n            database: 3.0,\n            firestore: 3.1,\n            pubsub: 3.2,\n            auth: 3.3,\n            storage: 3.5,\n            hub: 4,\n            logging: 5,\n        };\n        const emulatorsToStop = this.listRunning().sort((a, b) => {\n            return stopPriority[a] - stopPriority[b];\n        });\n        for (const name of emulatorsToStop) {\n            try {\n                await this.stop(name);\n            }\n            catch (e) {\n                emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"WARN\", name, `Error stopping ${constants_1.Constants.description(name)}`);\n            }\n        }\n    }\n    static isRunning(emulator) {\n        const instance = this.INSTANCES.get(emulator);\n        return instance !== undefined;\n    }\n    static listRunning() {\n        return types_1.ALL_EMULATORS.filter((name) => this.isRunning(name));\n    }\n    static listRunningWithInfo() {\n        return this.listRunning()\n            .map((emulator) => this.getInfo(emulator))\n            .filter((info) => typeof info !== \"undefined\");\n    }\n    static get(emulator) {\n        return this.INSTANCES.get(emulator);\n    }\n    static getInfo(emulator) {\n        const instance = this.INSTANCES.get(emulator);\n        if (!instance) {\n            return undefined;\n        }\n        return instance.getInfo();\n    }\n    static getInfoHostString(info) {\n        const { host, port } = info;\n        if (host.includes(\":\")) {\n            return `[${host}]:${port}`;\n        }\n        else {\n            return `${host}:${port}`;\n        }\n    }\n    static getPort(emulator) {\n        const instance = this.INSTANCES.get(emulator);\n        if (!instance) {\n            return undefined;\n        }\n        return instance.getInfo().port;\n    }\n    static set(emulator, instance) {\n        this.INSTANCES.set(emulator, instance);\n    }\n    static clear(emulator) {\n        this.INSTANCES.delete(emulator);\n    }\n}\nexports.EmulatorRegistry = EmulatorRegistry;\nEmulatorRegistry.INSTANCES = new Map();\n"]},"metadata":{},"sourceType":"script"}