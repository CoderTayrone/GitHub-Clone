{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allowedTypesToMap = exports.removeSimpleTypes = exports.arrayToObject = void 0;\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nfunction arrayToObject(values) {\n  if (!values) {\n    return values;\n  }\n\n  if (typeof values === 'string') {\n    // ???\n    return values;\n  }\n\n  const result = {};\n\n  for (let i = 0; i < values.length; i = i + 2) {\n    // Note if the array is an odd length, we'll end up with an \"undefined\" parameter at the end.\n    result[values[i]] = values[i + 1];\n  }\n\n  return result;\n}\n\nexports.arrayToObject = arrayToObject; // Converts all simple types that are not \"string\" into \"string\".\n\nfunction removeSimpleTypes(allowedTypes) {\n  return lodash_1.default.uniq(allowedTypes.map(t => {\n    if (t === 'object') {\n      return 'object';\n    } else if (t === 'array') {\n      return 'array';\n    } else {\n      return 'string';\n    }\n  }));\n}\n\nexports.removeSimpleTypes = removeSimpleTypes;\n\nfunction allowedTypesToMap(allowedTypes) {\n  return allowedTypes.reduce((m, t) => {\n    m[t] = true;\n    return m;\n  }, {});\n}\n\nexports.allowedTypesToMap = allowedTypesToMap;","map":{"version":3,"sources":["../../../src/oas3/parameterParsers/common.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,SAAgB,aAAhB,CAA8B,MAA9B,EAAmE;AAC/D,MAAI,CAAC,MAAL,EAAa;AACT,WAAO,MAAP;AACH;;AAED,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B;AACA,WAAO,MAAP;AACH;;AAED,QAAM,MAAM,GAAQ,EAApB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,GAAG,CAAC,GAAG,CAA3C,EAA8C;AAC1C;AACA,IAAA,MAAM,CAAC,MAAM,CAAC,CAAD,CAAP,CAAN,GAAoB,MAAM,CAAC,CAAC,GAAG,CAAL,CAA1B;AACH;;AAED,SAAO,MAAP;AACH;;AAjBD,OAAA,CAAA,aAAA,GAAA,aAAA,C,CAmBA;;AACA,SAAgB,iBAAhB,CAAkC,YAAlC,EAAwD;AACpD,SAAO,QAAA,CAAA,OAAA,CAAG,IAAH,CACH,YAAY,CAAC,GAAb,CAAkB,CAAD,IAAM;AACnB,QAAI,CAAC,KAAK,QAAV,EAAoB;AAChB,aAAO,QAAP;AACH,KAFD,MAEO,IAAI,CAAC,KAAK,OAAV,EAAmB;AACtB,aAAO,OAAP;AACH,KAFM,MAEA;AACH,aAAO,QAAP;AACH;AACJ,GARD,CADG,CAAP;AAWH;;AAZD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAcA,SAAgB,iBAAhB,CAAkC,YAAlC,EAAwD;AACpD,SAAO,YAAY,CAAC,MAAb,CAAyB,CAAC,CAAD,EAAI,CAAJ,KAAS;AACrC,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,IAAP;AACA,WAAO,CAAP;AACH,GAHM,EAGJ,EAHI,CAAP;AAIH;;AALD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.allowedTypesToMap = exports.removeSimpleTypes = exports.arrayToObject = void 0;\nconst lodash_1 = __importDefault(require(\"lodash\"));\nfunction arrayToObject(values) {\n    if (!values) {\n        return values;\n    }\n    if (typeof values === 'string') {\n        // ???\n        return values;\n    }\n    const result = {};\n    for (let i = 0; i < values.length; i = i + 2) {\n        // Note if the array is an odd length, we'll end up with an \"undefined\" parameter at the end.\n        result[values[i]] = values[i + 1];\n    }\n    return result;\n}\nexports.arrayToObject = arrayToObject;\n// Converts all simple types that are not \"string\" into \"string\".\nfunction removeSimpleTypes(allowedTypes) {\n    return lodash_1.default.uniq(allowedTypes.map((t) => {\n        if (t === 'object') {\n            return 'object';\n        }\n        else if (t === 'array') {\n            return 'array';\n        }\n        else {\n            return 'string';\n        }\n    }));\n}\nexports.removeSimpleTypes = removeSimpleTypes;\nfunction allowedTypesToMap(allowedTypes) {\n    return allowedTypes.reduce((m, t) => {\n        m[t] = true;\n        return m;\n    }, {});\n}\nexports.allowedTypesToMap = allowedTypesToMap;\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}