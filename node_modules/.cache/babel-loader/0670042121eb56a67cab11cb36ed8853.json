{"ast":null,"code":"'use strict';\n/**\n * `editor` type prompt\n */\n\nvar chalk = require('chalk');\n\nvar editAsync = require('external-editor').editAsync;\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nvar {\n  Subject\n} = require('rxjs');\n\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n  _run(cb) {\n    this.done = cb;\n    this.editorResult = new Subject(); // Open Editor on \"line\" (Enter Key)\n\n    var events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this)); // Trigger Validation when editor closes\n\n    var validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this)); // Prevents default from being printed on screen (can look weird with multiple lines)\n\n    this.currentText = this.opt.default;\n    this.opt.default = null; // Init\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n\n  render(error) {\n    var bottomContent = '';\n    var message = this.getQuestion();\n\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n\n  endExternalEditor(error, result) {\n    this.rl.resume();\n\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered'; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n}\n\nmodule.exports = EditorPrompt;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/prompts/editor.js"],"names":["chalk","require","editAsync","Base","observe","Subject","EditorPrompt","_run","cb","done","editorResult","events","rl","lineSubscription","line","subscribe","startExternalEditor","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","currentText","opt","default","render","bottomContent","message","getQuestion","status","dim","red","screen","pause","endExternalEditor","result","resume","next","state","unsubscribe","answer","value","isValid","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `editor` type prompt\n */\n\nvar chalk = require('chalk');\nvar editAsync = require('external-editor').editAsync;\nvar Base = require('./base');\nvar observe = require('../utils/events');\nvar { Subject } = require('rxjs');\n\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    this.editorResult = new Subject();\n\n    // Open Editor on \"line\" (Enter Key)\n    var events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));\n\n    // Trigger Validation when editor closes\n    var validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    // Prevents default from being printed on screen (can look weird with multiple lines)\n    this.currentText = this.opt.default;\n    this.opt.default = null;\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n  render(error) {\n    var bottomContent = '';\n    var message = this.getQuestion();\n\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n\n  endExternalEditor(error, result) {\n    this.rl.resume();\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered';\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n}\n\nmodule.exports = EditorPrompt;\n"]},"metadata":{},"sourceType":"script"}