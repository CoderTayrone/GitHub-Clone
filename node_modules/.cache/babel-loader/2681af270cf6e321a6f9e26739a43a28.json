{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar fs = require(\"fs\");\n\nvar os = require(\"os\");\n\nvar {\n  Command\n} = require(\"../command\");\n\nvar accountExporter = require(\"../accountExporter\");\n\nvar needProjectId = require(\"../projectUtils\").needProjectId;\n\nconst {\n  logger\n} = require(\"../logger\");\n\nvar {\n  requirePermissions\n} = require(\"../requirePermissions\");\n\nvar MAX_BATCH_SIZE = 1000;\nvar validateOptions = accountExporter.validateOptions;\nvar serialExportUsers = accountExporter.serialExportUsers;\nmodule.exports = new Command(\"auth:export [dataFile]\").description(\"Export accounts from your Firebase project into a data file\").option(\"--format <format>\", \"Format of exported data (csv, json). Ignored if [dataFile] has format extension.\").before(requirePermissions, [\"firebaseauth.users.get\"]).action(function (dataFile, options) {\n  var projectId = needProjectId(options);\n  var checkRes = validateOptions(options, dataFile);\n\n  if (!checkRes.format) {\n    return checkRes;\n  }\n\n  var exportOptions = checkRes;\n  var writeStream = fs.createWriteStream(dataFile);\n\n  if (exportOptions.format === \"json\") {\n    writeStream.write('{\"users\": [' + os.EOL);\n  }\n\n  exportOptions.writeStream = writeStream;\n  exportOptions.batchSize = MAX_BATCH_SIZE;\n  logger.info(\"Exporting accounts to \" + clc.bold(dataFile));\n  return serialExportUsers(projectId, exportOptions).then(function () {\n    if (exportOptions.format === \"json\") {\n      writeStream.write(\"]}\");\n    }\n\n    writeStream.end();\n    return new Promise(function (resolve, reject) {\n      writeStream.on(\"finish\", resolve);\n      writeStream.on(\"close\", resolve);\n      writeStream.on(\"error\", reject);\n    });\n  });\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/auth-export.js"],"names":["clc","require","fs","os","Command","accountExporter","needProjectId","logger","requirePermissions","MAX_BATCH_SIZE","validateOptions","serialExportUsers","module","exports","description","option","before","action","dataFile","options","projectId","checkRes","format","exportOptions","writeStream","createWriteStream","write","EOL","batchSize","info","bold","then","end","Promise","resolve","reject","on"],"mappings":"AAAA;;AACA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAI;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,iBAAD,CAAP,CAA2BK,aAA/C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaN,OAAO,CAAC,WAAD,CAA1B;;AACA,IAAI;AAAEO,EAAAA;AAAF,IAAyBP,OAAO,CAAC,uBAAD,CAApC;;AACA,IAAIQ,cAAc,GAAG,IAArB;AACA,IAAIC,eAAe,GAAGL,eAAe,CAACK,eAAtC;AACA,IAAIC,iBAAiB,GAAGN,eAAe,CAACM,iBAAxC;AACAC,MAAM,CAACC,OAAP,GAAiB,IAAIT,OAAJ,CAAY,wBAAZ,EACZU,WADY,CACA,6DADA,EAEZC,MAFY,CAEL,mBAFK,EAEgB,kFAFhB,EAGZC,MAHY,CAGLR,kBAHK,EAGe,CAAC,wBAAD,CAHf,EAIZS,MAJY,CAIL,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AACrC,MAAIC,SAAS,GAAGd,aAAa,CAACa,OAAD,CAA7B;AACA,MAAIE,QAAQ,GAAGX,eAAe,CAACS,OAAD,EAAUD,QAAV,CAA9B;;AACA,MAAI,CAACG,QAAQ,CAACC,MAAd,EAAsB;AAClB,WAAOD,QAAP;AACH;;AACD,MAAIE,aAAa,GAAGF,QAApB;AACA,MAAIG,WAAW,GAAGtB,EAAE,CAACuB,iBAAH,CAAqBP,QAArB,CAAlB;;AACA,MAAIK,aAAa,CAACD,MAAd,KAAyB,MAA7B,EAAqC;AACjCE,IAAAA,WAAW,CAACE,KAAZ,CAAkB,gBAAgBvB,EAAE,CAACwB,GAArC;AACH;;AACDJ,EAAAA,aAAa,CAACC,WAAd,GAA4BA,WAA5B;AACAD,EAAAA,aAAa,CAACK,SAAd,GAA0BnB,cAA1B;AACAF,EAAAA,MAAM,CAACsB,IAAP,CAAY,2BAA2B7B,GAAG,CAAC8B,IAAJ,CAASZ,QAAT,CAAvC;AACA,SAAOP,iBAAiB,CAACS,SAAD,EAAYG,aAAZ,CAAjB,CAA4CQ,IAA5C,CAAiD,YAAY;AAChE,QAAIR,aAAa,CAACD,MAAd,KAAyB,MAA7B,EAAqC;AACjCE,MAAAA,WAAW,CAACE,KAAZ,CAAkB,IAAlB;AACH;;AACDF,IAAAA,WAAW,CAACQ,GAAZ;AACA,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1CX,MAAAA,WAAW,CAACY,EAAZ,CAAe,QAAf,EAAyBF,OAAzB;AACAV,MAAAA,WAAW,CAACY,EAAZ,CAAe,OAAf,EAAwBF,OAAxB;AACAV,MAAAA,WAAW,CAACY,EAAZ,CAAe,OAAf,EAAwBD,MAAxB;AACH,KAJM,CAAP;AAKH,GAVM,CAAP;AAWH,CA7BgB,CAAjB","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar fs = require(\"fs\");\nvar os = require(\"os\");\nvar { Command } = require(\"../command\");\nvar accountExporter = require(\"../accountExporter\");\nvar needProjectId = require(\"../projectUtils\").needProjectId;\nconst { logger } = require(\"../logger\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar MAX_BATCH_SIZE = 1000;\nvar validateOptions = accountExporter.validateOptions;\nvar serialExportUsers = accountExporter.serialExportUsers;\nmodule.exports = new Command(\"auth:export [dataFile]\")\n    .description(\"Export accounts from your Firebase project into a data file\")\n    .option(\"--format <format>\", \"Format of exported data (csv, json). Ignored if [dataFile] has format extension.\")\n    .before(requirePermissions, [\"firebaseauth.users.get\"])\n    .action(function (dataFile, options) {\n    var projectId = needProjectId(options);\n    var checkRes = validateOptions(options, dataFile);\n    if (!checkRes.format) {\n        return checkRes;\n    }\n    var exportOptions = checkRes;\n    var writeStream = fs.createWriteStream(dataFile);\n    if (exportOptions.format === \"json\") {\n        writeStream.write('{\"users\": [' + os.EOL);\n    }\n    exportOptions.writeStream = writeStream;\n    exportOptions.batchSize = MAX_BATCH_SIZE;\n    logger.info(\"Exporting accounts to \" + clc.bold(dataFile));\n    return serialExportUsers(projectId, exportOptions).then(function () {\n        if (exportOptions.format === \"json\") {\n            writeStream.write(\"]}\");\n        }\n        writeStream.end();\n        return new Promise(function (resolve, reject) {\n            writeStream.on(\"finish\", resolve);\n            writeStream.on(\"close\", resolve);\n            writeStream.on(\"error\", reject);\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}