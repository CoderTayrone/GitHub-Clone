{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst logger_1 = require(\"../logger\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst metadata = require(\"../database/metadata\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nexports.default = new command_1.Command(\"database:rules:get <rulesetId>\").description(\"get a realtime database ruleset by id\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async (rulesetId, options) => {\n  const ruleset = await metadata.getRuleset(options.instance, rulesetId);\n  logger_1.logger.info(`Ruleset ${ruleset.id} was created at ${ruleset.createdAt}`);\n  logger_1.logger.info(ruleset.source);\n  return ruleset;\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-rules-get.js"],"names":["Object","defineProperty","exports","value","command_1","require","logger_1","requireDatabaseInstance_1","requirePermissions_1","metadata","types_1","commandUtils_1","default","Command","description","option","before","requirePermissions","requireDatabaseInstance","warnEmulatorNotSupported","Emulators","DATABASE","action","rulesetId","options","ruleset","getRuleset","instance","logger","info","id","createdAt","source"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,4BAAD,CAAzC;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,0BAAD,CAA9B;;AACAH,OAAO,CAACU,OAAR,GAAkB,IAAIR,SAAS,CAACS,OAAd,CAAsB,gCAAtB,EACbC,WADa,CACD,uCADC,EAEbC,MAFa,CAEN,uBAFM,EAEmB,yFAFnB,EAGbC,MAHa,CAGNR,oBAAoB,CAACS,kBAHf,EAGmC,CAAC,gCAAD,CAHnC,EAIbD,MAJa,CAINT,yBAAyB,CAACW,uBAJpB,EAKbF,MALa,CAKNL,cAAc,CAACQ,wBALT,EAKmCT,OAAO,CAACU,SAAR,CAAkBC,QALrD,EAMbC,MANa,CAMN,OAAOC,SAAP,EAAkBC,OAAlB,KAA8B;AACtC,QAAMC,OAAO,GAAG,MAAMhB,QAAQ,CAACiB,UAAT,CAAoBF,OAAO,CAACG,QAA5B,EAAsCJ,SAAtC,CAAtB;AACAjB,EAAAA,QAAQ,CAACsB,MAAT,CAAgBC,IAAhB,CAAsB,WAAUJ,OAAO,CAACK,EAAG,mBAAkBL,OAAO,CAACM,SAAU,EAA/E;AACAzB,EAAAA,QAAQ,CAACsB,MAAT,CAAgBC,IAAhB,CAAqBJ,OAAO,CAACO,MAA7B;AACA,SAAOP,OAAP;AACH,CAXiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst logger_1 = require(\"../logger\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst metadata = require(\"../database/metadata\");\nconst types_1 = require(\"../emulator/types\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nexports.default = new command_1.Command(\"database:rules:get <rulesetId>\")\n    .description(\"get a realtime database ruleset by id\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (rulesetId, options) => {\n    const ruleset = await metadata.getRuleset(options.instance, rulesetId);\n    logger_1.logger.info(`Ruleset ${ruleset.id} was created at ${ruleset.createdAt}`);\n    logger_1.logger.info(ruleset.source);\n    return ruleset;\n});\n"]},"metadata":{},"sourceType":"script"}