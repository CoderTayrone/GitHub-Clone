{"ast":null,"code":"\"use strict\";\n/**\n * Module dependencies.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst netmask_1 = require(\"netmask\");\n\nconst util_1 = require(\"./util\");\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\n\n\nfunction isInNet(host, pattern, mask) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const family = 4;\n\n    try {\n      const ip = yield util_1.dnsLookup(host, {\n        family\n      });\n\n      if (typeof ip === 'string') {\n        const netmask = new netmask_1.Netmask(pattern, mask);\n        return netmask.contains(ip);\n      }\n    } catch (err) {}\n\n    return false;\n  });\n}\n\nexports.default = isInNet;","map":{"version":3,"sources":["../src/isInNet.ts"],"names":[],"mappings":";AAAA;;AAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;;;AAEH,SAA8B,OAA9B,CACC,IADD,EAEC,OAFD,EAGC,IAHD,EAGa;;AAEZ,UAAM,MAAM,GAAG,CAAf;;AACA,QAAI;AACH,YAAM,EAAE,GAAG,MAAM,MAAA,CAAA,SAAA,CAAU,IAAV,EAAgB;AAAE,QAAA;AAAF,OAAhB,CAAjB;;AACA,UAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC3B,cAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACA,eAAO,OAAO,CAAC,QAAR,CAAiB,EAAjB,CAAP;AACA;AACD,KAND,CAME,OAAO,GAAP,EAAY,CAAE;;AAChB,WAAO,KAAP;AACA,G;AAAA;;AAdD,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Module dependencies.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst netmask_1 = require(\"netmask\");\nconst util_1 = require(\"./util\");\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\nfunction isInNet(host, pattern, mask) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const family = 4;\n        try {\n            const ip = yield util_1.dnsLookup(host, { family });\n            if (typeof ip === 'string') {\n                const netmask = new netmask_1.Netmask(pattern, mask);\n                return netmask.contains(ip);\n            }\n        }\n        catch (err) { }\n        return false;\n    });\n}\nexports.default = isInNet;\n//# sourceMappingURL=isInNet.js.map"]},"metadata":{},"sourceType":"script"}