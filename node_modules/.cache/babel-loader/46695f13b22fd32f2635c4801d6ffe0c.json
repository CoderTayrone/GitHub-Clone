{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = require(\"lodash\");\n\nconst proxy_1 = require(\"./proxy\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst api_1 = require(\"../api\");\n\nconst cloudRunCache = {};\n\nfunction getCloudRunUrl(rewrite, projectId) {\n  const alreadyFetched = cloudRunCache[`${rewrite.run.region}/${rewrite.run.serviceId}`];\n\n  if (alreadyFetched) {\n    return Promise.resolve(alreadyFetched);\n  }\n\n  const path = `/v1/projects/${projectId}/locations/${rewrite.run.region || \"us-central1\"}/services/${rewrite.run.serviceId}`;\n  logger_1.logger.info(`[hosting] Looking up Cloud Run service \"${path}\" for its URL`);\n  return api_1.request(\"GET\", path, {\n    origin: api_1.cloudRunApiOrigin,\n    auth: true\n  }).then(res => {\n    const url = lodash_1.get(res, \"body.status.url\");\n\n    if (!url) {\n      return Promise.reject(\"Cloud Run URL doesn't exist in response.\");\n    }\n\n    cloudRunCache[`${rewrite.run.region}/${rewrite.run.serviceId}`] = url;\n    return url;\n  }).catch(err => {\n    const errInfo = `error looking up URL for Cloud Run service: ${err}`;\n    return Promise.reject(errInfo);\n  });\n}\n\nfunction default_1(options) {\n  return async rewrite => {\n    if (!rewrite.run) {\n      return proxy_1.errorRequestHandler('Cloud Run rewrites must have a valid \"run\" field.');\n    }\n\n    if (!rewrite.run.serviceId) {\n      return proxy_1.errorRequestHandler(\"Cloud Run rewrites must supply a service ID.\");\n    }\n\n    if (!rewrite.run.region) {\n      rewrite.run.region = \"us-central1\";\n    }\n\n    logger_1.logger.info(`[hosting] Cloud Run rewrite ${JSON.stringify(rewrite)} triggered`);\n    const textIdentifier = `Cloud Run service \"${rewrite.run.serviceId}\" for region \"${rewrite.run.region}\"`;\n    return getCloudRunUrl(rewrite, projectUtils_1.needProjectId(options)).then(url => proxy_1.proxyRequestHandler(url, textIdentifier)).catch(proxy_1.errorRequestHandler);\n  };\n}\n\nexports.default = default_1;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/hosting/cloudRunProxy.js"],"names":["Object","defineProperty","exports","value","lodash_1","require","proxy_1","projectUtils_1","logger_1","api_1","cloudRunCache","getCloudRunUrl","rewrite","projectId","alreadyFetched","run","region","serviceId","Promise","resolve","path","logger","info","request","origin","cloudRunApiOrigin","auth","then","res","url","get","reject","catch","err","errInfo","default_1","options","errorRequestHandler","JSON","stringify","textIdentifier","needProjectId","proxyRequestHandler","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = require(\"lodash\");\nconst proxy_1 = require(\"./proxy\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst logger_1 = require(\"../logger\");\nconst api_1 = require(\"../api\");\nconst cloudRunCache = {};\nfunction getCloudRunUrl(rewrite, projectId) {\n    const alreadyFetched = cloudRunCache[`${rewrite.run.region}/${rewrite.run.serviceId}`];\n    if (alreadyFetched) {\n        return Promise.resolve(alreadyFetched);\n    }\n    const path = `/v1/projects/${projectId}/locations/${rewrite.run.region || \"us-central1\"}/services/${rewrite.run.serviceId}`;\n    logger_1.logger.info(`[hosting] Looking up Cloud Run service \"${path}\" for its URL`);\n    return api_1.request(\"GET\", path, { origin: api_1.cloudRunApiOrigin, auth: true })\n        .then((res) => {\n        const url = lodash_1.get(res, \"body.status.url\");\n        if (!url) {\n            return Promise.reject(\"Cloud Run URL doesn't exist in response.\");\n        }\n        cloudRunCache[`${rewrite.run.region}/${rewrite.run.serviceId}`] = url;\n        return url;\n    })\n        .catch((err) => {\n        const errInfo = `error looking up URL for Cloud Run service: ${err}`;\n        return Promise.reject(errInfo);\n    });\n}\nfunction default_1(options) {\n    return async (rewrite) => {\n        if (!rewrite.run) {\n            return proxy_1.errorRequestHandler('Cloud Run rewrites must have a valid \"run\" field.');\n        }\n        if (!rewrite.run.serviceId) {\n            return proxy_1.errorRequestHandler(\"Cloud Run rewrites must supply a service ID.\");\n        }\n        if (!rewrite.run.region) {\n            rewrite.run.region = \"us-central1\";\n        }\n        logger_1.logger.info(`[hosting] Cloud Run rewrite ${JSON.stringify(rewrite)} triggered`);\n        const textIdentifier = `Cloud Run service \"${rewrite.run.serviceId}\" for region \"${rewrite.run.region}\"`;\n        return getCloudRunUrl(rewrite, projectUtils_1.needProjectId(options))\n            .then((url) => proxy_1.proxyRequestHandler(url, textIdentifier))\n            .catch(proxy_1.errorRequestHandler);\n    };\n}\nexports.default = default_1;\n"]},"metadata":{},"sourceType":"script"}