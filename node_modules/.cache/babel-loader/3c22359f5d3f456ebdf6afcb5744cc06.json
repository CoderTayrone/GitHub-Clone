{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst command_1 = require(\"../command\");\n\nconst settings_1 = require(\"../database/settings\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst error_1 = require(\"../error\");\n\nconst database_1 = require(\"../management/database\");\n\nconst api_1 = require(\"../database/api\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst utils = require(\"../utils\");\n\nexports.default = new command_1.Command(\"database:settings:get <path>\").description(\"read the realtime database setting at path\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\").help(settings_1.HELP_TEXT).before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(database_1.populateInstanceDetails).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async (path, options) => {\n  if (!settings_1.DATABASE_SETTINGS.has(path)) {\n    throw new error_1.FirebaseError(settings_1.INVALID_PATH_ERROR, {\n      exit: 1\n    });\n  }\n\n  const u = new url_1.URL(utils.getDatabaseUrl(api_1.realtimeOriginOrCustomUrl(options.instanceDetails.databaseUrl), options.instance, `/.settings/${path}.json`));\n  const c = new apiv2_1.Client({\n    urlPrefix: u.origin,\n    auth: true\n  });\n  let res;\n\n  try {\n    res = await c.get(u.pathname);\n  } catch (err) {\n    throw new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n      exit: 2,\n      original: err\n    });\n  }\n\n  if (typeof res.body === \"object\") {\n    res.body = res.body.value;\n  }\n\n  utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${res.body}`);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-settings-get.js"],"names":["Object","defineProperty","exports","value","url_1","require","apiv2_1","command_1","settings_1","types_1","error_1","database_1","api_1","requirePermissions_1","commandUtils_1","requireDatabaseInstance_1","utils","default","Command","description","option","help","HELP_TEXT","before","requirePermissions","requireDatabaseInstance","populateInstanceDetails","warnEmulatorNotSupported","Emulators","DATABASE","action","path","options","DATABASE_SETTINGS","has","FirebaseError","INVALID_PATH_ERROR","exit","u","URL","getDatabaseUrl","realtimeOriginOrCustomUrl","instanceDetails","databaseUrl","instance","c","Client","urlPrefix","origin","auth","res","get","pathname","err","original","body","logSuccess"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst apiv2_1 = require(\"../apiv2\");\nconst command_1 = require(\"../command\");\nconst settings_1 = require(\"../database/settings\");\nconst types_1 = require(\"../emulator/types\");\nconst error_1 = require(\"../error\");\nconst database_1 = require(\"../management/database\");\nconst api_1 = require(\"../database/api\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst utils = require(\"../utils\");\nexports.default = new command_1.Command(\"database:settings:get <path>\")\n    .description(\"read the realtime database setting at path\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\")\n    .help(settings_1.HELP_TEXT)\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(database_1.populateInstanceDetails)\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (path, options) => {\n    if (!settings_1.DATABASE_SETTINGS.has(path)) {\n        throw new error_1.FirebaseError(settings_1.INVALID_PATH_ERROR, { exit: 1 });\n    }\n    const u = new url_1.URL(utils.getDatabaseUrl(api_1.realtimeOriginOrCustomUrl(options.instanceDetails.databaseUrl), options.instance, `/.settings/${path}.json`));\n    const c = new apiv2_1.Client({ urlPrefix: u.origin, auth: true });\n    let res;\n    try {\n        res = await c.get(u.pathname);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n            exit: 2,\n            original: err,\n        });\n    }\n    if (typeof res.body === \"object\") {\n        res.body = res.body.value;\n    }\n    utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${res.body}`);\n});\n"]},"metadata":{},"sourceType":"script"}