{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\nconst _ = require(\"lodash\");\n\nconst slasher = require(\"glob-slasher\");\n\nconst urlParser = require(\"fast-url-parser\");\n\nconst onHeaders = require(\"on-headers\");\n\nconst patterns = require(\"../utils/patterns\");\n\nconst normalizedConfigHeaders = function (spec, config) {\n  const out = config || [];\n\n  if (_.isArray(config)) {\n    const _isAllowed = function (headerToSet) {\n      return _.includes(spec.allowedHeaders, headerToSet.key.toLowerCase());\n    };\n\n    for (let i = 0; i < config.length; i++) {\n      config[i].source = slasher(config[i].source);\n      config[i].headers = config[i].headers || [];\n\n      if (spec.allowedHeaders) {\n        config[i].headers = config[i].headers.filter(_isAllowed);\n      }\n    }\n  }\n\n  return out;\n};\n\nconst matcher = function (configHeaders) {\n  return function (url) {\n    return configHeaders.filter(configHeader => {\n      return patterns.configMatcher(url, configHeader);\n    }).reduce((out, val) => {\n      val.headers.forEach(headerToSet => {\n        out.push(headerToSet);\n      });\n      return out;\n    }, []);\n  };\n};\n\nmodule.exports = function (spec) {\n  return function (req, res, next) {\n    const config = _.get(req, \"superstatic.headers\");\n\n    if (!config) {\n      return next();\n    }\n\n    const headers = matcher(normalizedConfigHeaders(spec, config));\n    const pathname = urlParser.parse(req.url).pathname;\n    const matches = headers(slasher(pathname));\n    onHeaders(res, () => {\n      _.forEach(matches, header => {\n        res.setHeader(header.key, header.value);\n      });\n    });\n    return next();\n  };\n};","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/superstatic/lib/middleware/headers.js"],"names":["_","require","slasher","urlParser","onHeaders","patterns","normalizedConfigHeaders","spec","config","out","isArray","_isAllowed","headerToSet","includes","allowedHeaders","key","toLowerCase","i","length","source","headers","filter","matcher","configHeaders","url","configHeader","configMatcher","reduce","val","forEach","push","module","exports","req","res","next","get","pathname","parse","matches","header","setHeader","value"],"mappings":"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","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n\nconst _ = require(\"lodash\");\nconst slasher = require(\"glob-slasher\");\nconst urlParser = require(\"fast-url-parser\");\nconst onHeaders = require(\"on-headers\");\nconst patterns = require(\"../utils/patterns\");\n\nconst normalizedConfigHeaders = function(spec, config) {\n  const out = config || [];\n  if (_.isArray(config)) {\n    const _isAllowed = function(headerToSet) {\n      return _.includes(spec.allowedHeaders, headerToSet.key.toLowerCase());\n    };\n\n    for (let i = 0; i < config.length; i++) {\n      config[i].source = slasher(config[i].source);\n      config[i].headers = config[i].headers || [];\n      if (spec.allowedHeaders) {\n        config[i].headers = config[i].headers.filter(_isAllowed);\n      }\n    }\n  }\n\n  return out;\n};\n\nconst matcher = function(configHeaders) {\n  return function(url) {\n    return configHeaders\n      .filter((configHeader) => {\n        return patterns.configMatcher(url, configHeader);\n      })\n      .reduce((out, val) => {\n        val.headers.forEach((headerToSet) => {\n          out.push(headerToSet);\n        });\n        return out;\n      }, []);\n  };\n};\n\nmodule.exports = function(spec) {\n  return function(req, res, next) {\n    const config = _.get(req, \"superstatic.headers\");\n    if (!config) {\n      return next();\n    }\n\n    const headers = matcher(normalizedConfigHeaders(spec, config));\n    const pathname = urlParser.parse(req.url).pathname;\n    const matches = headers(slasher(pathname));\n\n    onHeaders(res, () => {\n      _.forEach(matches, (header) => {\n        res.setHeader(header.key, header.value);\n      });\n    });\n\n    return next();\n  };\n};\n"]},"metadata":{},"sourceType":"script"}