{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nconst command_1 = require(\"../command\");\n\nconst settings_1 = require(\"../database/settings\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst error_1 = require(\"../error\");\n\nconst database_1 = require(\"../management/database\");\n\nconst api_1 = require(\"../database/api\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\n\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\n\nconst utils = require(\"../utils\");\n\nexports.default = new command_1.Command(\"database:settings:set <path> <value>\").description(\"set the realtime database setting at path.\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\").help(settings_1.HELP_TEXT).before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireDatabaseInstance_1.requireDatabaseInstance).before(database_1.populateInstanceDetails).before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE).action(async (path, value, options) => {\n  const setting = settings_1.DATABASE_SETTINGS.get(path);\n\n  if (setting === undefined) {\n    return utils.reject(settings_1.INVALID_PATH_ERROR, {\n      exit: 1\n    });\n  }\n\n  const parsedValue = setting.parseInput(value);\n\n  if (parsedValue === undefined) {\n    return utils.reject(setting.parseInputErrorMessge, {\n      exit: 1\n    });\n  }\n\n  const u = new url_1.URL(utils.getDatabaseUrl(api_1.realtimeOriginOrCustomUrl(options.instanceDetails.databaseUrl), options.instance, `/.settings/${path}.json`));\n  const c = new apiv2_1.Client({\n    urlPrefix: u.origin,\n    auth: true\n  });\n\n  try {\n    await c.put(u.pathname, JSON.stringify(parsedValue));\n  } catch (err) {\n    throw new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n      exit: 2,\n      original: err\n    });\n  }\n\n  utils.logSuccess(\"Successfully set setting.\");\n  utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${JSON.stringify(parsedValue)}`);\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/database-settings-set.js"],"names":["Object","defineProperty","exports","value","url_1","require","apiv2_1","command_1","settings_1","types_1","error_1","database_1","api_1","requirePermissions_1","commandUtils_1","requireDatabaseInstance_1","utils","default","Command","description","option","help","HELP_TEXT","before","requirePermissions","requireDatabaseInstance","populateInstanceDetails","warnEmulatorNotSupported","Emulators","DATABASE","action","path","options","setting","DATABASE_SETTINGS","get","undefined","reject","INVALID_PATH_ERROR","exit","parsedValue","parseInput","parseInputErrorMessge","u","URL","getDatabaseUrl","realtimeOriginOrCustomUrl","instanceDetails","databaseUrl","instance","c","Client","urlPrefix","origin","auth","put","pathname","JSON","stringify","err","FirebaseError","original","logSuccess"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst apiv2_1 = require(\"../apiv2\");\nconst command_1 = require(\"../command\");\nconst settings_1 = require(\"../database/settings\");\nconst types_1 = require(\"../emulator/types\");\nconst error_1 = require(\"../error\");\nconst database_1 = require(\"../management/database\");\nconst api_1 = require(\"../database/api\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst commandUtils_1 = require(\"../emulator/commandUtils\");\nconst requireDatabaseInstance_1 = require(\"../requireDatabaseInstance\");\nconst utils = require(\"../utils\");\nexports.default = new command_1.Command(\"database:settings:set <path> <value>\")\n    .description(\"set the realtime database setting at path.\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\")\n    .help(settings_1.HELP_TEXT)\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireDatabaseInstance_1.requireDatabaseInstance)\n    .before(database_1.populateInstanceDetails)\n    .before(commandUtils_1.warnEmulatorNotSupported, types_1.Emulators.DATABASE)\n    .action(async (path, value, options) => {\n    const setting = settings_1.DATABASE_SETTINGS.get(path);\n    if (setting === undefined) {\n        return utils.reject(settings_1.INVALID_PATH_ERROR, { exit: 1 });\n    }\n    const parsedValue = setting.parseInput(value);\n    if (parsedValue === undefined) {\n        return utils.reject(setting.parseInputErrorMessge, { exit: 1 });\n    }\n    const u = new url_1.URL(utils.getDatabaseUrl(api_1.realtimeOriginOrCustomUrl(options.instanceDetails.databaseUrl), options.instance, `/.settings/${path}.json`));\n    const c = new apiv2_1.Client({ urlPrefix: u.origin, auth: true });\n    try {\n        await c.put(u.pathname, JSON.stringify(parsedValue));\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n            exit: 2,\n            original: err,\n        });\n    }\n    utils.logSuccess(\"Successfully set setting.\");\n    utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${JSON.stringify(parsedValue)}`);\n});\n"]},"metadata":{},"sourceType":"script"}