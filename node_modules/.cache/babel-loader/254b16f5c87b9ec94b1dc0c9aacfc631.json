{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst dns_1 = __importDefault(require(\"dns\"));\n\nconst tls_1 = __importDefault(require(\"tls\"));\n\nconst url_1 = __importDefault(require(\"url\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst agent_base_1 = require(\"agent-base\");\n\nconst socks_1 = require(\"socks\");\n\nconst debug = debug_1.default('socks-proxy-agent');\n\nfunction dnsLookup(host) {\n  return new Promise((resolve, reject) => {\n    dns_1.default.lookup(host, (err, res) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n}\n\nfunction parseSocksProxy(opts) {\n  let port = 0;\n  let lookup = false;\n  let type = 5; // Prefer `hostname` over `host`, because of `url.parse()`\n\n  const host = opts.hostname || opts.host;\n\n  if (!host) {\n    throw new TypeError('No \"host\"');\n  }\n\n  if (typeof opts.port === 'number') {\n    port = opts.port;\n  } else if (typeof opts.port === 'string') {\n    port = parseInt(opts.port, 10);\n  } // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n  // \"The SOCKS service is conventionally located on TCP port 1080\"\n\n\n  if (!port) {\n    port = 1080;\n  } // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n  // Defaults to 5.\n\n\n  if (opts.protocol) {\n    switch (opts.protocol.replace(':', '')) {\n      case 'socks4':\n        lookup = true;\n      // pass through\n\n      case 'socks4a':\n        type = 4;\n        break;\n\n      case 'socks5':\n        lookup = true;\n      // pass through\n\n      case 'socks': // no version specified, default to 5h\n\n      case 'socks5h':\n        type = 5;\n        break;\n\n      default:\n        throw new TypeError(`A \"socks\" protocol must be specified! Got: ${opts.protocol}`);\n    }\n  }\n\n  if (typeof opts.type !== 'undefined') {\n    if (opts.type === 4 || opts.type === 5) {\n      type = opts.type;\n    } else {\n      throw new TypeError(`\"type\" must be 4 or 5, got: ${opts.type}`);\n    }\n  }\n\n  const proxy = {\n    host,\n    port,\n    type\n  };\n  let userId = opts.userId || opts.username;\n  let password = opts.password;\n\n  if (opts.auth) {\n    const auth = opts.auth.split(':');\n    userId = auth[0];\n    password = auth[1];\n  }\n\n  if (userId) {\n    Object.defineProperty(proxy, 'userId', {\n      value: userId,\n      enumerable: false\n    });\n  }\n\n  if (password) {\n    Object.defineProperty(proxy, 'password', {\n      value: password,\n      enumerable: false\n    });\n  }\n\n  return {\n    lookup,\n    proxy\n  };\n}\n/**\n * The `SocksProxyAgent`.\n *\n * @api public\n */\n\n\nclass SocksProxyAgent extends agent_base_1.Agent {\n  constructor(_opts) {\n    let opts;\n\n    if (typeof _opts === 'string') {\n      opts = url_1.default.parse(_opts);\n    } else {\n      opts = _opts;\n    }\n\n    if (!opts) {\n      throw new TypeError('a SOCKS proxy server `host` and `port` must be specified!');\n    }\n\n    super(opts);\n    const parsedProxy = parseSocksProxy(opts);\n    this.lookup = parsedProxy.lookup;\n    this.proxy = parsedProxy.proxy;\n  }\n  /**\n   * Initiates a SOCKS connection to the specified SOCKS proxy server,\n   * which in turn connects to the specified remote host and port.\n   *\n   * @api protected\n   */\n\n\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        lookup,\n        proxy\n      } = this;\n      let {\n        host,\n        port,\n        timeout\n      } = opts;\n\n      if (!host) {\n        throw new Error('No `host` defined!');\n      }\n\n      if (lookup) {\n        // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n        host = yield dnsLookup(host);\n      }\n\n      const socksOpts = {\n        proxy,\n        destination: {\n          host,\n          port\n        },\n        command: 'connect',\n        timeout\n      };\n      debug('Creating socks proxy connection: %o', socksOpts);\n      const {\n        socket\n      } = yield socks_1.SocksClient.createConnection(socksOpts);\n      debug('Successfully created socks proxy connection');\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || host;\n        return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n          socket,\n          servername\n        }));\n      }\n\n      return socket;\n    });\n  }\n\n}\n\nexports.default = SocksProxyAgent;\n\nfunction omit(obj, ...keys) {\n  const ret = {};\n  let key;\n\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n\n  return ret;\n}","map":{"version":3,"sources":["../src/agent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AAEA,MAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,MAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAGA,MAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,mBAAZ,CAAd;;AAEA,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC9B,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACtC,IAAA,KAAA,CAAA,OAAA,CAAI,MAAJ,CAAW,IAAX,EAAiB,CAAC,GAAD,EAAM,GAAN,KAAa;AAC7B,UAAI,GAAJ,EAAS;AACR,QAAA,MAAM,CAAC,GAAD,CAAN;AACA,OAFD,MAEO;AACN,QAAA,OAAO,CAAC,GAAD,CAAP;AACA;AACD,KAND;AAOA,GARM,CAAP;AASA;;AAED,SAAS,eAAT,CACC,IADD,EAC6B;AAE5B,MAAI,IAAI,GAAG,CAAX;AACA,MAAI,MAAM,GAAG,KAAb;AACA,MAAI,IAAI,GAAuB,CAA/B,CAJ4B,CAM5B;;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,QAAL,IAAiB,IAAI,CAAC,IAAnC;;AACA,MAAI,CAAC,IAAL,EAAW;AACV,UAAM,IAAI,SAAJ,CAAc,WAAd,CAAN;AACA;;AAED,MAAI,OAAO,IAAI,CAAC,IAAZ,KAAqB,QAAzB,EAAmC;AAClC,IAAA,IAAI,GAAG,IAAI,CAAC,IAAZ;AACA,GAFD,MAEO,IAAI,OAAO,IAAI,CAAC,IAAZ,KAAqB,QAAzB,EAAmC;AACzC,IAAA,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAN,EAAY,EAAZ,CAAf;AACA,GAhB2B,CAkB5B;AACA;;;AACA,MAAI,CAAC,IAAL,EAAW;AACV,IAAA,IAAI,GAAG,IAAP;AACA,GAtB2B,CAwB5B;AACA;;;AACA,MAAI,IAAI,CAAC,QAAT,EAAmB;AAClB,YAAQ,IAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,GAAtB,EAA2B,EAA3B,CAAR;AACC,WAAK,QAAL;AACC,QAAA,MAAM,GAAG,IAAT;AACD;;AACA,WAAK,SAAL;AACC,QAAA,IAAI,GAAG,CAAP;AACA;;AACD,WAAK,QAAL;AACC,QAAA,MAAM,GAAG,IAAT;AACD;;AACA,WAAK,OAAL,CAVD,CAUe;;AACd,WAAK,SAAL;AACC,QAAA,IAAI,GAAG,CAAP;AACA;;AACD;AACC,cAAM,IAAI,SAAJ,CACL,8CAA8C,IAAI,CAAC,QAAQ,EADtD,CAAN;AAfF;AAmBA;;AAED,MAAI,OAAO,IAAI,CAAC,IAAZ,KAAqB,WAAzB,EAAsC;AACrC,QAAI,IAAI,CAAC,IAAL,KAAc,CAAd,IAAmB,IAAI,CAAC,IAAL,KAAc,CAArC,EAAwC;AACvC,MAAA,IAAI,GAAG,IAAI,CAAC,IAAZ;AACA,KAFD,MAEO;AACN,YAAM,IAAI,SAAJ,CAAc,+BAA+B,IAAI,CAAC,IAAI,EAAtD,CAAN;AACA;AACD;;AAED,QAAM,KAAK,GAAe;AACzB,IAAA,IADyB;AAEzB,IAAA,IAFyB;AAGzB,IAAA;AAHyB,GAA1B;AAMA,MAAI,MAAM,GAAG,IAAI,CAAC,MAAL,IAAe,IAAI,CAAC,QAAjC;AACA,MAAI,QAAQ,GAAG,IAAI,CAAC,QAApB;;AACA,MAAI,IAAI,CAAC,IAAT,EAAe;AACd,UAAM,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAgB,GAAhB,CAAb;AACA,IAAA,MAAM,GAAG,IAAI,CAAC,CAAD,CAAb;AACA,IAAA,QAAQ,GAAG,IAAI,CAAC,CAAD,CAAf;AACA;;AACD,MAAI,MAAJ,EAAY;AACX,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,QAA7B,EAAuC;AACtC,MAAA,KAAK,EAAE,MAD+B;AAEtC,MAAA,UAAU,EAAE;AAF0B,KAAvC;AAIA;;AACD,MAAI,QAAJ,EAAc;AACb,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,UAA7B,EAAyC;AACxC,MAAA,KAAK,EAAE,QADiC;AAExC,MAAA,UAAU,EAAE;AAF4B,KAAzC;AAIA;;AAED,SAAO;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,GAAP;AACA;AAED;;;;AAIG;;;AACH,MAAqB,eAArB,SAA6C,YAAA,CAAA,KAA7C,CAAkD;AAIjD,EAAA,WAAA,CAAY,KAAZ,EAAkD;AACjD,QAAI,IAAJ;;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,MAAA,IAAI,GAAG,KAAA,CAAA,OAAA,CAAI,KAAJ,CAAU,KAAV,CAAP;AACA,KAFD,MAEO;AACN,MAAA,IAAI,GAAG,KAAP;AACA;;AACD,QAAI,CAAC,IAAL,EAAW;AACV,YAAM,IAAI,SAAJ,CACL,2DADK,CAAN;AAGA;;AACD,UAAM,IAAN;AAEA,UAAM,WAAW,GAAG,eAAe,CAAC,IAAD,CAAnC;AACA,SAAK,MAAL,GAAc,WAAW,CAAC,MAA1B;AACA,SAAK,KAAL,GAAa,WAAW,CAAC,KAAzB;AACA;AAED;;;;;AAKG;;;AACG,EAAA,QAAQ,CACb,GADa,EAEb,IAFa,EAEO;;AAEpB,YAAM;AAAE,QAAA,MAAF;AAAU,QAAA;AAAV,UAAoB,IAA1B;AACA,UAAI;AAAE,QAAA,IAAF;AAAQ,QAAA,IAAR;AAAc,QAAA;AAAd,UAA0B,IAA9B;;AAEA,UAAI,CAAC,IAAL,EAAW;AACV,cAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACA;;AAED,UAAI,MAAJ,EAAY;AACX;AACA,QAAA,IAAI,GAAG,MAAM,SAAS,CAAC,IAAD,CAAtB;AACA;;AAED,YAAM,SAAS,GAAuB;AACrC,QAAA,KADqC;AAErC,QAAA,WAAW,EAAE;AAAE,UAAA,IAAF;AAAQ,UAAA;AAAR,SAFwB;AAGrC,QAAA,OAAO,EAAE,SAH4B;AAIrC,QAAA;AAJqC,OAAtC;AAMA,MAAA,KAAK,CAAC,qCAAD,EAAwC,SAAxC,CAAL;AACA,YAAM;AAAE,QAAA;AAAF,UAAa,MAAM,OAAA,CAAA,WAAA,CAAY,gBAAZ,CAA6B,SAA7B,CAAzB;AACA,MAAA,KAAK,CAAC,6CAAD,CAAL;;AAEA,UAAI,IAAI,CAAC,cAAT,EAAyB;AACxB;AACA;AACA,QAAA,KAAK,CAAC,oCAAD,CAAL;AACA,cAAM,UAAU,GAAG,IAAI,CAAC,UAAL,IAAmB,IAAtC;AACA,eAAO,KAAA,CAAA,OAAA,CAAI,OAAJ,CAAW,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACd,IAAI,CAAC,IAAD,EAAO,MAAP,EAAe,UAAf,EAA2B,MAA3B,EAAmC,MAAnC,CADU,CAAA,EACgC;AACjD,UAAA,MADiD;AAEjD,UAAA;AAFiD,SADhC,CAAX,CAAP;AAKA;;AAED,aAAO,MAAP;AACA,K;AAAA;;AApEgD;;AAAlD,OAAA,CAAA,OAAA,GAAA,eAAA;;AAuEA,SAAS,IAAT,CACC,GADD,EAEC,GAAG,IAFJ,EAEW;AAIV,QAAM,GAAG,GAAG,EAAZ;AAGA,MAAI,GAAJ;;AACA,OAAK,GAAL,IAAY,GAAZ,EAAiB;AAChB,QAAI,CAAC,IAAI,CAAC,QAAL,CAAc,GAAd,CAAL,EAAyB;AACxB,MAAA,GAAG,CAAC,GAAD,CAAH,GAAW,GAAG,CAAC,GAAD,CAAd;AACA;AACD;;AACD,SAAO,GAAP;AACA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst dns_1 = __importDefault(require(\"dns\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst socks_1 = require(\"socks\");\nconst debug = debug_1.default('socks-proxy-agent');\nfunction dnsLookup(host) {\n    return new Promise((resolve, reject) => {\n        dns_1.default.lookup(host, (err, res) => {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(res);\n            }\n        });\n    });\n}\nfunction parseSocksProxy(opts) {\n    let port = 0;\n    let lookup = false;\n    let type = 5;\n    // Prefer `hostname` over `host`, because of `url.parse()`\n    const host = opts.hostname || opts.host;\n    if (!host) {\n        throw new TypeError('No \"host\"');\n    }\n    if (typeof opts.port === 'number') {\n        port = opts.port;\n    }\n    else if (typeof opts.port === 'string') {\n        port = parseInt(opts.port, 10);\n    }\n    // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n    // \"The SOCKS service is conventionally located on TCP port 1080\"\n    if (!port) {\n        port = 1080;\n    }\n    // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n    // Defaults to 5.\n    if (opts.protocol) {\n        switch (opts.protocol.replace(':', '')) {\n            case 'socks4':\n                lookup = true;\n            // pass through\n            case 'socks4a':\n                type = 4;\n                break;\n            case 'socks5':\n                lookup = true;\n            // pass through\n            case 'socks': // no version specified, default to 5h\n            case 'socks5h':\n                type = 5;\n                break;\n            default:\n                throw new TypeError(`A \"socks\" protocol must be specified! Got: ${opts.protocol}`);\n        }\n    }\n    if (typeof opts.type !== 'undefined') {\n        if (opts.type === 4 || opts.type === 5) {\n            type = opts.type;\n        }\n        else {\n            throw new TypeError(`\"type\" must be 4 or 5, got: ${opts.type}`);\n        }\n    }\n    const proxy = {\n        host,\n        port,\n        type\n    };\n    let userId = opts.userId || opts.username;\n    let password = opts.password;\n    if (opts.auth) {\n        const auth = opts.auth.split(':');\n        userId = auth[0];\n        password = auth[1];\n    }\n    if (userId) {\n        Object.defineProperty(proxy, 'userId', {\n            value: userId,\n            enumerable: false\n        });\n    }\n    if (password) {\n        Object.defineProperty(proxy, 'password', {\n            value: password,\n            enumerable: false\n        });\n    }\n    return { lookup, proxy };\n}\n/**\n * The `SocksProxyAgent`.\n *\n * @api public\n */\nclass SocksProxyAgent extends agent_base_1.Agent {\n    constructor(_opts) {\n        let opts;\n        if (typeof _opts === 'string') {\n            opts = url_1.default.parse(_opts);\n        }\n        else {\n            opts = _opts;\n        }\n        if (!opts) {\n            throw new TypeError('a SOCKS proxy server `host` and `port` must be specified!');\n        }\n        super(opts);\n        const parsedProxy = parseSocksProxy(opts);\n        this.lookup = parsedProxy.lookup;\n        this.proxy = parsedProxy.proxy;\n    }\n    /**\n     * Initiates a SOCKS connection to the specified SOCKS proxy server,\n     * which in turn connects to the specified remote host and port.\n     *\n     * @api protected\n     */\n    callback(req, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { lookup, proxy } = this;\n            let { host, port, timeout } = opts;\n            if (!host) {\n                throw new Error('No `host` defined!');\n            }\n            if (lookup) {\n                // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n                host = yield dnsLookup(host);\n            }\n            const socksOpts = {\n                proxy,\n                destination: { host, port },\n                command: 'connect',\n                timeout\n            };\n            debug('Creating socks proxy connection: %o', socksOpts);\n            const { socket } = yield socks_1.SocksClient.createConnection(socksOpts);\n            debug('Successfully created socks proxy connection');\n            if (opts.secureEndpoint) {\n                // The proxy is connecting to a TLS server, so upgrade\n                // this socket connection to a TLS connection.\n                debug('Upgrading socket connection to TLS');\n                const servername = opts.servername || host;\n                return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), { socket,\n                    servername }));\n            }\n            return socket;\n        });\n    }\n}\nexports.default = SocksProxyAgent;\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n//# sourceMappingURL=agent.js.map"]},"metadata":{},"sourceType":"script"}