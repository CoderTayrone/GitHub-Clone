{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectFromPort = exports.detectFromYaml = exports.yamlToBackend = exports.readFileAsync = void 0;\n\nconst node_fetch_1 = require(\"node-fetch\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst yaml = require(\"js-yaml\");\n\nconst util_1 = require(\"util\");\n\nconst logger_1 = require(\"../../../../logger\");\n\nconst api = require(\"../../.../../../../api\");\n\nconst v1alpha1 = require(\"./v1alpha1\");\n\nconst error_1 = require(\"../../../../error\");\n\nexports.readFileAsync = util_1.promisify(fs.readFile);\n\nfunction yamlToBackend(yaml, project, region, runtime) {\n  try {\n    if (!yaml.specVersion) {\n      throw new error_1.FirebaseError(\"Expect backend yaml to specify a version number\");\n    }\n\n    if (yaml.specVersion === \"v1alpha1\") {\n      return v1alpha1.backendFromV1Alpha1(yaml, project, region, runtime);\n    }\n\n    throw new error_1.FirebaseError(\"It seems you are using a newer SDK than this version of the CLI can handle. Please update your CLI with `npm install -g firebase-tools`\");\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Failed to parse backend specification\", {\n      children: [err]\n    });\n  }\n}\n\nexports.yamlToBackend = yamlToBackend;\n\nasync function detectFromYaml(directory, project, runtime) {\n  let text;\n\n  try {\n    text = await exports.readFileAsync(path.join(directory, \"backend.yaml\"), \"utf8\");\n  } catch (err) {\n    if (err.code === \"ENOENT\") {\n      logger_1.logger.debug(\"Could not find backend.yaml. Must use http discovery\");\n    } else {\n      logger_1.logger.debug(\"Unexpected error looking for backend.yaml file:\", err);\n    }\n\n    return;\n  }\n\n  logger_1.logger.debug(\"Found backend.yaml. Got spec:\", text);\n  const parsed = yaml.load(text);\n  return yamlToBackend(parsed, project, api.functionsDefaultRegion, runtime);\n}\n\nexports.detectFromYaml = detectFromYaml;\n\nasync function detectFromPort(port, project, runtime, timeout = 30000) {\n  let res;\n  const timedOut = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new error_1.FirebaseError(\"User code failed to load. Cannot determine backend specification\"));\n    }, timeout);\n  });\n\n  while (true) {\n    try {\n      res = await Promise.race([node_fetch_1.default(`http://localhost:${port}/backend.yaml`), timedOut]);\n      break;\n    } catch (err) {\n      if ((err === null || err === void 0 ? void 0 : err.code) === \"ECONNREFUSED\") {\n        continue;\n      }\n\n      throw err;\n    }\n  }\n\n  const text = await res.text();\n  logger_1.logger.debug(\"Got response from /backend.yaml\", text);\n  let parsed;\n\n  try {\n    parsed = yaml.load(text);\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Failed to parse backend specification\", {\n      children: [err]\n    });\n  }\n\n  return yamlToBackend(parsed, project, api.functionsDefaultRegion, runtime);\n}\n\nexports.detectFromPort = detectFromPort;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/runtimes/discovery/index.js"],"names":["Object","defineProperty","exports","value","detectFromPort","detectFromYaml","yamlToBackend","readFileAsync","node_fetch_1","require","fs","path","yaml","util_1","logger_1","api","v1alpha1","error_1","promisify","readFile","project","region","runtime","specVersion","FirebaseError","backendFromV1Alpha1","err","children","directory","text","join","code","logger","debug","parsed","load","functionsDefaultRegion","port","timeout","res","timedOut","Promise","resolve","reject","setTimeout","race","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.detectFromPort = exports.detectFromYaml = exports.yamlToBackend = exports.readFileAsync = void 0;\nconst node_fetch_1 = require(\"node-fetch\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst yaml = require(\"js-yaml\");\nconst util_1 = require(\"util\");\nconst logger_1 = require(\"../../../../logger\");\nconst api = require(\"../../.../../../../api\");\nconst v1alpha1 = require(\"./v1alpha1\");\nconst error_1 = require(\"../../../../error\");\nexports.readFileAsync = util_1.promisify(fs.readFile);\nfunction yamlToBackend(yaml, project, region, runtime) {\n    try {\n        if (!yaml.specVersion) {\n            throw new error_1.FirebaseError(\"Expect backend yaml to specify a version number\");\n        }\n        if (yaml.specVersion === \"v1alpha1\") {\n            return v1alpha1.backendFromV1Alpha1(yaml, project, region, runtime);\n        }\n        throw new error_1.FirebaseError(\"It seems you are using a newer SDK than this version of the CLI can handle. Please update your CLI with `npm install -g firebase-tools`\");\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Failed to parse backend specification\", { children: [err] });\n    }\n}\nexports.yamlToBackend = yamlToBackend;\nasync function detectFromYaml(directory, project, runtime) {\n    let text;\n    try {\n        text = await exports.readFileAsync(path.join(directory, \"backend.yaml\"), \"utf8\");\n    }\n    catch (err) {\n        if (err.code === \"ENOENT\") {\n            logger_1.logger.debug(\"Could not find backend.yaml. Must use http discovery\");\n        }\n        else {\n            logger_1.logger.debug(\"Unexpected error looking for backend.yaml file:\", err);\n        }\n        return;\n    }\n    logger_1.logger.debug(\"Found backend.yaml. Got spec:\", text);\n    const parsed = yaml.load(text);\n    return yamlToBackend(parsed, project, api.functionsDefaultRegion, runtime);\n}\nexports.detectFromYaml = detectFromYaml;\nasync function detectFromPort(port, project, runtime, timeout = 30000) {\n    let res;\n    const timedOut = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            reject(new error_1.FirebaseError(\"User code failed to load. Cannot determine backend specification\"));\n        }, timeout);\n    });\n    while (true) {\n        try {\n            res = await Promise.race([node_fetch_1.default(`http://localhost:${port}/backend.yaml`), timedOut]);\n            break;\n        }\n        catch (err) {\n            if ((err === null || err === void 0 ? void 0 : err.code) === \"ECONNREFUSED\") {\n                continue;\n            }\n            throw err;\n        }\n    }\n    const text = await res.text();\n    logger_1.logger.debug(\"Got response from /backend.yaml\", text);\n    let parsed;\n    try {\n        parsed = yaml.load(text);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Failed to parse backend specification\", { children: [err] });\n    }\n    return yamlToBackend(parsed, project, api.functionsDefaultRegion, runtime);\n}\nexports.detectFromPort = detectFromPort;\n"]},"metadata":{},"sourceType":"script"}