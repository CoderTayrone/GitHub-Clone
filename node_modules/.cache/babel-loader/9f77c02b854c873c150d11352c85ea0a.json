{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst listExtensions_1 = require(\"../extensions/listExtensions\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst logger_1 = require(\"../logger\");\n\nconst utils = require(\"../utils\");\n\nmodule.exports = new command_1.Command(\"ext\").description(\"display information on how to use ext commands and extensions installed to your project\").before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").action(async options => {\n  utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"list of extensions commands:\");\n\n  const firebaseTools = require(\"../\");\n\n  const commandNames = [\"ext:install\", \"ext:info\", \"ext:list\", \"ext:configure\", \"ext:update\", \"ext:uninstall\"];\n\n  _.forEach(commandNames, commandName => {\n    const command = firebaseTools.getCommand(commandName);\n    logger_1.logger.info(clc.bold(\"\\n\" + command.name()));\n    command.outputHelp();\n  });\n\n  logger_1.logger.info();\n\n  try {\n    await requirePermissions_1.requirePermissions(options, [\"firebaseextensions.instances.list\"]);\n    const projectId = projectUtils_1.needProjectId(options);\n    return listExtensions_1.listExtensions(projectId);\n  } catch (err) {\n    return;\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext.js"],"names":["Object","defineProperty","exports","value","_","require","clc","checkMinRequiredVersion_1","command_1","projectUtils_1","extensionsHelper_1","listExtensions_1","requirePermissions_1","logger_1","utils","module","Command","description","before","checkMinRequiredVersion","action","options","logLabeledBullet","logPrefix","firebaseTools","commandNames","forEach","commandName","command","getCommand","logger","info","bold","name","outputHelp","requirePermissions","projectId","needProjectId","listExtensions","err"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,4BAAD,CAAzC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAMO,oBAAoB,GAAGP,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,UAAD,CAArB;;AACAU,MAAM,CAACb,OAAP,GAAiB,IAAIM,SAAS,CAACQ,OAAd,CAAsB,KAAtB,EACZC,WADY,CACA,yFADA,EAEZC,MAFY,CAELX,yBAAyB,CAACY,uBAFrB,EAE8C,eAF9C,EAGZC,MAHY,CAGL,MAAOC,OAAP,IAAmB;AAC3BP,EAAAA,KAAK,CAACQ,gBAAN,CAAuBZ,kBAAkB,CAACa,SAA1C,EAAqD,8BAArD;;AACA,QAAMC,aAAa,GAAGnB,OAAO,CAAC,KAAD,CAA7B;;AACA,QAAMoB,YAAY,GAAG,CACjB,aADiB,EAEjB,UAFiB,EAGjB,UAHiB,EAIjB,eAJiB,EAKjB,YALiB,EAMjB,eANiB,CAArB;;AAQArB,EAAAA,CAAC,CAACsB,OAAF,CAAUD,YAAV,EAAyBE,WAAD,IAAiB;AACrC,UAAMC,OAAO,GAAGJ,aAAa,CAACK,UAAd,CAAyBF,WAAzB,CAAhB;AACAd,IAAAA,QAAQ,CAACiB,MAAT,CAAgBC,IAAhB,CAAqBzB,GAAG,CAAC0B,IAAJ,CAAS,OAAOJ,OAAO,CAACK,IAAR,EAAhB,CAArB;AACAL,IAAAA,OAAO,CAACM,UAAR;AACH,GAJD;;AAKArB,EAAAA,QAAQ,CAACiB,MAAT,CAAgBC,IAAhB;;AACA,MAAI;AACA,UAAMnB,oBAAoB,CAACuB,kBAArB,CAAwCd,OAAxC,EAAiD,CAAC,mCAAD,CAAjD,CAAN;AACA,UAAMe,SAAS,GAAG3B,cAAc,CAAC4B,aAAf,CAA6BhB,OAA7B,CAAlB;AACA,WAAOV,gBAAgB,CAAC2B,cAAjB,CAAgCF,SAAhC,CAAP;AACH,GAJD,CAKA,OAAOG,GAAP,EAAY;AACR;AACH;AACJ,CA5BgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst listExtensions_1 = require(\"../extensions/listExtensions\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst logger_1 = require(\"../logger\");\nconst utils = require(\"../utils\");\nmodule.exports = new command_1.Command(\"ext\")\n    .description(\"display information on how to use ext commands and extensions installed to your project\")\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .action(async (options) => {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"list of extensions commands:\");\n    const firebaseTools = require(\"../\");\n    const commandNames = [\n        \"ext:install\",\n        \"ext:info\",\n        \"ext:list\",\n        \"ext:configure\",\n        \"ext:update\",\n        \"ext:uninstall\",\n    ];\n    _.forEach(commandNames, (commandName) => {\n        const command = firebaseTools.getCommand(commandName);\n        logger_1.logger.info(clc.bold(\"\\n\" + command.name()));\n        command.outputHelp();\n    });\n    logger_1.logger.info();\n    try {\n        await requirePermissions_1.requirePermissions(options, [\"firebaseextensions.instances.list\"]);\n        const projectId = projectUtils_1.needProjectId(options);\n        return listExtensions_1.listExtensions(projectId);\n    }\n    catch (err) {\n        return;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}