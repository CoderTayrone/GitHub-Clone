{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApp = void 0;\n\nconst cors = require(\"cors\");\n\nconst express = require(\"express\");\n\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\n\nconst types_1 = require(\"../types\");\n\nconst bodyParser = require(\"body-parser\");\n\nconst gcloud_1 = require(\"./apis/gcloud\");\n\nconst firebase_1 = require(\"./apis/firebase\");\n\nfunction createApp(defaultProjectId, emulator) {\n  const {\n    storageLayer\n  } = emulator;\n  const app = express();\n  emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log(\"DEBUG\", `Temp file directory for storage emulator: ${storageLayer.dirPath}`);\n  app.use(cors({\n    origin: true,\n    exposedHeaders: [\"content-type\", \"x-firebase-storage-version\", \"x-goog-upload-url\", \"x-goog-upload-status\", \"x-goog-upload-command\", \"x-gupload-uploadid\", \"x-goog-upload-header-content-length\", \"x-goog-upload-header-content-type\", \"x-goog-upload-protocol\", \"x-goog-upload-status\", \"x-goog-upload-chunk-granularity\", \"x-goog-upload-control-url\"]\n  }));\n  app.use(bodyParser.raw({\n    limit: \"130mb\",\n    type: \"application/x-www-form-urlencoded\"\n  }));\n  app.use(bodyParser.raw({\n    limit: \"130mb\",\n    type: \"multipart/related\"\n  }));\n  app.use(express.json({\n    type: [\"application/json\"]\n  }));\n  app.post(\"/internal/export\", async (req, res) => {\n    const path = req.body.path;\n\n    if (!path) {\n      res.status(400).send(\"Export request body must include 'path'.\");\n      return;\n    }\n\n    await storageLayer.export(path);\n    res.sendStatus(200);\n  });\n  app.put(\"/internal/setRules\", async (req, res) => {\n    const rules = req.body.rules;\n\n    if (!(rules && Array.isArray(rules.files) && rules.files.length > 0)) {\n      res.status(400).send(\"Request body must include 'rules.files' array .\");\n      return;\n    }\n\n    const file = rules.files[0];\n\n    if (!(file.name && file.content)) {\n      res.status(400).send(\"Request body must include 'rules.files' array where each member contains 'name' and 'content'.\");\n      return;\n    }\n\n    const name = file.name;\n    const content = file.content;\n    const issues = await emulator.loadRuleset({\n      files: [{\n        name,\n        content\n      }]\n    });\n\n    if (issues.errors.length > 0) {\n      res.status(400).json({\n        message: \"There was an error updating rules, see logs for more details\"\n      });\n      return;\n    }\n\n    res.status(200).json({\n      message: \"Rules updated successfully\"\n    });\n  });\n  app.post(\"/internal/reset\", (req, res) => {\n    storageLayer.reset();\n    res.sendStatus(200);\n  });\n  app.use(\"/v0\", firebase_1.createFirebaseEndpoints(emulator));\n  app.use(\"/\", gcloud_1.createCloudEndpoints(emulator));\n  return Promise.resolve(app);\n}\n\nexports.createApp = createApp;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/emulator/storage/server.js"],"names":["Object","defineProperty","exports","value","createApp","cors","require","express","emulatorLogger_1","types_1","bodyParser","gcloud_1","firebase_1","defaultProjectId","emulator","storageLayer","app","EmulatorLogger","forEmulator","Emulators","STORAGE","log","dirPath","use","origin","exposedHeaders","raw","limit","type","json","post","req","res","path","body","status","send","export","sendStatus","put","rules","Array","isArray","files","length","file","name","content","issues","loadRuleset","errors","message","reset","createFirebaseEndpoints","createCloudEndpoints","Promise","resolve"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,mBAAD,CAAhC;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,eAAD,CAAxB;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAC,iBAAD,CAA1B;;AACA,SAASF,SAAT,CAAmBS,gBAAnB,EAAqCC,QAArC,EAA+C;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAmBD,QAAzB;AACA,QAAME,GAAG,GAAGT,OAAO,EAAnB;AACAC,EAAAA,gBAAgB,CAACS,cAAjB,CAAgCC,WAAhC,CAA4CT,OAAO,CAACU,SAAR,CAAkBC,OAA9D,EAAuEC,GAAvE,CAA2E,OAA3E,EAAqF,6CAA4CN,YAAY,CAACO,OAAQ,EAAtJ;AACAN,EAAAA,GAAG,CAACO,GAAJ,CAAQlB,IAAI,CAAC;AACTmB,IAAAA,MAAM,EAAE,IADC;AAETC,IAAAA,cAAc,EAAE,CACZ,cADY,EAEZ,4BAFY,EAGZ,mBAHY,EAIZ,sBAJY,EAKZ,uBALY,EAMZ,oBANY,EAOZ,qCAPY,EAQZ,mCARY,EASZ,wBATY,EAUZ,sBAVY,EAWZ,iCAXY,EAYZ,2BAZY;AAFP,GAAD,CAAZ;AAiBAT,EAAAA,GAAG,CAACO,GAAJ,CAAQb,UAAU,CAACgB,GAAX,CAAe;AAAEC,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAAf,CAAR;AACAZ,EAAAA,GAAG,CAACO,GAAJ,CAAQb,UAAU,CAACgB,GAAX,CAAe;AAAEC,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAAf,CAAR;AACAZ,EAAAA,GAAG,CAACO,GAAJ,CAAQhB,OAAO,CAACsB,IAAR,CAAa;AACjBD,IAAAA,IAAI,EAAE,CAAC,kBAAD;AADW,GAAb,CAAR;AAGAZ,EAAAA,GAAG,CAACc,IAAJ,CAAS,kBAAT,EAA6B,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,UAAMC,IAAI,GAAGF,GAAG,CAACG,IAAJ,CAASD,IAAtB;;AACA,QAAI,CAACA,IAAL,EAAW;AACPD,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0CAArB;AACA;AACH;;AACD,UAAMrB,YAAY,CAACsB,MAAb,CAAoBJ,IAApB,CAAN;AACAD,IAAAA,GAAG,CAACM,UAAJ,CAAe,GAAf;AACH,GARD;AASAtB,EAAAA,GAAG,CAACuB,GAAJ,CAAQ,oBAAR,EAA8B,OAAOR,GAAP,EAAYC,GAAZ,KAAoB;AAC9C,UAAMQ,KAAK,GAAGT,GAAG,CAACG,IAAJ,CAASM,KAAvB;;AACA,QAAI,EAAEA,KAAK,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACG,KAApB,CAAT,IAAuCH,KAAK,CAACG,KAAN,CAAYC,MAAZ,GAAqB,CAA9D,CAAJ,EAAsE;AAClEZ,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iDAArB;AACA;AACH;;AACD,UAAMS,IAAI,GAAGL,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAb;;AACA,QAAI,EAAEE,IAAI,CAACC,IAAL,IAAaD,IAAI,CAACE,OAApB,CAAJ,EAAkC;AAC9Bf,MAAAA,GAAG,CACEG,MADL,CACY,GADZ,EAEKC,IAFL,CAEU,gGAFV;AAGA;AACH;;AACD,UAAMU,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,UAAMC,OAAO,GAAGF,IAAI,CAACE,OAArB;AACA,UAAMC,MAAM,GAAG,MAAMlC,QAAQ,CAACmC,WAAT,CAAqB;AAAEN,MAAAA,KAAK,EAAE,CAAC;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD;AAAT,KAArB,CAArB;;AACA,QAAIC,MAAM,CAACE,MAAP,CAAcN,MAAd,GAAuB,CAA3B,EAA8B;AAC1BZ,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AACjBsB,QAAAA,OAAO,EAAE;AADQ,OAArB;AAGA;AACH;;AACDnB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AACjBsB,MAAAA,OAAO,EAAE;AADQ,KAArB;AAGH,GAzBD;AA0BAnC,EAAAA,GAAG,CAACc,IAAJ,CAAS,iBAAT,EAA4B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtCjB,IAAAA,YAAY,CAACqC,KAAb;AACApB,IAAAA,GAAG,CAACM,UAAJ,CAAe,GAAf;AACH,GAHD;AAIAtB,EAAAA,GAAG,CAACO,GAAJ,CAAQ,KAAR,EAAeX,UAAU,CAACyC,uBAAX,CAAmCvC,QAAnC,CAAf;AACAE,EAAAA,GAAG,CAACO,GAAJ,CAAQ,GAAR,EAAaZ,QAAQ,CAAC2C,oBAAT,CAA8BxC,QAA9B,CAAb;AACA,SAAOyC,OAAO,CAACC,OAAR,CAAgBxC,GAAhB,CAAP;AACH;;AACDd,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createApp = void 0;\nconst cors = require(\"cors\");\nconst express = require(\"express\");\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\nconst types_1 = require(\"../types\");\nconst bodyParser = require(\"body-parser\");\nconst gcloud_1 = require(\"./apis/gcloud\");\nconst firebase_1 = require(\"./apis/firebase\");\nfunction createApp(defaultProjectId, emulator) {\n    const { storageLayer } = emulator;\n    const app = express();\n    emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log(\"DEBUG\", `Temp file directory for storage emulator: ${storageLayer.dirPath}`);\n    app.use(cors({\n        origin: true,\n        exposedHeaders: [\n            \"content-type\",\n            \"x-firebase-storage-version\",\n            \"x-goog-upload-url\",\n            \"x-goog-upload-status\",\n            \"x-goog-upload-command\",\n            \"x-gupload-uploadid\",\n            \"x-goog-upload-header-content-length\",\n            \"x-goog-upload-header-content-type\",\n            \"x-goog-upload-protocol\",\n            \"x-goog-upload-status\",\n            \"x-goog-upload-chunk-granularity\",\n            \"x-goog-upload-control-url\",\n        ],\n    }));\n    app.use(bodyParser.raw({ limit: \"130mb\", type: \"application/x-www-form-urlencoded\" }));\n    app.use(bodyParser.raw({ limit: \"130mb\", type: \"multipart/related\" }));\n    app.use(express.json({\n        type: [\"application/json\"],\n    }));\n    app.post(\"/internal/export\", async (req, res) => {\n        const path = req.body.path;\n        if (!path) {\n            res.status(400).send(\"Export request body must include 'path'.\");\n            return;\n        }\n        await storageLayer.export(path);\n        res.sendStatus(200);\n    });\n    app.put(\"/internal/setRules\", async (req, res) => {\n        const rules = req.body.rules;\n        if (!(rules && Array.isArray(rules.files) && rules.files.length > 0)) {\n            res.status(400).send(\"Request body must include 'rules.files' array .\");\n            return;\n        }\n        const file = rules.files[0];\n        if (!(file.name && file.content)) {\n            res\n                .status(400)\n                .send(\"Request body must include 'rules.files' array where each member contains 'name' and 'content'.\");\n            return;\n        }\n        const name = file.name;\n        const content = file.content;\n        const issues = await emulator.loadRuleset({ files: [{ name, content }] });\n        if (issues.errors.length > 0) {\n            res.status(400).json({\n                message: \"There was an error updating rules, see logs for more details\",\n            });\n            return;\n        }\n        res.status(200).json({\n            message: \"Rules updated successfully\",\n        });\n    });\n    app.post(\"/internal/reset\", (req, res) => {\n        storageLayer.reset();\n        res.sendStatus(200);\n    });\n    app.use(\"/v0\", firebase_1.createFirebaseEndpoints(emulator));\n    app.use(\"/\", gcloud_1.createCloudEndpoints(emulator));\n    return Promise.resolve(app);\n}\nexports.createApp = createApp;\n"]},"metadata":{},"sourceType":"script"}