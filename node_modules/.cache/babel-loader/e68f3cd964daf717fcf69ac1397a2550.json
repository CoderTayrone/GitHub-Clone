{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.implicitInit = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst fetchWebSetup_1 = require(\"../fetchWebSetup\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst registry_1 = require(\"../emulator/registry\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst INIT_TEMPLATE = fs.readFileSync(__dirname + \"/../../templates/hosting/init.js\", \"utf8\");\n\nasync function implicitInit(options) {\n  let config;\n\n  try {\n    config = await fetchWebSetup_1.fetchWebSetup(options);\n  } catch (e) {\n    logger_1.logger.debug(\"fetchWebSetup error: \" + e);\n\n    const statusCode = _.get(e, \"context.response.statusCode\");\n\n    if (statusCode === 403) {\n      utils.logLabeledWarning(\"hosting\", `Authentication error when trying to fetch your current web app configuration, have you run ${clc.bold(\"firebase login\")}?`);\n    }\n  }\n\n  if (!config) {\n    config = fetchWebSetup_1.getCachedWebSetup(options);\n\n    if (config) {\n      utils.logLabeledWarning(\"hosting\", \"Using web app configuration from cache.\");\n    }\n  }\n\n  if (!config) {\n    config = undefined;\n    utils.logLabeledWarning(\"hosting\", \"Could not fetch web app configuration and there is no cached configuration on this machine. \" + \"Check your internet connection and make sure you are authenticated. \" + \"To continue, you must call firebase.initializeApp({...}) in your code before using Firebase.\");\n  }\n\n  const configJson = JSON.stringify(config, null, 2);\n  const emulators = {};\n\n  for (const e of types_1.EMULATORS_SUPPORTED_BY_USE_EMULATOR) {\n    const info = registry_1.EmulatorRegistry.getInfo(e);\n\n    if (info) {\n      let host = info.host;\n\n      if (host === \"0.0.0.0\") {\n        host = \"127.0.0.1\";\n      } else if (host === \"::\") {\n        host = \"[::1]\";\n      } else if (host.includes(\":\")) {\n        host = `[${host}]`;\n      }\n\n      emulators[e] = {\n        host,\n        port: info.port\n      };\n    }\n  }\n\n  const emulatorsJson = JSON.stringify(emulators, null, 2);\n  const js = INIT_TEMPLATE.replace(\"/*--CONFIG--*/\", `var firebaseConfig = ${configJson};`).replace(\"/*--EMULATORS--*/\", \"var firebaseEmulators = undefined;\");\n  const emulatorsJs = INIT_TEMPLATE.replace(\"/*--CONFIG--*/\", `var firebaseConfig = ${configJson};`).replace(\"/*--EMULATORS--*/\", `var firebaseEmulators = ${emulatorsJson};`);\n  return {\n    js,\n    emulatorsJs,\n    json: configJson\n  };\n}\n\nexports.implicitInit = implicitInit;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/hosting/implicitInit.js"],"names":["Object","defineProperty","exports","value","implicitInit","_","require","clc","fs","fetchWebSetup_1","utils","logger_1","registry_1","types_1","INIT_TEMPLATE","readFileSync","__dirname","options","config","fetchWebSetup","e","logger","debug","statusCode","get","logLabeledWarning","bold","getCachedWebSetup","undefined","configJson","JSON","stringify","emulators","EMULATORS_SUPPORTED_BY_USE_EMULATOR","info","EmulatorRegistry","getInfo","host","includes","port","emulatorsJson","js","replace","emulatorsJs","json"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.implicitInit = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst fetchWebSetup_1 = require(\"../fetchWebSetup\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nconst registry_1 = require(\"../emulator/registry\");\nconst types_1 = require(\"../emulator/types\");\nconst INIT_TEMPLATE = fs.readFileSync(__dirname + \"/../../templates/hosting/init.js\", \"utf8\");\nasync function implicitInit(options) {\n    let config;\n    try {\n        config = await fetchWebSetup_1.fetchWebSetup(options);\n    }\n    catch (e) {\n        logger_1.logger.debug(\"fetchWebSetup error: \" + e);\n        const statusCode = _.get(e, \"context.response.statusCode\");\n        if (statusCode === 403) {\n            utils.logLabeledWarning(\"hosting\", `Authentication error when trying to fetch your current web app configuration, have you run ${clc.bold(\"firebase login\")}?`);\n        }\n    }\n    if (!config) {\n        config = fetchWebSetup_1.getCachedWebSetup(options);\n        if (config) {\n            utils.logLabeledWarning(\"hosting\", \"Using web app configuration from cache.\");\n        }\n    }\n    if (!config) {\n        config = undefined;\n        utils.logLabeledWarning(\"hosting\", \"Could not fetch web app configuration and there is no cached configuration on this machine. \" +\n            \"Check your internet connection and make sure you are authenticated. \" +\n            \"To continue, you must call firebase.initializeApp({...}) in your code before using Firebase.\");\n    }\n    const configJson = JSON.stringify(config, null, 2);\n    const emulators = {};\n    for (const e of types_1.EMULATORS_SUPPORTED_BY_USE_EMULATOR) {\n        const info = registry_1.EmulatorRegistry.getInfo(e);\n        if (info) {\n            let host = info.host;\n            if (host === \"0.0.0.0\") {\n                host = \"127.0.0.1\";\n            }\n            else if (host === \"::\") {\n                host = \"[::1]\";\n            }\n            else if (host.includes(\":\")) {\n                host = `[${host}]`;\n            }\n            emulators[e] = {\n                host,\n                port: info.port,\n            };\n        }\n    }\n    const emulatorsJson = JSON.stringify(emulators, null, 2);\n    const js = INIT_TEMPLATE.replace(\"/*--CONFIG--*/\", `var firebaseConfig = ${configJson};`).replace(\"/*--EMULATORS--*/\", \"var firebaseEmulators = undefined;\");\n    const emulatorsJs = INIT_TEMPLATE.replace(\"/*--CONFIG--*/\", `var firebaseConfig = ${configJson};`).replace(\"/*--EMULATORS--*/\", `var firebaseEmulators = ${emulatorsJson};`);\n    return {\n        js,\n        emulatorsJs,\n        json: configJson,\n    };\n}\nexports.implicitInit = implicitInit;\n"]},"metadata":{},"sourceType":"script"}