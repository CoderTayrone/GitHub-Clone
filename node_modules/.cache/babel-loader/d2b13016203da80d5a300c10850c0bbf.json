{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareFunctionsUpload = exports.getFunctionsConfig = void 0;\n\nconst _ = require(\"lodash\");\n\nconst archiver = require(\"archiver\");\n\nconst clc = require(\"cli-color\");\n\nconst filesize = require(\"filesize\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst tmp = require(\"tmp\");\n\nconst error_1 = require(\"../../error\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst functionsConfig = require(\"../../functionsConfig\");\n\nconst utils = require(\"../../utils\");\n\nconst fsAsync = require(\"../../fsAsync\");\n\nconst CONFIG_DEST_FILE = \".runtimeconfig.json\";\n\nasync function getFunctionsConfig(context) {\n  var _a, _b;\n\n  let config = {};\n\n  if (context.runtimeConfigEnabled) {\n    try {\n      config = await functionsConfig.materializeAll(context.firebaseConfig.projectId);\n    } catch (err) {\n      logger_1.logger.debug(err);\n      let errorCode = (_b = (_a = err === null || err === void 0 ? void 0 : err.context) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.statusCode;\n\n      if (!errorCode) {\n        logger_1.logger.debug(\"Got unexpected error from Runtime Config; it has no status code:\", err);\n        errorCode = 500;\n      }\n\n      if (errorCode === 500 || errorCode === 503) {\n        throw new error_1.FirebaseError(\"Cloud Runtime Config is currently experiencing issues, \" + \"which is preventing your functions from being deployed. \" + \"Please wait a few minutes and then try to deploy your functions again.\" + \"\\nRun `firebase deploy --except functions` if you want to continue deploying the rest of your project.\");\n      }\n\n      config = {};\n    }\n  }\n\n  config.firebase = context.firebaseConfig;\n  return config;\n}\n\nexports.getFunctionsConfig = getFunctionsConfig;\n\nasync function pipeAsync(from, to) {\n  return new Promise((resolve, reject) => {\n    to.on(\"finish\", resolve);\n    to.on(\"error\", reject);\n    from.pipe(to);\n  });\n}\n\nasync function packageSource(options, sourceDir, configValues) {\n  var _a;\n\n  const tmpFile = tmp.fileSync({\n    prefix: \"firebase-functions-\",\n    postfix: \".zip\"\n  }).name;\n  const fileStream = fs.createWriteStream(tmpFile, {\n    flags: \"w\",\n    encoding: \"binary\"\n  });\n  const archive = archiver(\"zip\");\n  const ignore = ((_a = options.config.src.functions) === null || _a === void 0 ? void 0 : _a.ignore) || [\"node_modules\", \".git\"];\n  ignore.push(\"firebase-debug.log\", \"firebase-debug.*.log\", CONFIG_DEST_FILE);\n\n  try {\n    const files = await fsAsync.readdirRecursive({\n      path: sourceDir,\n      ignore: ignore\n    });\n\n    _.forEach(files, file => {\n      archive.file(file.name, {\n        name: path.relative(sourceDir, file.name),\n        mode: file.mode\n      });\n    });\n\n    if (typeof configValues !== \"undefined\") {\n      archive.append(JSON.stringify(configValues, null, 2), {\n        name: CONFIG_DEST_FILE,\n        mode: 420\n      });\n    }\n\n    archive.finalize();\n    await pipeAsync(archive, fileStream);\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Could not read source directory. Remove links and shortcuts and try again.\", {\n      original: err,\n      exit: 1\n    });\n  }\n\n  utils.assertDefined(options.config.src.functions);\n  utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n  utils.logBullet(clc.cyan.bold(\"functions:\") + \" packaged \" + clc.bold(options.config.src.functions.source) + \" (\" + filesize(archive.pointer()) + \") for uploading\");\n  return tmpFile;\n}\n\nasync function prepareFunctionsUpload(runtimeConfig, options) {\n  utils.assertDefined(options.config.src.functions);\n  utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n  const sourceDir = options.config.path(options.config.src.functions.source);\n  return packageSource(options, sourceDir, runtimeConfig);\n}\n\nexports.prepareFunctionsUpload = prepareFunctionsUpload;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/deploy/functions/prepareFunctionsUpload.js"],"names":["Object","defineProperty","exports","value","prepareFunctionsUpload","getFunctionsConfig","_","require","archiver","clc","filesize","fs","path","tmp","error_1","logger_1","functionsConfig","utils","fsAsync","CONFIG_DEST_FILE","context","_a","_b","config","runtimeConfigEnabled","materializeAll","firebaseConfig","projectId","err","logger","debug","errorCode","response","statusCode","FirebaseError","firebase","pipeAsync","from","to","Promise","resolve","reject","on","pipe","packageSource","options","sourceDir","configValues","tmpFile","fileSync","prefix","postfix","name","fileStream","createWriteStream","flags","encoding","archive","ignore","src","functions","push","files","readdirRecursive","forEach","file","relative","mode","append","JSON","stringify","finalize","original","exit","assertDefined","source","logBullet","cyan","bold","pointer","runtimeConfig"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareFunctionsUpload = exports.getFunctionsConfig = void 0;\nconst _ = require(\"lodash\");\nconst archiver = require(\"archiver\");\nconst clc = require(\"cli-color\");\nconst filesize = require(\"filesize\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst tmp = require(\"tmp\");\nconst error_1 = require(\"../../error\");\nconst logger_1 = require(\"../../logger\");\nconst functionsConfig = require(\"../../functionsConfig\");\nconst utils = require(\"../../utils\");\nconst fsAsync = require(\"../../fsAsync\");\nconst CONFIG_DEST_FILE = \".runtimeconfig.json\";\nasync function getFunctionsConfig(context) {\n    var _a, _b;\n    let config = {};\n    if (context.runtimeConfigEnabled) {\n        try {\n            config = await functionsConfig.materializeAll(context.firebaseConfig.projectId);\n        }\n        catch (err) {\n            logger_1.logger.debug(err);\n            let errorCode = (_b = (_a = err === null || err === void 0 ? void 0 : err.context) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.statusCode;\n            if (!errorCode) {\n                logger_1.logger.debug(\"Got unexpected error from Runtime Config; it has no status code:\", err);\n                errorCode = 500;\n            }\n            if (errorCode === 500 || errorCode === 503) {\n                throw new error_1.FirebaseError(\"Cloud Runtime Config is currently experiencing issues, \" +\n                    \"which is preventing your functions from being deployed. \" +\n                    \"Please wait a few minutes and then try to deploy your functions again.\" +\n                    \"\\nRun `firebase deploy --except functions` if you want to continue deploying the rest of your project.\");\n            }\n            config = {};\n        }\n    }\n    config.firebase = context.firebaseConfig;\n    return config;\n}\nexports.getFunctionsConfig = getFunctionsConfig;\nasync function pipeAsync(from, to) {\n    return new Promise((resolve, reject) => {\n        to.on(\"finish\", resolve);\n        to.on(\"error\", reject);\n        from.pipe(to);\n    });\n}\nasync function packageSource(options, sourceDir, configValues) {\n    var _a;\n    const tmpFile = tmp.fileSync({ prefix: \"firebase-functions-\", postfix: \".zip\" }).name;\n    const fileStream = fs.createWriteStream(tmpFile, {\n        flags: \"w\",\n        encoding: \"binary\",\n    });\n    const archive = archiver(\"zip\");\n    const ignore = ((_a = options.config.src.functions) === null || _a === void 0 ? void 0 : _a.ignore) || [\"node_modules\", \".git\"];\n    ignore.push(\"firebase-debug.log\", \"firebase-debug.*.log\", CONFIG_DEST_FILE);\n    try {\n        const files = await fsAsync.readdirRecursive({ path: sourceDir, ignore: ignore });\n        _.forEach(files, (file) => {\n            archive.file(file.name, {\n                name: path.relative(sourceDir, file.name),\n                mode: file.mode,\n            });\n        });\n        if (typeof configValues !== \"undefined\") {\n            archive.append(JSON.stringify(configValues, null, 2), {\n                name: CONFIG_DEST_FILE,\n                mode: 420,\n            });\n        }\n        archive.finalize();\n        await pipeAsync(archive, fileStream);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Could not read source directory. Remove links and shortcuts and try again.\", {\n            original: err,\n            exit: 1,\n        });\n    }\n    utils.assertDefined(options.config.src.functions);\n    utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n    utils.logBullet(clc.cyan.bold(\"functions:\") +\n        \" packaged \" +\n        clc.bold(options.config.src.functions.source) +\n        \" (\" +\n        filesize(archive.pointer()) +\n        \") for uploading\");\n    return tmpFile;\n}\nasync function prepareFunctionsUpload(runtimeConfig, options) {\n    utils.assertDefined(options.config.src.functions);\n    utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n    const sourceDir = options.config.path(options.config.src.functions.source);\n    return packageSource(options, sourceDir, runtimeConfig);\n}\nexports.prepareFunctionsUpload = prepareFunctionsUpload;\n"]},"metadata":{},"sourceType":"script"}