{"ast":null,"code":"'use strict';\n/**\n * `rawlist` type prompt\n */\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n\nvar {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Base = require('./base');\n\nvar Separator = require('../objects/separator');\n\nvar observe = require('../utils/events');\n\nvar Paginator = require('../utils/paginator');\n\nclass RawListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);\n    this.selected = 0;\n    this.rawDefault = 0;\n\n    _.extend(this.opt, {\n      validate: function (val) {\n        return val != null;\n      }\n    });\n\n    var def = this.opt.default;\n\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n      this.rawDefault = def;\n    } else if (!_.isNumber(def) && def != null) {\n      let index = _.findIndex(this.opt.choices.realChoices, ({\n        value\n      }) => value === def);\n\n      let safeIndex = Math.max(index, 0);\n      this.selected = safeIndex;\n      this.rawDefault = safeIndex;\n    } // Make sure no default is set (so it won't be printed)\n\n\n    this.opt.default = null;\n    this.paginator = new Paginator();\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb; // Once user confirm (enter key)\n\n    var events = observe(this.rl);\n    var submit = events.line.pipe(map(this.getCurrentValue.bind(this)));\n    var validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this));\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey.pipe(takeUntil(events.line)).forEach(this.onDownKey.bind(this)); // Init the prompt\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {RawListPrompt} self\n   */\n\n\n  render(error) {\n    // Render question\n    var message = this.getQuestion();\n    var bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.answer);\n    } else {\n      var choicesStr = renderChoices(this.opt.choices, this.selected);\n      message += '\\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  getCurrentValue(index) {\n    if (index == null || index === '') {\n      index = this.rawDefault;\n    } else {\n      index -= 1;\n    }\n\n    var choice = this.opt.choices.getChoice(index);\n    return choice ? choice.value : null;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError() {\n    this.render('Please enter a valid index');\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onKeypress() {\n    var index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;\n\n    if (this.opt.choices.getChoice(index)) {\n      this.selected = index;\n    } else {\n      this.selected = undefined;\n    }\n\n    this.render();\n  }\n  /**\n   * When user press up key\n   */\n\n\n  onUpKey() {\n    this.onArrowKey('up');\n  }\n  /**\n   * When user press down key\n   */\n\n\n  onDownKey() {\n    this.onArrowKey('down');\n  }\n  /**\n   * When user press up or down key\n   * @param {String} type Arrow type: up or down\n   */\n\n\n  onArrowKey(type) {\n    var index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;\n    if (type === 'up') index = index === 0 ? this.opt.choices.length - 1 : index - 1;else index = index === this.opt.choices.length - 1 ? 0 : index + 1;\n    this.rl.line = String(index + 1);\n    this.onKeypress();\n  }\n\n}\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n  choices.forEach(function (choice, i) {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice;\n      return;\n    }\n\n    var index = i - separatorOffset;\n    var display = index + 1 + ') ' + choice.name;\n\n    if (index === pointer) {\n      display = chalk.cyan(display);\n    }\n\n    output += display;\n  });\n  return output;\n}\n\nmodule.exports = RawListPrompt;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/inquirer/lib/prompts/rawlist.js"],"names":["_","require","chalk","map","takeUntil","Base","Separator","observe","Paginator","RawListPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","validChoices","filter","exclude","selected","rawDefault","extend","validate","val","def","default","isNumber","realLength","index","findIndex","realChoices","value","safeIndex","Math","max","paginator","_run","cb","done","events","submit","line","pipe","getCurrentValue","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","keypress","onKeypress","normalizedUpKey","onUpKey","normalizedDownKey","onDownKey","render","message","getQuestion","bottomContent","status","cyan","answer","choicesStr","renderChoices","paginate","pageSize","red","screen","choice","getChoice","state","length","Number","undefined","onArrowKey","type","String","pointer","output","separatorOffset","i","display","name","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `rawlist` type prompt\n */\n\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar { map, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar Separator = require('../objects/separator');\nvar observe = require('../utils/events');\nvar Paginator = require('../utils/paginator');\n\nclass RawListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);\n\n    this.selected = 0;\n    this.rawDefault = 0;\n\n    _.extend(this.opt, {\n      validate: function(val) {\n        return val != null;\n      }\n    });\n\n    var def = this.opt.default;\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n      this.rawDefault = def;\n    } else if (!_.isNumber(def) && def != null) {\n      let index = _.findIndex(this.opt.choices.realChoices, ({ value }) => value === def);\n      let safeIndex = Math.max(index, 0);\n      this.selected = safeIndex;\n      this.rawDefault = safeIndex;\n    }\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    this.paginator = new Paginator();\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    var events = observe(this.rl);\n    var submit = events.line.pipe(map(this.getCurrentValue.bind(this)));\n\n    var validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(events.line))\n      .forEach(this.onDownKey.bind(this));\n\n    // Init the prompt\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {RawListPrompt} self\n   */\n\n  render(error) {\n    // Render question\n    var message = this.getQuestion();\n    var bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.answer);\n    } else {\n      var choicesStr = renderChoices(this.opt.choices, this.selected);\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  getCurrentValue(index) {\n    if (index == null || index === '') {\n      index = this.rawDefault;\n    } else {\n      index -= 1;\n    }\n\n    var choice = this.opt.choices.getChoice(index);\n    return choice ? choice.value : null;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value;\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError() {\n    this.render('Please enter a valid index');\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    var index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;\n\n    if (this.opt.choices.getChoice(index)) {\n      this.selected = index;\n    } else {\n      this.selected = undefined;\n    }\n\n    this.render();\n  }\n\n  /**\n   * When user press up key\n   */\n\n  onUpKey() {\n    this.onArrowKey('up');\n  }\n\n  /**\n   * When user press down key\n   */\n\n  onDownKey() {\n    this.onArrowKey('down');\n  }\n\n  /**\n   * When user press up or down key\n   * @param {String} type Arrow type: up or down\n   */\n\n  onArrowKey(type) {\n    var index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;\n    if (type === 'up') index = index === 0 ? this.opt.choices.length - 1 : index - 1;\n    else index = index === this.opt.choices.length - 1 ? 0 : index + 1;\n    this.rl.line = String(index + 1);\n    this.onKeypress();\n  }\n}\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n\n  choices.forEach(function(choice, i) {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice;\n      return;\n    }\n\n    var index = i - separatorOffset;\n    var display = index + 1 + ') ' + choice.name;\n    if (index === pointer) {\n      display = chalk.cyan(display);\n    }\n\n    output += display;\n  });\n\n  return output;\n}\n\nmodule.exports = RawListPrompt;\n"]},"metadata":{},"sourceType":"script"}