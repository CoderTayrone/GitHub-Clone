{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doSetup = void 0;\n\nconst logger_1 = require(\"../../logger\");\n\nconst utils = require(\"../../utils\");\n\nconst auth_1 = require(\"../../auth\");\n\nconst prompt_1 = require(\"../../prompt\");\n\nconst error_1 = require(\"../../error\");\n\nasync function promptForAccount() {\n  logger_1.logger.info();\n  logger_1.logger.info(`Which account do you want to use for this project? Choose an account or add a new one now`);\n  logger_1.logger.info();\n  const allAccounts = auth_1.getAllAccounts();\n  const choices = allAccounts.map(a => {\n    return {\n      name: a.user.email,\n      value: a.user.email\n    };\n  });\n  choices.push({\n    name: \"(add a new account)\",\n    value: \"__add__\"\n  });\n  const emailChoice = await prompt_1.promptOnce({\n    type: \"list\",\n    name: \"email\",\n    message: \"Please select an option:\",\n    choices\n  });\n\n  if (emailChoice == \"__add__\") {\n    const newAccount = await auth_1.loginAdditionalAccount(true);\n\n    if (!newAccount) {\n      throw new error_1.FirebaseError(\"Failed to add new account\", {\n        exit: 1\n      });\n    }\n\n    return newAccount;\n  } else {\n    return auth_1.findAccountByEmail(emailChoice);\n  }\n}\n\nasync function doSetup(setup, config, options) {\n  let account;\n\n  if (options.account) {\n    account = auth_1.findAccountByEmail(options.account);\n\n    if (!account) {\n      throw new error_1.FirebaseError(`Invalid account ${options.account}`, {\n        exit: 1\n      });\n    }\n  } else {\n    account = await promptForAccount();\n  }\n\n  if (!account) {\n    throw new error_1.FirebaseError(`No account selected, have you run \"firebase login\"?`, {\n      exit: 1\n    });\n  }\n\n  auth_1.setActiveAccount(options, account);\n\n  if (config.projectDir) {\n    auth_1.setProjectAccount(config.projectDir, account.user.email);\n  }\n\n  logger_1.logger.info();\n  utils.logSuccess(`Using account: ${account.user.email}`);\n}\n\nexports.doSetup = doSetup;","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/init/features/account.js"],"names":["Object","defineProperty","exports","value","doSetup","logger_1","require","utils","auth_1","prompt_1","error_1","promptForAccount","logger","info","allAccounts","getAllAccounts","choices","map","a","name","user","email","push","emailChoice","promptOnce","type","message","newAccount","loginAdditionalAccount","FirebaseError","exit","findAccountByEmail","setup","config","options","account","setActiveAccount","projectDir","setProjectAccount","logSuccess"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doSetup = void 0;\nconst logger_1 = require(\"../../logger\");\nconst utils = require(\"../../utils\");\nconst auth_1 = require(\"../../auth\");\nconst prompt_1 = require(\"../../prompt\");\nconst error_1 = require(\"../../error\");\nasync function promptForAccount() {\n    logger_1.logger.info();\n    logger_1.logger.info(`Which account do you want to use for this project? Choose an account or add a new one now`);\n    logger_1.logger.info();\n    const allAccounts = auth_1.getAllAccounts();\n    const choices = allAccounts.map((a) => {\n        return {\n            name: a.user.email,\n            value: a.user.email,\n        };\n    });\n    choices.push({\n        name: \"(add a new account)\",\n        value: \"__add__\",\n    });\n    const emailChoice = await prompt_1.promptOnce({\n        type: \"list\",\n        name: \"email\",\n        message: \"Please select an option:\",\n        choices,\n    });\n    if (emailChoice == \"__add__\") {\n        const newAccount = await auth_1.loginAdditionalAccount(true);\n        if (!newAccount) {\n            throw new error_1.FirebaseError(\"Failed to add new account\", { exit: 1 });\n        }\n        return newAccount;\n    }\n    else {\n        return auth_1.findAccountByEmail(emailChoice);\n    }\n}\nasync function doSetup(setup, config, options) {\n    let account;\n    if (options.account) {\n        account = auth_1.findAccountByEmail(options.account);\n        if (!account) {\n            throw new error_1.FirebaseError(`Invalid account ${options.account}`, { exit: 1 });\n        }\n    }\n    else {\n        account = await promptForAccount();\n    }\n    if (!account) {\n        throw new error_1.FirebaseError(`No account selected, have you run \"firebase login\"?`, { exit: 1 });\n    }\n    auth_1.setActiveAccount(options, account);\n    if (config.projectDir) {\n        auth_1.setProjectAccount(config.projectDir, account.user.email);\n    }\n    logger_1.logger.info();\n    utils.logSuccess(`Using account: ${account.user.email}`);\n}\nexports.doSetup = doSetup;\n"]},"metadata":{},"sourceType":"script"}