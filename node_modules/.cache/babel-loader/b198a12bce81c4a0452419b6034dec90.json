{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst marked = require(\"marked\");\n\nconst ora = require(\"ora\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\n\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\n\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst paramHelper = require(\"../extensions/paramHelper\");\n\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst previews_1 = require(\"../previews\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\n\nfunction isValidUpdate(existingSourceOrigin, newSourceOrigin) {\n  if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION) {\n    return [extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION, extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION].includes(newSourceOrigin);\n  } else if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.LOCAL) {\n    return [extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin);\n  }\n\n  return false;\n}\n\nexports.default = new command_1.Command(\"ext:update <extensionInstanceId> [updateSource]\").description(previews_1.previews.extdev ? \"update an existing extension instance to the latest version or from a local or URL source\" : \"update an existing extension instance to the latest version\").before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.update\", \"firebaseextensions.instances.get\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").action(async (instanceId, updateSource, options) => {\n  const spinner = ora.default(`Updating ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n\n  try {\n    const projectId = projectUtils_1.needProjectId(options);\n    let existingInstance;\n\n    try {\n      existingInstance = await extensionsApi.getInstance(projectId, instanceId);\n    } catch (err) {\n      if (err.status === 404) {\n        throw new error_1.FirebaseError(`Extension instance '${clc.bold(instanceId)}' not found in project '${clc.bold(projectId)}'.`);\n      }\n\n      throw err;\n    }\n\n    const existingSpec = _.get(existingInstance, \"config.source.spec\");\n\n    if (existingInstance.config.source.state === \"DELETED\") {\n      throw new error_1.FirebaseError(`Instance '${clc.bold(instanceId)}' cannot be updated anymore because the underlying extension was unpublished from Firebase's registry of extensions. Going forward, you will only be able to re-configure or uninstall this instance.`);\n    }\n\n    const existingParams = _.get(existingInstance, \"config.params\");\n\n    const existingSource = _.get(existingInstance, \"config.source.name\");\n\n    if (existingInstance.config.extensionRef) {\n      updateSource = updateHelper_1.inferUpdateSource(updateSource, existingInstance.config.extensionRef);\n    }\n\n    let newSourceName;\n    const existingSourceOrigin = await updateHelper_1.getExistingSourceOrigin(projectId, instanceId, existingSpec.name, existingSource);\n    const newSourceOrigin = extensionsHelper_1.getSourceOrigin(updateSource);\n    const validUpdate = isValidUpdate(existingSourceOrigin, newSourceOrigin);\n\n    if (!validUpdate) {\n      throw new error_1.FirebaseError(`Cannot update from a(n) ${existingSourceOrigin} to a(n) ${newSourceOrigin}. Please provide a new source that is a(n) ${existingSourceOrigin} and try again.`);\n    }\n\n    switch (newSourceOrigin) {\n      case extensionsHelper_1.SourceOrigin.LOCAL:\n        if (previews_1.previews.extdev) {\n          newSourceName = await updateHelper_1.updateFromLocalSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n          break;\n        }\n\n      case extensionsHelper_1.SourceOrigin.URL:\n        if (previews_1.previews.extdev) {\n          newSourceName = await updateHelper_1.updateFromUrlSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n          break;\n        }\n\n      case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION:\n        newSourceName = await updateHelper_1.updateToVersionFromPublisherSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n        break;\n\n      case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION:\n        newSourceName = await updateHelper_1.updateFromPublisherSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n        break;\n\n      default:\n        throw new error_1.FirebaseError(`Unknown source '${clc.bold(updateSource)}.'`);\n    }\n\n    const newSource = await extensionsApi.getSource(newSourceName);\n    const newSpec = newSource.spec;\n\n    if (![extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin) && existingSpec.version === newSpec.version) {\n      utils.logLabeledBullet(extensionsHelper_1.logPrefix, `${clc.bold(instanceId)} is already up to date. Its version is ${clc.bold(existingSpec.version)}.`);\n      const retry = await updateHelper_1.retryUpdate();\n\n      if (!retry) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"Update aborted.\");\n        return;\n      }\n    }\n\n    await updateHelper_1.displayChanges(existingSpec, newSpec);\n    await provisioningHelper.checkProductsProvisioned(projectId, newSpec);\n\n    if (newSpec.billingRequired) {\n      const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n\n      if (!enabled) {\n        await billingMigrationHelper_1.displayNode10UpdateBillingNotice(existingSpec, newSpec, false);\n        await checkProjectBilling_1.enableBilling(projectId, instanceId);\n      } else {\n        await billingMigrationHelper_1.displayNode10UpdateBillingNotice(existingSpec, newSpec, true);\n      }\n    }\n\n    const newParams = await paramHelper.promptForNewParams(existingSpec, newSpec, existingParams, projectId);\n    spinner.start();\n    const updateOptions = {\n      projectId,\n      instanceId\n    };\n\n    if (newSourceName.includes(\"publisher\")) {\n      const {\n        publisherId,\n        extensionId,\n        version\n      } = extensionsApi.parseExtensionVersionName(newSourceName);\n      updateOptions.extRef = `${publisherId}/${extensionId}@${version}`;\n    } else {\n      updateOptions.source = newSource;\n    }\n\n    if (!_.isEqual(newParams, existingParams)) {\n      updateOptions.params = newParams;\n    }\n\n    await updateHelper_1.update(updateOptions);\n    spinner.stop();\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully updated ${clc.bold(instanceId)}.`);\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your updated instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred while updating the instance: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n});","map":{"version":3,"sources":["/home/dev/Documentos/Projects/github-clone/node_modules/firebase-tools/lib/commands/ext-update.js"],"names":["Object","defineProperty","exports","value","clc","require","_","marked","ora","TerminalRenderer","checkMinRequiredVersion_1","command_1","error_1","billingMigrationHelper_1","checkProjectBilling_1","cloudbilling_1","extensionsApi","provisioningHelper","extensionsHelper_1","paramHelper","updateHelper_1","projectUtils_1","requirePermissions_1","utils","previews_1","setOptions","renderer","isValidUpdate","existingSourceOrigin","newSourceOrigin","SourceOrigin","PUBLISHED_EXTENSION","PUBLISHED_EXTENSION_VERSION","includes","LOCAL","URL","default","Command","description","previews","extdev","before","requirePermissions","ensureExtensionsApiEnabled","checkMinRequiredVersion","action","instanceId","updateSource","options","spinner","bold","projectId","needProjectId","existingInstance","getInstance","err","status","FirebaseError","existingSpec","get","config","source","state","existingParams","existingSource","extensionRef","inferUpdateSource","newSourceName","getExistingSourceOrigin","name","getSourceOrigin","validUpdate","updateFromLocalSource","updateFromUrlSource","updateToVersionFromPublisherSource","updateFromPublisherSource","newSource","getSource","newSpec","spec","version","logLabeledBullet","logPrefix","retry","retryUpdate","displayChanges","checkProductsProvisioned","billingRequired","enabled","checkBillingEnabled","displayNode10UpdateBillingNotice","enableBilling","newParams","promptForNewParams","start","updateOptions","publisherId","extensionId","parseExtensionVersionName","extRef","isEqual","params","update","stop","logLabeledSuccess","consoleUrl","isSpinning","fail","message","original"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,iBAAD,CAAhC;;AACA,MAAMK,yBAAyB,GAAGL,OAAO,CAAC,4BAAD,CAAzC;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMQ,wBAAwB,GAAGR,OAAO,CAAC,sCAAD,CAAxC;;AACA,MAAMS,qBAAqB,GAAGT,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMU,cAAc,GAAGV,OAAO,CAAC,qBAAD,CAA9B;;AACA,MAAMW,aAAa,GAAGX,OAAO,CAAC,6BAAD,CAA7B;;AACA,MAAMY,kBAAkB,GAAGZ,OAAO,CAAC,kCAAD,CAAlC;;AACA,MAAMa,kBAAkB,GAAGb,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMc,WAAW,GAAGd,OAAO,CAAC,2BAAD,CAA3B;;AACA,MAAMe,cAAc,GAAGf,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAMgB,cAAc,GAAGhB,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMiB,oBAAoB,GAAGjB,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMkB,KAAK,GAAGlB,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMmB,UAAU,GAAGnB,OAAO,CAAC,aAAD,CAA1B;;AACAE,MAAM,CAACkB,UAAP,CAAkB;AACdC,EAAAA,QAAQ,EAAE,IAAIjB,gBAAJ;AADI,CAAlB;;AAGA,SAASkB,aAAT,CAAuBC,oBAAvB,EAA6CC,eAA7C,EAA8D;AAC1D,MAAID,oBAAoB,KAAKV,kBAAkB,CAACY,YAAnB,CAAgCC,mBAA7D,EAAkF;AAC9E,WAAO,CAACb,kBAAkB,CAACY,YAAnB,CAAgCC,mBAAjC,EAAsDb,kBAAkB,CAACY,YAAnB,CAAgCE,2BAAtF,EAAmHC,QAAnH,CAA4HJ,eAA5H,CAAP;AACH,GAFD,MAGK,IAAID,oBAAoB,KAAKV,kBAAkB,CAACY,YAAnB,CAAgCI,KAA7D,EAAoE;AACrE,WAAO,CAAChB,kBAAkB,CAACY,YAAnB,CAAgCI,KAAjC,EAAwChB,kBAAkB,CAACY,YAAnB,CAAgCK,GAAxE,EAA6EF,QAA7E,CAAsFJ,eAAtF,CAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACD3B,OAAO,CAACkC,OAAR,GAAkB,IAAIzB,SAAS,CAAC0B,OAAd,CAAsB,iDAAtB,EACbC,WADa,CACDd,UAAU,CAACe,QAAX,CAAoBC,MAApB,GACX,2FADW,GAEX,6DAHY,EAIbC,MAJa,CAINnB,oBAAoB,CAACoB,kBAJf,EAImC,CACjD,qCADiD,EAEjD,kCAFiD,CAJnC,EAQbD,MARa,CAQNvB,kBAAkB,CAACyB,0BARb,EASbF,MATa,CASN/B,yBAAyB,CAACkC,uBATpB,EAS6C,eAT7C,EAUbC,MAVa,CAUN,OAAOC,UAAP,EAAmBC,YAAnB,EAAiCC,OAAjC,KAA6C;AACrD,QAAMC,OAAO,GAAGzC,GAAG,CAAC4B,OAAJ,CAAa,YAAWhC,GAAG,CAAC8C,IAAJ,CAASJ,UAAT,CAAqB,wCAA7C,CAAhB;;AACA,MAAI;AACA,UAAMK,SAAS,GAAG9B,cAAc,CAAC+B,aAAf,CAA6BJ,OAA7B,CAAlB;AACA,QAAIK,gBAAJ;;AACA,QAAI;AACAA,MAAAA,gBAAgB,GAAG,MAAMrC,aAAa,CAACsC,WAAd,CAA0BH,SAA1B,EAAqCL,UAArC,CAAzB;AACH,KAFD,CAGA,OAAOS,GAAP,EAAY;AACR,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,cAAM,IAAI5C,OAAO,CAAC6C,aAAZ,CAA2B,uBAAsBrD,GAAG,CAAC8C,IAAJ,CAASJ,UAAT,CAAqB,2BAA0B1C,GAAG,CAAC8C,IAAJ,CAASC,SAAT,CAAoB,IAApH,CAAN;AACH;;AACD,YAAMI,GAAN;AACH;;AACD,UAAMG,YAAY,GAAGpD,CAAC,CAACqD,GAAF,CAAMN,gBAAN,EAAwB,oBAAxB,CAArB;;AACA,QAAIA,gBAAgB,CAACO,MAAjB,CAAwBC,MAAxB,CAA+BC,KAA/B,KAAyC,SAA7C,EAAwD;AACpD,YAAM,IAAIlD,OAAO,CAAC6C,aAAZ,CAA2B,aAAYrD,GAAG,CAAC8C,IAAJ,CAASJ,UAAT,CAAqB,uMAA5D,CAAN;AACH;;AACD,UAAMiB,cAAc,GAAGzD,CAAC,CAACqD,GAAF,CAAMN,gBAAN,EAAwB,eAAxB,CAAvB;;AACA,UAAMW,cAAc,GAAG1D,CAAC,CAACqD,GAAF,CAAMN,gBAAN,EAAwB,oBAAxB,CAAvB;;AACA,QAAIA,gBAAgB,CAACO,MAAjB,CAAwBK,YAA5B,EAA0C;AACtClB,MAAAA,YAAY,GAAG3B,cAAc,CAAC8C,iBAAf,CAAiCnB,YAAjC,EAA+CM,gBAAgB,CAACO,MAAjB,CAAwBK,YAAvE,CAAf;AACH;;AACD,QAAIE,aAAJ;AACA,UAAMvC,oBAAoB,GAAG,MAAMR,cAAc,CAACgD,uBAAf,CAAuCjB,SAAvC,EAAkDL,UAAlD,EAA8DY,YAAY,CAACW,IAA3E,EAAiFL,cAAjF,CAAnC;AACA,UAAMnC,eAAe,GAAGX,kBAAkB,CAACoD,eAAnB,CAAmCvB,YAAnC,CAAxB;AACA,UAAMwB,WAAW,GAAG5C,aAAa,CAACC,oBAAD,EAAuBC,eAAvB,CAAjC;;AACA,QAAI,CAAC0C,WAAL,EAAkB;AACd,YAAM,IAAI3D,OAAO,CAAC6C,aAAZ,CAA2B,2BAA0B7B,oBAAqB,YAAWC,eAAgB,8CAA6CD,oBAAqB,iBAAvK,CAAN;AACH;;AACD,YAAQC,eAAR;AACI,WAAKX,kBAAkB,CAACY,YAAnB,CAAgCI,KAArC;AACI,YAAIV,UAAU,CAACe,QAAX,CAAoBC,MAAxB,EAAgC;AAC5B2B,UAAAA,aAAa,GAAG,MAAM/C,cAAc,CAACoD,qBAAf,CAAqCrB,SAArC,EAAgDL,UAAhD,EAA4DC,YAA5D,EAA0EW,YAA1E,EAAwFM,cAAxF,CAAtB;AACA;AACH;;AACL,WAAK9C,kBAAkB,CAACY,YAAnB,CAAgCK,GAArC;AACI,YAAIX,UAAU,CAACe,QAAX,CAAoBC,MAAxB,EAAgC;AAC5B2B,UAAAA,aAAa,GAAG,MAAM/C,cAAc,CAACqD,mBAAf,CAAmCtB,SAAnC,EAA8CL,UAA9C,EAA0DC,YAA1D,EAAwEW,YAAxE,EAAsFM,cAAtF,CAAtB;AACA;AACH;;AACL,WAAK9C,kBAAkB,CAACY,YAAnB,CAAgCE,2BAArC;AACImC,QAAAA,aAAa,GAAG,MAAM/C,cAAc,CAACsD,kCAAf,CAAkDvB,SAAlD,EAA6DL,UAA7D,EAAyEC,YAAzE,EAAuFW,YAAvF,EAAqGM,cAArG,CAAtB;AACA;;AACJ,WAAK9C,kBAAkB,CAACY,YAAnB,CAAgCC,mBAArC;AACIoC,QAAAA,aAAa,GAAG,MAAM/C,cAAc,CAACuD,yBAAf,CAAyCxB,SAAzC,EAAoDL,UAApD,EAAgEC,YAAhE,EAA8EW,YAA9E,EAA4FM,cAA5F,CAAtB;AACA;;AACJ;AACI,cAAM,IAAIpD,OAAO,CAAC6C,aAAZ,CAA2B,mBAAkBrD,GAAG,CAAC8C,IAAJ,CAASH,YAAT,CAAuB,IAApE,CAAN;AAlBR;;AAoBA,UAAM6B,SAAS,GAAG,MAAM5D,aAAa,CAAC6D,SAAd,CAAwBV,aAAxB,CAAxB;AACA,UAAMW,OAAO,GAAGF,SAAS,CAACG,IAA1B;;AACA,QAAI,CAAC,CAAC7D,kBAAkB,CAACY,YAAnB,CAAgCI,KAAjC,EAAwChB,kBAAkB,CAACY,YAAnB,CAAgCK,GAAxE,EAA6EF,QAA7E,CAAsFJ,eAAtF,CAAD,IACA6B,YAAY,CAACsB,OAAb,KAAyBF,OAAO,CAACE,OADrC,EAC8C;AAC1CzD,MAAAA,KAAK,CAAC0D,gBAAN,CAAuB/D,kBAAkB,CAACgE,SAA1C,EAAsD,GAAE9E,GAAG,CAAC8C,IAAJ,CAASJ,UAAT,CAAqB,0CAAyC1C,GAAG,CAAC8C,IAAJ,CAASQ,YAAY,CAACsB,OAAtB,CAA+B,GAArJ;AACA,YAAMG,KAAK,GAAG,MAAM/D,cAAc,CAACgE,WAAf,EAApB;;AACA,UAAI,CAACD,KAAL,EAAY;AACR5D,QAAAA,KAAK,CAAC0D,gBAAN,CAAuB/D,kBAAkB,CAACgE,SAA1C,EAAqD,iBAArD;AACA;AACH;AACJ;;AACD,UAAM9D,cAAc,CAACiE,cAAf,CAA8B3B,YAA9B,EAA4CoB,OAA5C,CAAN;AACA,UAAM7D,kBAAkB,CAACqE,wBAAnB,CAA4CnC,SAA5C,EAAuD2B,OAAvD,CAAN;;AACA,QAAIA,OAAO,CAACS,eAAZ,EAA6B;AACzB,YAAMC,OAAO,GAAG,MAAMzE,cAAc,CAAC0E,mBAAf,CAAmCtC,SAAnC,CAAtB;;AACA,UAAI,CAACqC,OAAL,EAAc;AACV,cAAM3E,wBAAwB,CAAC6E,gCAAzB,CAA0DhC,YAA1D,EAAwEoB,OAAxE,EAAiF,KAAjF,CAAN;AACA,cAAMhE,qBAAqB,CAAC6E,aAAtB,CAAoCxC,SAApC,EAA+CL,UAA/C,CAAN;AACH,OAHD,MAIK;AACD,cAAMjC,wBAAwB,CAAC6E,gCAAzB,CAA0DhC,YAA1D,EAAwEoB,OAAxE,EAAiF,IAAjF,CAAN;AACH;AACJ;;AACD,UAAMc,SAAS,GAAG,MAAMzE,WAAW,CAAC0E,kBAAZ,CAA+BnC,YAA/B,EAA6CoB,OAA7C,EAAsDf,cAAtD,EAAsEZ,SAAtE,CAAxB;AACAF,IAAAA,OAAO,CAAC6C,KAAR;AACA,UAAMC,aAAa,GAAG;AAClB5C,MAAAA,SADkB;AAElBL,MAAAA;AAFkB,KAAtB;;AAIA,QAAIqB,aAAa,CAAClC,QAAd,CAAuB,WAAvB,CAAJ,EAAyC;AACrC,YAAM;AAAE+D,QAAAA,WAAF;AAAeC,QAAAA,WAAf;AAA4BjB,QAAAA;AAA5B,UAAwChE,aAAa,CAACkF,yBAAd,CAAwC/B,aAAxC,CAA9C;AACA4B,MAAAA,aAAa,CAACI,MAAd,GAAwB,GAAEH,WAAY,IAAGC,WAAY,IAAGjB,OAAQ,EAAhE;AACH,KAHD,MAIK;AACDe,MAAAA,aAAa,CAAClC,MAAd,GAAuBe,SAAvB;AACH;;AACD,QAAI,CAACtE,CAAC,CAAC8F,OAAF,CAAUR,SAAV,EAAqB7B,cAArB,CAAL,EAA2C;AACvCgC,MAAAA,aAAa,CAACM,MAAd,GAAuBT,SAAvB;AACH;;AACD,UAAMxE,cAAc,CAACkF,MAAf,CAAsBP,aAAtB,CAAN;AACA9C,IAAAA,OAAO,CAACsD,IAAR;AACAhF,IAAAA,KAAK,CAACiF,iBAAN,CAAwBtF,kBAAkB,CAACgE,SAA3C,EAAuD,wBAAuB9E,GAAG,CAAC8C,IAAJ,CAASJ,UAAT,CAAqB,GAAnG;AACAvB,IAAAA,KAAK,CAAC0D,gBAAN,CAAuB/D,kBAAkB,CAACgE,SAA1C,EAAqD3E,MAAM,CAAE,+DAA8DgB,KAAK,CAACkF,UAAN,CAAiBtD,SAAjB,EAA6B,yBAAwBL,UAAW,YAAhE,CAA6E,EAA7I,CAA3D;AACH,GA3FD,CA4FA,OAAOS,GAAP,EAAY;AACR,QAAIN,OAAO,CAACyD,UAAZ,EAAwB;AACpBzD,MAAAA,OAAO,CAAC0D,IAAR;AACH;;AACD,QAAI,EAAEpD,GAAG,YAAY3C,OAAO,CAAC6C,aAAzB,CAAJ,EAA6C;AACzC,YAAM,IAAI7C,OAAO,CAAC6C,aAAZ,CAA2B,+CAA8CF,GAAG,CAACqD,OAAQ,EAArF,EAAwF;AAC1FC,QAAAA,QAAQ,EAAEtD;AADgF,OAAxF,CAAN;AAGH;;AACD,UAAMA,GAAN;AACH;AACJ,CAnHiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst marked = require(\"marked\");\nconst ora = require(\"ora\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst paramHelper = require(\"../extensions/paramHelper\");\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst previews_1 = require(\"../previews\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nfunction isValidUpdate(existingSourceOrigin, newSourceOrigin) {\n    if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION) {\n        return [extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION, extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION].includes(newSourceOrigin);\n    }\n    else if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.LOCAL) {\n        return [extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin);\n    }\n    return false;\n}\nexports.default = new command_1.Command(\"ext:update <extensionInstanceId> [updateSource]\")\n    .description(previews_1.previews.extdev\n    ? \"update an existing extension instance to the latest version or from a local or URL source\"\n    : \"update an existing extension instance to the latest version\")\n    .before(requirePermissions_1.requirePermissions, [\n    \"firebaseextensions.instances.update\",\n    \"firebaseextensions.instances.get\",\n])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .action(async (instanceId, updateSource, options) => {\n    const spinner = ora.default(`Updating ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n    try {\n        const projectId = projectUtils_1.needProjectId(options);\n        let existingInstance;\n        try {\n            existingInstance = await extensionsApi.getInstance(projectId, instanceId);\n        }\n        catch (err) {\n            if (err.status === 404) {\n                throw new error_1.FirebaseError(`Extension instance '${clc.bold(instanceId)}' not found in project '${clc.bold(projectId)}'.`);\n            }\n            throw err;\n        }\n        const existingSpec = _.get(existingInstance, \"config.source.spec\");\n        if (existingInstance.config.source.state === \"DELETED\") {\n            throw new error_1.FirebaseError(`Instance '${clc.bold(instanceId)}' cannot be updated anymore because the underlying extension was unpublished from Firebase's registry of extensions. Going forward, you will only be able to re-configure or uninstall this instance.`);\n        }\n        const existingParams = _.get(existingInstance, \"config.params\");\n        const existingSource = _.get(existingInstance, \"config.source.name\");\n        if (existingInstance.config.extensionRef) {\n            updateSource = updateHelper_1.inferUpdateSource(updateSource, existingInstance.config.extensionRef);\n        }\n        let newSourceName;\n        const existingSourceOrigin = await updateHelper_1.getExistingSourceOrigin(projectId, instanceId, existingSpec.name, existingSource);\n        const newSourceOrigin = extensionsHelper_1.getSourceOrigin(updateSource);\n        const validUpdate = isValidUpdate(existingSourceOrigin, newSourceOrigin);\n        if (!validUpdate) {\n            throw new error_1.FirebaseError(`Cannot update from a(n) ${existingSourceOrigin} to a(n) ${newSourceOrigin}. Please provide a new source that is a(n) ${existingSourceOrigin} and try again.`);\n        }\n        switch (newSourceOrigin) {\n            case extensionsHelper_1.SourceOrigin.LOCAL:\n                if (previews_1.previews.extdev) {\n                    newSourceName = await updateHelper_1.updateFromLocalSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n                    break;\n                }\n            case extensionsHelper_1.SourceOrigin.URL:\n                if (previews_1.previews.extdev) {\n                    newSourceName = await updateHelper_1.updateFromUrlSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n                    break;\n                }\n            case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION:\n                newSourceName = await updateHelper_1.updateToVersionFromPublisherSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n                break;\n            case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION:\n                newSourceName = await updateHelper_1.updateFromPublisherSource(projectId, instanceId, updateSource, existingSpec, existingSource);\n                break;\n            default:\n                throw new error_1.FirebaseError(`Unknown source '${clc.bold(updateSource)}.'`);\n        }\n        const newSource = await extensionsApi.getSource(newSourceName);\n        const newSpec = newSource.spec;\n        if (![extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin) &&\n            existingSpec.version === newSpec.version) {\n            utils.logLabeledBullet(extensionsHelper_1.logPrefix, `${clc.bold(instanceId)} is already up to date. Its version is ${clc.bold(existingSpec.version)}.`);\n            const retry = await updateHelper_1.retryUpdate();\n            if (!retry) {\n                utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"Update aborted.\");\n                return;\n            }\n        }\n        await updateHelper_1.displayChanges(existingSpec, newSpec);\n        await provisioningHelper.checkProductsProvisioned(projectId, newSpec);\n        if (newSpec.billingRequired) {\n            const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n            if (!enabled) {\n                await billingMigrationHelper_1.displayNode10UpdateBillingNotice(existingSpec, newSpec, false);\n                await checkProjectBilling_1.enableBilling(projectId, instanceId);\n            }\n            else {\n                await billingMigrationHelper_1.displayNode10UpdateBillingNotice(existingSpec, newSpec, true);\n            }\n        }\n        const newParams = await paramHelper.promptForNewParams(existingSpec, newSpec, existingParams, projectId);\n        spinner.start();\n        const updateOptions = {\n            projectId,\n            instanceId,\n        };\n        if (newSourceName.includes(\"publisher\")) {\n            const { publisherId, extensionId, version } = extensionsApi.parseExtensionVersionName(newSourceName);\n            updateOptions.extRef = `${publisherId}/${extensionId}@${version}`;\n        }\n        else {\n            updateOptions.source = newSource;\n        }\n        if (!_.isEqual(newParams, existingParams)) {\n            updateOptions.params = newParams;\n        }\n        await updateHelper_1.update(updateOptions);\n        spinner.stop();\n        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully updated ${clc.bold(instanceId)}.`);\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your updated instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred while updating the instance: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}